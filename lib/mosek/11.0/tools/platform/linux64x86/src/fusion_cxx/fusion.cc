#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {}
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; }
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; }
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr;
  size_t sz0, sz1;
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {}
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T>
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow;
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline int      safe_add(int32_t a, int32_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int64_t a, int64_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int32_t a, int64_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int64_t a, int32_t b) { return safe_add_<int64_t>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow;
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int64_t a, int64_t b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int a, int64_t b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int64_t a, int b) { return safe_mul_<int64_t>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::DJCDomainType val)
{
  switch (val)
  {
    case DJCDomainType::EqualTo: os << "DJCDomainType::EqualTo"; break;
    case DJCDomainType::LessThan: os << "DJCDomainType::LessThan"; break;
    case DJCDomainType::GreaterThan: os << "DJCDomainType::GreaterThan"; break;
    case DJCDomainType::IsFree: os << "DJCDomainType::IsFree"; break;
    case DJCDomainType::InRange: os << "DJCDomainType::InRange"; break;
    case DJCDomainType::InQCone: os << "DJCDomainType::InQCone"; break;
    case DJCDomainType::InRotatedQCone: os << "DJCDomainType::InRotatedQCone"; break;
    case DJCDomainType::InPExpCone: os << "DJCDomainType::InPExpCone"; break;
    case DJCDomainType::InPPowCone: os << "DJCDomainType::InPPowCone"; break;
    case DJCDomainType::InDExpCone: os << "DJCDomainType::InDExpCone"; break;
    case DJCDomainType::InDPowCone: os << "DJCDomainType::InDPowCone"; break;
    case DJCDomainType::InOneNormCone: os << "DJCDomainType::InOneNormCone"; break;
    case DJCDomainType::InInfNormCone: os << "DJCDomainType::InInfNormCone"; break;
    case DJCDomainType::InPGeoMeanCone: os << "DJCDomainType::InPGeoMeanCone"; break;
    case DJCDomainType::InDGeoMeanCone: os << "DJCDomainType::InDGeoMeanCone"; break;
    case DJCDomainType::InPSDCone: os << "DJCDomainType::InPSDCone"; break;
    default: os << "DJCDomainType.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val)
{
  switch (val)
  {
    case StatusKey::Unknown: os << "StatusKey::Unknown"; break;
    case StatusKey::Basic: os << "StatusKey::Basic"; break;
    case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;
    case StatusKey::OnBound: os << "StatusKey::OnBound"; break;
    case StatusKey::Infinity: os << "StatusKey::Infinity"; break;
    default: os << "StatusKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val)
{
  switch (val)
  {
    case SolutionType::Default: os << "SolutionType::Default"; break;
    case SolutionType::Basic: os << "SolutionType::Basic"; break;
    case SolutionType::Interior: os << "SolutionType::Interior"; break;
    case SolutionType::Integer: os << "SolutionType::Integer"; break;
    default: os << "SolutionType.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolverStatus val)
{
  switch (val)
  {
    case SolverStatus::OK: os << "SolverStatus::OK"; break;
    case SolverStatus::Error: os << "SolverStatus::Error"; break;
    case SolverStatus::LostRace: os << "SolverStatus::LostRace"; break;
    default: os << "SolverStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val)
{
  switch (val)
  {
    case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;
    case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;
    case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;
    case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;
    case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;
    case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;
    case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;
    case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;
    case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;
    default: os << "ProblemStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val)
{
  switch (val)
  {
    case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;
    case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;
    case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;
    case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;
    default: os << "AccSolutionStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val)
{
  switch (val)
  {
    case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;
    case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;
    case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;
    case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;
    case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;
    case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;
    default: os << "SolutionStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val)
{
  switch (val)
  {
    case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;
    case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;
    case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;
    default: os << "ObjectiveSense.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val)
{
  switch (val)
  {
    case QConeKey::InQCone: os << "QConeKey::InQCone"; break;
    case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;
    case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;
    case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;
    case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;
    case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;
    case QConeKey::InPGeoMeanCone: os << "QConeKey::InPGeoMeanCone"; break;
    case QConeKey::InDGeoMeanCone: os << "QConeKey::InDGeoMeanCone"; break;
    case QConeKey::Positive: os << "QConeKey::Positive"; break;
    case QConeKey::Negative: os << "QConeKey::Negative"; break;
    case QConeKey::Unbounded: os << "QConeKey::Unbounded"; break;
    case QConeKey::Zero: os << "QConeKey::Zero"; break;
    case QConeKey::InPSDCone: os << "QConeKey::InPSDCone"; break;
    case QConeKey::InSVecPSDCone: os << "QConeKey::InSVecPSDCone"; break;
    default: os << "QConeKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val)
{
  switch (val)
  {
    case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;
    case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;
    default: os << "PSDKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val)
{
  switch (val)
  {
    case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;
    case RelationKey::LessThan: os << "RelationKey::LessThan"; break;
    case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;
    case RelationKey::IsFree: os << "RelationKey::IsFree"; break;
    case RelationKey::InRange: os << "RelationKey::InRange"; break;
    default: os << "RelationKey.<invalid>"; break;
  }
  return os;
}
// class Disjunction { // @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:350:4-355:5
mosek::fusion::Disjunction::Disjunction(mosek::fusion::p_Disjunction *_impl) : _impl(_impl) { /*std::cout << "Disjunction() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Disjunction::~Disjunction() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Disjunction::p_Disjunction
  (::mosek::fusion::Disjunction * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Disjunction.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:352:6-354:7
mosek::fusion::Disjunction::t mosek::fusion::p_Disjunction::_new_Disjunction
  (int64_t _7_id)
{ return new mosek::fusion::Disjunction(_7_id); }
mosek::fusion::Disjunction::Disjunction
  (int64_t _7_id) : 
   Disjunction(new mosek::fusion::p_Disjunction(this))
{ mosek::fusion::p_Disjunction::_get_impl(this)->_initialize(_7_id); }
void mosek::fusion::p_Disjunction::_initialize  (int64_t _7_id)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Disjunction::_get_impl(::mosek::fusion::Disjunction::t(_pubthis))->id = _7_id;
  }
}
// mosek.fusion.Disjunction.ctor

void mosek::fusion::p_Disjunction::destroy()
{
}
void mosek::fusion::Disjunction::destroy() { mosek::fusion::p_Disjunction::_get_impl(this)->destroy(); }
// } class Disjunction
// class DisjunctionTerms { // @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:321:4-345:5
mosek::fusion::DisjunctionTerms::DisjunctionTerms(mosek::fusion::p_DisjunctionTerms *_impl) : _impl(_impl) { /*std::cout << "DisjunctionTerms() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::DisjunctionTerms::~DisjunctionTerms() { delete _impl; _impl = nullptr; }
mosek::fusion::p_DisjunctionTerms::p_DisjunctionTerms
  (::mosek::fusion::DisjunctionTerms * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.DisjunctionTerms.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:344:6-97
mosek::fusion::DisjunctionTerms::t mosek::fusion::p_DisjunctionTerms::_new_DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _8_terms1,
    monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _9_term)
{ return new mosek::fusion::DisjunctionTerms(_8_terms1,_9_term); }
mosek::fusion::DisjunctionTerms::DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _8_terms1,
    monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _9_term) : 
   DisjunctionTerms(new mosek::fusion::p_DisjunctionTerms(this))
{ mosek::fusion::p_DisjunctionTerms::_get_impl(this)->_initialize(_8_terms1,_9_term); }
void mosek::fusion::p_DisjunctionTerms::_initialize  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _8_terms1,
    monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _9_term)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_DisjunctionTerms::_initialize(_8_terms1,::mosek::fusion::p_DJC::term(_9_term));
  }
}
// mosek.fusion.DisjunctionTerms.ctor

// mosek.fusion.DisjunctionTerms.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:343:6-98
mosek::fusion::DisjunctionTerms::t mosek::fusion::p_DisjunctionTerms::_new_DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _10_terms1,
    monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _11_term)
{ return new mosek::fusion::DisjunctionTerms(_10_terms1,_11_term); }
mosek::fusion::DisjunctionTerms::DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _10_terms1,
    monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _11_term) : 
   DisjunctionTerms(new mosek::fusion::p_DisjunctionTerms(this))
{ mosek::fusion::p_DisjunctionTerms::_get_impl(this)->_initialize(_10_terms1,_11_term); }
void mosek::fusion::p_DisjunctionTerms::_initialize  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _10_terms1,
    monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _11_term)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_DisjunctionTerms::_initialize(_10_terms1,::mosek::fusion::p_DJC::term(_11_term));
  }
}
// mosek.fusion.DisjunctionTerms.ctor

// mosek.fusion.DisjunctionTerms.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:340:6-342:7
mosek::fusion::DisjunctionTerms::t mosek::fusion::p_DisjunctionTerms::_new_DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _12_terms1,
    monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _13_term2)
{ return new mosek::fusion::DisjunctionTerms(_12_terms1,_13_term2); }
mosek::fusion::DisjunctionTerms::DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _12_terms1,
    monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _13_term2) : 
   DisjunctionTerms(new mosek::fusion::p_DisjunctionTerms(this))
{ mosek::fusion::p_DisjunctionTerms::_get_impl(this)->_initialize(_12_terms1,_13_term2); }
void mosek::fusion::p_DisjunctionTerms::_initialize  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _12_terms1,
    monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _13_term2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_DisjunctionTerms::_initialize(_12_terms1,mosek::fusion::p_DisjunctionTerms::_get_impl(_13_term2)->terms);
  }
}
// mosek.fusion.DisjunctionTerms.ctor

// mosek.fusion.DisjunctionTerms.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:334:6-339:7
mosek::fusion::DisjunctionTerms::t mosek::fusion::p_DisjunctionTerms::_new_DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _14_term1,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _15_term2)
{ return new mosek::fusion::DisjunctionTerms(_14_term1,_15_term2); }
mosek::fusion::DisjunctionTerms::DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _14_term1,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _15_term2) : 
   DisjunctionTerms(new mosek::fusion::p_DisjunctionTerms(this))
{ mosek::fusion::p_DisjunctionTerms::_get_impl(this)->_initialize(_14_term1,_15_term2); }
void mosek::fusion::p_DisjunctionTerms::_initialize  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _14_term1,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _15_term2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    int32_t _16_n1 = (int)((mosek::fusion::p_DisjunctionTerms::_get_impl(_14_term1)->terms)->size(0));
    terms = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_DisjunctionTerms::_get_impl(_14_term1)->terms)->size(0)),(int)((_15_term2)->size(0)) ))));
    {
      int32_t _17_i = (int)0;
      for(;(_17_i < (int)((mosek::fusion::p_DisjunctionTerms::_get_impl(_14_term1)->terms)->size(0)));++ _17_i)
      {
        {
          ((*terms)(_17_i)) = ((*mosek::fusion::p_DisjunctionTerms::_get_impl(_14_term1)->terms)(_17_i));
        }
      }
    }
    {
      int32_t _18_i = (int)0;
      for(;(_18_i < (int)((_15_term2)->size(0)));++ _18_i)
      {
        {
          ((*terms)(safe_add( _18_i,_16_n1 ))) = ((*_15_term2)(_18_i));
        }
      }
    }
  }
}
// mosek.fusion.DisjunctionTerms.ctor

// mosek.fusion.DisjunctionTerms.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:329:6-333:7
mosek::fusion::DisjunctionTerms::t mosek::fusion::p_DisjunctionTerms::_new_DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _19_term1,
    monty::rc_ptr< ::mosek::fusion::Term > _20_term2)
{ return new mosek::fusion::DisjunctionTerms(_19_term1,_20_term2); }
mosek::fusion::DisjunctionTerms::DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _19_term1,
    monty::rc_ptr< ::mosek::fusion::Term > _20_term2) : 
   DisjunctionTerms(new mosek::fusion::p_DisjunctionTerms(this))
{ mosek::fusion::p_DisjunctionTerms::_get_impl(this)->_initialize(_19_term1,_20_term2); }
void mosek::fusion::p_DisjunctionTerms::_initialize  (monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _19_term1,
    monty::rc_ptr< ::mosek::fusion::Term > _20_term2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    terms = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_DisjunctionTerms::_get_impl(_19_term1)->terms)->size(0)),(int)1 ))));
    {
      int32_t _21_i = (int)0;
      for(;(_21_i < (int)((mosek::fusion::p_DisjunctionTerms::_get_impl(_19_term1)->terms)->size(0)));++ _21_i)
      {
        {
          ((*terms)(_21_i)) = ((*mosek::fusion::p_DisjunctionTerms::_get_impl(_19_term1)->terms)(_21_i));
        }
      }
    }
    ((*terms)((int)((mosek::fusion::p_DisjunctionTerms::_get_impl(_19_term1)->terms)->size(0)))) = _20_term2;
  }
}
// mosek.fusion.DisjunctionTerms.ctor

// mosek.fusion.DisjunctionTerms.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:326:6-328:7
mosek::fusion::DisjunctionTerms::t mosek::fusion::p_DisjunctionTerms::_new_DisjunctionTerms
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _22_terms)
{ return new mosek::fusion::DisjunctionTerms(_22_terms); }
mosek::fusion::DisjunctionTerms::DisjunctionTerms
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _22_terms) : 
   DisjunctionTerms(new mosek::fusion::p_DisjunctionTerms(this))
{ mosek::fusion::p_DisjunctionTerms::_get_impl(this)->_initialize(_22_terms); }
void mosek::fusion::p_DisjunctionTerms::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _22_terms)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    std::vector<monty::rc_ptr< ::mosek::fusion::Term >> _9198_;
    for (int32_t _23_i = (int)0, _9199_ = (int)((_22_terms)->size(0)); _23_i < _9199_ ; ++_23_i)
    {
      _9198_.push_back(((*_22_terms)(_23_i)));
    }
    auto _9200_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >(monty::shape(_9198_.size()),_9198_.begin(),_9198_.end()));
    mosek::fusion::p_DisjunctionTerms::_get_impl(::mosek::fusion::DisjunctionTerms::t(_pubthis))->terms = _9200_;
  }
}
// mosek.fusion.DisjunctionTerms.ctor

// mosek.fusion.DisjunctionTerms.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:325:6-79
mosek::fusion::DisjunctionTerms::t mosek::fusion::p_DisjunctionTerms::_new_DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _24_term)
{ return new mosek::fusion::DisjunctionTerms(_24_term); }
mosek::fusion::DisjunctionTerms::DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _24_term) : 
   DisjunctionTerms(new mosek::fusion::p_DisjunctionTerms(this))
{ mosek::fusion::p_DisjunctionTerms::_get_impl(this)->_initialize(_24_term); }
void mosek::fusion::p_DisjunctionTerms::_initialize  (monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _24_term)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    terms = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(::mosek::fusion::p_DJC::term(_24_term).get())});
  }
}
// mosek.fusion.DisjunctionTerms.ctor

// mosek.fusion.DisjunctionTerms.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:323:6-80
mosek::fusion::DisjunctionTerms::t mosek::fusion::p_DisjunctionTerms::_new_DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _25_term)
{ return new mosek::fusion::DisjunctionTerms(_25_term); }
mosek::fusion::DisjunctionTerms::DisjunctionTerms
  (monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _25_term) : 
   DisjunctionTerms(new mosek::fusion::p_DisjunctionTerms(this))
{ mosek::fusion::p_DisjunctionTerms::_get_impl(this)->_initialize(_25_term); }
void mosek::fusion::p_DisjunctionTerms::_initialize  (monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _25_term)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    terms = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(::mosek::fusion::p_DJC::term(_25_term).get())});
  }
}
// mosek.fusion.DisjunctionTerms.ctor

void mosek::fusion::p_DisjunctionTerms::destroy()
{
  terms.reset();
}
void mosek::fusion::DisjunctionTerms::destroy() { mosek::fusion::p_DisjunctionTerms::_get_impl(this)->destroy(); }
// } class DisjunctionTerms
// class Term { // @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:243:4-317:5
mosek::fusion::Term::Term(mosek::fusion::p_Term *_impl) : _impl(_impl) { /*std::cout << "Term() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Term::~Term() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Term::p_Term
  (::mosek::fusion::Term * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Term.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:261:6-269:7
mosek::fusion::Term::t mosek::fusion::p_Term::_new_Term
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _26_elist,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > > _27_dlist)
{ return new mosek::fusion::Term(_26_elist,_27_dlist); }
mosek::fusion::Term::Term
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _26_elist,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > > _27_dlist) : 
   Term(new mosek::fusion::p_Term(this))
{ mosek::fusion::p_Term::_get_impl(this)->_initialize(_26_elist,_27_dlist); }
void mosek::fusion::p_Term::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _26_elist,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > > _27_dlist)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    int32_t _28_n = (int)((_26_elist)->size(0));
    exprs = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_28_n)));
    domains = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 >(monty::shape(_28_n)));
    int32_t _9201_ = (int)0;
    int32_t _9202_ = _28_n;
    for (int32_t _29_i = _9201_; _29_i < _9202_; ++_29_i)
    {
      {
        ((*exprs)(_29_i)) = ((*_26_elist)(_29_i));
        ((*domains)(_29_i)) = ((*_27_dlist)(_29_i));
      }
    }
  }
}
// mosek.fusion.Term.ctor

// mosek.fusion.Term.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:259:6-90
mosek::fusion::Term::t mosek::fusion::p_Term::_new_Term
  (monty::rc_ptr< ::mosek::fusion::Expression > _30_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _31_d)
{ return new mosek::fusion::Term(_30_e,_31_d); }
mosek::fusion::Term::Term
  (monty::rc_ptr< ::mosek::fusion::Expression > _30_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _31_d) : 
   Term(new mosek::fusion::p_Term(this))
{ mosek::fusion::p_Term::_get_impl(this)->_initialize(_30_e,_31_d); }
void mosek::fusion::p_Term::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _30_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _31_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    exprs = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_30_e.get())});
    domains = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 >{::monty::rc_ptr<::mosek::fusion::DJCDomain>(_31_d.get())});
  }
}
// mosek.fusion.Term.ctor

// mosek.fusion.Term.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:247:6-255:7
mosek::fusion::Term::t mosek::fusion::p_Term::_new_Term
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _32_t)
{ return new mosek::fusion::Term(_32_t); }
mosek::fusion::Term::Term
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _32_t) : 
   Term(new mosek::fusion::p_Term(this))
{ mosek::fusion::p_Term::_get_impl(this)->_initialize(_32_t); }
void mosek::fusion::p_Term::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _32_t)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    int32_t _33_n = (int)((_32_t)->size(0));
    exprs = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_33_n)));
    domains = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 >(monty::shape(_33_n)));
    int32_t _9203_ = (int)0;
    int32_t _9204_ = _33_n;
    for (int32_t _34_i = _9203_; _34_i < _9204_; ++_34_i)
    {
      {
        ((*exprs)(_34_i)) = ((*mosek::fusion::p_Term::_get_impl(((*_32_t)(_34_i)))->exprs)((int)0));
        ((*domains)(_34_i)) = ((*mosek::fusion::p_Term::_get_impl(((*_32_t)(_34_i)))->domains)((int)0));
      }
    }
  }
}
// mosek.fusion.Term.ctor

// Begin mosek.fusion.Term.numaccterms
// Method mosek.fusion.Term.numaccterms @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:316:6-128
int32_t mosek::fusion::p_Term::numaccterms()
{
  int32_t _35_n = (int)0;
  int32_t _9205_ = (int)0;
  int32_t _9206_ = (int)((domains)->size(0));
  for (int32_t _36_i = _9205_; _36_i < _9206_; ++_36_i)
  {
    {
      _35_n += mosek::fusion::p_DJCDomain::_get_impl(((*domains)(_36_i)).get())->numaccterms();
    }
  }
  return _35_n;
}
// End mosek.fusion.Term.numaccterms

// Begin mosek.fusion.Term.numaccrows
// Method mosek.fusion.Term.numaccrows @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:315:6-127
int32_t mosek::fusion::p_Term::numaccrows()
{
  int32_t _37_n = (int)0;
  int32_t _9207_ = (int)0;
  int32_t _9208_ = (int)((domains)->size(0));
  for (int32_t _38_i = _9207_; _38_i < _9208_; ++_38_i)
  {
    {
      _37_n += mosek::fusion::p_DJCDomain::_get_impl(((*domains)(_38_i)).get())->numaccrows();
    }
  }
  return _37_n;
}
// End mosek.fusion.Term.numaccrows

// Begin mosek.fusion.Term.num
// Method mosek.fusion.Term.num @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:314:6-67
int32_t mosek::fusion::p_Term::num()
{
  return (int)((domains)->size(0));
}
// End mosek.fusion.Term.num

// Begin mosek.fusion.Term.size
// Method mosek.fusion.Term.size @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:313:6-121
int32_t mosek::fusion::Term :: size() { return mosek::fusion::p_Term::_get_impl(this)->size(); }
int32_t mosek::fusion::p_Term::size()
{
  int32_t _39_s = (int)0;
  int32_t _9209_ = (int)0;
  int32_t _9210_ = (int)((domains)->size(0));
  for (int32_t _40_i = _9209_; _40_i < _9210_; ++_40_i)
  {
    {
      _39_s += ((*domains)(_40_i))->size();
    }
  }
  return _39_s;
}
// End mosek.fusion.Term.size

// Begin mosek.fusion.Term.toDJCTerm
// Method mosek.fusion.Term.toDJCTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:257:6-53
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::Term :: __mosek_2fusion_2Term__toDJCTerm() { return mosek::fusion::p_Term::_get_impl(this)->__mosek_2fusion_2Term__toDJCTerm(); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::Term::toDJCTerm() { return __mosek_2fusion_2Term__toDJCTerm(); }
/* override: mosek.fusion.ExprDomain.toDJCTerm*/
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::Term::__mosek_2fusion_2ExprDomain__toDJCTerm() { return __mosek_2fusion_2Term__toDJCTerm(); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_Term::__mosek_2fusion_2Term__toDJCTerm()
{
  return ::mosek::fusion::Term::t(_pubthis);
}
// End mosek.fusion.Term.toDJCTerm

void mosek::fusion::p_Term::destroy()
{
  domains.reset();
  exprs.reset();
}
void mosek::fusion::Term::destroy() { mosek::fusion::p_Term::_get_impl(this)->destroy(); }
// } class Term
// class SimpleTerm { // @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:228:4-230:5
mosek::fusion::SimpleTerm::SimpleTerm(mosek::fusion::p_SimpleTerm *_impl) : mosek::fusion::Term(_impl) { /*std::cout << "SimpleTerm()" << this << std::endl; */ }
mosek::fusion::SimpleTerm::~SimpleTerm() {  /* std::cout << "~SimpleTerm()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SimpleTerm::p_SimpleTerm
  (::mosek::fusion::SimpleTerm * _pubthis) :     mosek::fusion::p_Term(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SimpleTerm.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:229:6-64
mosek::fusion::SimpleTerm::t mosek::fusion::p_SimpleTerm::_new_SimpleTerm
  (monty::rc_ptr< ::mosek::fusion::Expression > _41_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _42_d)
{ return new mosek::fusion::SimpleTerm(_41_e,_42_d); }
mosek::fusion::SimpleTerm::SimpleTerm
  (monty::rc_ptr< ::mosek::fusion::Expression > _41_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _42_d) : 
   SimpleTerm(new mosek::fusion::p_SimpleTerm(this))
{ mosek::fusion::p_SimpleTerm::_get_impl(this)->_initialize(_41_e,_42_d); }
void mosek::fusion::p_SimpleTerm::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _41_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _42_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Term::_initialize(_41_e,_42_d);
  }
}
// mosek.fusion.SimpleTerm.ctor

void mosek::fusion::p_SimpleTerm::destroy()
{
}
void mosek::fusion::SimpleTerm::destroy() { mosek::fusion::p_SimpleTerm::_get_impl(this)->destroy(); }
// } class SimpleTerm
// class DJCDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:171:4-217:5
mosek::fusion::DJCDomain::DJCDomain(mosek::fusion::p_DJCDomain *_impl) : _impl(_impl) { /*std::cout << "DJCDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::DJCDomain::~DJCDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_DJCDomain::p_DJCDomain
  (::mosek::fusion::DJCDomain * _pubthis) :     _pubthis(_pubthis)
{}
mosek::fusion::DJCDomainType mosek::fusion::DJCDomain::get_dom() { return _impl->dom; }
void mosek::fusion::DJCDomain::set_dom(mosek::fusion::DJCDomainType _val) { _impl->dom = _val; }
int32_t mosek::fusion::DJCDomain::get_conedim() { return _impl->conedim; }
void mosek::fusion::DJCDomain::set_conedim(int32_t _val) { _impl->conedim = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::DJCDomain::get_shape() { return _impl->shape; }
void mosek::fusion::DJCDomain::set_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->shape = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DJCDomain::get_par() { return _impl->par; }
void mosek::fusion::DJCDomain::set_par(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->par = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DJCDomain::get_b() { return _impl->b; }
void mosek::fusion::DJCDomain::set_b(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->b = _val; }
// mosek.fusion.DJCDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:190:6-199:7
mosek::fusion::DJCDomain::t mosek::fusion::p_DJCDomain::_new_DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _43_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _44_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _45_shape_,
    mosek::fusion::DJCDomainType _46_dom_)
{ return new mosek::fusion::DJCDomain(_43_b_,_44_par_,_45_shape_,_46_dom_); }
mosek::fusion::DJCDomain::DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _43_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _44_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _45_shape_,
    mosek::fusion::DJCDomainType _46_dom_) : 
   DJCDomain(new mosek::fusion::p_DJCDomain(this))
{ mosek::fusion::p_DJCDomain::_get_impl(this)->_initialize(_43_b_,_44_par_,_45_shape_,_46_dom_); }
void mosek::fusion::p_DJCDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _43_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _44_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _45_shape_,
    mosek::fusion::DJCDomainType _46_dom_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__43_b_(_43_b_ ? _43_b_->raw() : nullptr, _43_b_ ? _43_b_->size(0) : 0);
    _checked_ptr_1<double> _ptr__44_par_(_44_par_ ? _44_par_->raw() : nullptr, _44_par_ ? _44_par_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__45_shape_(_45_shape_ ? _45_shape_->raw() : nullptr, _45_shape_ ? _45_shape_->size(0) : 0);
    b = _43_b_;
    par = _44_par_;
    shape = _45_shape_;
    dom = _46_dom_;
    conedim = ((int)((_45_shape_)->size(0)) - (int)1);
  }
}
// mosek.fusion.DJCDomain.ctor

// mosek.fusion.DJCDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:178:6-188:7
mosek::fusion::DJCDomain::t mosek::fusion::p_DJCDomain::_new_DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _47_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _48_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _49_shape_,
    int32_t _50_conedim_,
    mosek::fusion::DJCDomainType _51_dom_)
{ return new mosek::fusion::DJCDomain(_47_b_,_48_par_,_49_shape_,_50_conedim_,_51_dom_); }
mosek::fusion::DJCDomain::DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _47_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _48_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _49_shape_,
    int32_t _50_conedim_,
    mosek::fusion::DJCDomainType _51_dom_) : 
   DJCDomain(new mosek::fusion::p_DJCDomain(this))
{ mosek::fusion::p_DJCDomain::_get_impl(this)->_initialize(_47_b_,_48_par_,_49_shape_,_50_conedim_,_51_dom_); }
void mosek::fusion::p_DJCDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _47_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _48_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _49_shape_,
    int32_t _50_conedim_,
    mosek::fusion::DJCDomainType _51_dom_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__47_b_(_47_b_ ? _47_b_->raw() : nullptr, _47_b_ ? _47_b_->size(0) : 0);
    _checked_ptr_1<double> _ptr__48_par_(_48_par_ ? _48_par_->raw() : nullptr, _48_par_ ? _48_par_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__49_shape_(_49_shape_ ? _49_shape_->raw() : nullptr, _49_shape_ ? _49_shape_->size(0) : 0);
    b = _47_b_;
    par = _48_par_;
    shape = _49_shape_;
    dom = _51_dom_;
    conedim = _50_conedim_;
  }
}
// mosek.fusion.DJCDomain.ctor

// Begin mosek.fusion.DJCDomain.numaccterms
// Method mosek.fusion.DJCDomain.numaccterms @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:211:6-216:7
int32_t mosek::fusion::p_DJCDomain::numaccterms()
{
  if ((dom == ::mosek::fusion::DJCDomainType::InRange))
  {
    {
      return (int)2;
    }
  }
  else
  {
    {
      return (int)1;
    }
  }
}
// End mosek.fusion.DJCDomain.numaccterms

// Begin mosek.fusion.DJCDomain.numaccrows
// Method mosek.fusion.DJCDomain.numaccrows @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:205:6-210:7
int32_t mosek::fusion::p_DJCDomain::numaccrows()
{
  if ((dom == ::mosek::fusion::DJCDomainType::InRange))
  {
    {
      return safe_mul( _pubthis->size(),(int)2 );
    }
  }
  else
  {
    {
      return _pubthis->size();
    }
  }
}
// End mosek.fusion.DJCDomain.numaccrows

// Begin mosek.fusion.DJCDomain.size
// Method mosek.fusion.DJCDomain.size @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:201:6-204:7
int32_t mosek::fusion::DJCDomain :: size() { return mosek::fusion::p_DJCDomain::_get_impl(this)->size(); }
int32_t mosek::fusion::p_DJCDomain::size()
{
  int32_t _52_s = (int)1;
  int32_t _9211_ = (int)0;
  int32_t _9212_ = (int)((shape)->size(0));
  for (int32_t _53_i = _9211_; _53_i < _9212_; ++_53_i)
  {
    {
      _52_s *= ((*shape)(_53_i));
    }
  }
  return _52_s;
}
// End mosek.fusion.DJCDomain.size

void mosek::fusion::p_DJCDomain::destroy()
{
  shape.reset();
  par.reset();
  b.reset();
}
void mosek::fusion::DJCDomain::destroy() { mosek::fusion::p_DJCDomain::_get_impl(this)->destroy(); }
// } class DJCDomain
// class DJC { // @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:32:4-139:5
mosek::fusion::DJC::DJC(mosek::fusion::p_DJC *_impl) : _impl(_impl) { /*std::cout << "DJC() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::DJC::~DJC() { delete _impl; _impl = nullptr; }
mosek::fusion::p_DJC::p_DJC
  (::mosek::fusion::DJC * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.DJC.ANDFromTerms
// Method mosek.fusion.DJC.ANDFromTerms @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:121:6-137:7
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::ANDFromTerms
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _54_tlist) { return mosek::fusion::p_DJC::ANDFromTerms(_54_tlist); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::ANDFromTerms(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _54_tlist)
{
  int32_t _55_n = (int)0;
  int32_t _9213_ = (int)0;
  int32_t _9214_ = (int)((_54_tlist)->size(0));
  for (int32_t _56_i = _9213_; _56_i < _9214_; ++_56_i)
  {
    {
      _55_n += mosek::fusion::p_Term::_get_impl(((*_54_tlist)(_56_i)).get())->num();
    }
  }
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _57_el = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_55_n)));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > > _58_dl = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::DJCDomain >,1 >(monty::shape(_55_n)));
  _55_n = (int)0;
  int32_t _9215_ = (int)0;
  int32_t _9216_ = (int)((_54_tlist)->size(0));
  for (int32_t _59_i = _9215_; _59_i < _9216_; ++_59_i)
  {
    {
      int32_t _9217_ = (int)0;
      int32_t _9218_ = mosek::fusion::p_Term::_get_impl(((*_54_tlist)(_59_i)).get())->num();
      for (int32_t _60_j = _9217_; _60_j < _9218_; ++_60_j)
      {
        {
          ((*_57_el)(_55_n)) = ((*mosek::fusion::p_Term::_get_impl(((*_54_tlist)(_59_i)))->exprs)(_60_j));
          ((*_58_dl)(_55_n)) = ((*mosek::fusion::p_Term::_get_impl(((*_54_tlist)(_59_i)))->domains)(_60_j));
          _55_n += (int)1;
        }
      }
    }
  }
  return ::mosek::fusion::p_Term::_new_Term(_57_el,_58_dl);
}
// End mosek.fusion.DJC.ANDFromTerms

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:116:6-136
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ExprDomain >,1 > > _61_elist) { return mosek::fusion::p_DJC::AND(_61_elist); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ExprDomain >,1 > > _61_elist)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Term >> _9219_;
  for (int32_t _62_i = (int)0, _9220_ = (int)((_61_elist)->size(0)); _62_i < _9220_ ; ++_62_i)
  {
    _9219_.push_back(((*_61_elist)(_62_i))->__mosek_2fusion_2ExprDomain__toDJCTerm());
  }
  auto _9221_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >(monty::shape(_9219_.size()),_9219_.begin(),_9219_.end()));
  return ::mosek::fusion::p_DJC::ANDFromTerms(_9221_);
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:114:6-114
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _63_s1,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _64_s2,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _65_s3) { return mosek::fusion::p_DJC::AND(_63_s1,_64_s2,_65_s3); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _63_s1,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _64_s2,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _65_s3)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_63_s1.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_64_s2.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_65_s3.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:113:6-96
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _66_s1,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _67_s2) { return mosek::fusion::p_DJC::AND(_66_s1,_67_s2); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _66_s1,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _67_s2)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_66_s1.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_67_s2.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:112:6-78
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _68_s1) { return mosek::fusion::p_DJC::AND(_68_s1); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _68_s1)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_68_s1.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:111:6-84
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _69_slist) { return mosek::fusion::p_DJC::AND(_69_slist); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _69_slist)
{
  return ::mosek::fusion::p_Term::_new_Term(_69_slist);
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:80:6-109:7
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Expression > _70_expr,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _71_dom) { return mosek::fusion::p_DJC::term(_70_expr,_71_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Expression > _70_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _71_dom)
{
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_71_dom)->sparsity.get()))
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Sparse domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_71_dom)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _72_domlb = mosek::fusion::p_RangeDomain::_get_impl(_71_dom)->lb;
  _checked_ptr_1<double> _ptr__72_domlb(_72_domlb ? _72_domlb->raw() : nullptr,_72_domlb ? _72_domlb->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _73_domub = mosek::fusion::p_RangeDomain::_get_impl(_71_dom)->ub;
  _checked_ptr_1<double> _ptr__73_domub(_73_domub ? _73_domub->raw() : nullptr,_73_domub ? _73_domub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _74_eshape = _70_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__74_eshape(_74_eshape ? _74_eshape->raw() : nullptr,_74_eshape ? _74_eshape->size(0) : 0);
  int64_t _75_esize = _70_expr->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _76_shape = mosek::fusion::p_RangeDomain::_get_impl(_71_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__76_shape(_76_shape ? _76_shape->raw() : nullptr,_76_shape ? _76_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _77_bl;
  _checked_ptr_1<double> _ptr__77_bl(_77_bl ? _77_bl->raw() : nullptr,_77_bl ? _77_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _78_bu;
  _checked_ptr_1<double> _ptr__78_bu(_78_bu ? _78_bu->raw() : nullptr,_78_bu ? _78_bu->size(0) : 0);
  if ((NULL == _76_shape.get()))
  {
    {
      _76_shape = _74_eshape;
      _ptr__76_shape.update(_76_shape ? _76_shape->raw() : nullptr, _76_shape ? _76_shape->size(0) : 0);
    }
  }
  else
  {
    {
      if (((int)((_76_shape)->size(0)) != (int)((_74_eshape)->size(0))))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
        }
      }
      else
      {
        {
          int32_t _9222_ = (int)0;
          int32_t _9223_ = (int)((_76_shape)->size(0));
          for (int32_t _79_i = _9222_; _79_i < _9223_; ++_79_i)
          {
            {
              if ((_ptr__76_shape[_79_i] != _ptr__74_eshape[_79_i]))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if (mosek::fusion::p_RangeDomain::_get_impl(_71_dom)->scalable)
  {
    {
      std::vector<double> _9224_;
      for (int64_t _80_i = (int)0, _9225_ = _75_esize; _80_i < _9225_ ; ++_80_i)
      {
        _9224_.push_back(_ptr__72_domlb[(int)0]);
      }
      auto _9226_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9224_.size()),_9224_.begin(),_9224_.end()));
      _77_bl = _9226_;
      _ptr__77_bl.update(_77_bl ? _77_bl->raw() : nullptr, _77_bl ? _77_bl->size(0) : 0);
      std::vector<double> _9227_;
      for (int64_t _81_i = (int)0, _9228_ = _75_esize; _81_i < _9228_ ; ++_81_i)
      {
        _9227_.push_back(_ptr__73_domub[(int)0]);
      }
      auto _9229_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9227_.size()),_9227_.begin(),_9227_.end()));
      _78_bu = _9229_;
      _ptr__78_bu.update(_78_bu ? _78_bu->raw() : nullptr, _78_bu ? _78_bu->size(0) : 0);
    }
  }
  else
  {
    {
      _77_bl = _72_domlb;
      _ptr__77_bl.update(_77_bl ? _77_bl->raw() : nullptr, _77_bl ? _77_bl->size(0) : 0);
      _78_bu = _73_domub;
      _ptr__78_bu.update(_78_bu ? _78_bu->raw() : nullptr, _78_bu ? _78_bu->size(0) : 0);
    }
  }
  return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_70_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_77_bl,_78_bu,_76_shape,::mosek::fusion::DJCDomainType::InRange));
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:78:6-105
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Variable > _82_x,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _83_dom) { return mosek::fusion::p_DJC::term(_82_x,_83_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Variable > _82_x,monty::rc_ptr< ::mosek::fusion::RangeDomain > _83_dom)
{
  return ::mosek::fusion::p_DJC::term(_82_x->__mosek_2fusion_2Variable__asExpr(),_83_dom);
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:76:6-110
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _84_exprdom) { return mosek::fusion::p_DJC::term(_84_exprdom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _84_exprdom)
{
  return ::mosek::fusion::p_DJC::term(mosek::fusion::p_ExprRangeDomain::_get_impl(_84_exprdom)->expr,mosek::fusion::p_ExprRangeDomain::_get_impl(_84_exprdom)->dom);
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:41:6-73:7
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Expression > _85_expr,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _86_dom) { return mosek::fusion::p_DJC::term(_85_expr,_86_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Expression > _85_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _86_dom)
{
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->sparsity.get()))
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Sparse domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _87_dombnd = mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->bnd;
  _checked_ptr_1<double> _ptr__87_dombnd(_87_dombnd ? _87_dombnd->raw() : nullptr,_87_dombnd ? _87_dombnd->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _88_eshape = _85_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__88_eshape(_88_eshape ? _88_eshape->raw() : nullptr,_88_eshape ? _88_eshape->size(0) : 0);
  int64_t _89_esize = _85_expr->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _90_shape = mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__90_shape(_90_shape ? _90_shape->raw() : nullptr,_90_shape ? _90_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _91_b;
  _checked_ptr_1<double> _ptr__91_b(_91_b ? _91_b->raw() : nullptr,_91_b ? _91_b->size(0) : 0);
  if ((NULL == _90_shape.get()))
  {
    {
      _90_shape = _88_eshape;
      _ptr__90_shape.update(_90_shape ? _90_shape->raw() : nullptr, _90_shape ? _90_shape->size(0) : 0);
    }
  }
  else
  {
    {
      if (((int)((_90_shape)->size(0)) != (int)((_88_eshape)->size(0))))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
        }
      }
      else
      {
        {
          int32_t _9230_ = (int)0;
          int32_t _9231_ = (int)((_90_shape)->size(0));
          for (int32_t _92_i = _9230_; _92_i < _9231_; ++_92_i)
          {
            {
              if ((_ptr__90_shape[_92_i] != _ptr__88_eshape[_92_i]))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((NULL == mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->bnd.get()))
  {
    {
      _91_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_89_esize)));
      _ptr__91_b.update(_91_b ? _91_b->raw() : nullptr, _91_b ? _91_b->size(0) : 0);
    }
  }
  else if(mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->scalable)
  {
    {
      std::vector<double> _9232_;
      for (int64_t _93_i = (int)0, _9233_ = _89_esize; _93_i < _9233_ ; ++_93_i)
      {
        _9232_.push_back(_ptr__87_dombnd[(int)0]);
      }
      auto _9234_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9232_.size()),_9232_.begin(),_9232_.end()));
      _91_b = _9234_;
      _ptr__91_b.update(_91_b ? _91_b->raw() : nullptr, _91_b ? _91_b->size(0) : 0);
    }
  }
  else if(mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->empty)
  {
    {
      _91_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_89_esize)));
      _ptr__91_b.update(_91_b ? _91_b->raw() : nullptr, _91_b ? _91_b->size(0) : 0);
    }
  }
  else
  {
    {
      _91_b = _87_dombnd;
      _ptr__91_b.update(_91_b ? _91_b->raw() : nullptr, _91_b ? _91_b->size(0) : 0);
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_85_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_91_b,nullptr,_90_shape,::mosek::fusion::DJCDomainType::EqualTo));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_85_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_91_b,nullptr,_90_shape,::mosek::fusion::DJCDomainType::LessThan));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_85_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_91_b,nullptr,_90_shape,::mosek::fusion::DJCDomainType::GreaterThan));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_86_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_85_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_91_b,nullptr,_90_shape,::mosek::fusion::DJCDomainType::IsFree));
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Invalid linear domain"));
    }
  }
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:36:6-111
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _94_exprdom) { return mosek::fusion::p_DJC::term(_94_exprdom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _94_exprdom)
{
  return ::mosek::fusion::p_DJC::term(mosek::fusion::p_ExprLinearDomain::_get_impl(_94_exprdom)->expr,mosek::fusion::p_ExprLinearDomain::_get_impl(_94_exprdom)->dom);
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ bld/docker-rockylinux-8/final/default/src/fusion/Disjunction.mbi:33:6-105
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Variable > _95_x,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _96_dom) { return mosek::fusion::p_DJC::term(_95_x,_96_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Variable > _95_x,monty::rc_ptr< ::mosek::fusion::LinearDomain > _96_dom)
{
  return ::mosek::fusion::p_DJC::term(_95_x->__mosek_2fusion_2Variable__asExpr(),_96_dom);
}
// End mosek.fusion.DJC.term

void mosek::fusion::p_DJC::destroy()
{
}
void mosek::fusion::DJC::destroy() { mosek::fusion::p_DJC::_get_impl(this)->destroy(); }
// } class DJC
// class Sort { // @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:6:4-262:5
mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Sort::p_Sort
  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Sort.argTransposeSort
// Method mosek.fusion.Sort.argTransposeSort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:249:6-261:7
void mosek::fusion::Sort::argTransposeSort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _303_perm,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _304_ptrb,
    int32_t _305_m,
    int32_t _306_n,
    int32_t _307_p,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _308_val) { mosek::fusion::p_Sort::argTransposeSort(_303_perm,_304_ptrb,_305_m,_306_n,_307_p,_308_val); }
void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< int64_t,1 > > _303_perm,std::shared_ptr< monty::ndarray< int64_t,1 > > _304_ptrb,int32_t _305_m,int32_t _306_n,int32_t _307_p,std::shared_ptr< monty::ndarray< int64_t,1 > > _308_val)
{
  _checked_ptr_1<int64_t> _ptr__303_perm(_303_perm ? _303_perm->raw() : nullptr, _303_perm ? _303_perm->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__304_ptrb(_304_ptrb ? _304_ptrb->raw() : nullptr, _304_ptrb ? _304_ptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__308_val(_308_val ? _308_val->raw() : nullptr, _308_val ? _308_val->size(0) : 0);
  int32_t _9235_ = (int)0;
  int32_t _9236_ = safe_add( safe_mul( _305_m,_307_p ),(int)1 );
  for (int32_t _309_q = _9235_; _309_q < _9236_; ++_309_q)
  {
    {
      _ptr__304_ptrb[_309_q] = (int)0;
    }
  }
  int32_t _9237_ = (int)0;
  int32_t _9238_ = (int)((_308_val)->size(0));
  for (int32_t _310_q = _9237_; _310_q < _9238_; ++_310_q)
  {
    {
      ++ _ptr__304_ptrb[safe_add( safe_add( safe_mul( (_ptr__308_val[_ptr__303_perm[_310_q]] / safe_mul( _306_n,_307_p )),_307_p ),(_ptr__308_val[_ptr__303_perm[_310_q]] % _307_p) ),(int)1 )];
    }
  }
  int32_t _9239_ = (int)0;
  int32_t _9240_ = safe_mul( _305_m,_307_p );
  for (int32_t _311_i = _9239_; _311_i < _9240_; ++_311_i)
  {
    {
      _ptr__304_ptrb[safe_add( _311_i,(int)1 )] = safe_add( _ptr__304_ptrb[safe_add( _311_i,(int)1 )],_ptr__304_ptrb[_311_i] );
    }
  }
  std::vector<int64_t> _9241_;
  for (int32_t _313_i = (int)0, _9242_ = (int)((_303_perm)->size(0)); _313_i < _9242_ ; ++_313_i)
  {
    _9241_.push_back(_ptr__303_perm[_313_i]);
  }
  auto _9243_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9241_.size()),_9241_.begin(),_9241_.end()));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _312_per2 = _9243_;
  _checked_ptr_1<int64_t> _ptr__312_per2(_312_per2 ? _312_per2->raw() : nullptr,_312_per2 ? _312_per2->size(0) : 0);
  int64_t _9244_ = (int64_t)0;
  int64_t _9245_ = (int64_t)((_308_val)->size(0));
  for (int64_t _314_q = _9244_; _314_q < _9245_; ++_314_q)
  {
    {
      int64_t _315_k = safe_add( safe_mul( (_ptr__308_val[_ptr__312_per2[_314_q]] / safe_mul( _306_n,_307_p )),_307_p ),(_ptr__308_val[_ptr__312_per2[_314_q]] % _307_p) );
      _ptr__303_perm[_ptr__304_ptrb[_315_k]] = _ptr__312_per2[_314_q];
      ++ _ptr__304_ptrb[_315_k];
    }
  }
}
// End mosek.fusion.Sort.argTransposeSort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:207:6-210:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _316_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _317_vals1) { mosek::fusion::p_Sort::argsort(_316_idx,_317_vals1); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _316_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _317_vals1)
{
  _checked_ptr_1<int64_t> _ptr__316_idx(_316_idx ? _316_idx->raw() : nullptr, _316_idx ? _316_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__317_vals1(_317_vals1 ? _317_vals1->raw() : nullptr, _317_vals1 ? _317_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_316_idx,_317_vals1,(int64_t)((int)0),(int64_t)((int)((_316_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:202:6-205:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _318_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _319_vals1) { mosek::fusion::p_Sort::argsort(_318_idx,_319_vals1); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _318_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _319_vals1)
{
  _checked_ptr_1<int64_t> _ptr__318_idx(_318_idx ? _318_idx->raw() : nullptr, _318_idx ? _318_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__319_vals1(_319_vals1 ? _319_vals1->raw() : nullptr, _319_vals1 ? _319_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_318_idx,_319_vals1,(int64_t)((int)0),(int64_t)((int)((_318_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:197:6-200:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _320_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _321_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _322_vals2) { mosek::fusion::p_Sort::argsort(_320_idx,_321_vals1,_322_vals2); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _320_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _321_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _322_vals2)
{
  _checked_ptr_1<int64_t> _ptr__320_idx(_320_idx ? _320_idx->raw() : nullptr, _320_idx ? _320_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__321_vals1(_321_vals1 ? _321_vals1->raw() : nullptr, _321_vals1 ? _321_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__322_vals2(_322_vals2 ? _322_vals2->raw() : nullptr, _322_vals2 ? _322_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_320_idx,_321_vals1,_322_vals2,(int64_t)((int)0),(int64_t)((int)((_320_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:193:6-196:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _323_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _324_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _325_vals2) { mosek::fusion::p_Sort::argsort(_323_idx,_324_vals1,_325_vals2); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _323_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _324_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _325_vals2)
{
  _checked_ptr_1<int64_t> _ptr__323_idx(_323_idx ? _323_idx->raw() : nullptr, _323_idx ? _323_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__324_vals1(_324_vals1 ? _324_vals1->raw() : nullptr, _324_vals1 ? _324_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__325_vals2(_325_vals2 ? _325_vals2->raw() : nullptr, _325_vals2 ? _325_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_323_idx,_324_vals1,_325_vals2,(int64_t)((int)0),(int64_t)((int)((_323_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:188:6-191:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _326_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _327_vals1,
    int64_t _328_first,
    int64_t _329_last) { mosek::fusion::p_Sort::argsort(_326_idx,_327_vals1,_328_first,_329_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _326_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _327_vals1,int64_t _328_first,int64_t _329_last)
{
  _checked_ptr_1<int64_t> _ptr__326_idx(_326_idx ? _326_idx->raw() : nullptr, _326_idx ? _326_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__327_vals1(_327_vals1 ? _327_vals1->raw() : nullptr, _327_vals1 ? _327_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_326_idx,_327_vals1,_328_first,_329_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:183:6-186:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _330_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _331_vals1,
    int64_t _332_first,
    int64_t _333_last) { mosek::fusion::p_Sort::argsort(_330_idx,_331_vals1,_332_first,_333_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _330_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _331_vals1,int64_t _332_first,int64_t _333_last)
{
  _checked_ptr_1<int64_t> _ptr__330_idx(_330_idx ? _330_idx->raw() : nullptr, _330_idx ? _330_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__331_vals1(_331_vals1 ? _331_vals1->raw() : nullptr, _331_vals1 ? _331_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_330_idx,_331_vals1,_332_first,_333_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:178:6-181:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _334_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _335_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _336_vals2,
    int64_t _337_first,
    int64_t _338_last) { mosek::fusion::p_Sort::argsort(_334_idx,_335_vals1,_336_vals2,_337_first,_338_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _334_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _335_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _336_vals2,int64_t _337_first,int64_t _338_last)
{
  _checked_ptr_1<int64_t> _ptr__334_idx(_334_idx ? _334_idx->raw() : nullptr, _334_idx ? _334_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__335_vals1(_335_vals1 ? _335_vals1->raw() : nullptr, _335_vals1 ? _335_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__336_vals2(_336_vals2 ? _336_vals2->raw() : nullptr, _336_vals2 ? _336_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_334_idx,_335_vals1,_336_vals2,_337_first,_338_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:174:6-177:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _339_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _340_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _341_vals2,
    int64_t _342_first,
    int64_t _343_last) { mosek::fusion::p_Sort::argsort(_339_idx,_340_vals1,_341_vals2,_342_first,_343_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _339_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _340_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _341_vals2,int64_t _342_first,int64_t _343_last)
{
  _checked_ptr_1<int64_t> _ptr__339_idx(_339_idx ? _339_idx->raw() : nullptr, _339_idx ? _339_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__340_vals1(_340_vals1 ? _340_vals1->raw() : nullptr, _340_vals1 ? _340_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__341_vals2(_341_vals2 ? _341_vals2->raw() : nullptr, _341_vals2 ? _341_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_339_idx,_340_vals1,_341_vals2,_342_first,_343_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:156:6-171:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _344_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _345_vals1,
    int64_t _346_first,
    int64_t _347_last,
    bool _348_check) { mosek::fusion::p_Sort::argsort(_344_idx,_345_vals1,_346_first,_347_last,_348_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _344_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _345_vals1,int64_t _346_first,int64_t _347_last,bool _348_check)
{
  _checked_ptr_1<int64_t> _ptr__344_idx(_344_idx ? _344_idx->raw() : nullptr, _344_idx ? _344_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__345_vals1(_345_vals1 ? _345_vals1->raw() : nullptr, _345_vals1 ? _345_vals1->size(0) : 0);
  if (((!_348_check) || ((_347_last - _346_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_344_idx,_345_vals1,_346_first,_347_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_344_idx,_345_vals1,_346_first,_347_last,_348_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _349_minmax = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int64_t> _ptr__349_minmax(_349_minmax ? _349_minmax->raw() : nullptr,_349_minmax ? _349_minmax->size(0) : 0);
      int32_t _350_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_344_idx,_345_vals1,nullptr,_346_first,_347_last,_349_minmax);
      if (((_ptr__349_minmax[(int)1] - _ptr__349_minmax[(int)0]) < safe_mul( _350_scale,(_347_last - _346_first) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_344_idx,_345_vals1,_346_first,_347_last,_ptr__349_minmax[(int)0],_ptr__349_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_344_idx,_345_vals1,_346_first,_347_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:137:6-154:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _351_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _352_vals1,
    int64_t _353_first,
    int64_t _354_last,
    bool _355_check) { mosek::fusion::p_Sort::argsort(_351_idx,_352_vals1,_353_first,_354_last,_355_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _351_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _352_vals1,int64_t _353_first,int64_t _354_last,bool _355_check)
{
  _checked_ptr_1<int64_t> _ptr__351_idx(_351_idx ? _351_idx->raw() : nullptr, _351_idx ? _351_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__352_vals1(_352_vals1 ? _352_vals1->raw() : nullptr, _352_vals1 ? _352_vals1->size(0) : 0);
  if (((!_355_check) || ((_354_last - _353_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_351_idx,_352_vals1,_353_first,_354_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_351_idx,_352_vals1,_353_first,_354_last,_355_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _356_minmax = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int32_t> _ptr__356_minmax(_356_minmax ? _356_minmax->raw() : nullptr,_356_minmax ? _356_minmax->size(0) : 0);
      int32_t _357_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_351_idx,_352_vals1,nullptr,_353_first,_354_last,_356_minmax);
      if (((_ptr__356_minmax[(int)1] - _ptr__356_minmax[(int)0]) < safe_mul( _357_scale,(_354_last - _353_first) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_351_idx,_352_vals1,_353_first,_354_last,_ptr__356_minmax[(int)0],_ptr__356_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_351_idx,_352_vals1,_353_first,_354_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:116:6-135:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _358_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _359_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _360_vals2,
    int64_t _361_first,
    int64_t _362_last,
    bool _363_check) { mosek::fusion::p_Sort::argsort(_358_idx,_359_vals1,_360_vals2,_361_first,_362_last,_363_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _358_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _359_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _360_vals2,int64_t _361_first,int64_t _362_last,bool _363_check)
{
  _checked_ptr_1<int64_t> _ptr__358_idx(_358_idx ? _358_idx->raw() : nullptr, _358_idx ? _358_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__359_vals1(_359_vals1 ? _359_vals1->raw() : nullptr, _359_vals1 ? _359_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__360_vals2(_360_vals2 ? _360_vals2->raw() : nullptr, _360_vals2 ? _360_vals2->size(0) : 0);
  if (((!_363_check) || ((_362_last - _361_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_358_idx,_359_vals1,_360_vals2,_361_first,_362_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_358_idx,_359_vals1,_360_vals2,_361_first,_362_last,_363_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _364_minmax = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int64_t> _ptr__364_minmax(_364_minmax ? _364_minmax->raw() : nullptr,_364_minmax ? _364_minmax->size(0) : 0);
      int32_t _365_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_358_idx,_359_vals1,_360_vals2,_361_first,_362_last,_364_minmax);
      if ((((_ptr__364_minmax[(int)1] - _ptr__364_minmax[(int)0]) < safe_mul( _365_scale,(_362_last - _361_first) )) && ((_ptr__364_minmax[(int)3] - _ptr__364_minmax[(int)2]) < safe_mul( _365_scale,(_362_last - _361_first) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_358_idx,_360_vals2,_361_first,_362_last,_ptr__364_minmax[(int)2],_ptr__364_minmax[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_358_idx,_359_vals1,_361_first,_362_last,_ptr__364_minmax[(int)0],_ptr__364_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_358_idx,_359_vals1,_360_vals2,_361_first,_362_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:95:6-114:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _366_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _367_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _368_vals2,
    int64_t _369_first,
    int64_t _370_last,
    bool _371_check) { mosek::fusion::p_Sort::argsort(_366_idx,_367_vals1,_368_vals2,_369_first,_370_last,_371_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _366_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _367_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _368_vals2,int64_t _369_first,int64_t _370_last,bool _371_check)
{
  _checked_ptr_1<int64_t> _ptr__366_idx(_366_idx ? _366_idx->raw() : nullptr, _366_idx ? _366_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__367_vals1(_367_vals1 ? _367_vals1->raw() : nullptr, _367_vals1 ? _367_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__368_vals2(_368_vals2 ? _368_vals2->raw() : nullptr, _368_vals2 ? _368_vals2->size(0) : 0);
  if (((!_371_check) || ((_370_last - _369_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_366_idx,_367_vals1,_368_vals2,_369_first,_370_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_366_idx,_367_vals1,_368_vals2,_369_first,_370_last,_371_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _372_minmax = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int32_t> _ptr__372_minmax(_372_minmax ? _372_minmax->raw() : nullptr,_372_minmax ? _372_minmax->size(0) : 0);
      int32_t _373_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_366_idx,_367_vals1,_368_vals2,_369_first,_370_last,_372_minmax);
      if ((((_ptr__372_minmax[(int)1] - _ptr__372_minmax[(int)0]) < safe_mul( _373_scale,(_370_last - _369_first) )) && ((_ptr__372_minmax[(int)3] - _ptr__372_minmax[(int)2]) < safe_mul( _373_scale,(_370_last - _369_first) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_366_idx,_368_vals2,_369_first,_370_last,_ptr__372_minmax[(int)2],_ptr__372_minmax[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_366_idx,_367_vals1,_369_first,_370_last,_ptr__372_minmax[(int)0],_ptr__372_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_366_idx,_367_vals1,_368_vals2,_369_first,_370_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argbucketsort
// Method mosek.fusion.Sort.argbucketsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:90:6-93:7
void mosek::fusion::Sort::argbucketsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _374_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _375_vals,
    int64_t _376_first,
    int64_t _377_last,
    int64_t _378_minv,
    int64_t _379_maxv) { mosek::fusion::p_Sort::argbucketsort(_374_idx,_375_vals,_376_first,_377_last,_378_minv,_379_maxv); }
void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _374_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _375_vals,int64_t _376_first,int64_t _377_last,int64_t _378_minv,int64_t _379_maxv)
{
  _checked_ptr_1<int64_t> _ptr__374_idx(_374_idx ? _374_idx->raw() : nullptr, _374_idx ? _374_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__375_vals(_375_vals ? _375_vals->raw() : nullptr, _375_vals ? _375_vals->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_374_idx,_376_first,_377_last,_375_vals,_378_minv,_379_maxv);
}
// End mosek.fusion.Sort.argbucketsort

// Begin mosek.fusion.Sort.argbucketsort
// Method mosek.fusion.Sort.argbucketsort @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:85:6-88:7
void mosek::fusion::Sort::argbucketsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _380_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _381_vals,
    int64_t _382_first,
    int64_t _383_last,
    int32_t _384_minv,
    int32_t _385_maxv) { mosek::fusion::p_Sort::argbucketsort(_380_idx,_381_vals,_382_first,_383_last,_384_minv,_385_maxv); }
void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _380_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _381_vals,int64_t _382_first,int64_t _383_last,int32_t _384_minv,int32_t _385_maxv)
{
  _checked_ptr_1<int64_t> _ptr__380_idx(_380_idx ? _380_idx->raw() : nullptr, _380_idx ? _380_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__381_vals(_381_vals ? _381_vals->raw() : nullptr, _381_vals ? _381_vals->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_380_idx,_382_first,_383_last,_381_vals,_384_minv,_385_maxv);
}
// End mosek.fusion.Sort.argbucketsort

// Begin mosek.fusion.Sort.getminmax
// Method mosek.fusion.Sort.getminmax @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:61:6-80:7
void mosek::fusion::Sort::getminmax
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _386_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _387_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _388_vals2,
    int64_t _389_first,
    int64_t _390_last,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _391_res) { mosek::fusion::p_Sort::getminmax(_386_idx,_387_vals1,_388_vals2,_389_first,_390_last,_391_res); }
void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< int64_t,1 > > _386_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _387_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _388_vals2,int64_t _389_first,int64_t _390_last,std::shared_ptr< monty::ndarray< int64_t,1 > > _391_res)
{
  _checked_ptr_1<int64_t> _ptr__386_idx(_386_idx ? _386_idx->raw() : nullptr, _386_idx ? _386_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__387_vals1(_387_vals1 ? _387_vals1->raw() : nullptr, _387_vals1 ? _387_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__388_vals2(_388_vals2 ? _388_vals2->raw() : nullptr, _388_vals2 ? _388_vals2->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__391_res(_391_res ? _391_res->raw() : nullptr, _391_res ? _391_res->size(0) : 0);
  _ptr__391_res[(int)0] = _ptr__387_vals1[_ptr__386_idx[_389_first]];
  _ptr__391_res[(int)1] = _ptr__387_vals1[_ptr__386_idx[_389_first]];
  int64_t _9246_ = safe_add( _389_first,(int)1 );
  int64_t _9247_ = _390_last;
  for (int64_t _392_i = _9246_; _392_i < _9247_; ++_392_i)
  {
    {
      if ((_ptr__391_res[(int)0] > _ptr__387_vals1[_ptr__386_idx[_392_i]]))
      {
        {
          _ptr__391_res[(int)0] = _ptr__387_vals1[_ptr__386_idx[_392_i]];
        }
      }
      {}
      if ((_ptr__391_res[(int)1] < _ptr__387_vals1[_ptr__386_idx[_392_i]]))
      {
        {
          _ptr__391_res[(int)1] = _ptr__387_vals1[_ptr__386_idx[_392_i]];
        }
      }
      {}
    }
  }
  if ((NULL != _388_vals2.get()))
  {
    {
      _ptr__391_res[(int)2] = _ptr__388_vals2[_ptr__386_idx[_389_first]];
      _ptr__391_res[(int)3] = _ptr__388_vals2[_ptr__386_idx[_389_first]];
      int64_t _9248_ = safe_add( _389_first,(int)1 );
      int64_t _9249_ = _390_last;
      for (int64_t _393_i = _9248_; _393_i < _9249_; ++_393_i)
      {
        {
          if ((_ptr__391_res[(int)2] > _ptr__388_vals2[_ptr__386_idx[_393_i]]))
          {
            {
              _ptr__391_res[(int)2] = _ptr__388_vals2[_ptr__386_idx[_393_i]];
            }
          }
          {}
          if ((_ptr__391_res[(int)3] < _ptr__388_vals2[_ptr__386_idx[_393_i]]))
          {
            {
              _ptr__391_res[(int)3] = _ptr__388_vals2[_ptr__386_idx[_393_i]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.getminmax

// Begin mosek.fusion.Sort.getminmax
// Method mosek.fusion.Sort.getminmax @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:40:6-59:7
void mosek::fusion::Sort::getminmax
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _394_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _395_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _396_vals2,
    int64_t _397_first,
    int64_t _398_last,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _399_res) { mosek::fusion::p_Sort::getminmax(_394_idx,_395_vals1,_396_vals2,_397_first,_398_last,_399_res); }
void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< int64_t,1 > > _394_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _395_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _396_vals2,int64_t _397_first,int64_t _398_last,std::shared_ptr< monty::ndarray< int32_t,1 > > _399_res)
{
  _checked_ptr_1<int64_t> _ptr__394_idx(_394_idx ? _394_idx->raw() : nullptr, _394_idx ? _394_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__395_vals1(_395_vals1 ? _395_vals1->raw() : nullptr, _395_vals1 ? _395_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__396_vals2(_396_vals2 ? _396_vals2->raw() : nullptr, _396_vals2 ? _396_vals2->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__399_res(_399_res ? _399_res->raw() : nullptr, _399_res ? _399_res->size(0) : 0);
  _ptr__399_res[(int)0] = _ptr__395_vals1[_ptr__394_idx[_397_first]];
  _ptr__399_res[(int)1] = _ptr__395_vals1[_ptr__394_idx[_397_first]];
  int64_t _9250_ = safe_add( _397_first,(int)1 );
  int64_t _9251_ = _398_last;
  for (int64_t _400_i = _9250_; _400_i < _9251_; ++_400_i)
  {
    {
      if ((_ptr__399_res[(int)0] > _ptr__395_vals1[_ptr__394_idx[_400_i]]))
      {
        {
          _ptr__399_res[(int)0] = _ptr__395_vals1[_ptr__394_idx[_400_i]];
        }
      }
      {}
      if ((_ptr__399_res[(int)1] < _ptr__395_vals1[_ptr__394_idx[_400_i]]))
      {
        {
          _ptr__399_res[(int)1] = _ptr__395_vals1[_ptr__394_idx[_400_i]];
        }
      }
      {}
    }
  }
  if ((NULL != _396_vals2.get()))
  {
    {
      _ptr__399_res[(int)2] = _ptr__396_vals2[_ptr__394_idx[_397_first]];
      _ptr__399_res[(int)3] = _ptr__396_vals2[_ptr__394_idx[_397_first]];
      int64_t _9252_ = safe_add( _397_first,(int)1 );
      int64_t _9253_ = _398_last;
      for (int64_t _401_i = _9252_; _401_i < _9253_; ++_401_i)
      {
        {
          if ((_ptr__399_res[(int)2] > _ptr__396_vals2[_ptr__394_idx[_401_i]]))
          {
            {
              _ptr__399_res[(int)2] = _ptr__396_vals2[_ptr__394_idx[_401_i]];
            }
          }
          {}
          if ((_ptr__399_res[(int)3] < _ptr__396_vals2[_ptr__394_idx[_401_i]]))
          {
            {
              _ptr__399_res[(int)3] = _ptr__396_vals2[_ptr__394_idx[_401_i]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.getminmax

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:32:6-38:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _402_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _403_vals1,
    int64_t _404_first,
    int64_t _405_last,
    bool _406_check) { return mosek::fusion::p_Sort::issorted(_402_idx,_403_vals1,_404_first,_405_last,_406_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _402_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _403_vals1,int64_t _404_first,int64_t _405_last,bool _406_check)
{
  _checked_ptr_1<int64_t> _ptr__402_idx(_402_idx ? _402_idx->raw() : nullptr, _402_idx ? _402_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__403_vals1(_403_vals1 ? _403_vals1->raw() : nullptr, _403_vals1 ? _403_vals1->size(0) : 0);
  int64_t _9254_ = _404_first;
  int64_t _9255_ = (_405_last - (int)1);
  for (int64_t _407_i = _9254_; _407_i < _9255_; ++_407_i)
  {
    {
      if ((_ptr__403_vals1[_ptr__402_idx[_407_i]] > _ptr__403_vals1[_ptr__402_idx[safe_add( _407_i,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:24:6-30:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _408_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _409_vals1,
    int64_t _410_first,
    int64_t _411_last,
    bool _412_check) { return mosek::fusion::p_Sort::issorted(_408_idx,_409_vals1,_410_first,_411_last,_412_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _408_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _409_vals1,int64_t _410_first,int64_t _411_last,bool _412_check)
{
  _checked_ptr_1<int64_t> _ptr__408_idx(_408_idx ? _408_idx->raw() : nullptr, _408_idx ? _408_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__409_vals1(_409_vals1 ? _409_vals1->raw() : nullptr, _409_vals1 ? _409_vals1->size(0) : 0);
  int64_t _9256_ = _410_first;
  int64_t _9257_ = (_411_last - (int)1);
  for (int64_t _413_i = _9256_; _413_i < _9257_; ++_413_i)
  {
    {
      if ((_ptr__409_vals1[_ptr__408_idx[_413_i]] > _ptr__409_vals1[_ptr__408_idx[safe_add( _413_i,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:16:6-22:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _414_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _415_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _416_vals2,
    int64_t _417_first,
    int64_t _418_last,
    bool _419_check) { return mosek::fusion::p_Sort::issorted(_414_idx,_415_vals1,_416_vals2,_417_first,_418_last,_419_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _414_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _415_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _416_vals2,int64_t _417_first,int64_t _418_last,bool _419_check)
{
  _checked_ptr_1<int64_t> _ptr__414_idx(_414_idx ? _414_idx->raw() : nullptr, _414_idx ? _414_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__415_vals1(_415_vals1 ? _415_vals1->raw() : nullptr, _415_vals1 ? _415_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__416_vals2(_416_vals2 ? _416_vals2->raw() : nullptr, _416_vals2 ? _416_vals2->size(0) : 0);
  int64_t _9258_ = _417_first;
  int64_t _9259_ = (_418_last - (int)1);
  for (int64_t _420_i = _9258_; _420_i < _9259_; ++_420_i)
  {
    {
      if (((_ptr__415_vals1[_ptr__414_idx[_420_i]] > _ptr__415_vals1[_ptr__414_idx[safe_add( _420_i,(int)1 )]]) || ((_ptr__415_vals1[_ptr__414_idx[safe_add( _420_i,(int)1 )]] == _ptr__415_vals1[_ptr__414_idx[_420_i]]) && (_ptr__416_vals2[_ptr__414_idx[_420_i]] > _ptr__416_vals2[_ptr__414_idx[safe_add( _420_i,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ bld/docker-rockylinux-8/final/default/src/fusion/Sort.mbi:8:6-14:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _421_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _422_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _423_vals2,
    int64_t _424_first,
    int64_t _425_last,
    bool _426_check) { return mosek::fusion::p_Sort::issorted(_421_idx,_422_vals1,_423_vals2,_424_first,_425_last,_426_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _421_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _422_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _423_vals2,int64_t _424_first,int64_t _425_last,bool _426_check)
{
  _checked_ptr_1<int64_t> _ptr__421_idx(_421_idx ? _421_idx->raw() : nullptr, _421_idx ? _421_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__422_vals1(_422_vals1 ? _422_vals1->raw() : nullptr, _422_vals1 ? _422_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__423_vals2(_423_vals2 ? _423_vals2->raw() : nullptr, _423_vals2 ? _423_vals2->size(0) : 0);
  int64_t _9260_ = _424_first;
  int64_t _9261_ = (_425_last - (int)1);
  for (int64_t _427_i = _9260_; _427_i < _9261_; ++_427_i)
  {
    {
      if (((_ptr__422_vals1[_ptr__421_idx[_427_i]] > _ptr__422_vals1[_ptr__421_idx[safe_add( _427_i,(int)1 )]]) || ((_ptr__422_vals1[_ptr__421_idx[_427_i]] == _ptr__422_vals1[_ptr__421_idx[safe_add( _427_i,(int)1 )]]) && (_ptr__423_vals2[_ptr__421_idx[_427_i]] > _ptr__423_vals2[_ptr__421_idx[safe_add( _427_i,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

void mosek::fusion::p_Sort::destroy()
{
}
void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }
// } class Sort
// class IndexCounter { // @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:446:4-523:5
mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }
mosek::fusion::p_IndexCounter::p_IndexCounter
  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.IndexCounter.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:486:6-496:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _428_shape)
{ return new mosek::fusion::IndexCounter(_428_shape); }
mosek::fusion::IndexCounter::IndexCounter
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _428_shape) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_428_shape); }
void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _428_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__428_shape(_428_shape ? _428_shape->raw() : nullptr, _428_shape ? _428_shape->size(0) : 0);
    n = (int)((_428_shape)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    start = (int64_t)0;
    strides = ::mosek::fusion::p_Set::strides(_428_shape);
    std::vector<int32_t> _9262_;
    for (int32_t _429_i = (int)0, _9263_ = (int)((_428_shape)->size(0)); _429_i < _9263_ ; ++_429_i)
    {
      _9262_.push_back(_ptr__428_shape[_429_i]);
    }
    auto _9264_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9262_.size()),_9262_.begin(),_9262_.end()));
    dims = _9264_;
  }
}
// mosek.fusion.IndexCounter.ctor

// mosek.fusion.IndexCounter.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:471:6-484:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (int64_t _430_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _431_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _432_shape)
{ return new mosek::fusion::IndexCounter(_430_start_,_431_dims_,_432_shape); }
mosek::fusion::IndexCounter::IndexCounter
  (int64_t _430_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _431_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _432_shape) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_430_start_,_431_dims_,_432_shape); }
void mosek::fusion::p_IndexCounter::_initialize  (int64_t _430_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _431_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _432_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__431_dims_(_431_dims_ ? _431_dims_->raw() : nullptr, _431_dims_ ? _431_dims_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__432_shape(_432_shape ? _432_shape->raw() : nullptr, _432_shape ? _432_shape->size(0) : 0);
    int32_t _433_nd = (int)((_432_shape)->size(0));
    n = (int)((_431_dims_)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    int32_t _9265_ = (int)0;
    int32_t _9266_ = n;
    for (int32_t _434_i = _9265_; _434_i < _9266_; ++_434_i)
    {
      {
        ((*st)(_434_i)) = _430_start_;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_432_shape);
    dims = _431_dims_;
    start = _430_start_;
  }
}
// mosek.fusion.IndexCounter.ctor

// mosek.fusion.IndexCounter.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:457:6-469:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (int64_t _435_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _436_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _437_strides_)
{ return new mosek::fusion::IndexCounter(_435_start_,_436_dims_,_437_strides_); }
mosek::fusion::IndexCounter::IndexCounter
  (int64_t _435_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _436_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _437_strides_) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_435_start_,_436_dims_,_437_strides_); }
void mosek::fusion::p_IndexCounter::_initialize  (int64_t _435_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _436_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _437_strides_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__436_dims_(_436_dims_ ? _436_dims_->raw() : nullptr, _436_dims_ ? _436_dims_->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__437_strides_(_437_strides_ ? _437_strides_->raw() : nullptr, _437_strides_ ? _437_strides_->size(0) : 0);
    n = (int)((_436_dims_)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    int32_t _9267_ = (int)0;
    int32_t _9268_ = n;
    for (int32_t _438_i = _9267_; _438_i < _9268_; ++_438_i)
    {
      {
        ((*st)(_438_i)) = _435_start_;
      }
    }
    strides = _437_strides_;
    dims = _436_dims_;
    start = _435_start_;
  }
}
// mosek.fusion.IndexCounter.ctor

// Begin mosek.fusion.IndexCounter.atEnd
// Method mosek.fusion.IndexCounter.atEnd @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:522:6-66
bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }
bool mosek::fusion::p_IndexCounter::atEnd()
{
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
// End mosek.fusion.IndexCounter.atEnd

// Begin mosek.fusion.IndexCounter.getIndex
// Method mosek.fusion.IndexCounter.getIndex @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:520:6-54
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_IndexCounter::getIndex()
{
  return ii;
}
// End mosek.fusion.IndexCounter.getIndex

// Begin mosek.fusion.IndexCounter.next
// Method mosek.fusion.IndexCounter.next @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:519:6-68
int64_t mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }
int64_t mosek::fusion::p_IndexCounter::next()
{
  int64_t _439_r = _pubthis->get();
  _pubthis->inc();
  return _439_r;
}
// End mosek.fusion.IndexCounter.next

// Begin mosek.fusion.IndexCounter.get
// Method mosek.fusion.IndexCounter.get @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:517:6-49
int64_t mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }
int64_t mosek::fusion::p_IndexCounter::get()
{
  return ((*st)((int)0));
}
// End mosek.fusion.IndexCounter.get

// Begin mosek.fusion.IndexCounter.inc
// Method mosek.fusion.IndexCounter.inc @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:503:6-515:7
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }
void mosek::fusion::p_IndexCounter::inc()
{
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int32_t _440_i;
  {
    _440_i = (int)0;
    for(;((_440_i < (n - (int)1)) && (((*ii)(_440_i)) == ((*dims)(((n - _440_i) - (int)1)))));++ _440_i)
    {
      {
        ((*ii)(_440_i)) = (int)0;
        ++ ((*ii)(safe_add( _440_i,(int)1 )));
        ((*st)(safe_add( _440_i,(int)1 ))) = safe_add( ((*st)(safe_add( _440_i,(int)1 ))),((*strides)(((n - _440_i) - (int)2))) );
      }
    }
  }
  int32_t _9269_ = (int)0;
  int32_t _9270_ = _440_i;
  for (int32_t _441_j = _9269_; _441_j < _9270_; ++_441_j)
  {
    {
      ((*st)(_441_j)) = ((*st)(_440_i));
    }
  }
}
// End mosek.fusion.IndexCounter.inc

// Begin mosek.fusion.IndexCounter.reset
// Method mosek.fusion.IndexCounter.reset @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:498:6-501:7
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }
void mosek::fusion::p_IndexCounter::reset()
{
  st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
  int32_t _9271_ = (int)0;
  int32_t _9272_ = n;
  for (int32_t _442_i = _9271_; _442_i < _9272_; ++_442_i)
  {
    {
      ((*st)(_442_i)) = start;
    }
  }
}
// End mosek.fusion.IndexCounter.reset

void mosek::fusion::p_IndexCounter::destroy()
{
  dims.reset();
  strides.reset();
  st.reset();
  ii.reset();
}
void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }
// } class IndexCounter
// class CommonTools { // @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:6:4-443:5
mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }
mosek::fusion::p_CommonTools::p_CommonTools
  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:431:6-442:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _443_values,
    int32_t _444_newsize) { return mosek::fusion::p_CommonTools::resize(_443_values,_444_newsize); }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int64_t,1 > > _443_values,int32_t _444_newsize)
{
  _checked_ptr_1<int64_t> _ptr__443_values(_443_values ? _443_values->raw() : nullptr, _443_values ? _443_values->size(0) : 0);
  if ((_444_newsize == (int)((_443_values)->size(0))))
  {
    {
      return _443_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _445_newvals = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_444_newsize)));
      _checked_ptr_1<int64_t> _ptr__445_newvals(_445_newvals ? _445_newvals->raw() : nullptr,_445_newvals ? _445_newvals->size(0) : 0);
      if ((_444_newsize > (int)((_443_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_443_values,(int)0,_445_newvals,(int)0,(int)((_443_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_443_values,(int)0,_445_newvals,(int)0,_444_newsize);
        }
      }
      return _445_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:419:6-430:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _446_values,
    int32_t _447_newsize) { return mosek::fusion::p_CommonTools::resize(_446_values,_447_newsize); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int32_t,1 > > _446_values,int32_t _447_newsize)
{
  _checked_ptr_1<int32_t> _ptr__446_values(_446_values ? _446_values->raw() : nullptr, _446_values ? _446_values->size(0) : 0);
  if ((_447_newsize == (int)((_446_values)->size(0))))
  {
    {
      return _446_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _448_newvals = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_447_newsize)));
      _checked_ptr_1<int32_t> _ptr__448_newvals(_448_newvals ? _448_newvals->raw() : nullptr,_448_newvals ? _448_newvals->size(0) : 0);
      if ((_447_newsize > (int)((_446_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_446_values,(int)0,_448_newvals,(int)0,(int)((_446_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_446_values,(int)0,_448_newvals,(int)0,_447_newsize);
        }
      }
      return _448_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:407:6-418:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< double,1 > > _449_values,
    int32_t _450_newsize) { return mosek::fusion::p_CommonTools::resize(_449_values,_450_newsize); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _449_values,int32_t _450_newsize)
{
  _checked_ptr_1<double> _ptr__449_values(_449_values ? _449_values->raw() : nullptr, _449_values ? _449_values->size(0) : 0);
  if ((_450_newsize == (int)((_449_values)->size(0))))
  {
    {
      return _449_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _451_newvals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_450_newsize)));
      _checked_ptr_1<double> _ptr__451_newvals(_451_newvals ? _451_newvals->raw() : nullptr,_451_newvals ? _451_newvals->size(0) : 0);
      if ((_450_newsize > (int)((_449_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_449_values,(int)0,_451_newvals,(int)0,(int)((_449_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_449_values,(int)0,_451_newvals,(int)0,_450_newsize);
        }
      }
      return _451_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.binarySearch
// Method mosek.fusion.CommonTools.binarySearch @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:389:6-405:7
int32_t mosek::fusion::CommonTools::binarySearch
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _452_values,
    int32_t _453_target) { return mosek::fusion::p_CommonTools::binarySearch(_452_values,_453_target); }
int32_t mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int32_t,1 > > _452_values,int32_t _453_target)
{
  _checked_ptr_1<int32_t> _ptr__452_values(_452_values ? _452_values->raw() : nullptr, _452_values ? _452_values->size(0) : 0);
  int32_t _454_i0 = (int)0;
  int32_t _455_i1 = (int)((_452_values)->size(0));
  if ((_ptr__452_values[_454_i0] == _453_target))
  {
    {
      return _454_i0;
    }
  }
  else if((_ptr__452_values[(_455_i1 - (int)1)] == _453_target))
  {
    {
      return (_455_i1 - (int)1);
    }
  }
  {}
  while ( (_454_i0 < (_455_i1 - (int)1)) )
  {
    {
      int32_t _456_p = ((_455_i1 - _454_i0) / (int)2);
      if ((_453_target < _ptr__452_values[_456_p]))
      {
        {
          _454_i0 = safe_add( _456_p,(int)1 );
        }
      }
      else if((_453_target > _ptr__452_values[_456_p]))
      {
        {
          _455_i1 = _456_p;
        }
      }
      else
      {
        {
          return _456_p;
        }
      }
    }
  }
  return (-(int)1);
}
// End mosek.fusion.CommonTools.binarySearch

// Begin mosek.fusion.CommonTools.binarySearch
// Method mosek.fusion.CommonTools.binarySearch @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:381:6-387:7
int32_t mosek::fusion::CommonTools::binarySearch
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _457_values,
    int64_t _458_target) { return mosek::fusion::p_CommonTools::binarySearch(_457_values,_458_target); }
int32_t mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int64_t,1 > > _457_values,int64_t _458_target)
{
  _checked_ptr_1<int64_t> _ptr__457_values(_457_values ? _457_values->raw() : nullptr, _457_values ? _457_values->size(0) : 0);
  int32_t _459_i = ::mosek::fusion::p_CommonTools::binarySearchL(_457_values,_458_target);
  if (((_459_i < (int)((_457_values)->size(0))) && (_ptr__457_values[_459_i] == _458_target)))
  {
    {
      return _459_i;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
// End mosek.fusion.CommonTools.binarySearch

// Begin mosek.fusion.CommonTools.binarySearchR
// Method mosek.fusion.CommonTools.binarySearchR @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:365:6-379:7
int32_t mosek::fusion::CommonTools::binarySearchR
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _460_values,
    int64_t _461_target) { return mosek::fusion::p_CommonTools::binarySearchR(_460_values,_461_target); }
int32_t mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< int64_t,1 > > _460_values,int64_t _461_target)
{
  _checked_ptr_1<int64_t> _ptr__460_values(_460_values ? _460_values->raw() : nullptr, _460_values ? _460_values->size(0) : 0);
  int32_t _462_i0 = (int)0;
  int32_t _463_i1 = (int)((_460_values)->size(0));
  if ((_ptr__460_values[_462_i0] > _461_target))
  {
    {
      return _462_i0;
    }
  }
  {}
  while ( (_462_i0 < (_463_i1 - (int)1)) )
  {
    {
      int32_t _464_p = (safe_add( _463_i1,_462_i0 ) / (int)2);
      if ((_461_target >= _ptr__460_values[_464_p]))
      {
        {
          _462_i0 = _464_p;
        }
      }
      else
      {
        {
          _463_i1 = _464_p;
        }
      }
    }
  }
  return _463_i1;
}
// End mosek.fusion.CommonTools.binarySearchR

// Begin mosek.fusion.CommonTools.binarySearchL
// Method mosek.fusion.CommonTools.binarySearchL @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:348:6-362:7
int32_t mosek::fusion::CommonTools::binarySearchL
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _465_values,
    int64_t _466_target) { return mosek::fusion::p_CommonTools::binarySearchL(_465_values,_466_target); }
int32_t mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< int64_t,1 > > _465_values,int64_t _466_target)
{
  _checked_ptr_1<int64_t> _ptr__465_values(_465_values ? _465_values->raw() : nullptr, _465_values ? _465_values->size(0) : 0);
  int32_t _467_i0 = (int)0;
  int32_t _468_i1 = (int)((_465_values)->size(0));
  if ((_466_target <= _ptr__465_values[_467_i0]))
  {
    {
      return _467_i0;
    }
  }
  {}
  while ( (_467_i0 < (_468_i1 - (int)1)) )
  {
    {
      int32_t _469_p = (safe_add( _468_i1,_467_i0 ) / (int)2);
      if ((_ptr__465_values[_469_p] < _466_target))
      {
        {
          _467_i0 = _469_p;
        }
      }
      else
      {
        {
          _468_i1 = _469_p;
        }
      }
    }
  }
  return _468_i1;
}
// End mosek.fusion.CommonTools.binarySearchL

// Begin mosek.fusion.CommonTools.ndIncr
// Method mosek.fusion.CommonTools.ndIncr @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:335:6-344:7
void mosek::fusion::CommonTools::ndIncr
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _470_ndidx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _471_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _472_last) { mosek::fusion::p_CommonTools::ndIncr(_470_ndidx,_471_first,_472_last); }
void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int32_t,1 > > _470_ndidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _471_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _472_last)
{
  _checked_ptr_1<int32_t> _ptr__470_ndidx(_470_ndidx ? _470_ndidx->raw() : nullptr, _470_ndidx ? _470_ndidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__471_first(_471_first ? _471_first->raw() : nullptr, _471_first ? _471_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__472_last(_472_last ? _472_last->raw() : nullptr, _472_last ? _472_last->size(0) : 0);
  int32_t _473_i = ((int)((_470_ndidx)->size(0)) - (int)1);
  ++ _ptr__470_ndidx[_473_i];
  while ( ((_473_i > (int)0) && (_ptr__470_ndidx[_473_i] >= _ptr__472_last[_473_i])) )
  {
    {
      _ptr__470_ndidx[_473_i] = _ptr__471_first[_473_i];
      ++ _ptr__470_ndidx[(_473_i - (int)1)];
    }
  }
}
// End mosek.fusion.CommonTools.ndIncr

// Begin mosek.fusion.CommonTools.transposeTriplets
// Method mosek.fusion.CommonTools.transposeTriplets @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:288:6-333:7
void mosek::fusion::CommonTools::transposeTriplets
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _474_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _475_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _476_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _477_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _478_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _479_tval_,
    int64_t _480_nelm,
    int32_t _481_dimi,
    int32_t _482_dimj) { mosek::fusion::p_CommonTools::transposeTriplets(_474_subi,_475_subj,_476_val,_477_tsubi_,_478_tsubj_,_479_tval_,_480_nelm,_481_dimi,_482_dimj); }
void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _474_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _475_subj,std::shared_ptr< monty::ndarray< double,1 > > _476_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _477_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _478_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _479_tval_,int64_t _480_nelm,int32_t _481_dimi,int32_t _482_dimj)
{
  _checked_ptr_1<int32_t> _ptr__474_subi(_474_subi ? _474_subi->raw() : nullptr, _474_subi ? _474_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__475_subj(_475_subj ? _475_subj->raw() : nullptr, _475_subj ? _475_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__476_val(_476_val ? _476_val->raw() : nullptr, _476_val ? _476_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _483_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _481_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__483_rptrb(_483_rptrb ? _483_rptrb->raw() : nullptr,_483_rptrb ? _483_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _484_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _482_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__484_cptrb(_484_cptrb ? _484_cptrb->raw() : nullptr,_484_cptrb ? _484_cptrb->size(0) : 0);
  {
    int64_t _485_i = (int64_t)0;
    for(;(_485_i < _480_nelm);++ _485_i)
    {
      {
        _ptr__484_cptrb[safe_add( _ptr__475_subj[_485_i],(int)2 )] = safe_add( _ptr__484_cptrb[safe_add( _ptr__475_subj[_485_i],(int)2 )],(int)1 );
        _ptr__483_rptrb[safe_add( _ptr__474_subi[_485_i],(int)2 )] = safe_add( _ptr__483_rptrb[safe_add( _ptr__474_subi[_485_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _486_i = (int)1;
    for(;(_486_i < _481_dimi);++ _486_i)
    {
      {
        _ptr__483_rptrb[safe_add( _486_i,(int)1 )] = safe_add( _ptr__483_rptrb[safe_add( _486_i,(int)1 )],_ptr__483_rptrb[_486_i] );
      }
    }
  }
  {
    int32_t _487_i = (int)1;
    for(;(_487_i < _482_dimj);++ _487_i)
    {
      {
        _ptr__484_cptrb[safe_add( _487_i,(int)1 )] = safe_add( _ptr__484_cptrb[safe_add( _487_i,(int)1 )],_ptr__484_cptrb[_487_i] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _488_tsubi = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_480_nelm)));
  _checked_ptr_1<int64_t> _ptr__488_tsubi(_488_tsubi ? _488_tsubi->raw() : nullptr,_488_tsubi ? _488_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _489_tsubj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_480_nelm)));
  _checked_ptr_1<int64_t> _ptr__489_tsubj(_489_tsubj ? _489_tsubj->raw() : nullptr,_489_tsubj ? _489_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _490_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_480_nelm)));
  _checked_ptr_1<double> _ptr__490_tval(_490_tval ? _490_tval->raw() : nullptr,_490_tval ? _490_tval->size(0) : 0);
  int32_t _9273_ = (int)0;
  int32_t _9274_ = _481_dimi;
  for (int32_t _491_i = _9273_; _491_i < _9274_; ++_491_i)
  {
    {
      {
        int64_t _492_k = _ptr__483_rptrb[_491_i];
        for(;(_492_k < _ptr__483_rptrb[safe_add( _491_i,(int)1 )]);++ _492_k)
        {
          {
            int32_t _493_j = _ptr__475_subj[_492_k];
            int64_t _494_cidx = _ptr__484_cptrb[_493_j];
            _ptr__488_tsubi[_494_cidx] = _491_i;
            _ptr__489_tsubj[_494_cidx] = _493_j;
            _ptr__490_tval[_494_cidx] = _ptr__476_val[_492_k];
            _ptr__484_cptrb[_493_j] = safe_add( _494_cidx,(int)1 );
          }
        }
      }
    }
  }
  ((*_477_tsubi_)((int)0)) = _489_tsubj;
  ((*_478_tsubj_)((int)0)) = _488_tsubi;
  ((*_479_tval_)((int)0)) = _490_tval;
}
// End mosek.fusion.CommonTools.transposeTriplets

// Begin mosek.fusion.CommonTools.transposeTriplets
// Method mosek.fusion.CommonTools.transposeTriplets @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:240:6-285:7
void mosek::fusion::CommonTools::transposeTriplets
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _495_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _496_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _497_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _498_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _499_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _500_tval_,
    int64_t _501_nelm,
    int32_t _502_dimi,
    int32_t _503_dimj) { mosek::fusion::p_CommonTools::transposeTriplets(_495_subi,_496_subj,_497_val,_498_tsubi_,_499_tsubj_,_500_tval_,_501_nelm,_502_dimi,_503_dimj); }
void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _495_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _496_subj,std::shared_ptr< monty::ndarray< double,1 > > _497_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _498_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _499_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _500_tval_,int64_t _501_nelm,int32_t _502_dimi,int32_t _503_dimj)
{
  _checked_ptr_1<int32_t> _ptr__495_subi(_495_subi ? _495_subi->raw() : nullptr, _495_subi ? _495_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__496_subj(_496_subj ? _496_subj->raw() : nullptr, _496_subj ? _496_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__497_val(_497_val ? _497_val->raw() : nullptr, _497_val ? _497_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _504_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _502_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__504_rptrb(_504_rptrb ? _504_rptrb->raw() : nullptr,_504_rptrb ? _504_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _505_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _503_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__505_cptrb(_505_cptrb ? _505_cptrb->raw() : nullptr,_505_cptrb ? _505_cptrb->size(0) : 0);
  {
    int64_t _506_i = (int64_t)0;
    for(;(_506_i < _501_nelm);++ _506_i)
    {
      {
        _ptr__505_cptrb[safe_add( _ptr__496_subj[_506_i],(int)2 )] = safe_add( _ptr__505_cptrb[safe_add( _ptr__496_subj[_506_i],(int)2 )],(int)1 );
        _ptr__504_rptrb[safe_add( _ptr__495_subi[_506_i],(int)2 )] = safe_add( _ptr__504_rptrb[safe_add( _ptr__495_subi[_506_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _507_i = (int)1;
    for(;(_507_i < _502_dimi);++ _507_i)
    {
      {
        _ptr__504_rptrb[safe_add( _507_i,(int)1 )] = safe_add( _ptr__504_rptrb[safe_add( _507_i,(int)1 )],_ptr__504_rptrb[_507_i] );
      }
    }
  }
  {
    int32_t _508_i = (int)1;
    for(;(_508_i < _503_dimj);++ _508_i)
    {
      {
        _ptr__505_cptrb[safe_add( _508_i,(int)1 )] = safe_add( _ptr__505_cptrb[safe_add( _508_i,(int)1 )],_ptr__505_cptrb[_508_i] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _509_tsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_501_nelm)));
  _checked_ptr_1<int32_t> _ptr__509_tsubi(_509_tsubi ? _509_tsubi->raw() : nullptr,_509_tsubi ? _509_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _510_tsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_501_nelm)));
  _checked_ptr_1<int32_t> _ptr__510_tsubj(_510_tsubj ? _510_tsubj->raw() : nullptr,_510_tsubj ? _510_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _511_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_501_nelm)));
  _checked_ptr_1<double> _ptr__511_tval(_511_tval ? _511_tval->raw() : nullptr,_511_tval ? _511_tval->size(0) : 0);
  {
    int32_t _512_i = (int)0;
    for(;(_512_i < _502_dimi);++ _512_i)
    {
      {
        int64_t _9275_ = _ptr__504_rptrb[_512_i];
        int64_t _9276_ = _ptr__504_rptrb[safe_add( _512_i,(int)1 )];
        for (int64_t _513_k = _9275_; _513_k < _9276_; ++_513_k)
        {
          {
            int32_t _514_j = _ptr__496_subj[_513_k];
            int64_t _515_cidx = _ptr__505_cptrb[_514_j];
            _ptr__509_tsubi[_515_cidx] = _512_i;
            _ptr__510_tsubj[_515_cidx] = _514_j;
            _ptr__511_tval[_515_cidx] = _ptr__497_val[_513_k];
            _ptr__505_cptrb[_514_j] = safe_add( _515_cidx,(int)1 );
          }
        }
      }
    }
  }
  ((*_498_tsubi_)((int)0)) = _510_tsubj;
  ((*_499_tsubj_)((int)0)) = _509_tsubi;
  ((*_500_tval_)((int)0)) = _511_tval;
}
// End mosek.fusion.CommonTools.transposeTriplets

// Begin mosek.fusion.CommonTools.tripletSort
// Method mosek.fusion.CommonTools.tripletSort @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:114:6-213:7
void mosek::fusion::CommonTools::tripletSort
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _516_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _517_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _518_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _519_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _520_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _521_tval_,
    int64_t _522_nelm,
    int32_t _523_dimi,
    int32_t _524_dimj) { mosek::fusion::p_CommonTools::tripletSort(_516_subi,_517_subj,_518_val,_519_tsubi_,_520_tsubj_,_521_tval_,_522_nelm,_523_dimi,_524_dimj); }
void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int32_t,1 > > _516_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _517_subj,std::shared_ptr< monty::ndarray< double,1 > > _518_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _519_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _520_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _521_tval_,int64_t _522_nelm,int32_t _523_dimi,int32_t _524_dimj)
{
  _checked_ptr_1<int32_t> _ptr__516_subi(_516_subi ? _516_subi->raw() : nullptr, _516_subi ? _516_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__517_subj(_517_subj ? _517_subj->raw() : nullptr, _517_subj ? _517_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__518_val(_518_val ? _518_val->raw() : nullptr, _518_val ? _518_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _525_cols = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_522_nelm)));
  _checked_ptr_1<int32_t> _ptr__525_cols(_525_cols ? _525_cols->raw() : nullptr,_525_cols ? _525_cols->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _526_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _524_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__526_cptrb(_526_cptrb ? _526_cptrb->raw() : nullptr,_526_cptrb ? _526_cptrb->size(0) : 0);
  int64_t _9277_ = (int64_t)0;
  int64_t _9278_ = _522_nelm;
  for (int64_t _527_i = _9277_; _527_i < _9278_; ++_527_i)
  {
    {
      _ptr__526_cptrb[safe_add( _ptr__517_subj[_527_i],(int)2 )] = safe_add( _ptr__526_cptrb[safe_add( _ptr__517_subj[_527_i],(int)2 )],(int)1 );
    }
  }
  int32_t _9279_ = (int)1;
  int32_t _9280_ = _524_dimj;
  for (int32_t _528_i = _9279_; _528_i < _9280_; ++_528_i)
  {
    {
      _ptr__526_cptrb[safe_add( _528_i,(int)1 )] = safe_add( _ptr__526_cptrb[safe_add( _528_i,(int)1 )],_ptr__526_cptrb[_528_i] );
    }
  }
  int32_t _9281_ = (int)0;
  int32_t _9282_ = (int32_t)_522_nelm;
  for (int32_t _529_i = _9281_; _529_i < _9282_; ++_529_i)
  {
    {
      int32_t _530_cidx = _ptr__517_subj[_529_i];
      _ptr__525_cols[_ptr__526_cptrb[safe_add( _530_cidx,(int)1 )]] = _529_i;
      _ptr__526_cptrb[safe_add( _530_cidx,(int)1 )] = safe_add( _ptr__526_cptrb[safe_add( _530_cidx,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _531_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _523_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__531_rptrb(_531_rptrb ? _531_rptrb->raw() : nullptr,_531_rptrb ? _531_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _532_rows = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_522_nelm)));
  _checked_ptr_1<int32_t> _ptr__532_rows(_532_rows ? _532_rows->raw() : nullptr,_532_rows ? _532_rows->size(0) : 0);
  {
    int32_t _533_i = (int)0;
    for(;(_533_i < _522_nelm);++ _533_i)
    {
      {
        _ptr__531_rptrb[safe_add( _ptr__516_subi[_533_i],(int)2 )] = safe_add( _ptr__531_rptrb[safe_add( _ptr__516_subi[_533_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _534_i = (int)1;
    for(;(_534_i < _523_dimi);++ _534_i)
    {
      {
        _ptr__531_rptrb[safe_add( _534_i,(int)1 )] = safe_add( _ptr__531_rptrb[safe_add( _534_i,(int)1 )],_ptr__531_rptrb[_534_i] );
      }
    }
  }
  {
    int32_t _535_j = (int)0;
    for(;(_535_j < _524_dimj);++ _535_j)
    {
      {
        {
          int64_t _536_i = _ptr__526_cptrb[_535_j];
          for(;(_536_i < _ptr__526_cptrb[safe_add( _535_j,(int)1 )]);++ _536_i)
          {
            {
              int32_t _537_ridx = _ptr__516_subi[_ptr__525_cols[_536_i]];
              _ptr__532_rows[_ptr__531_rptrb[safe_add( _537_ridx,(int)1 )]] = _ptr__525_cols[_536_i];
              _ptr__531_rptrb[safe_add( _537_ridx,(int)1 )] = safe_add( _ptr__531_rptrb[safe_add( _537_ridx,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int32_t _538_nunique = (int)1;
  {
    int32_t _539_si = _ptr__516_subi[_ptr__532_rows[(int)0]];
    int32_t _540_sj = _ptr__517_subj[_ptr__532_rows[(int)0]];
    {
      int32_t _541_i = (int)1;
      for(;(_541_i < _522_nelm);++ _541_i)
      {
        {
          int32_t _542_idx = _ptr__532_rows[_541_i];
          if (((_539_si != _ptr__516_subi[_542_idx]) || (_540_sj != _ptr__517_subj[_542_idx])))
          {
            {
              _539_si = _ptr__516_subi[_542_idx];
              _540_sj = _ptr__517_subj[_542_idx];
              ++ _538_nunique;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _543_tsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_538_nunique)));
  _checked_ptr_1<int32_t> _ptr__543_tsubi(_543_tsubi ? _543_tsubi->raw() : nullptr,_543_tsubi ? _543_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _544_tsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_538_nunique)));
  _checked_ptr_1<int32_t> _ptr__544_tsubj(_544_tsubj ? _544_tsubj->raw() : nullptr,_544_tsubj ? _544_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _545_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_538_nunique)));
  _checked_ptr_1<double> _ptr__545_tval(_545_tval ? _545_tval->raw() : nullptr,_545_tval ? _545_tval->size(0) : 0);
  {
    int32_t _546_idx = _ptr__532_rows[(int)0];
    _ptr__543_tsubi[(int)0] = _ptr__516_subi[_546_idx];
    _ptr__544_tsubj[(int)0] = _ptr__517_subj[_546_idx];
    _ptr__545_tval[(int)0] = _ptr__518_val[_546_idx];
  }
  int32_t _547_di = (int)1;
  int32_t _9283_ = (int)1;
  int64_t _9284_ = _522_nelm;
  for (int64_t _548_i = _9283_; _548_i < _9284_; ++_548_i)
  {
    {
      int32_t _549_idx = _ptr__532_rows[_548_i];
      if (((_ptr__543_tsubi[(_547_di - (int)1)] == _ptr__516_subi[_549_idx]) && (_ptr__544_tsubj[(_547_di - (int)1)] == _ptr__517_subj[_549_idx])))
      {
        {
          _ptr__545_tval[(_547_di - (int)1)] = (_ptr__545_tval[(_547_di - (int)1)] + _ptr__518_val[_549_idx]);
        }
      }
      else
      {
        {
          _ptr__543_tsubi[_547_di] = _ptr__516_subi[_549_idx];
          _ptr__544_tsubj[_547_di] = _ptr__517_subj[_549_idx];
          _ptr__545_tval[_547_di] = _ptr__518_val[_549_idx];
          ++ _547_di;
        }
      }
    }
  }
  ((*_519_tsubi_)((int)0)) = _543_tsubi;
  ((*_520_tsubj_)((int)0)) = _544_tsubj;
  ((*_521_tval_)((int)0)) = _545_tval;
}
// End mosek.fusion.CommonTools.tripletSort

// Begin mosek.fusion.CommonTools.argMSort
// Method mosek.fusion.CommonTools.argMSort @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:67:6-87:7
void mosek::fusion::CommonTools::argMSort
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _550_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _551_vals) { mosek::fusion::p_CommonTools::argMSort(_550_idx,_551_vals); }
void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int32_t,1 > > _550_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _551_vals)
{
  _checked_ptr_1<int32_t> _ptr__550_idx(_550_idx ? _550_idx->raw() : nullptr, _550_idx ? _550_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__551_vals(_551_vals ? _551_vals->raw() : nullptr, _551_vals ? _551_vals->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _552_temp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_550_idx)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__552_temp(_552_temp ? _552_temp->raw() : nullptr,_552_temp ? _552_temp->size(0) : 0);
  bool _553_alt = false;
  {
    int32_t _554_intvlen = (int)1;
    for(;(_554_intvlen < (int)((_550_idx)->size(0)));_554_intvlen *= (int)2)
    {
      {
        _553_alt = (!_553_alt);
        int32_t _9285_ = (int)0;
        int32_t _9286_ = (int)((_550_idx)->size(0));
        int32_t _9287_ = safe_mul( _554_intvlen,(int)2 );
        for (int32_t _555_i = _9285_; _555_i < _9286_; _555_i += _9287_)
        {
          {
            if (_553_alt)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_550_idx,_552_temp,_551_vals,_555_i,safe_add( _555_i,_554_intvlen ),safe_add( _555_i,safe_mul( (int)2,_554_intvlen ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_552_temp,_550_idx,_551_vals,_555_i,safe_add( _555_i,_554_intvlen ),safe_add( _555_i,safe_mul( (int)2,_554_intvlen ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_553_alt)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_552_temp,(int)0,_550_idx,(int)0,(int)((_550_idx)->size(0)));
    }
  }
  {}
}
// End mosek.fusion.CommonTools.argMSort

// Begin mosek.fusion.CommonTools.mergeInto
// Method mosek.fusion.CommonTools.mergeInto @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:29:6-54:7
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int32_t,1 > > _556_src,std::shared_ptr< monty::ndarray< int32_t,1 > > _557_tgt,std::shared_ptr< monty::ndarray< int32_t,1 > > _558_vals,int32_t _559_si0,int32_t _560_si1_,int32_t _561_si2_)
{
  _checked_ptr_1<int32_t> _ptr__556_src(_556_src ? _556_src->raw() : nullptr, _556_src ? _556_src->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__557_tgt(_557_tgt ? _557_tgt->raw() : nullptr, _557_tgt ? _557_tgt->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__558_vals(_558_vals ? _558_vals->raw() : nullptr, _558_vals ? _558_vals->size(0) : 0);
  int32_t _9288_;
  bool _9289_ = (_561_si2_ > (int)((_556_src)->size(0)));
  if (_9289_)
  {
    _9288_ = (int)((_556_src)->size(0));
  }
  else
  {
    _9288_ = _561_si2_;
  }
  int32_t _562_si2 = _9288_;
  int32_t _9290_;
  bool _9291_ = (_560_si1_ > _562_si2);
  if (_9291_)
  {
    _9290_ = _562_si2;
  }
  else
  {
    _9290_ = _560_si1_;
  }
  int32_t _563_si1 = _9290_;
  if ((_563_si1 == _562_si2))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_556_src,_559_si0,_557_tgt,_559_si0,(_563_si1 - _559_si0));
    }
  }
  else
  {
    {
      int32_t _564_i0 = _559_si0;
      int32_t _565_i1 = _563_si1;
      int32_t _566_i;
      {
        _566_i = _559_si0;
        for(;((_564_i0 < _563_si1) && (_565_i1 < _562_si2));++ _566_i)
        {
          {
            if ((_ptr__558_vals[_ptr__556_src[_564_i0]] < _ptr__558_vals[_ptr__556_src[_565_i1]]))
            {
              {
                _ptr__557_tgt[_566_i] = _ptr__556_src[_564_i0];
                ++ _564_i0;
              }
            }
            else
            {
              {
                _ptr__557_tgt[_566_i] = _ptr__556_src[_565_i1];
                ++ _565_i1;
              }
            }
          }
        }
      }
      while ( (_564_i0 < _563_si1) )
      {
        {
          _ptr__557_tgt[_566_i] = _ptr__556_src[_564_i0];
          ++ _564_i0;
          ++ _566_i;
        }
      }
      while ( (_565_i1 < _562_si2) )
      {
        {
          _ptr__557_tgt[_566_i] = _ptr__556_src[_565_i1];
          ++ _565_i1;
          ++ _566_i;
        }
      }
    }
  }
}
// End mosek.fusion.CommonTools.mergeInto

// Begin mosek.fusion.CommonTools.argQsort
// Method mosek.fusion.CommonTools.argQsort @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:16:6-22:7
void mosek::fusion::CommonTools::argQsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _567_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _568_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _569_vals2,
    int64_t _570_first,
    int64_t _571_last) { mosek::fusion::p_CommonTools::argQsort(_567_idx,_568_vals1,_569_vals2,_570_first,_571_last); }
void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _567_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _568_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _569_vals2,int64_t _570_first,int64_t _571_last)
{
  _checked_ptr_1<int64_t> _ptr__567_idx(_567_idx ? _567_idx->raw() : nullptr, _567_idx ? _567_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__568_vals1(_568_vals1 ? _568_vals1->raw() : nullptr, _568_vals1 ? _568_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__569_vals2(_569_vals2 ? _569_vals2->raw() : nullptr, _569_vals2 ? _569_vals2->size(0) : 0);
  if ((NULL == _569_vals2.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_567_idx,_568_vals1,_570_first,_571_last);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_567_idx,_568_vals1,_569_vals2,_570_first,_571_last);
    }
  }
}
// End mosek.fusion.CommonTools.argQsort

// Begin mosek.fusion.CommonTools.argQsort
// Method mosek.fusion.CommonTools.argQsort @ bld/docker-rockylinux-8/final/default/src/fusion/CommonUtil.mbi:8:6-14:7
void mosek::fusion::CommonTools::argQsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _572_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _573_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _574_vals2,
    int64_t _575_first,
    int64_t _576_last) { mosek::fusion::p_CommonTools::argQsort(_572_idx,_573_vals1,_574_vals2,_575_first,_576_last); }
void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _572_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _573_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _574_vals2,int64_t _575_first,int64_t _576_last)
{
  _checked_ptr_1<int64_t> _ptr__572_idx(_572_idx ? _572_idx->raw() : nullptr, _572_idx ? _572_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__573_vals1(_573_vals1 ? _573_vals1->raw() : nullptr, _573_vals1 ? _573_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__574_vals2(_574_vals2 ? _574_vals2->raw() : nullptr, _574_vals2 ? _574_vals2->size(0) : 0);
  if ((NULL == _574_vals2.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_572_idx,_573_vals1,_575_first,_576_last);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_572_idx,_573_vals1,_574_vals2,_575_first,_576_last);
    }
  }
}
// End mosek.fusion.CommonTools.argQsort

void mosek::fusion::p_CommonTools::destroy()
{
}
void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }
// } class CommonTools
// class SolutionStruct { // @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5406:4-5741:5
mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }
mosek::fusion::p_SolutionStruct::p_SolutionStruct
  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis)
{}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_accy() { return _impl->accy; }
void mosek::fusion::SolutionStruct::set_accy(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->accy = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_accx() { return _impl->accx; }
void mosek::fusion::SolutionStruct::set_accx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->accx = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::SolutionStruct::get_accptr() { return _impl->accptr; }
void mosek::fusion::SolutionStruct::set_accptr(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->accptr = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int32_t _val) { _impl->sol_numbarvar = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numaccelm() { return _impl->sol_numaccelm; }
void mosek::fusion::SolutionStruct::set_sol_numaccelm(int32_t _val) { _impl->sol_numaccelm = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numacc() { return _impl->sol_numacc; }
void mosek::fusion::SolutionStruct::set_sol_numacc(int32_t _val) { _impl->sol_numacc = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int32_t _val) { _impl->sol_numvar = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int32_t _val) { _impl->sol_numcon = _val; }
// mosek.fusion.SolutionStruct.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5681:6-5740:7
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct
  (int32_t _577_numvar,
    int32_t _578_numcon,
    int32_t _579_numbarvar,
    int32_t _580_numacc,
    int32_t _581_numaccelm)
{ return new mosek::fusion::SolutionStruct(_577_numvar,_578_numcon,_579_numbarvar,_580_numacc,_581_numaccelm); }
mosek::fusion::SolutionStruct::SolutionStruct
  (int32_t _577_numvar,
    int32_t _578_numcon,
    int32_t _579_numbarvar,
    int32_t _580_numacc,
    int32_t _581_numaccelm) : 
   SolutionStruct(new mosek::fusion::p_SolutionStruct(this))
{ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_577_numvar,_578_numcon,_579_numbarvar,_580_numacc,_581_numaccelm); }
void mosek::fusion::p_SolutionStruct::_initialize  (int32_t _577_numvar,
    int32_t _578_numcon,
    int32_t _579_numbarvar,
    int32_t _580_numacc,
    int32_t _581_numaccelm)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _577_numvar;
    sol_numcon = _578_numcon;
    sol_numbarvar = _579_numbarvar;
    sol_numacc = _580_numacc;
    sol_numaccelm = _581_numaccelm;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    barx = nullptr;
    bars = nullptr;
    accx = nullptr;
    accy = nullptr;
    accptr = nullptr;
    if ((_577_numvar > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_577_numvar)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_577_numvar)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_577_numvar)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_577_numvar)));
      }
    }
    {}
    if ((_579_numbarvar > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_579_numbarvar)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_579_numbarvar)));
      }
    }
    {}
    if ((_578_numcon > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_578_numcon)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_578_numcon)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_578_numcon)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_578_numcon)));
      }
    }
    {}
    if ((_580_numacc > (int)0))
    {
      {
        accx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_581_numaccelm)));
        accy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_581_numaccelm)));
        accptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _580_numacc,(int)1 ))));
      }
    }
    {}
  }
}
// mosek.fusion.SolutionStruct.ctor

// mosek.fusion.SolutionStruct.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5648:6-5678:7
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct
  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _582_that)
{ return new mosek::fusion::SolutionStruct(_582_that); }
mosek::fusion::SolutionStruct::SolutionStruct
  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _582_that) : 
   SolutionStruct(new mosek::fusion::p_SolutionStruct(this))
{ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_582_that); }
void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _582_that)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->sol_numvar;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->sol_numbarvar;
    sol_numacc = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->sol_numacc;
    sol_numaccelm = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->sol_numaccelm;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _9292_;
    bool _9293_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->xc.get());
    if (_9293_)
    {
      _9292_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->xc);
    }
    else
    {
      _9292_ = nullptr;
    }
    xc = _9292_;
    std::shared_ptr< monty::ndarray< double,1 > > _9294_;
    bool _9295_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->xx.get());
    if (_9295_)
    {
      _9294_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->xx);
    }
    else
    {
      _9294_ = nullptr;
    }
    xx = _9294_;
    std::shared_ptr< monty::ndarray< double,1 > > _9296_;
    bool _9297_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->yx.get());
    if (_9297_)
    {
      _9296_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->yx);
    }
    else
    {
      _9296_ = nullptr;
    }
    yx = _9296_;
    std::shared_ptr< monty::ndarray< double,1 > > _9298_;
    bool _9299_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->slc.get());
    if (_9299_)
    {
      _9298_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->slc);
    }
    else
    {
      _9298_ = nullptr;
    }
    slc = _9298_;
    std::shared_ptr< monty::ndarray< double,1 > > _9300_;
    bool _9301_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->suc.get());
    if (_9301_)
    {
      _9300_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->suc);
    }
    else
    {
      _9300_ = nullptr;
    }
    suc = _9300_;
    std::shared_ptr< monty::ndarray< double,1 > > _9302_;
    bool _9303_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->y.get());
    if (_9303_)
    {
      _9302_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->y);
    }
    else
    {
      _9302_ = nullptr;
    }
    y = _9302_;
    std::shared_ptr< monty::ndarray< double,1 > > _9304_;
    bool _9305_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->barx.get());
    if (_9305_)
    {
      _9304_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->barx);
    }
    else
    {
      _9304_ = nullptr;
    }
    barx = _9304_;
    std::shared_ptr< monty::ndarray< double,1 > > _9306_;
    bool _9307_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->bars.get());
    if (_9307_)
    {
      _9306_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->bars);
    }
    else
    {
      _9306_ = nullptr;
    }
    bars = _9306_;
    std::shared_ptr< monty::ndarray< double,1 > > _9308_;
    bool _9309_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->slx.get());
    if (_9309_)
    {
      _9308_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->slx);
    }
    else
    {
      _9308_ = nullptr;
    }
    slx = _9308_;
    std::shared_ptr< monty::ndarray< double,1 > > _9310_;
    bool _9311_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->sux.get());
    if (_9311_)
    {
      _9310_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->sux);
    }
    else
    {
      _9310_ = nullptr;
    }
    sux = _9310_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9312_;
    bool _9313_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->accptr.get());
    if (_9313_)
    {
      _9312_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->accptr);
    }
    else
    {
      _9312_ = nullptr;
    }
    accptr = _9312_;
    std::shared_ptr< monty::ndarray< double,1 > > _9314_;
    bool _9315_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->accx.get());
    if (_9315_)
    {
      _9314_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->accx);
    }
    else
    {
      _9314_ = nullptr;
    }
    accx = _9314_;
    std::shared_ptr< monty::ndarray< double,1 > > _9316_;
    bool _9317_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->accy.get());
    if (_9317_)
    {
      _9316_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_582_that)->accy);
    }
    else
    {
      _9316_ = nullptr;
    }
    accy = _9316_;
  }
}
// mosek.fusion.SolutionStruct.ctor

// Begin mosek.fusion.SolutionStruct.clone
// Method mosek.fusion.SolutionStruct.clone @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5679:6-79
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone()
{
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
// End mosek.fusion.SolutionStruct.clone

// Begin mosek.fusion.SolutionStruct.resize
// Method mosek.fusion.SolutionStruct.resize @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5473:6-5643:7
void mosek::fusion::SolutionStruct :: resize(int32_t _583_numvar,int32_t _584_numcon,int32_t _585_numbarvar,int32_t _586_numacc,int32_t _587_numaccelm) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_583_numvar,_584_numcon,_585_numbarvar,_586_numacc,_587_numaccelm); }
void mosek::fusion::p_SolutionStruct::resize(int32_t _583_numvar,int32_t _584_numcon,int32_t _585_numbarvar,int32_t _586_numacc,int32_t _587_numaccelm)
{
  if ((_586_numacc <= (int)0))
  {
    {
      sol_numacc = (int)0;
    }
  }
  else if((_586_numacc <= ((int)((accptr)->size(0)) - (int)1)))
  {
    {
      sol_numacc = _586_numacc;
    }
  }
  else
  {
    {
      int32_t _588_newnum = safe_mul( ((int)((accptr)->size(0)) - (int)1),(int)2 );
      if ((_588_newnum < _586_numacc))
      {
        {
          _588_newnum = _586_numacc;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,1 > > _589_new_accptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _588_newnum,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__589_new_accptr(_589_new_accptr ? _589_new_accptr->raw() : nullptr,_589_new_accptr ? _589_new_accptr->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(accptr,(int)0,_589_new_accptr,(int)0,safe_add( _586_numacc,(int)1 ));
      accptr = _589_new_accptr;
      sol_numacc = _586_numacc;
    }
  }
  if ((_587_numaccelm <= (int)0))
  {
    {
      sol_numaccelm = (int)0;
    }
  }
  else if((_587_numaccelm > (int)((accx)->size(0))))
  {
    {
      sol_numaccelm = _587_numaccelm;
    }
  }
  else
  {
    {
      int32_t _590_newnum = safe_mul( (int)((accx)->size(0)),(int)2 );
      if ((_590_newnum < _587_numaccelm))
      {
        {
          _590_newnum = _587_numaccelm;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< double,1 > > _591_new_accx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_590_newnum)));
      _checked_ptr_1<double> _ptr__591_new_accx(_591_new_accx ? _591_new_accx->raw() : nullptr,_591_new_accx ? _591_new_accx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _592_new_accy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_590_newnum)));
      _checked_ptr_1<double> _ptr__592_new_accy(_592_new_accy ? _592_new_accy->raw() : nullptr,_592_new_accy ? _592_new_accy->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(accx,(int)0,_591_new_accx,(int)0,_587_numaccelm);
      ::mosek::fusion::Utils::Tools::arraycopy(accy,(int)0,_592_new_accy,(int)0,_587_numaccelm);
      accx = _591_new_accx;
      accy = _592_new_accy;
      sol_numaccelm = _587_numaccelm;
    }
  }
  if ((_585_numbarvar < (int)0))
  {
    {
    }
  }
  else if((_585_numbarvar <= sol_numbarvar))
  {
    {
      sol_numbarvar = _585_numbarvar;
    }
  }
  else if((_585_numbarvar <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int32_t _593_newsize;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _585_numbarvar,(int)100 )))
      {
        {
          _593_newsize = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _593_newsize = safe_add( _585_numbarvar,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_593_newsize);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_593_newsize);
      sol_numbarvar = _593_newsize;
    }
  }
  if ((_583_numvar < (int)0))
  {
    {
    }
  }
  else if((_583_numvar <= sol_numvar))
  {
    {
      sol_numvar = _583_numvar;
    }
  }
  else if((_583_numvar <= (int)((xx)->size(0))))
  {
    {
      int32_t _9318_ = sol_numvar;
      int32_t _9319_ = _583_numvar;
      for (int32_t _594_i = _9318_; _594_i < _9319_; ++_594_i)
      {
        {
          ((*slx)(_594_i)) = 0.0;
          ((*sux)(_594_i)) = 0.0;
          ((*xx)(_594_i)) = 0.0;
          ((*yx)(_594_i)) = 0.0;
        }
      }
      sol_numvar = _583_numvar;
    }
  }
  else
  {
    {
      int32_t _595_newsize;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _583_numvar,(int)100 )))
      {
        {
          _595_newsize = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _595_newsize = safe_add( _583_numvar,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _596_newslx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_595_newsize)));
      _checked_ptr_1<double> _ptr__596_newslx(_596_newslx ? _596_newslx->raw() : nullptr,_596_newslx ? _596_newslx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_596_newslx,(int)0,(int)((slx)->size(0)));
      slx = _596_newslx;
      std::shared_ptr< monty::ndarray< double,1 > > _597_newsux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_595_newsize)));
      _checked_ptr_1<double> _ptr__597_newsux(_597_newsux ? _597_newsux->raw() : nullptr,_597_newsux ? _597_newsux->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_597_newsux,(int)0,(int)((sux)->size(0)));
      sux = _597_newsux;
      std::shared_ptr< monty::ndarray< double,1 > > _598_newxx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_595_newsize)));
      _checked_ptr_1<double> _ptr__598_newxx(_598_newxx ? _598_newxx->raw() : nullptr,_598_newxx ? _598_newxx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_598_newxx,(int)0,(int)((xx)->size(0)));
      xx = _598_newxx;
      std::shared_ptr< monty::ndarray< double,1 > > _599_newyx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_595_newsize)));
      _checked_ptr_1<double> _ptr__599_newyx(_599_newyx ? _599_newyx->raw() : nullptr,_599_newyx ? _599_newyx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_599_newyx,(int)0,(int)((yx)->size(0)));
      yx = _599_newyx;
      {
        int32_t _600_i = sol_numvar;
        for(;(_600_i < _583_numvar);++ _600_i)
        {
          {
            ((*slx)(_600_i)) = 0.0;
            ((*sux)(_600_i)) = 0.0;
            ((*xx)(_600_i)) = 0.0;
          }
        }
      }
      sol_numvar = _583_numvar;
    }
  }
  if ((_584_numcon < (int)0))
  {
    {
    }
  }
  else if((_584_numcon <= sol_numcon))
  {
    {
      sol_numcon = _584_numcon;
    }
  }
  else if((_584_numcon <= (int)((xx)->size(0))))
  {
    {
      int32_t _9320_ = sol_numcon;
      int32_t _9321_ = _584_numcon;
      for (int32_t _601_i = _9320_; _601_i < _9321_; ++_601_i)
      {
        {
          ((*slc)(_601_i)) = 0.0;
          ((*suc)(_601_i)) = 0.0;
          ((*xc)(_601_i)) = 0.0;
          ((*y)(_601_i)) = 0.0;
        }
      }
      sol_numcon = _584_numcon;
    }
  }
  else
  {
    {
      int32_t _602_newsize;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _584_numcon,(int)100 )))
      {
        {
          _602_newsize = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _602_newsize = safe_add( _584_numcon,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _603_newslc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_602_newsize)));
      _checked_ptr_1<double> _ptr__603_newslc(_603_newslc ? _603_newslc->raw() : nullptr,_603_newslc ? _603_newslc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_603_newslc,(int)0,(int)((slc)->size(0)));
      slc = _603_newslc;
      std::shared_ptr< monty::ndarray< double,1 > > _604_newsuc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_602_newsize)));
      _checked_ptr_1<double> _ptr__604_newsuc(_604_newsuc ? _604_newsuc->raw() : nullptr,_604_newsuc ? _604_newsuc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_604_newsuc,(int)0,(int)((suc)->size(0)));
      suc = _604_newsuc;
      std::shared_ptr< monty::ndarray< double,1 > > _605_newxc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_602_newsize)));
      _checked_ptr_1<double> _ptr__605_newxc(_605_newxc ? _605_newxc->raw() : nullptr,_605_newxc ? _605_newxc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_605_newxc,(int)0,(int)((xc)->size(0)));
      xc = _605_newxc;
      std::shared_ptr< monty::ndarray< double,1 > > _606_newy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_602_newsize)));
      _checked_ptr_1<double> _ptr__606_newy(_606_newy ? _606_newy->raw() : nullptr,_606_newy ? _606_newy->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_606_newy,(int)0,(int)((y)->size(0)));
      y = _606_newy;
      int32_t _9322_ = sol_numcon;
      int32_t _9323_ = _584_numcon;
      for (int32_t _607_i = _9322_; _607_i < _9323_; ++_607_i)
      {
        {
          ((*slc)(_607_i)) = 0.0;
          ((*suc)(_607_i)) = 0.0;
          ((*xc)(_607_i)) = 0.0;
          ((*y)(_607_i)) = 0.0;
        }
      }
      sol_numcon = _584_numcon;
    }
  }
}
// End mosek.fusion.SolutionStruct.resize

// Begin mosek.fusion.SolutionStruct.isDualAcceptable
// Method mosek.fusion.SolutionStruct.isDualAcceptable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5468:6-5471:7
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _608_acceptable_sol) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_608_acceptable_sol); }
bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _608_acceptable_sol)
{
  return isAcceptable(dstatus,_608_acceptable_sol);
}
// End mosek.fusion.SolutionStruct.isDualAcceptable

// Begin mosek.fusion.SolutionStruct.isPrimalAcceptable
// Method mosek.fusion.SolutionStruct.isPrimalAcceptable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5463:6-5466:7
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _609_acceptable_sol) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_609_acceptable_sol); }
bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _609_acceptable_sol)
{
  return isAcceptable(pstatus,_609_acceptable_sol);
}
// End mosek.fusion.SolutionStruct.isPrimalAcceptable

// Begin mosek.fusion.SolutionStruct.isAcceptable
// Method mosek.fusion.SolutionStruct.isAcceptable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5437:6-5461:7
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _610_stat,mosek::fusion::AccSolutionStatus _611_accstat)
{
  if ((_611_accstat == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_611_accstat == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_610_stat == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_611_accstat == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_610_stat == ::mosek::fusion::SolutionStatus::Optimal) || (_610_stat == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_611_accstat == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_610_stat == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
// End mosek.fusion.SolutionStruct.isAcceptable

void mosek::fusion::p_SolutionStruct::destroy()
{
  accy.reset();
  accx.reset();
  accptr.reset();
  yx.reset();
  sux.reset();
  slx.reset();
  bars.reset();
  barx.reset();
  y.reset();
  suc.reset();
  slc.reset();
  xx.reset();
  xc.reset();
}
void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }
// } class SolutionStruct
// class RowBlockManager { // @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4881:4-5401:5
mosek::fusion::RowBlockManager::RowBlockManager(mosek::fusion::p_RowBlockManager *_impl) : _impl(_impl) { /*std::cout << "RowBlockManager() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::RowBlockManager::~RowBlockManager() { delete _impl; _impl = nullptr; }
mosek::fusion::p_RowBlockManager::p_RowBlockManager
  (::mosek::fusion::RowBlockManager * _pubthis) :     _pubthis(_pubthis)
{}
int32_t mosek::fusion::RowBlockManager::get_varidx_used() { return _impl->varidx_used; }
void mosek::fusion::RowBlockManager::set_varidx_used(int32_t _val) { _impl->varidx_used = _val; }
int32_t mosek::fusion::RowBlockManager::get_code_used() { return _impl->code_used; }
void mosek::fusion::RowBlockManager::set_code_used(int32_t _val) { _impl->code_used = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::RowBlockManager::get_cconst() { return _impl->cconst; }
void mosek::fusion::RowBlockManager::set_cconst(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cconst = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_code() { return _impl->code; }
void mosek::fusion::RowBlockManager::set_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->code = _val; }
int32_t mosek::fusion::RowBlockManager::get_first_free_codeitem() { return _impl->first_free_codeitem; }
void mosek::fusion::RowBlockManager::set_first_free_codeitem(int32_t _val) { _impl->first_free_codeitem = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_param_code_sizes() { return _impl->param_code_sizes; }
void mosek::fusion::RowBlockManager::set_param_code_sizes(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->param_code_sizes = _val; }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::RowBlockManager::get_param_varidx() { return _impl->param_varidx; }
void mosek::fusion::RowBlockManager::set_param_varidx(std::shared_ptr< monty::ndarray< int64_t,1 > > _val) { _impl->param_varidx = _val; }
int32_t mosek::fusion::RowBlockManager::get_first_free_entry() { return _impl->first_free_entry; }
void mosek::fusion::RowBlockManager::set_first_free_entry(int32_t _val) { _impl->first_free_entry = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_code_ptr() { return _impl->row_code_ptr; }
void mosek::fusion::RowBlockManager::set_row_code_ptr(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_code_ptr = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_param_ptre() { return _impl->row_param_ptre; }
void mosek::fusion::RowBlockManager::set_row_param_ptre(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_param_ptre = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_param_ptrb() { return _impl->row_param_ptrb; }
void mosek::fusion::RowBlockManager::set_row_param_ptrb(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_param_ptrb = _val; }
monty::rc_ptr< ::mosek::fusion::LinkedBlocks > mosek::fusion::RowBlockManager::get_blocks() { return _impl->blocks; }
void mosek::fusion::RowBlockManager::set_blocks(monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _val) { _impl->blocks = _val; }
// mosek.fusion.RowBlockManager.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4944:6-4960:7
mosek::fusion::RowBlockManager::t mosek::fusion::p_RowBlockManager::_new_RowBlockManager
  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _612_that)
{ return new mosek::fusion::RowBlockManager(_612_that); }
mosek::fusion::RowBlockManager::RowBlockManager
  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _612_that) : 
   RowBlockManager(new mosek::fusion::p_RowBlockManager(this))
{ mosek::fusion::p_RowBlockManager::_get_impl(this)->_initialize(_612_that); }
void mosek::fusion::p_RowBlockManager::_initialize  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _612_that)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    blocks = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->blocks);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9324_;
    bool _9325_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->row_param_ptrb.get());
    if (_9325_)
    {
      _9324_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->row_param_ptrb);
    }
    else
    {
      _9324_ = nullptr;
    }
    row_param_ptrb = _9324_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9326_;
    bool _9327_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->row_param_ptre.get());
    if (_9327_)
    {
      _9326_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->row_param_ptre);
    }
    else
    {
      _9326_ = nullptr;
    }
    row_param_ptre = _9326_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9328_;
    bool _9329_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->row_code_ptr.get());
    if (_9329_)
    {
      _9328_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->row_code_ptr);
    }
    else
    {
      _9328_ = nullptr;
    }
    row_code_ptr = _9328_;
    first_free_entry = mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->first_free_entry;
    std::shared_ptr< monty::ndarray< int64_t,1 > > _9330_;
    bool _9331_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->param_varidx.get());
    if (_9331_)
    {
      _9330_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->param_varidx);
    }
    else
    {
      _9330_ = nullptr;
    }
    param_varidx = _9330_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9332_;
    bool _9333_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->param_code_sizes.get());
    if (_9333_)
    {
      _9332_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->param_code_sizes);
    }
    else
    {
      _9332_ = nullptr;
    }
    param_code_sizes = _9332_;
    first_free_codeitem = mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->first_free_codeitem;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9334_;
    bool _9335_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->code.get());
    if (_9335_)
    {
      _9334_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->code);
    }
    else
    {
      _9334_ = nullptr;
    }
    code = _9334_;
    std::shared_ptr< monty::ndarray< double,1 > > _9336_;
    bool _9337_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->cconst.get());
    if (_9337_)
    {
      _9336_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->cconst);
    }
    else
    {
      _9336_ = nullptr;
    }
    cconst = _9336_;
    code_used = mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->code_used;
    varidx_used = mosek::fusion::p_RowBlockManager::_get_impl(_612_that)->varidx_used;
  }
}
// mosek.fusion.RowBlockManager.ctor

// mosek.fusion.RowBlockManager.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4928:6-4942:7
mosek::fusion::RowBlockManager::t mosek::fusion::p_RowBlockManager::_new_RowBlockManager
  ()
{ return new mosek::fusion::RowBlockManager(); }
mosek::fusion::RowBlockManager::RowBlockManager
  () : 
   RowBlockManager(new mosek::fusion::p_RowBlockManager(this))
{ mosek::fusion::p_RowBlockManager::_get_impl(this)->_initialize(); }
void mosek::fusion::p_RowBlockManager::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    blocks = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    row_param_ptrb = nullptr;
    row_param_ptre = nullptr;
    row_code_ptr = nullptr;
    first_free_entry = (int)0;
    param_varidx = nullptr;
    param_code_sizes = nullptr;
    first_free_codeitem = (int)0;
    code = nullptr;
    cconst = nullptr;
    code_used = (int)0;
    varidx_used = (int)0;
  }
}
// mosek.fusion.RowBlockManager.ctor

// Begin mosek.fusion.RowBlockManager.num_parameterized
// Method mosek.fusion.RowBlockManager.num_parameterized @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5282:6-69
int32_t mosek::fusion::RowBlockManager :: num_parameterized() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->num_parameterized(); }
int32_t mosek::fusion::p_RowBlockManager::num_parameterized()
{
  return varidx_used;
}
// End mosek.fusion.RowBlockManager.num_parameterized

// Begin mosek.fusion.RowBlockManager.is_parameterized
// Method mosek.fusion.RowBlockManager.is_parameterized @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5281:6-69
bool mosek::fusion::RowBlockManager :: is_parameterized() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->is_parameterized(); }
bool mosek::fusion::p_RowBlockManager::is_parameterized()
{
  return (code_used > (int)0);
}
// End mosek.fusion.RowBlockManager.is_parameterized

// Begin mosek.fusion.RowBlockManager.blocksize
// Method mosek.fusion.RowBlockManager.blocksize @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5280:6-79
int32_t mosek::fusion::RowBlockManager :: blocksize(int32_t _613_id) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->blocksize(_613_id); }
int32_t mosek::fusion::p_RowBlockManager::blocksize(int32_t _613_id)
{
  return blocks->blocksize(_613_id);
}
// End mosek.fusion.RowBlockManager.blocksize

// Begin mosek.fusion.RowBlockManager.block_capacity
// Method mosek.fusion.RowBlockManager.block_capacity @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5279:6-79
int32_t mosek::fusion::RowBlockManager :: block_capacity() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->block_capacity(); }
int32_t mosek::fusion::p_RowBlockManager::block_capacity()
{
  return blocks->block_capacity();
}
// End mosek.fusion.RowBlockManager.block_capacity

// Begin mosek.fusion.RowBlockManager.capacity
// Method mosek.fusion.RowBlockManager.capacity @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5278:6-67
int32_t mosek::fusion::RowBlockManager :: capacity() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_RowBlockManager::capacity()
{
  return blocks->capacity();
}
// End mosek.fusion.RowBlockManager.capacity

// Begin mosek.fusion.RowBlockManager.get
// Method mosek.fusion.RowBlockManager.get @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5277:6-102
void mosek::fusion::RowBlockManager :: get(int32_t _614_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _615_target,int32_t _616_offset) { mosek::fusion::p_RowBlockManager::_get_impl(this)->get(_614_id,_615_target,_616_offset); }
void mosek::fusion::p_RowBlockManager::get(int32_t _614_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _615_target,int32_t _616_offset)
{
  _checked_ptr_1<int32_t> _ptr__615_target(_615_target ? _615_target->raw() : nullptr, _615_target ? _615_target->size(0) : 0);
  blocks->get(_614_id,_615_target,_616_offset);
}
// End mosek.fusion.RowBlockManager.get

// Begin mosek.fusion.RowBlockManager.evaluate
// Method mosek.fusion.RowBlockManager.evaluate @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5209:6-5275:7
void mosek::fusion::RowBlockManager :: evaluate(monty::rc_ptr< ::mosek::fusion::WorkStack > _617_xs,std::shared_ptr< monty::ndarray< double,1 > > _618_param_value,std::shared_ptr< monty::ndarray< int32_t,1 > > _619_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _620_subj,std::shared_ptr< monty::ndarray< double,1 > > _621_val) { mosek::fusion::p_RowBlockManager::_get_impl(this)->evaluate(_617_xs,_618_param_value,_619_subi,_620_subj,_621_val); }
void mosek::fusion::p_RowBlockManager::evaluate(monty::rc_ptr< ::mosek::fusion::WorkStack > _617_xs,std::shared_ptr< monty::ndarray< double,1 > > _618_param_value,std::shared_ptr< monty::ndarray< int32_t,1 > > _619_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _620_subj,std::shared_ptr< monty::ndarray< double,1 > > _621_val)
{
  _checked_ptr_1<double> _ptr__618_param_value(_618_param_value ? _618_param_value->raw() : nullptr, _618_param_value ? _618_param_value->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__619_subi(_619_subi ? _619_subi->raw() : nullptr, _619_subi ? _619_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__620_subj(_620_subj ? _620_subj->raw() : nullptr, _620_subj ? _620_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__621_val(_621_val ? _621_val->raw() : nullptr, _621_val ? _621_val->size(0) : 0);
  int32_t _622_stack = _617_xs->allocf64(code_used);
  int32_t _623_stackp = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _624_xf64 = mosek::fusion::p_WorkStack::_get_impl(_617_xs)->f64;
  _checked_ptr_1<double> _ptr__624_xf64(_624_xf64 ? _624_xf64->raw() : nullptr,_624_xf64 ? _624_xf64->size(0) : 0);
  int32_t _625_idx = (int)0;
  int32_t _9338_ = (int)0;
  int32_t _9339_ = (int)((row_param_ptrb)->size(0));
  for (int32_t _626_i = _9338_; _626_i < _9339_; ++_626_i)
  {
    {
      if ((((*row_param_ptrb)(_626_i)) < ((*row_param_ptre)(_626_i))))
      {
        {
          int32_t _627_k = ((*row_code_ptr)(_626_i));
          int32_t _9340_ = ((*row_param_ptrb)(_626_i));
          int32_t _9341_ = ((*row_param_ptre)(_626_i));
          for (int32_t _628_j = _9340_; _628_j < _9341_; ++_628_j)
          {
            {
              int32_t _9342_ = (int)0;
              int32_t _9343_ = ((*param_code_sizes)(_628_j));
              for (int32_t _629_l = _9342_; _629_l < _9343_; ++_629_l)
              {
                {
                  if ((((*code)(_627_k)) == 0))
                  {
                    {
                    }
                  }
                  else
                  {
                    {
                      if ((((*code)(_627_k)) == 1))
                      {
                        {
                          _ptr__624_xf64[safe_add( _622_stack,_623_stackp )] = _ptr__618_param_value[(int32_t)((*cconst)(_627_k))];
                          ++ _623_stackp;
                        }
                      }
                      else
                      {
                        {
                          if ((((*code)(_627_k)) == 2))
                          {
                            {
                              _ptr__624_xf64[safe_add( _622_stack,_623_stackp )] = ((*cconst)(_627_k));
                              ++ _623_stackp;
                            }
                          }
                          else
                          {
                            {
                              if ((((*code)(_627_k)) == 3))
                              {
                                {
                                  _ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)2)] += _ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)1)];
                                  -- _623_stackp;
                                }
                              }
                              else
                              {
                                {
                                  if ((((*code)(_627_k)) == 4))
                                  {
                                    {
                                      _ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)1)] = (-_ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)1)]);
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((((*code)(_627_k)) == 5))
                                      {
                                        {
                                          _ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)2)] *= _ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)1)];
                                          -- _623_stackp;
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((((*code)(_627_k)) == 6))
                                          {
                                            {
                                              _ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)1)] = (1.0 / _ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)1)]);
                                            }
                                          }
                                          else
                                          {
                                            {
                                              if ((((*code)(_627_k)) == 8))
                                              {
                                                {
                                                  double _630_v = 0.0;
                                                  int32_t _9344_ = (int)0;
                                                  int32_t _9345_ = (int32_t)((*cconst)(_627_k));
                                                  for (int32_t _631_i = _9344_; _631_i < _9345_; ++_631_i)
                                                  {
                                                    {
                                                      _630_v += _ptr__624_xf64[(safe_add( _622_stack,_623_stackp ) - (int)1)];
                                                      -- _623_stackp;
                                                    }
                                                  }
                                                  _ptr__624_xf64[safe_add( _622_stack,_623_stackp )] = _630_v;
                                                  ++ _623_stackp;
                                                }
                                              }
                                              else
                                              {
                                                {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++ _627_k;
                }
              }
              _ptr__619_subi[_625_idx] = _626_i;
              _ptr__620_subj[_625_idx] = (int32_t)((*param_varidx)(_628_j));
              _ptr__621_val[_625_idx] = _ptr__624_xf64[_622_stack];
              _623_stackp = (int)0;
              ++ _625_idx;
            }
          }
        }
      }
      {}
    }
  }
  _617_xs->popf64(code_used);
}
// End mosek.fusion.RowBlockManager.evaluate

// Begin mosek.fusion.RowBlockManager.replace_row_code
// Method mosek.fusion.RowBlockManager.replace_row_code @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5104:6-5207:7
void mosek::fusion::RowBlockManager :: replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _632_rs,std::shared_ptr< monty::ndarray< int32_t,1 > > _633_nativeidxs,int32_t _634_ptr,int32_t _635_nidxs,int32_t _636_codeptr,int32_t _637_code_p,int32_t _638_cconst_p) { mosek::fusion::p_RowBlockManager::_get_impl(this)->replace_row_code(_632_rs,_633_nativeidxs,_634_ptr,_635_nidxs,_636_codeptr,_637_code_p,_638_cconst_p); }
void mosek::fusion::p_RowBlockManager::replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _632_rs,std::shared_ptr< monty::ndarray< int32_t,1 > > _633_nativeidxs,int32_t _634_ptr,int32_t _635_nidxs,int32_t _636_codeptr,int32_t _637_code_p,int32_t _638_cconst_p)
{
  _checked_ptr_1<int32_t> _ptr__633_nativeidxs(_633_nativeidxs ? _633_nativeidxs->raw() : nullptr, _633_nativeidxs ? _633_nativeidxs->size(0) : 0);
  int32_t _639_nelem = (int)((_633_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _640_ri32 = mosek::fusion::p_WorkStack::_get_impl(_632_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__640_ri32(_640_ri32 ? _640_ri32->raw() : nullptr,_640_ri32 ? _640_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _641_ri64 = mosek::fusion::p_WorkStack::_get_impl(_632_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__641_ri64(_641_ri64 ? _641_ri64->raw() : nullptr,_641_ri64 ? _641_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _642_rf64 = mosek::fusion::p_WorkStack::_get_impl(_632_rs)->f64;
  _checked_ptr_1<double> _ptr__642_rf64(_642_rf64 ? _642_rf64->raw() : nullptr,_642_rf64 ? _642_rf64->size(0) : 0);
  bool _643_ok = true;
  {
    int32_t _644_numop = (int)0;
    int32_t _645_nentry = (int)0;
    {
      int32_t _9346_ = (int)0;
      int32_t _9347_ = _639_nelem;
      for (int32_t _646_i = _9346_; _646_i < _9347_; ++_646_i)
      {
        {
          int32_t _9348_ = _ptr__640_ri32[safe_add( _634_ptr,_646_i )];
          int32_t _9349_ = _ptr__640_ri32[safe_add( safe_add( _634_ptr,_646_i ),(int)1 )];
          for (int32_t _647_j = _9348_; _647_j < _9349_; ++_647_j)
          {
            {
              if ((((_ptr__640_ri32[safe_add( safe_add( _636_codeptr,_647_j ),(int)1 )] - _ptr__640_ri32[safe_add( _636_codeptr,_647_j )]) == (int)1) && ((_ptr__640_ri32[safe_add( _637_code_p,_ptr__640_ri32[safe_add( _636_codeptr,_647_j )] )] == 10) || (_ptr__640_ri32[safe_add( _637_code_p,_ptr__640_ri32[safe_add( _636_codeptr,_647_j )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _645_nentry;
                  _644_numop += (_ptr__640_ri32[safe_add( safe_add( _636_codeptr,_647_j ),(int)1 )] - _ptr__640_ri32[safe_add( _636_codeptr,_647_j )]);
                }
              }
            }
          }
        }
      }
      _pubthis->clear_row_code(_633_nativeidxs);
    }
    ensure_code_cap(_645_nentry,_644_numop);
    code_used += _644_numop;
    varidx_used += _645_nentry;
  }
  if ((first_free_codeitem > safe_mul( code_used,(int)2 )))
  {
    {
      compress();
    }
  }
  {}
  {
    int32_t _9350_ = (int)0;
    int32_t _9351_ = _639_nelem;
    for (int32_t _648_i = _9350_; _648_i < _9351_; ++_648_i)
    {
      {
        int32_t _649_subi = _ptr__633_nativeidxs[_648_i];
        int32_t _650_cnnz = (int)0;
        int32_t _651_rncodeatom = (int)0;
        int32_t _9352_ = _ptr__640_ri32[safe_add( _634_ptr,_648_i )];
        int32_t _9353_ = _ptr__640_ri32[safe_add( safe_add( _634_ptr,_648_i ),(int)1 )];
        for (int32_t _652_j = _9352_; _652_j < _9353_; ++_652_j)
        {
          {
            if ((((_ptr__640_ri32[safe_add( safe_add( _636_codeptr,_652_j ),(int)1 )] - _ptr__640_ri32[safe_add( _636_codeptr,_652_j )]) == (int)1) && ((_ptr__640_ri32[safe_add( _637_code_p,_ptr__640_ri32[safe_add( _636_codeptr,_652_j )] )] == 10) || (_ptr__640_ri32[safe_add( _637_code_p,_ptr__640_ri32[safe_add( _636_codeptr,_652_j )] )] == 2))))
            {
              {
              }
            }
            else
            {
              {
                ++ _650_cnnz;
                _651_rncodeatom += (_ptr__640_ri32[safe_add( safe_add( _636_codeptr,_652_j ),(int)1 )] - _ptr__640_ri32[safe_add( _636_codeptr,_652_j )]);
              }
            }
          }
        }
        int32_t _653_ni = _ptr__633_nativeidxs[_648_i];
        int32_t _654_n = (((*row_param_ptre)(_653_ni)) - ((*row_param_ptrb)(_653_ni)));
        if ((_650_cnnz > (int)0))
        {
          {
            ((*row_param_ptrb)(_649_subi)) = first_free_entry;
            ((*row_param_ptre)(_649_subi)) = safe_add( first_free_entry,_650_cnnz );
            ((*row_code_ptr)(_649_subi)) = first_free_codeitem;
            first_free_entry += _650_cnnz;
            first_free_codeitem += _651_rncodeatom;
          }
        }
        {}
      }
    }
  }
  int32_t _9354_ = (int)0;
  int32_t _9355_ = _639_nelem;
  for (int32_t _655_i = _9354_; _655_i < _9355_; ++_655_i)
  {
    {
      int32_t _656_subi = _ptr__633_nativeidxs[_655_i];
      int32_t _657_codei = ((*row_code_ptr)(_656_subi));
      int32_t _658_elmi = ((*row_param_ptrb)(_656_subi));
      int32_t _9356_ = _ptr__640_ri32[safe_add( _634_ptr,_655_i )];
      int32_t _9357_ = _ptr__640_ri32[safe_add( safe_add( _634_ptr,_655_i ),(int)1 )];
      for (int32_t _659_j = _9356_; _659_j < _9357_; ++_659_j)
      {
        {
          if ((((_ptr__640_ri32[safe_add( safe_add( _636_codeptr,_659_j ),(int)1 )] - _ptr__640_ri32[safe_add( _636_codeptr,_659_j )]) == (int)1) && ((_ptr__640_ri32[safe_add( _637_code_p,_ptr__640_ri32[safe_add( _636_codeptr,_659_j )] )] == 10) || (_ptr__640_ri32[safe_add( _637_code_p,_ptr__640_ri32[safe_add( _636_codeptr,_659_j )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              int32_t _9358_ = _ptr__640_ri32[safe_add( _636_codeptr,_659_j )];
              int32_t _9359_ = _ptr__640_ri32[safe_add( safe_add( _636_codeptr,_659_j ),(int)1 )];
              for (int32_t _660_k = _9358_; _660_k < _9359_; ++_660_k)
              {
                {
                  ((*code)(_657_codei)) = _ptr__640_ri32[safe_add( _637_code_p,_660_k )];
                  ((*cconst)(_657_codei)) = _ptr__642_rf64[safe_add( _638_cconst_p,_660_k )];
                  ++ _657_codei;
                }
              }
              ((*param_code_sizes)(_658_elmi)) = (_ptr__640_ri32[safe_add( safe_add( _636_codeptr,_659_j ),(int)1 )] - _ptr__640_ri32[safe_add( _636_codeptr,_659_j )]);
              ((*param_varidx)(_658_elmi)) = _ptr__641_ri64[safe_add( _635_nidxs,_659_j )];
              _643_ok = (_643_ok && (_ptr__641_ri64[safe_add( _635_nidxs,_659_j )] >= (int)0));
              ++ _658_elmi;
            }
          }
        }
      }
    }
  }
  if ((!_643_ok))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.replace_row_code

// Begin mosek.fusion.RowBlockManager.clear_row_code
// Method mosek.fusion.RowBlockManager.clear_row_code @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5077:6-5093:7
void mosek::fusion::RowBlockManager :: clear_row_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _661_nativeidxs) { mosek::fusion::p_RowBlockManager::_get_impl(this)->clear_row_code(_661_nativeidxs); }
void mosek::fusion::p_RowBlockManager::clear_row_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _661_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__661_nativeidxs(_661_nativeidxs ? _661_nativeidxs->raw() : nullptr, _661_nativeidxs ? _661_nativeidxs->size(0) : 0);
  if ((NULL != row_param_ptrb.get()))
  {
    {
      int32_t _9360_ = (int)0;
      int32_t _9361_ = (int)((_661_nativeidxs)->size(0));
      for (int32_t _662_i = _9360_; _662_i < _9361_; ++_662_i)
      {
        {
          int32_t _9362_ = ((*row_param_ptrb)(_ptr__661_nativeidxs[_662_i]));
          int32_t _9363_ = ((*row_param_ptre)(_ptr__661_nativeidxs[_662_i]));
          for (int32_t _663_j = _9362_; _663_j < _9363_; ++_663_j)
          {
            {
              code_used -= ((*param_code_sizes)(_663_j));
            }
          }
          varidx_used -= (((*row_param_ptre)(_ptr__661_nativeidxs[_662_i])) - ((*row_param_ptrb)(_ptr__661_nativeidxs[_662_i])));
          ((*row_param_ptrb)(_ptr__661_nativeidxs[_662_i])) = (int)0;
          ((*row_param_ptre)(_ptr__661_nativeidxs[_662_i])) = (int)0;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.clear_row_code

// Begin mosek.fusion.RowBlockManager.compress
// Method mosek.fusion.RowBlockManager.compress @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:5033:6-5075:7
void mosek::fusion::p_RowBlockManager::compress()
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _664_newcode = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(code_used)));
  _checked_ptr_1<int32_t> _ptr__664_newcode(_664_newcode ? _664_newcode->raw() : nullptr,_664_newcode ? _664_newcode->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _665_newcconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(code_used)));
  _checked_ptr_1<double> _ptr__665_newcconst(_665_newcconst ? _665_newcconst->raw() : nullptr,_665_newcconst ? _665_newcconst->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _666_newvaridx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(first_free_entry)));
  _checked_ptr_1<int64_t> _ptr__666_newvaridx(_666_newvaridx ? _666_newvaridx->raw() : nullptr,_666_newvaridx ? _666_newvaridx->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _667_newcodesizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(first_free_entry)));
  _checked_ptr_1<int32_t> _ptr__667_newcodesizes(_667_newcodesizes ? _667_newcodesizes->raw() : nullptr,_667_newcodesizes ? _667_newcodesizes->size(0) : 0);
  int32_t _668_tgtptr = (int)0;
  int32_t _669_tgtcptr = (int)0;
  int32_t _9364_ = (int)0;
  int32_t _9365_ = (int)((row_param_ptrb)->size(0));
  for (int32_t _670_i = _9364_; _670_i < _9365_; ++_670_i)
  {
    {
      int32_t _671_codesize = (int)0;
      int32_t _672_n = (((*row_param_ptre)(_670_i)) - ((*row_param_ptrb)(_670_i)));
      ::mosek::fusion::Utils::Tools::arraycopy(param_varidx,((*row_param_ptrb)(_670_i)),_666_newvaridx,_668_tgtptr,_672_n);
      ::mosek::fusion::Utils::Tools::arraycopy(param_code_sizes,((*row_param_ptrb)(_670_i)),_667_newcodesizes,_668_tgtptr,_672_n);
      int32_t _9366_ = ((*row_param_ptrb)(_670_i));
      int32_t _9367_ = ((*row_param_ptre)(_670_i));
      for (int32_t _673_j = _9366_; _673_j < _9367_; ++_673_j)
      {
        {
          _671_codesize += ((*param_code_sizes)(_673_j));
        }
      }
      ::mosek::fusion::Utils::Tools::arraycopy(code,((*row_code_ptr)(_670_i)),_664_newcode,_669_tgtcptr,_671_codesize);
      ::mosek::fusion::Utils::Tools::arraycopy(cconst,((*row_code_ptr)(_670_i)),_665_newcconst,_669_tgtcptr,_671_codesize);
      ((*row_param_ptrb)(_670_i)) = _668_tgtptr;
      ((*row_param_ptre)(_670_i)) = safe_add( _668_tgtptr,_672_n );
      ((*row_code_ptr)(_670_i)) = _669_tgtcptr;
      _669_tgtcptr += _671_codesize;
      _668_tgtptr += _672_n;
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_666_newvaridx,(int)0,param_varidx,(int)0,_668_tgtptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_667_newcodesizes,(int)0,param_code_sizes,(int)0,_668_tgtptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_664_newcode,(int)0,code,(int)0,_669_tgtcptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_665_newcconst,(int)0,cconst,(int)0,_669_tgtcptr);
  first_free_codeitem = _669_tgtcptr;
  first_free_entry = _668_tgtptr;
}
// End mosek.fusion.RowBlockManager.compress

// Begin mosek.fusion.RowBlockManager.ensure_code_cap
// Method mosek.fusion.RowBlockManager.ensure_code_cap @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4997:6-5031:7
void mosek::fusion::p_RowBlockManager::ensure_code_cap(int32_t _674_nentry,int32_t _675_codesize)
{
  if ((NULL == row_code_ptr.get()))
  {
    {
      int32_t _676_n = (int)128;
      while ( (_676_n < _674_nentry) )
      {
        {
          _676_n *= (int)2;
        }
      }
      int32_t _677_m = (int)128;
      while ( (_677_m < _675_codesize) )
      {
        {
          _677_m *= (int)2;
        }
      }
      row_param_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      row_param_ptre = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      row_code_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      param_varidx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_676_n)));
      param_code_sizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_676_n)));
      code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_677_m)));
      cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_677_m)));
    }
  }
  else
  {
    {
      if ((_674_nentry > ((int)((param_varidx)->size(0)) - first_free_entry)))
      {
        {
          int32_t _678_n = (int)((param_varidx)->size(0));
          while ( ((_678_n - first_free_entry) < _674_nentry) )
          {
            {
              _678_n *= (int)2;
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _679_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_678_n)));
          _checked_ptr_1<int32_t> _ptr__679_ptr(_679_ptr ? _679_ptr->raw() : nullptr,_679_ptr ? _679_ptr->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _680_varidx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_678_n)));
          _checked_ptr_1<int64_t> _ptr__680_varidx(_680_varidx ? _680_varidx->raw() : nullptr,_680_varidx ? _680_varidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _681_code_sizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_678_n)));
          _checked_ptr_1<int32_t> _ptr__681_code_sizes(_681_code_sizes ? _681_code_sizes->raw() : nullptr,_681_code_sizes ? _681_code_sizes->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(param_varidx,(int)0,_680_varidx,(int)0,first_free_entry);
          ::mosek::fusion::Utils::Tools::arraycopy(param_code_sizes,(int)0,_681_code_sizes,(int)0,first_free_entry);
          param_varidx = _680_varidx;
          param_code_sizes = _681_code_sizes;
        }
      }
      {}
      if ((_675_codesize > ((int)((code)->size(0)) - first_free_codeitem)))
      {
        {
          int32_t _682_n = (int)((code)->size(0));
          while ( (_675_codesize > (_682_n - first_free_codeitem)) )
          {
            {
              _682_n *= (int)2;
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _683_tcode = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_682_n)));
          _checked_ptr_1<int32_t> _ptr__683_tcode(_683_tcode ? _683_tcode->raw() : nullptr,_683_tcode ? _683_tcode->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(code,(int)0,_683_tcode,(int)0,first_free_codeitem);
          std::shared_ptr< monty::ndarray< double,1 > > _684_tcconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_682_n)));
          _checked_ptr_1<double> _ptr__684_tcconst(_684_tcconst ? _684_tcconst->raw() : nullptr,_684_tcconst ? _684_tcconst->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(cconst,(int)0,_684_tcconst,(int)0,first_free_codeitem);
          code = _683_tcode;
          cconst = _684_tcconst;
        }
      }
      {}
    }
  }
}
// End mosek.fusion.RowBlockManager.ensure_code_cap

// Begin mosek.fusion.RowBlockManager.release
// Method mosek.fusion.RowBlockManager.release @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4984:6-4995:7
void mosek::fusion::RowBlockManager :: release(int32_t _685_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _686_nativeidxs) { mosek::fusion::p_RowBlockManager::_get_impl(this)->release(_685_id,_686_nativeidxs); }
void mosek::fusion::p_RowBlockManager::release(int32_t _685_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _686_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__686_nativeidxs(_686_nativeidxs ? _686_nativeidxs->raw() : nullptr, _686_nativeidxs ? _686_nativeidxs->size(0) : 0);
  int32_t _687_num = blocks->blocksize(_685_id);
  blocks->get(_685_id,_686_nativeidxs,(int)0);
  blocks->free(_685_id);
  if ((NULL != row_code_ptr.get()))
  {
    {
      int32_t _9368_ = (int)0;
      int32_t _9369_ = _687_num;
      for (int32_t _688_i = _9368_; _688_i < _9369_; ++_688_i)
      {
        {
          int32_t _689_ni = _ptr__686_nativeidxs[_688_i];
          code_used -= (((*row_param_ptre)(_689_ni)) - ((*row_param_ptrb)(_689_ni)));
          ((*row_param_ptre)(_689_ni)) = (int)0;
          ((*row_param_ptrb)(_689_ni)) = (int)0;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.release

// Begin mosek.fusion.RowBlockManager.allocate
// Method mosek.fusion.RowBlockManager.allocate @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4966:6-4982:7
int32_t mosek::fusion::RowBlockManager :: allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _690_nativeidxs) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->allocate(_690_nativeidxs); }
int32_t mosek::fusion::p_RowBlockManager::allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _690_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__690_nativeidxs(_690_nativeidxs ? _690_nativeidxs->raw() : nullptr, _690_nativeidxs ? _690_nativeidxs->size(0) : 0);
  int32_t _691_num = (int)((_690_nativeidxs)->size(0));
  int32_t _692_id = blocks->alloc(_691_num);
  blocks->get(_692_id,_690_nativeidxs,(int)0);
  if (((NULL != row_code_ptr.get()) && (blocks->capacity() > (int)((row_param_ptrb)->size(0)))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _693_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__693_ptrb(_693_ptrb ? _693_ptrb->raw() : nullptr,_693_ptrb ? _693_ptrb->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_param_ptrb,(int)0,_693_ptrb,(int)0,(int)((row_param_ptrb)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _694_ptre = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__694_ptre(_694_ptre ? _694_ptre->raw() : nullptr,_694_ptre ? _694_ptre->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_param_ptre,(int)0,_694_ptre,(int)0,(int)((row_param_ptre)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _695_cptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__695_cptr(_695_cptr ? _695_cptr->raw() : nullptr,_695_cptr ? _695_cptr->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_code_ptr,(int)0,_695_cptr,(int)0,(int)((row_code_ptr)->size(0)));
      row_param_ptrb = _693_ptrb;
      row_param_ptre = _694_ptre;
      row_code_ptr = _695_cptr;
    }
  }
  {}
  return _692_id;
}
// End mosek.fusion.RowBlockManager.allocate

// Begin mosek.fusion.RowBlockManager.row_is_parameterized
// Method mosek.fusion.RowBlockManager.row_is_parameterized @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4962:6-4964:7
bool mosek::fusion::RowBlockManager :: row_is_parameterized(int32_t _696_i) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->row_is_parameterized(_696_i); }
bool mosek::fusion::p_RowBlockManager::row_is_parameterized(int32_t _696_i)
{
  return ((NULL != row_param_ptrb.get()) && (((*row_param_ptrb)(_696_i)) < ((*row_param_ptre)(_696_i))));
}
// End mosek.fusion.RowBlockManager.row_is_parameterized

void mosek::fusion::p_RowBlockManager::destroy()
{
  cconst.reset();
  code.reset();
  param_code_sizes.reset();
  param_varidx.reset();
  row_code_ptr.reset();
  row_param_ptre.reset();
  row_param_ptrb.reset();
  blocks.reset();
}
void mosek::fusion::RowBlockManager::destroy() { mosek::fusion::p_RowBlockManager::_get_impl(this)->destroy(); }
// } class RowBlockManager
// class Model { // @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:351:4-4878:5
mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }
mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }
mosek::fusion::p_Model::p_Model
  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.Model.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:576:6-643:7
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (monty::rc_ptr< ::mosek::fusion::Model > _697_m)
{ return new mosek::fusion::Model(_697_m); }
mosek::fusion::Model::Model
  (monty::rc_ptr< ::mosek::fusion::Model > _697_m) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_697_m); }
void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _697_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseModel::_initialize(_697_m);
    monty::rc_ptr< ::mosek::fusion::Model > _698_self = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_697_m)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_697_m)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_697_m)->solutionptr;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9370_;
    bool _9371_ = (NULL != mosek::fusion::p_Model::_get_impl(_697_m)->sol_itr.get());
    if (_9371_)
    {
      _9370_ = mosek::fusion::p_Model::_get_impl(_697_m)->sol_itr->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9370_ = nullptr;
    }
    sol_itr = _9370_;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9372_;
    bool _9373_ = (NULL != mosek::fusion::p_Model::_get_impl(_697_m)->sol_itg.get());
    if (_9373_)
    {
      _9372_ = mosek::fusion::p_Model::_get_impl(_697_m)->sol_itg->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9372_ = nullptr;
    }
    sol_itg = _9372_;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9374_;
    bool _9375_ = (NULL != mosek::fusion::p_Model::_get_impl(_697_m)->sol_bas.get());
    if (_9375_)
    {
      _9374_ = mosek::fusion::p_Model::_get_impl(_697_m)->sol_bas->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9374_ = nullptr;
    }
    sol_bas = _9374_;
    num_task_afe = mosek::fusion::p_Model::_get_impl(_697_m)->num_task_afe;
    num_task_con = mosek::fusion::p_Model::_get_impl(_697_m)->num_task_con;
    num_task_acc = mosek::fusion::p_Model::_get_impl(_697_m)->num_task_acc;
    con_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_697_m)->con_blocks);
    afe_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_697_m)->afe_blocks);
    obj_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_697_m)->obj_blocks);
    acc_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_697_m)->acc_block_map);
    acon_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_697_m)->acon_block_map);
    acon_acc = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->acon_acc);
    acon_afe = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->acon_afe);
    acon_elm_accid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->acon_elm_accid);
    acon_elm_scale = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->acon_elm_scale);
    acon_elm_ofs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->acon_elm_ofs);
    acon_elm_afe = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->acon_elm_afe);
    task_numaferow = mosek::fusion::p_Model::_get_impl(_697_m)->task_numaferow;
    var_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_697_m)->var_block_map);
    var_block_acc_id = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->var_block_acc_id);
    var_elm_acc_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->var_elm_acc_idx);
    var_elm_acc_ofs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->var_elm_acc_ofs);
    barvar_num = (int)0;
    barvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->barvar_dim);
    barvar_block_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->barvar_block_ptr);
    barvar_block_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->barvar_block_dim);
    barvar_block_elm_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->barvar_block_elm_ptr);
    barvar_block_elm_barj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->barvar_block_elm_barj);
    barvar_block_elm_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->barvar_block_elm_i);
    barvar_block_elm_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->barvar_block_elm_j);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9376_;
    for (int32_t _699_i = (int)0, _9377_ = (int)((mosek::fusion::p_Model::_get_impl(_697_m)->vars)->size(0)); _699_i < _9377_ ; ++_699_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _9378_;
      bool _9379_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_697_m)->vars)(_699_i)).get());
      if (_9379_)
      {
        _9378_ = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_697_m)->vars)(_699_i)).get())->__mosek_2fusion_2ModelVariable__clone(_698_self);
      }
      else
      {
        _9378_ = nullptr;
      }
      _9376_.push_back(_9378_);
    }
    auto _9380_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9376_.size()),_9376_.begin(),_9376_.end()));
    vars = _9380_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9381_;
    for (int32_t _700_i = (int)0, _9382_ = (int)((mosek::fusion::p_Model::_get_impl(_697_m)->barvars)->size(0)); _700_i < _9382_ ; ++_700_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _9383_;
      bool _9384_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_697_m)->barvars)(_700_i)).get());
      if (_9384_)
      {
        _9383_ = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_697_m)->barvars)(_700_i)).get())->__mosek_2fusion_2ModelVariable__clone(_698_self);
      }
      else
      {
        _9383_ = nullptr;
      }
      _9381_.push_back(_9383_);
    }
    auto _9385_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9381_.size()),_9381_.begin(),_9381_.end()));
    barvars = _9385_;
    var_map = mosek::fusion::p_Model::_get_impl(_697_m)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9386_;
    for (int32_t _701_i = (int)0, _9387_ = (int)((mosek::fusion::p_Model::_get_impl(_697_m)->cons)->size(0)); _701_i < _9387_ ; ++_701_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9388_;
      bool _9389_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_697_m)->cons)(_701_i)).get());
      if (_9389_)
      {
        _9388_ = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_697_m)->cons)(_701_i)).get())->__mosek_2fusion_2ModelConstraint__clone(_698_self);
      }
      else
      {
        _9388_ = nullptr;
      }
      _9386_.push_back(_9388_);
    }
    auto _9390_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9386_.size()),_9386_.begin(),_9386_.end()));
    cons = _9390_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9391_;
    for (int32_t _702_i = (int)0, _9392_ = (int)((mosek::fusion::p_Model::_get_impl(_697_m)->acons)->size(0)); _702_i < _9392_ ; ++_702_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9393_;
      bool _9394_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_697_m)->acons)(_702_i)).get());
      if (_9394_)
      {
        _9393_ = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_697_m)->acons)(_702_i)).get())->__mosek_2fusion_2ModelConstraint__clone(_698_self);
      }
      else
      {
        _9393_ = nullptr;
      }
      _9391_.push_back(_9393_);
    }
    auto _9395_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9391_.size()),_9391_.begin(),_9391_.end()));
    acons = _9395_;
    con_map = mosek::fusion::p_Model::_get_impl(_697_m)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    numparameter = mosek::fusion::p_Model::_get_impl(_697_m)->numparameter;
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _9396_;
    bool _9397_ = (NULL == mosek::fusion::p_Model::_get_impl(_697_m)->parameters.get());
    if (_9397_)
    {
      _9396_ = nullptr;
    }
    else
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _9398_;
      for (int32_t _703_i = (int)0, _9399_ = (int)((mosek::fusion::p_Model::_get_impl(_697_m)->parameters)->size(0)); _703_i < _9399_ ; ++_703_i)
      {
        monty::rc_ptr< ::mosek::fusion::Parameter > _9400_;
        bool _9401_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_697_m)->parameters)(_703_i)).get());
        if (_9401_)
        {
          _9400_ = ((*mosek::fusion::p_Model::_get_impl(_697_m)->parameters)(_703_i))->__mosek_2fusion_2Parameter__clone(_698_self);
        }
        else
        {
          _9400_ = nullptr;
        }
        _9398_.push_back(_9400_);
      }
      auto _9402_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_9398_.size()),_9398_.begin(),_9398_.end()));
      _9396_ = _9402_;
    }
    parameters = _9396_;
    par_map = mosek::fusion::p_Model::_get_impl(_697_m)->par_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    param_num = mosek::fusion::p_Model::_get_impl(_697_m)->param_num;
    std::shared_ptr< monty::ndarray< double,1 > > _9403_;
    bool _9404_ = (NULL != mosek::fusion::p_Model::_get_impl(_697_m)->param_value.get());
    if (_9404_)
    {
      _9403_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_697_m)->param_value);
    }
    else
    {
      _9403_ = nullptr;
    }
    param_value = _9403_;
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_697_m)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:498:6-573:7
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (const std::string &  _704_name,
    int32_t _705_basesize)
{ return new mosek::fusion::Model(_704_name,_705_basesize); }
mosek::fusion::Model::Model
  (const std::string &  _704_name,
    int32_t _705_basesize) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_704_name,_705_basesize); }
void mosek::fusion::p_Model::_initialize  (const std::string &  _704_name,
    int32_t _705_basesize)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseModel::_initialize(_704_name,std::string (""));
    model_name = _704_name;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    sol_itr = nullptr;
    sol_itg = nullptr;
    sol_bas = nullptr;
    num_task_afe = (int)0;
    num_task_con = (int)0;
    num_task_acc = (int)0;
    con_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    afe_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    obj_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    acc_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    acon_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    task_numaferow = (int)0;
    acon_acc = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->block_capacity())));
    acon_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->block_capacity())));
    acon_elm_accid = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    std::vector<double> _9405_;
    for (int32_t _706_i = (int)0, _9406_ = acon_block_map->capacity(); _706_i < _9406_ ; ++_706_i)
    {
      _9405_.push_back(1.0);
    }
    auto _9407_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9405_.size()),_9405_.begin(),_9405_.end()));
    acon_elm_scale = _9407_;
    acon_elm_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    acon_elm_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    var_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    var_block_acc_id = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->block_capacity())));
    var_elm_acc_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->capacity())));
    var_elm_acc_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->capacity())));
    barvar_num = (int)0;
    barvar_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_705_basesize)));
    barvar_block_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _705_basesize,(int)1 ))));
    barvar_block_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_705_basesize)));
    barvar_block_elm_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _705_basesize,(int)1 ))));
    barvar_block_elm_barj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_705_basesize)));
    barvar_block_elm_i = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_705_basesize)));
    barvar_block_elm_j = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_705_basesize)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9408_;
    for (int32_t _707_i = (int)0, _9409_ = safe_mul( _705_basesize,(int)8 ); _707_i < _9409_ ; ++_707_i)
    {
      _9408_.push_back(nullptr);
    }
    auto _9410_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9408_.size()),_9408_.begin(),_9408_.end()));
    vars = _9410_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9411_;
    for (int32_t _708_i = (int)0, _9412_ = _705_basesize; _708_i < _9412_ ; ++_708_i)
    {
      _9411_.push_back(nullptr);
    }
    auto _9413_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9411_.size()),_9411_.begin(),_9411_.end()));
    barvars = _9413_;
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9414_;
    for (int32_t _709_i = (int)0, _9415_ = safe_mul( _705_basesize,(int)8 ); _709_i < _9415_ ; ++_709_i)
    {
      _9414_.push_back(nullptr);
    }
    auto _9416_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9414_.size()),_9414_.begin(),_9414_.end()));
    cons = _9416_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9417_;
    for (int32_t _710_i = (int)0, _9418_ = safe_mul( _705_basesize,(int)8 ); _710_i < _9418_ ; ++_710_i)
    {
      _9417_.push_back(nullptr);
    }
    auto _9419_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9417_.size()),_9417_.begin(),_9417_.end()));
    acons = _9419_;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    numparameter = (int)0;
    parameters = nullptr;
    par_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    param_num = (int)0;
    param_value = nullptr;
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _711_natvarbfixidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)1)));
      _checked_ptr_1<int32_t> _ptr__711_natvarbfixidx(_711_natvarbfixidx ? _711_natvarbfixidx->raw() : nullptr,_711_natvarbfixidx ? _711_natvarbfixidx->size(0) : 0);
      int32_t _712_bfixvarid = linearvar_alloc((int)1,_711_natvarbfixidx);
      bfixidx = _ptr__711_natvarbfixidx[(int)0];
    }
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    task_append_domain_empty();
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:490:6-58
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (int32_t _713_basesize)
{ return new mosek::fusion::Model(_713_basesize); }
mosek::fusion::Model::Model
  (int32_t _713_basesize) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_713_basesize); }
void mosek::fusion::p_Model::_initialize  (int32_t _713_basesize)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(std::string (""),_713_basesize);
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:484:6-53
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (const std::string &  _714_name)
{ return new mosek::fusion::Model(_714_name); }
mosek::fusion::Model::Model
  (const std::string &  _714_name) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_714_name); }
void mosek::fusion::p_Model::_initialize  (const std::string &  _714_name)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(_714_name,(int)128);
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:478:6-33
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  ()
{ return new mosek::fusion::Model(); }
mosek::fusion::Model::Model
  () : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }
void mosek::fusion::p_Model::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}
// mosek.fusion.Model.ctor

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4759:6-4877:7
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _715_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _716_terms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_715_name,_716_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _715_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _716_terms) { return __mosek_2fusion_2Model__disjunction(_715_name,_716_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _715_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _716_terms)
{
  int32_t _717_n = (int)((_716_terms)->size(0));
  int32_t _718_nrows = (int)0;
  int32_t _719_nterms = (int)0;
  int32_t _720_naccterms = (int)0;
  int32_t _721_naccrows = (int)0;
  int32_t _9420_ = (int)0;
  int32_t _9421_ = _717_n;
  for (int32_t _722_i = _9420_; _722_i < _9421_; ++_722_i)
  {
    {
      _718_nrows += ((*_716_terms)(_722_i))->size();
      _719_nterms += mosek::fusion::p_Term::_get_impl(((*_716_terms)(_722_i)).get())->num();
      _721_naccrows += mosek::fusion::p_Term::_get_impl(((*_716_terms)(_722_i)).get())->numaccrows();
      _720_naccterms += mosek::fusion::p_Term::_get_impl(((*_716_terms)(_722_i)).get())->numaccterms();
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _723_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_718_nrows)));
  _checked_ptr_1<int32_t> _ptr__723_afeidxs(_723_afeidxs ? _723_afeidxs->raw() : nullptr,_723_afeidxs ? _723_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _724_accafeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_721_naccrows)));
  _checked_ptr_1<int32_t> _ptr__724_accafeidxs(_724_accafeidxs ? _724_accafeidxs->raw() : nullptr,_724_accafeidxs ? _724_accafeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _725_accb = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_721_naccrows)));
  _checked_ptr_1<double> _ptr__725_accb(_725_accb ? _725_accb->raw() : nullptr,_725_accb ? _725_accb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _726_domidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_720_naccterms)));
  _checked_ptr_1<int64_t> _ptr__726_domidxs(_726_domidxs ? _726_domidxs->raw() : nullptr,_726_domidxs ? _726_domidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _727_termsize = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_717_n)));
  _checked_ptr_1<int64_t> _ptr__727_termsize(_727_termsize ? _727_termsize->raw() : nullptr,_727_termsize ? _727_termsize->size(0) : 0);
  int32_t _728_afeblockid = afe_allocate(_723_afeidxs);
  int32_t _729_term_index = (int)0;
  int32_t _730_acctermptr = (int)0;
  int32_t _731_afetgtptr = (int)0;
  int32_t _732_afeptr = (int)0;
  int32_t _9422_ = (int)0;
  int32_t _9423_ = _717_n;
  for (int32_t _733_term_i = _9422_; _733_term_i < _9423_; ++_733_term_i)
  {
    {
      int32_t _9424_ = (int)0;
      int32_t _9425_ = mosek::fusion::p_Term::_get_impl(((*_716_terms)(_733_term_i)).get())->num();
      for (int32_t _734_simpterm_i = _9424_; _734_simpterm_i < _9425_; ++_734_simpterm_i)
      {
        {
          monty::rc_ptr< ::mosek::fusion::DJCDomain > _735_dom = ((*mosek::fusion::p_Term::_get_impl(((*_716_terms)(_733_term_i)))->domains)(_734_simpterm_i));
          monty::rc_ptr< ::mosek::fusion::ExprDense > _736_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(((*mosek::fusion::p_Term::_get_impl(((*_716_terms)(_733_term_i)))->exprs)(_734_simpterm_i)))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
          _736_e->eval(rs,ws,xs);
          rs->pop_expr();
          std::shared_ptr< monty::ndarray< int32_t,1 > > _737_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
          _checked_ptr_1<int32_t> _ptr__737_ri32(_737_ri32 ? _737_ri32->raw() : nullptr,_737_ri32 ? _737_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _738_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
          _checked_ptr_1<int64_t> _ptr__738_ri64(_738_ri64 ? _738_ri64->raw() : nullptr,_738_ri64 ? _738_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _739_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
          _checked_ptr_1<double> _ptr__739_rf64(_739_rf64 ? _739_rf64->raw() : nullptr,_739_rf64 ? _739_rf64->size(0) : 0);
          int32_t _740_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
          int32_t _741_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
          int32_t _742_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
          int32_t _743_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
          int32_t _744_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
          bool _745_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
          int32_t _746_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
          int32_t _747_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
          int32_t _748_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
          int32_t _749_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
          int32_t _750_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
          int32_t _751_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
          std::vector<int32_t> _9426_;
          for (int32_t _753_i = (int)0, _9427_ = _740_nd; _753_i < _9427_ ; ++_753_i)
          {
            _9426_.push_back(_ptr__737_ri32[safe_add( _741_shape_base,_753_i )]);
          }
          auto _9428_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9426_.size()),_9426_.begin(),_9426_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _752_shape = _9428_;
          _checked_ptr_1<int32_t> _ptr__752_shape(_752_shape ? _752_shape->raw() : nullptr,_752_shape ? _752_shape->size(0) : 0);
          putfrows(_723_afeidxs,_732_afeptr,rs,_742_nelem,_743_nnz,_746_ptr_base,_747_nidxs_base,_748_cof_base);
          if ((mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->dom == ::mosek::fusion::DJCDomainType::InRange))
          {
            {
              std::shared_ptr< monty::ndarray< double,1 > > _754_lb = mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->b;
              _checked_ptr_1<double> _ptr__754_lb(_754_lb ? _754_lb->raw() : nullptr,_754_lb ? _754_lb->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _755_ub = mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->par;
              _checked_ptr_1<double> _ptr__755_ub(_755_ub ? _755_ub->raw() : nullptr,_755_ub ? _755_ub->size(0) : 0);
              int32_t _9429_ = (int)0;
              int32_t _9430_ = _742_nelem;
              for (int32_t _756_i = _9429_; _756_i < _9430_; ++_756_i)
              {
                {
                  _ptr__724_accafeidxs[safe_add( _731_afetgtptr,_756_i )] = _ptr__723_afeidxs[safe_add( _732_afeptr,_756_i )];
                  _ptr__724_accafeidxs[safe_add( safe_add( _731_afetgtptr,_742_nelem ),_756_i )] = _ptr__723_afeidxs[safe_add( _732_afeptr,_756_i )];
                  _ptr__725_accb[safe_add( _731_afetgtptr,_756_i )] = _ptr__754_lb[_756_i];
                  _ptr__725_accb[safe_add( safe_add( _731_afetgtptr,_742_nelem ),_756_i )] = _ptr__755_ub[_756_i];
                }
              }
              _ptr__726_domidxs[_730_acctermptr] = task_append_domain_rpos(_742_nelem);
              _ptr__726_domidxs[safe_add( _730_acctermptr,(int)1 )] = task_append_domain_rneg(_742_nelem);
              _ptr__727_termsize[_733_term_i] += (int)2;
              _730_acctermptr += (int)2;
              _731_afetgtptr += safe_mul( _742_nelem,(int)2 );
            }
          }
          else if(((mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->dom == ::mosek::fusion::DJCDomainType::EqualTo) || ((mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->dom == ::mosek::fusion::DJCDomainType::LessThan) || ((mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->dom == ::mosek::fusion::DJCDomainType::GreaterThan) || (mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->dom == ::mosek::fusion::DJCDomainType::IsFree)))))
          {
            {
              std::shared_ptr< monty::ndarray< double,1 > > _757_b = mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->b;
              _checked_ptr_1<double> _ptr__757_b(_757_b ? _757_b->raw() : nullptr,_757_b ? _757_b->size(0) : 0);
              int32_t _9431_ = (int)0;
              int32_t _9432_ = _742_nelem;
              for (int32_t _758_i = _9431_; _758_i < _9432_; ++_758_i)
              {
                {
                  _ptr__724_accafeidxs[safe_add( _731_afetgtptr,_758_i )] = _ptr__723_afeidxs[safe_add( _732_afeptr,_758_i )];
                  _ptr__725_accb[safe_add( _731_afetgtptr,_758_i )] = _ptr__757_b[_758_i];
                }
              }
              if ((mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->dom == ::mosek::fusion::DJCDomainType::EqualTo))
              {
                {
                  _ptr__726_domidxs[_730_acctermptr] = task_append_domain_rzero(_742_nelem);
                }
              }
              else if((mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->dom == ::mosek::fusion::DJCDomainType::LessThan))
              {
                {
                  _ptr__726_domidxs[_730_acctermptr] = task_append_domain_rneg(_742_nelem);
                }
              }
              else if((mosek::fusion::p_DJCDomain::_get_impl(_735_dom)->dom == ::mosek::fusion::DJCDomainType::GreaterThan))
              {
                {
                  _ptr__726_domidxs[_730_acctermptr] = task_append_domain_rpos(_742_nelem);
                }
              }
              else
              {
                {
                  _ptr__726_domidxs[_730_acctermptr] = task_append_domain_r(_742_nelem);
                }
              }
              _ptr__727_termsize[_733_term_i] += (int)1;
              _730_acctermptr += (int)1;
              _731_afetgtptr += _742_nelem;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Not implemented: Non-linear conic DJC constraints"));
            }
          }
          if ((_744_ncodeatom > (int)0))
          {
            {
              std::vector<int32_t> _9433_;
              for (int32_t _759_i = (int)0, _9434_ = _742_nelem; _759_i < _9434_ ; ++_759_i)
              {
                _9433_.push_back(_ptr__723_afeidxs[safe_add( _732_afeptr,_759_i )]);
              }
              auto _9435_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9433_.size()),_9433_.begin(),_9433_.end()));
              afe_blocks->replace_row_code(rs,_9435_,_746_ptr_base,_747_nidxs_base,_750_codeptr,_749_code,_751_cconst);
            }
          }
          {}
          _732_afeptr += _742_nelem;
          ++ _729_term_index;
        }
      }
    }
  }
  int64_t _760_djcidx = task_append_djc((int64_t)((int)1));
  std::vector<int64_t> _9436_;
  for (int32_t _761_i = (int)0, _9437_ = (int)((_724_accafeidxs)->size(0)); _761_i < _9437_ ; ++_761_i)
  {
    _9436_.push_back(_ptr__724_accafeidxs[_761_i]);
  }
  auto _9438_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9436_.size()),_9436_.begin(),_9436_.end()));
  task_putdjcslice(_760_djcidx,safe_add( _760_djcidx,(int)1 ),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >{(int64_t)((int64_t)_717_n)}),_727_termsize,_726_domidxs,_9438_,_725_accb);
  if (((int)((_715_name).size()) > (int)0))
  {
    {
      task_djc_name(_760_djcidx,::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_715_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
    }
  }
  {}
  return ::mosek::fusion::p_Disjunction::_new_Disjunction(_760_djcidx);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4758:6-92
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _762_terms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_762_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _762_terms) { return __mosek_2fusion_2Model__disjunction(_762_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _762_terms)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),_762_terms);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4756:6-111
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _763_djcterms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_763_djcterms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _763_djcterms) { return __mosek_2fusion_2Model__disjunction(_763_djcterms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _763_djcterms)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(mosek::fusion::p_DisjunctionTerms::_get_impl(_763_djcterms)->terms);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4754:6-129
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _764_name,monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _765_djcterms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_764_name,_765_djcterms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _764_name,monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _765_djcterms) { return __mosek_2fusion_2Model__disjunction(_764_name,_765_djcterms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _764_name,monty::rc_ptr< ::mosek::fusion::DisjunctionTerms > _765_djcterms)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_764_name,mosek::fusion::p_DisjunctionTerms::_get_impl(_765_djcterms)->terms);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4752:6-157
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _766_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ExprDomain >,1 > > _767_terms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_766_name,_767_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _766_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ExprDomain >,1 > > _767_terms) { return __mosek_2fusion_2Model__disjunction(_766_name,_767_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _766_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ExprDomain >,1 > > _767_terms)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Term >> _9439_;
  for (int32_t _768_i = (int)0, _9440_ = (int)((_767_terms)->size(0)); _768_i < _9440_ ; ++_768_i)
  {
    _9439_.push_back(((*_767_terms)(_768_i))->__mosek_2fusion_2ExprDomain__toDJCTerm());
  }
  auto _9441_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >(monty::shape(_9439_.size()),_9439_.begin(),_9439_.end()));
  return _pubthis->__mosek_2fusion_2Model__disjunction(_766_name,_9441_);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4750:6-142
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ExprDomain >,1 > > _769_terms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_769_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ExprDomain >,1 > > _769_terms) { return __mosek_2fusion_2Model__disjunction(_769_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ExprDomain >,1 > > _769_terms)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Term >> _9442_;
  for (int32_t _770_i = (int)0, _9443_ = (int)((_769_terms)->size(0)); _770_i < _9443_ ; ++_770_i)
  {
    _9442_.push_back(((*_769_terms)(_770_i))->__mosek_2fusion_2ExprDomain__toDJCTerm());
  }
  auto _9444_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >(monty::shape(_9442_.size()),_9442_.begin(),_9442_.end()));
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),_9444_);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4748:6-128
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _771_name,monty::rc_ptr< ::mosek::fusion::ExprDomain > _772_term) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_771_name,_772_term); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _771_name,monty::rc_ptr< ::mosek::fusion::ExprDomain > _772_term) { return __mosek_2fusion_2Model__disjunction(_771_name,_772_term); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _771_name,monty::rc_ptr< ::mosek::fusion::ExprDomain > _772_term)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_771_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_772_term->__mosek_2fusion_2ExprDomain__toDJCTerm().get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4746:6-113
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::ExprDomain > _773_term) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_773_term); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::ExprDomain > _773_term) { return __mosek_2fusion_2Model__disjunction(_773_term); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::ExprDomain > _773_term)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_773_term->__mosek_2fusion_2ExprDomain__toDJCTerm().get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4743:6-115
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _774_t1,monty::rc_ptr< ::mosek::fusion::Term > _775_t2,monty::rc_ptr< ::mosek::fusion::Term > _776_t3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_774_t1,_775_t2,_776_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _774_t1,monty::rc_ptr< ::mosek::fusion::Term > _775_t2,monty::rc_ptr< ::mosek::fusion::Term > _776_t3) { return __mosek_2fusion_2Model__disjunction(_774_t1,_775_t2,_776_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _774_t1,monty::rc_ptr< ::mosek::fusion::Term > _775_t2,monty::rc_ptr< ::mosek::fusion::Term > _776_t3)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_774_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_775_t2.get()),::monty::rc_ptr<::mosek::fusion::Term>(_776_t3.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4742:6-103
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _777_t1,monty::rc_ptr< ::mosek::fusion::Term > _778_t2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_777_t1,_778_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _777_t1,monty::rc_ptr< ::mosek::fusion::Term > _778_t2) { return __mosek_2fusion_2Model__disjunction(_777_t1,_778_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _777_t1,monty::rc_ptr< ::mosek::fusion::Term > _778_t2)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_777_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_778_t2.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4741:6-91
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _779_t1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_779_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _779_t1) { return __mosek_2fusion_2Model__disjunction(_779_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _779_t1)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_779_t1.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4739:6-129
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _780_name,monty::rc_ptr< ::mosek::fusion::Term > _781_t1,monty::rc_ptr< ::mosek::fusion::Term > _782_t2,monty::rc_ptr< ::mosek::fusion::Term > _783_t3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_780_name,_781_t1,_782_t2,_783_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _780_name,monty::rc_ptr< ::mosek::fusion::Term > _781_t1,monty::rc_ptr< ::mosek::fusion::Term > _782_t2,monty::rc_ptr< ::mosek::fusion::Term > _783_t3) { return __mosek_2fusion_2Model__disjunction(_780_name,_781_t1,_782_t2,_783_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _780_name,monty::rc_ptr< ::mosek::fusion::Term > _781_t1,monty::rc_ptr< ::mosek::fusion::Term > _782_t2,monty::rc_ptr< ::mosek::fusion::Term > _783_t3)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_780_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_781_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_782_t2.get()),::monty::rc_ptr<::mosek::fusion::Term>(_783_t3.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4738:6-117
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _784_name,monty::rc_ptr< ::mosek::fusion::Term > _785_t1,monty::rc_ptr< ::mosek::fusion::Term > _786_t2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_784_name,_785_t1,_786_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _784_name,monty::rc_ptr< ::mosek::fusion::Term > _785_t1,monty::rc_ptr< ::mosek::fusion::Term > _786_t2) { return __mosek_2fusion_2Model__disjunction(_784_name,_785_t1,_786_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _784_name,monty::rc_ptr< ::mosek::fusion::Term > _785_t1,monty::rc_ptr< ::mosek::fusion::Term > _786_t2)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_784_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_785_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_786_t2.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4737:6-105
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _787_name,monty::rc_ptr< ::mosek::fusion::Term > _788_t1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_787_name,_788_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _787_name,monty::rc_ptr< ::mosek::fusion::Term > _788_t1) { return __mosek_2fusion_2Model__disjunction(_787_name,_788_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _787_name,monty::rc_ptr< ::mosek::fusion::Term > _788_t1)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_787_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_788_t1.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.formstConstr
// Method mosek.fusion.Model.formstConstr @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4732:6-4735:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _789_sb,std::shared_ptr< monty::ndarray< int32_t,1 > > _790_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _791_idxs)
{
  _checked_ptr_1<int32_t> _ptr__790_shape(_790_shape ? _790_shape->raw() : nullptr, _790_shape ? _790_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__791_idxs(_791_idxs ? _791_idxs->raw() : nullptr, _791_idxs ? _791_idxs->size(0) : 0);
  return _789_sb;
}
// End mosek.fusion.Model.formstConstr

// Begin mosek.fusion.Model.acon_release
// Method mosek.fusion.Model.acon_release @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4622:6-4641:7
void mosek::fusion::p_Model::acon_release(int32_t _792_id)
{
  int32_t _793_num = acon_block_map->blocksize(_792_id);
  if ((_793_num >= (int)0))
  {
    {
      int32_t _794_numcone = acc_block_map->blocksize(((*acon_acc)(_792_id)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _795_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_794_numcone)));
      _checked_ptr_1<int32_t> _ptr__795_accidxs(_795_accidxs ? _795_accidxs->raw() : nullptr,_795_accidxs ? _795_accidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _796_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_793_num)));
      _checked_ptr_1<int32_t> _ptr__796_afeidxs(_796_afeidxs ? _796_afeidxs->raw() : nullptr,_796_afeidxs ? _796_afeidxs->size(0) : 0);
      acc_block_map->get(((*acon_acc)(_792_id)),_795_accidxs,(int)0);
      acc_block_map->free(((*acon_acc)(_792_id)));
      afe_blocks->get(((*acon_afe)(_792_id)),_796_afeidxs,(int)0);
      afe_release(((*acon_afe)(_792_id)));
      acon_block_map->free(_792_id);
      std::vector<int64_t> _9445_;
      for (int32_t _797_i = (int)0, _9446_ = _793_num; _797_i < _9446_ ; ++_797_i)
      {
        _9445_.push_back(_ptr__796_afeidxs[_797_i]);
      }
      auto _9447_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9445_.size()),_9445_.begin(),_9445_.end()));
      task_clearafelist(_9447_);
      std::vector<int64_t> _9448_;
      for (int32_t _798_i = (int)0, _9449_ = _794_numcone; _798_i < _9449_ ; ++_798_i)
      {
        _9448_.push_back(_ptr__795_accidxs[_798_i]);
      }
      auto _9450_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9448_.size()),_9448_.begin(),_9448_.end()));
      std::vector<int64_t> _9451_;
      for (int32_t _799_i = (int)0, _9452_ = _794_numcone; _799_i < _9452_ ; ++_799_i)
      {
        _9451_.push_back((int)0);
      }
      auto _9453_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9451_.size()),_9451_.begin(),_9451_.end()));
      task_putacclist(_9450_,_9453_,std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))));
    }
  }
  {}
}
// End mosek.fusion.Model.acon_release

// Begin mosek.fusion.Model.acon_allocate
// Method mosek.fusion.Model.acon_allocate @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4541:6-4620:7
int32_t mosek::fusion::p_Model::acon_allocate(int64_t _800_domidx,int32_t _801_conesize,int32_t _802_numcone,std::shared_ptr< monty::ndarray< double,1 > > _803_g,std::shared_ptr< monty::ndarray< int32_t,1 > > _804_afeidxs,std::shared_ptr< monty::ndarray< int32_t,1 > > _805_accidxs)
{
  _checked_ptr_1<double> _ptr__803_g(_803_g ? _803_g->raw() : nullptr, _803_g ? _803_g->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__804_afeidxs(_804_afeidxs ? _804_afeidxs->raw() : nullptr, _804_afeidxs ? _804_afeidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__805_accidxs(_805_accidxs ? _805_accidxs->raw() : nullptr, _805_accidxs ? _805_accidxs->size(0) : 0);
  int32_t _806_n = safe_mul( _802_numcone,_801_conesize );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _807_aconidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_806_n)));
  _checked_ptr_1<int32_t> _ptr__807_aconidxs(_807_aconidxs ? _807_aconidxs->raw() : nullptr,_807_aconidxs ? _807_aconidxs->size(0) : 0);
  int32_t _808_aconid = acon_block_map->alloc(_806_n);
  int32_t _809_accid = acc_block_map->alloc(_802_numcone);
  int32_t _810_afeid = afe_allocate(_804_afeidxs);
  acon_block_map->get(_808_aconid,_807_aconidxs,(int)0);
  acc_block_map->get(_809_accid,_805_accidxs,(int)0);
  int32_t _811_acon_block_cap = acon_block_map->block_capacity();
  int32_t _812_acon_cap = acon_block_map->capacity();
  if ((_811_acon_block_cap > (int)((acon_acc)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _813_tmpacc = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_811_acon_block_cap)));
      _checked_ptr_1<int32_t> _ptr__813_tmpacc(_813_tmpacc ? _813_tmpacc->raw() : nullptr,_813_tmpacc ? _813_tmpacc->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _814_tmpafe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_811_acon_block_cap)));
      _checked_ptr_1<int32_t> _ptr__814_tmpafe(_814_tmpafe ? _814_tmpafe->raw() : nullptr,_814_tmpafe ? _814_tmpafe->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(acon_acc,(int)0,_813_tmpacc,(int)0,(int)((acon_acc)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_afe,(int)0,_814_tmpafe,(int)0,(int)((acon_afe)->size(0)));
      acon_acc = _813_tmpacc;
      acon_afe = _814_tmpafe;
    }
  }
  {}
  ((*acon_acc)(_808_aconid)) = _809_accid;
  ((*acon_afe)(_808_aconid)) = _810_afeid;
  if ((_808_aconid >= (int)((acons)->size(0))))
  {
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9454_;
      for (int32_t _816_i = (int)0, _9455_ = safe_mul( (int)((acons)->size(0)),(int)2 ); _816_i < _9455_ ; ++_816_i)
      {
        _9454_.push_back(nullptr);
      }
      auto _9456_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9454_.size()),_9454_.begin(),_9454_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _815_newacons = _9456_;
      int32_t _9457_ = (int)0;
      int32_t _9458_ = (int)((acons)->size(0));
      for (int32_t _817_i = _9457_; _817_i < _9458_; ++_817_i)
      {
        {
          ((*_815_newacons)(_817_i)) = ((*acons)(_817_i));
        }
      }
      acons = _815_newacons;
    }
  }
  {}
  if ((_812_acon_cap > (int)((acon_elm_accid)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _818_tmp_accid = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_812_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__818_tmp_accid(_818_tmp_accid ? _818_tmp_accid->raw() : nullptr,_818_tmp_accid ? _818_tmp_accid->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _819_tmp_scale = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_812_acon_cap)));
      _checked_ptr_1<double> _ptr__819_tmp_scale(_819_tmp_scale ? _819_tmp_scale->raw() : nullptr,_819_tmp_scale ? _819_tmp_scale->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _820_tmp_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_812_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__820_tmp_ofs(_820_tmp_ofs ? _820_tmp_ofs->raw() : nullptr,_820_tmp_ofs ? _820_tmp_ofs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _821_tmp_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_812_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__821_tmp_afe(_821_tmp_afe ? _821_tmp_afe->raw() : nullptr,_821_tmp_afe ? _821_tmp_afe->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_accid,(int)0,_818_tmp_accid,(int)0,(int)((acon_elm_accid)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_scale,(int)0,_819_tmp_scale,(int)0,(int)((acon_elm_scale)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_ofs,(int)0,_820_tmp_ofs,(int)0,(int)((acon_elm_ofs)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_afe,(int)0,_821_tmp_afe,(int)0,(int)((acon_elm_afe)->size(0)));
      acon_elm_accid = _818_tmp_accid;
      acon_elm_ofs = _820_tmp_ofs;
      acon_elm_afe = _821_tmp_afe;
      acon_elm_scale = _819_tmp_scale;
    }
  }
  {}
  int32_t _822_maxaccidx = (int)0;
  int32_t _9459_ = (int)0;
  int32_t _9460_ = (int)((_805_accidxs)->size(0));
  for (int32_t _823_i = _9459_; _823_i < _9460_; ++_823_i)
  {
    {
      if ((_ptr__805_accidxs[_823_i] > _822_maxaccidx))
      {
        {
          _822_maxaccidx = _ptr__805_accidxs[_823_i];
        }
      }
      {}
    }
  }
  _822_maxaccidx += (int)1;
  int32_t _824_nacc = task_numacc();
  if ((_824_nacc < _822_maxaccidx))
  {
    {
      task_append_accs((int64_t)0,(_822_maxaccidx - _824_nacc),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))));
    }
  }
  {}
  std::vector<int64_t> _9461_;
  for (int32_t _825_i = (int)0, _9462_ = (int)((_805_accidxs)->size(0)); _825_i < _9462_ ; ++_825_i)
  {
    _9461_.push_back(_ptr__805_accidxs[_825_i]);
  }
  auto _9463_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9461_.size()),_9461_.begin(),_9461_.end()));
  std::vector<int64_t> _9464_;
  for (int32_t _826_i = (int)0, _9465_ = (int)((_805_accidxs)->size(0)); _826_i < _9465_ ; ++_826_i)
  {
    _9464_.push_back(_800_domidx);
  }
  auto _9466_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9464_.size()),_9464_.begin(),_9464_.end()));
  std::vector<int64_t> _9467_;
  for (int32_t _827_i = (int)0, _9468_ = (int)((_804_afeidxs)->size(0)); _827_i < _9468_ ; ++_827_i)
  {
    _9467_.push_back(_ptr__804_afeidxs[_827_i]);
  }
  auto _9469_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9467_.size()),_9467_.begin(),_9467_.end()));
  task_putacclist(_9463_,_9466_,_9469_,_803_g);
  {
    int32_t _828_k = (int)0;
    int32_t _9470_ = (int)0;
    int32_t _9471_ = _802_numcone;
    for (int32_t _829_i = _9470_; _829_i < _9471_; ++_829_i)
    {
      {
        int32_t _9472_ = (int)0;
        int32_t _9473_ = _801_conesize;
        for (int32_t _830_j = _9472_; _830_j < _9473_; ++_830_j)
        {
          {
            ((*acon_elm_accid)(_ptr__807_aconidxs[_828_k])) = _ptr__805_accidxs[_829_i];
            ((*acon_elm_ofs)(_ptr__807_aconidxs[_828_k])) = _830_j;
            ((*acon_elm_afe)(_ptr__807_aconidxs[_828_k])) = _ptr__804_afeidxs[_828_k];
            ((*acon_elm_scale)(_ptr__807_aconidxs[_828_k])) = 1.0;
            ++ _828_k;
          }
        }
      }
    }
  }
  return _808_aconid;
}
// End mosek.fusion.Model.acon_allocate

// Begin mosek.fusion.Model.afe_release
// Method mosek.fusion.Model.afe_release @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4533:6-4539:7
void mosek::fusion::p_Model::afe_release(int32_t _831_id)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _832_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(afe_blocks->blocksize(_831_id))));
  _checked_ptr_1<int32_t> _ptr__832_nidxs(_832_nidxs ? _832_nidxs->raw() : nullptr,_832_nidxs ? _832_nidxs->size(0) : 0);
  afe_blocks->release(_831_id,_832_nidxs);
  std::vector<int64_t> _9474_;
  for (int32_t _833_i = (int)0, _9475_ = (int)((_832_nidxs)->size(0)); _833_i < _9475_ ; ++_833_i)
  {
    _9474_.push_back(_ptr__832_nidxs[_833_i]);
  }
  auto _9476_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9474_.size()),_9474_.begin(),_9474_.end()));
  task_clearafelist(_9476_);
}
// End mosek.fusion.Model.afe_release

// Begin mosek.fusion.Model.afe_allocate
// Method mosek.fusion.Model.afe_allocate @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4518:6-4531:7
int32_t mosek::fusion::p_Model::afe_allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _834_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__834_nativeidxs(_834_nativeidxs ? _834_nativeidxs->raw() : nullptr, _834_nativeidxs ? _834_nativeidxs->size(0) : 0);
  int32_t _835_afeid = afe_blocks->allocate(_834_nativeidxs);
  if (((int)((_834_nativeidxs)->size(0)) > (int)0))
  {
    {
      int32_t _836_tasknum = task_numafe();
      int32_t _837_maxidx = _ptr__834_nativeidxs[(int)0];
      int32_t _9477_ = (int)1;
      int32_t _9478_ = (int)((_834_nativeidxs)->size(0));
      for (int32_t _838_i = _9477_; _838_i < _9478_; ++_838_i)
      {
        {
          if ((_ptr__834_nativeidxs[_838_i] > _837_maxidx))
          {
            {
              _837_maxidx = _ptr__834_nativeidxs[_838_i];
            }
          }
          {}
        }
      }
      if ((safe_add( _837_maxidx,(int)1 ) > _836_tasknum))
      {
        {
          int32_t _839_n = (safe_add( _837_maxidx,(int)1 ) - _836_tasknum);
          task_append_afes((int64_t)(_839_n));
          task_numaferow += _839_n;
        }
      }
      {}
    }
  }
  {}
  return _835_afeid;
}
// End mosek.fusion.Model.afe_allocate

// Begin mosek.fusion.Model.con_release
// Method mosek.fusion.Model.con_release @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4503:6-4513:7
void mosek::fusion::p_Model::con_release(int32_t _840_id)
{
  int32_t _841_num = con_blocks->blocksize(_840_id);
  if ((_841_num >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _842_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_841_num)));
      _checked_ptr_1<int32_t> _ptr__842_nativeidxs(_842_nativeidxs ? _842_nativeidxs->raw() : nullptr,_842_nativeidxs ? _842_nativeidxs->size(0) : 0);
      con_blocks->release(_840_id,_842_nativeidxs);
      ((*cons)(_840_id)) = nullptr;
      task_con_putboundlist_fr(_842_nativeidxs);
    }
  }
  {}
}
// End mosek.fusion.Model.con_release

// Begin mosek.fusion.Model.con_allocate
// Method mosek.fusion.Model.con_allocate @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4483:6-4501:7
int32_t mosek::fusion::p_Model::con_allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _843_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__843_nativeidxs(_843_nativeidxs ? _843_nativeidxs->raw() : nullptr, _843_nativeidxs ? _843_nativeidxs->size(0) : 0);
  int32_t _844_conid = con_blocks->allocate(_843_nativeidxs);
  if (((int)((_843_nativeidxs)->size(0)) > (int)0))
  {
    {
      int32_t _845_maxidx = _ptr__843_nativeidxs[(int)0];
      int32_t _9479_ = (int)1;
      int32_t _9480_ = (int)((_843_nativeidxs)->size(0));
      for (int32_t _846_i = _9479_; _846_i < _9480_; ++_846_i)
      {
        {
          if ((_ptr__843_nativeidxs[_846_i] > _845_maxidx))
          {
            {
              _845_maxidx = _ptr__843_nativeidxs[_846_i];
            }
          }
          {}
        }
      }
      if ((safe_add( _845_maxidx,(int)1 ) > num_task_con))
      {
        {
          int32_t _847_n = (safe_add( _845_maxidx,(int)1 ) - num_task_con);
          task_append_con(_847_n);
          num_task_con += _847_n;
        }
      }
      {}
    }
  }
  {}
  if ((_844_conid >= (int)((cons)->size(0))))
  {
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9481_;
      for (int32_t _849_i = (int)0, _9482_ = safe_mul( (int)((cons)->size(0)),(int)2 ); _849_i < _9482_ ; ++_849_i)
      {
        _9481_.push_back(nullptr);
      }
      auto _9483_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9481_.size()),_9481_.begin(),_9481_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _848_newcons = _9483_;
      int32_t _9484_ = (int)0;
      int32_t _9485_ = (int)((cons)->size(0));
      for (int32_t _850_i = _9484_; _850_i < _9485_; ++_850_i)
      {
        {
          ((*_848_newcons)(_850_i)) = ((*cons)(_850_i));
        }
      }
      cons = _848_newcons;
    }
  }
  {}
  return _844_conid;
}
// End mosek.fusion.Model.con_allocate

// Begin mosek.fusion.Model.barvar_alloc
// Method mosek.fusion.Model.barvar_alloc @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4376:6-4477:7
int32_t mosek::fusion::p_Model::barvar_alloc(int32_t _851_conedim,int32_t _852_numcone,std::shared_ptr< monty::ndarray< int32_t,1 > > _853_barvaridxs,std::shared_ptr< monty::ndarray< int64_t,1 > > _854_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__853_barvaridxs(_853_barvaridxs ? _853_barvaridxs->raw() : nullptr, _853_barvaridxs ? _853_barvaridxs->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__854_nativeidxs(_854_nativeidxs ? _854_nativeidxs->raw() : nullptr, _854_nativeidxs ? _854_nativeidxs->size(0) : 0);
  int32_t _855_barvarid = barvar_num;
  ++ barvar_num;
  int32_t _856_conesize = (safe_mul( _851_conedim,safe_add( _851_conedim,(int)1 ) ) / (int)2);
  int32_t _857_domsize = safe_mul( _856_conesize,_852_numcone );
  int32_t _858_block_num = ((*barvar_block_ptr)(_855_barvarid));
  int32_t _859_block_cap = (int)((barvar_block_dim)->size(0));
  int32_t _860_block_elm_num = ((*barvar_block_elm_ptr)(_855_barvarid));
  int32_t _861_block_elm_cap = (int)((barvar_block_elm_barj)->size(0));
  if ((_859_block_cap < safe_add( _858_block_num,(int)1 )))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _862_new_barvar_block_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ))));
      _checked_ptr_1<int32_t> _ptr__862_new_barvar_block_dim(_862_new_barvar_block_dim ? _862_new_barvar_block_dim->raw() : nullptr,_862_new_barvar_block_dim ? _862_new_barvar_block_dim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _863_new_barvar_block_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__863_new_barvar_block_ptr(_863_new_barvar_block_ptr ? _863_new_barvar_block_ptr->raw() : nullptr,_863_new_barvar_block_ptr ? _863_new_barvar_block_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _864_new_barvar_block_elm_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__864_new_barvar_block_elm_ptr(_864_new_barvar_block_elm_ptr ? _864_new_barvar_block_elm_ptr->raw() : nullptr,_864_new_barvar_block_elm_ptr ? _864_new_barvar_block_elm_ptr->size(0) : 0);
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9486_;
      for (int32_t _866_i = (int)0, _9487_ = safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ); _866_i < _9487_ ; ++_866_i)
      {
        _9486_.push_back(nullptr);
      }
      auto _9488_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9486_.size()),_9486_.begin(),_9486_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _865_new_barvars = _9488_;
      int32_t _9489_ = (int)0;
      int32_t _9490_ = (int)((barvars)->size(0));
      for (int32_t _867_i = _9489_; _867_i < _9490_; ++_867_i)
      {
        {
          ((*_865_new_barvars)(_867_i)) = ((*barvars)(_867_i));
        }
      }
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_dim,(int)0,_862_new_barvar_block_dim,(int)0,(int)((barvar_block_dim)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_ptr,(int)0,_863_new_barvar_block_ptr,(int)0,(int)((barvar_block_ptr)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_ptr,(int)0,_864_new_barvar_block_elm_ptr,(int)0,(int)((barvar_block_elm_ptr)->size(0)));
      barvar_block_dim = _862_new_barvar_block_dim;
      barvar_block_ptr = _863_new_barvar_block_ptr;
      barvar_block_elm_ptr = _864_new_barvar_block_elm_ptr;
      barvars = _865_new_barvars;
    }
  }
  {}
  if ((_861_block_elm_cap < safe_add( _860_block_elm_num,_857_domsize )))
  {
    {
      int32_t _868_addnum = (safe_add( _861_block_elm_cap,_857_domsize ) - _860_block_elm_num);
      if ((_868_addnum < _861_block_elm_cap))
      {
        {
          _868_addnum = _861_block_elm_cap;
        }
      }
      {}
      int32_t _869_newlen = safe_add( _861_block_elm_cap,_868_addnum );
      std::shared_ptr< monty::ndarray< int32_t,1 > > _870_new_barvar_block_elm_barj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_869_newlen)));
      _checked_ptr_1<int32_t> _ptr__870_new_barvar_block_elm_barj(_870_new_barvar_block_elm_barj ? _870_new_barvar_block_elm_barj->raw() : nullptr,_870_new_barvar_block_elm_barj ? _870_new_barvar_block_elm_barj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _871_new_barvar_block_elm_i = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_869_newlen)));
      _checked_ptr_1<int32_t> _ptr__871_new_barvar_block_elm_i(_871_new_barvar_block_elm_i ? _871_new_barvar_block_elm_i->raw() : nullptr,_871_new_barvar_block_elm_i ? _871_new_barvar_block_elm_i->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _872_new_barvar_block_elm_j = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_869_newlen)));
      _checked_ptr_1<int32_t> _ptr__872_new_barvar_block_elm_j(_872_new_barvar_block_elm_j ? _872_new_barvar_block_elm_j->raw() : nullptr,_872_new_barvar_block_elm_j ? _872_new_barvar_block_elm_j->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_barj,(int)0,_870_new_barvar_block_elm_barj,(int)0,(int)((barvar_block_elm_barj)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_i,(int)0,_871_new_barvar_block_elm_i,(int)0,(int)((barvar_block_elm_i)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_j,(int)0,_872_new_barvar_block_elm_j,(int)0,(int)((barvar_block_elm_j)->size(0)));
      barvar_block_elm_barj = _870_new_barvar_block_elm_barj;
      barvar_block_elm_i = _871_new_barvar_block_elm_i;
      barvar_block_elm_j = _872_new_barvar_block_elm_j;
    }
  }
  {}
  int32_t _873_firstcone = task_numbarvar();
  int32_t _9491_ = (int)0;
  int32_t _9492_ = _852_numcone;
  for (int32_t _874_i = _9491_; _874_i < _9492_; ++_874_i)
  {
    {
      _ptr__853_barvaridxs[_874_i] = safe_add( _873_firstcone,_874_i );
    }
  }
  if ((safe_add( _873_firstcone,_852_numcone ) >= (int)((barvar_dim)->size(0))))
  {
    {
      int32_t _875_addnum = (safe_add( _873_firstcone,_852_numcone ) - (int)((barvar_dim)->size(0)));
      if ((_875_addnum < (int)((barvar_dim)->size(0))))
      {
        {
          _875_addnum = (int)((barvar_dim)->size(0));
        }
      }
      {}
      int32_t _876_newnum = safe_add( _875_addnum,(int)((barvar_dim)->size(0)) );
      std::shared_ptr< monty::ndarray< int32_t,1 > > _877_new_barvar_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_876_newnum)));
      _checked_ptr_1<int32_t> _ptr__877_new_barvar_dim(_877_new_barvar_dim ? _877_new_barvar_dim->raw() : nullptr,_877_new_barvar_dim ? _877_new_barvar_dim->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_dim,(int)0,_877_new_barvar_dim,(int)0,(int)((barvar_dim)->size(0)));
      barvar_dim = _877_new_barvar_dim;
    }
  }
  {}
  ((*barvar_block_dim)(_855_barvarid)) = _851_conedim;
  ((*barvar_block_ptr)(safe_add( _855_barvarid,(int)1 ))) = safe_add( ((*barvar_block_ptr)(_855_barvarid)),_852_numcone );
  ((*barvar_block_elm_ptr)(safe_add( _855_barvarid,(int)1 ))) = safe_add( ((*barvar_block_elm_ptr)(_855_barvarid)),_857_domsize );
  {
    int32_t _878_k = (int)0;
    int32_t _879_b = ((*barvar_block_elm_ptr)(_855_barvarid));
    int32_t _9493_ = (int)0;
    int32_t _9494_ = _852_numcone;
    for (int32_t _880_i = _9493_; _880_i < _9494_; ++_880_i)
    {
      {
        int32_t _9495_ = (int)0;
        int32_t _9496_ = _851_conedim;
        for (int32_t _881_j1 = _9495_; _881_j1 < _9496_; ++_881_j1)
        {
          {
            int32_t _9497_ = _881_j1;
            int32_t _9498_ = _851_conedim;
            for (int32_t _882_j0 = _9497_; _882_j0 < _9498_; ++_882_j0)
            {
              {
                ((*barvar_block_elm_barj)(safe_add( _879_b,_878_k ))) = safe_add( _873_firstcone,_880_i );
                ((*barvar_block_elm_i)(safe_add( _879_b,_878_k ))) = _882_j0;
                ((*barvar_block_elm_j)(safe_add( _879_b,_878_k ))) = _881_j1;
                _ptr__854_nativeidxs[_878_k] = safe_add( _879_b,_878_k );
                ++ _878_k;
              }
            }
          }
        }
      }
    }
    int32_t _9499_ = (int)0;
    int32_t _9500_ = _852_numcone;
    for (int32_t _883_i = _9499_; _883_i < _9500_; ++_883_i)
    {
      {
        ((*barvar_dim)(safe_add( _873_firstcone,_883_i ))) = _851_conedim;
      }
    }
  }
  int32_t _884_barvaridx = task_append_barvar(_851_conedim,_852_numcone);
  return _855_barvarid;
}
// End mosek.fusion.Model.barvar_alloc

// Begin mosek.fusion.Model.conicvar_alloc
// Method mosek.fusion.Model.conicvar_alloc @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4343:6-4374:7
int32_t mosek::fusion::p_Model::conicvar_alloc(int64_t _885_domidx,int32_t _886_conesize,int32_t _887_numcone,std::shared_ptr< monty::ndarray< int32_t,1 > > _888_accidxs,std::shared_ptr< monty::ndarray< int32_t,1 > > _889_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__888_accidxs(_888_accidxs ? _888_accidxs->raw() : nullptr, _888_accidxs ? _888_accidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__889_nativeidxs(_889_nativeidxs ? _889_nativeidxs->raw() : nullptr, _889_nativeidxs ? _889_nativeidxs->size(0) : 0);
  int32_t _890_n = safe_mul( _886_conesize,_887_numcone );
  int32_t _891_varid = linearvar_alloc(_890_n,_889_nativeidxs);
  std::shared_ptr< monty::ndarray< double,1 > > _892_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_890_n)));
  _checked_ptr_1<double> _ptr__892_g(_892_g ? _892_g->raw() : nullptr,_892_g ? _892_g->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _893_conelmidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_890_n)));
  _checked_ptr_1<int32_t> _ptr__893_conelmidx(_893_conelmidx ? _893_conelmidx->raw() : nullptr,_893_conelmidx ? _893_conelmidx->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _894_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_890_n)));
  _checked_ptr_1<int32_t> _ptr__894_afeidxs(_894_afeidxs ? _894_afeidxs->raw() : nullptr,_894_afeidxs ? _894_afeidxs->size(0) : 0);
  int32_t _895_conid = acon_allocate(_885_domidx,_886_conesize,_887_numcone,_892_g,_894_afeidxs,_888_accidxs);
  ((*var_block_acc_id)(_891_varid)) = _895_conid;
  int32_t _9501_ = (int)0;
  int32_t _9502_ = _890_n;
  for (int32_t _896_i = _9501_; _896_i < _9502_; ++_896_i)
  {
    {
      ((*var_elm_acc_idx)(_ptr__889_nativeidxs[_896_i])) = _ptr__888_accidxs[(_896_i / _886_conesize)];
      ((*var_elm_acc_ofs)(_ptr__889_nativeidxs[_896_i])) = (_896_i % _886_conesize);
    }
  }
  std::vector<int64_t> _9503_;
  for (int32_t _897_i = (int)0, _9504_ = (int)((_894_afeidxs)->size(0)); _897_i < _9504_ ; ++_897_i)
  {
    _9503_.push_back(_ptr__894_afeidxs[_897_i]);
  }
  auto _9505_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9503_.size()),_9503_.begin(),_9503_.end()));
  std::vector<int32_t> _9506_;
  for (int32_t _898_i = (int)0, _9507_ = safe_add( _890_n,(int)1 ); _898_i < _9507_ ; ++_898_i)
  {
    _9506_.push_back(_898_i);
  }
  auto _9508_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9506_.size()),_9506_.begin(),_9506_.end()));
  std::vector<double> _9509_;
  for (int32_t _899_i = (int)0, _9510_ = _890_n; _899_i < _9510_ ; ++_899_i)
  {
    _9509_.push_back(1.0);
  }
  auto _9511_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9509_.size()),_9509_.begin(),_9509_.end()));
  std::vector<double> _9512_;
  for (int32_t _900_i = (int)0, _9513_ = _890_n; _900_i < _9513_ ; ++_900_i)
  {
    _9512_.push_back(0.0);
  }
  auto _9514_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9512_.size()),_9512_.begin(),_9512_.end()));
  task_putafeflist(_9505_,_9508_,_889_nativeidxs,_9511_,_9514_);
  return _891_varid;
}
// End mosek.fusion.Model.conicvar_alloc

// Begin mosek.fusion.Model.linearvar_alloc
// Method mosek.fusion.Model.linearvar_alloc @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4305:6-4341:7
int32_t mosek::fusion::p_Model::linearvar_alloc(int32_t _901_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _902_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__902_nativeidxs(_902_nativeidxs ? _902_nativeidxs->raw() : nullptr, _902_nativeidxs ? _902_nativeidxs->size(0) : 0);
  int32_t _903_varid = var_block_map->alloc(_901_n);
  int32_t _904_maxvaridx = safe_add( var_block_map->maxidx(_903_varid),(int)1 );
  int32_t _905_cap = var_block_map->capacity();
  int32_t _906_numblocks = var_block_map->block_capacity();
  var_block_map->get(_903_varid,_902_nativeidxs,(int)0);
  if ((task_numvar() < _904_maxvaridx))
  {
    {
      task_append_var((_904_maxvaridx - task_numvar()));
    }
  }
  {}
  if ((_903_varid >= (int)((vars)->size(0))))
  {
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9515_;
      for (int32_t _908_i = (int)0, _9516_ = safe_mul( (int)((vars)->size(0)),(int)2 ); _908_i < _9516_ ; ++_908_i)
      {
        _9515_.push_back(nullptr);
      }
      auto _9517_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9515_.size()),_9515_.begin(),_9515_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _907_newvars = _9517_;
      int32_t _9518_ = (int)0;
      int32_t _9519_ = (int)((vars)->size(0));
      for (int32_t _909_i = _9518_; _909_i < _9519_; ++_909_i)
      {
        {
          ((*_907_newvars)(_909_i)) = ((*vars)(_909_i));
        }
      }
      vars = _907_newvars;
    }
  }
  {}
  if ((_906_numblocks > (int)((var_block_acc_id)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _910_new_var_block_acc_id = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_906_numblocks)));
      _checked_ptr_1<int32_t> _ptr__910_new_var_block_acc_id(_910_new_var_block_acc_id ? _910_new_var_block_acc_id->raw() : nullptr,_910_new_var_block_acc_id ? _910_new_var_block_acc_id->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(var_block_acc_id,(int)0,_910_new_var_block_acc_id,(int)0,(int)((var_block_acc_id)->size(0)));
      var_block_acc_id = _910_new_var_block_acc_id;
    }
  }
  {}
  if ((_905_cap > (int)((var_elm_acc_idx)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _911_new_var_elm_acc_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_905_cap)));
      _checked_ptr_1<int32_t> _ptr__911_new_var_elm_acc_idx(_911_new_var_elm_acc_idx ? _911_new_var_elm_acc_idx->raw() : nullptr,_911_new_var_elm_acc_idx ? _911_new_var_elm_acc_idx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(var_elm_acc_idx,(int)0,_911_new_var_elm_acc_idx,(int)0,(int)((var_elm_acc_idx)->size(0)));
      var_elm_acc_idx = _911_new_var_elm_acc_idx;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _912_new_var_elm_acc_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_905_cap)));
      _checked_ptr_1<int32_t> _ptr__912_new_var_elm_acc_ofs(_912_new_var_elm_acc_ofs ? _912_new_var_elm_acc_ofs->raw() : nullptr,_912_new_var_elm_acc_ofs ? _912_new_var_elm_acc_ofs->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(var_elm_acc_ofs,(int)0,_912_new_var_elm_acc_ofs,(int)0,(int)((var_elm_acc_ofs)->size(0)));
      var_elm_acc_ofs = _912_new_var_elm_acc_ofs;
    }
  }
  {}
  ((*var_block_acc_id)(_903_varid)) = (-(int)1);
  int32_t _9520_ = (int)0;
  int32_t _9521_ = _901_n;
  for (int32_t _913_i = _9520_; _913_i < _9521_; ++_913_i)
  {
    {
      ((*var_elm_acc_idx)(_ptr__902_nativeidxs[_913_i])) = (-(int)1);
    }
  }
  return _903_varid;
}
// End mosek.fusion.Model.linearvar_alloc

// Begin mosek.fusion.Model.make_continuous
// Method mosek.fusion.Model.make_continuous @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4291:6-4302:7
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _914_idxs)
{
  _checked_ptr_1<int64_t> _ptr__914_idxs(_914_idxs ? _914_idxs->raw() : nullptr, _914_idxs ? _914_idxs->size(0) : 0);
  int32_t _915_count = (int)0;
  int32_t _9522_ = (int)0;
  int32_t _9523_ = (int)((_914_idxs)->size(0));
  for (int32_t _916_i = _9522_; _916_i < _9523_; ++_916_i)
  {
    {
      if ((_ptr__914_idxs[_916_i] > (int)0))
      {
        {
          ++ _915_count;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _917_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_915_count)));
  _checked_ptr_1<int32_t> _ptr__917_nativeidxs(_917_nativeidxs ? _917_nativeidxs->raw() : nullptr,_917_nativeidxs ? _917_nativeidxs->size(0) : 0);
  int32_t _918_k = (int)0;
  int32_t _9524_ = (int)0;
  int32_t _9525_ = (int)((_914_idxs)->size(0));
  for (int32_t _919_i = _9524_; _919_i < _9525_; ++_919_i)
  {
    {
      if ((_ptr__914_idxs[_919_i] > (int)0))
      {
        {
          _ptr__917_nativeidxs[_918_k] = (int32_t)_ptr__914_idxs[_919_i];
          ++ _918_k;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_917_nativeidxs);
}
// End mosek.fusion.Model.make_continuous

// Begin mosek.fusion.Model.make_integer
// Method mosek.fusion.Model.make_integer @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4279:6-4289:7
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _920_idxs)
{
  _checked_ptr_1<int64_t> _ptr__920_idxs(_920_idxs ? _920_idxs->raw() : nullptr, _920_idxs ? _920_idxs->size(0) : 0);
  int32_t _921_count = (int)0;
  int32_t _9526_ = (int)0;
  int32_t _9527_ = (int)((_920_idxs)->size(0));
  for (int32_t _922_i = _9526_; _922_i < _9527_; ++_922_i)
  {
    {
      if ((_ptr__920_idxs[_922_i] > (int)0))
      {
        {
          ++ _921_count;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _923_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_921_count)));
  _checked_ptr_1<int32_t> _ptr__923_nativeidxs(_923_nativeidxs ? _923_nativeidxs->raw() : nullptr,_923_nativeidxs ? _923_nativeidxs->size(0) : 0);
  int32_t _924_k = (int)0;
  int32_t _9528_ = (int)0;
  int32_t _9529_ = (int)((_920_idxs)->size(0));
  for (int32_t _925_i = _9528_; _925_i < _9529_; ++_925_i)
  {
    {
      if ((_ptr__920_idxs[_925_i] > (int)0))
      {
        {
          _ptr__923_nativeidxs[_924_k] = (int32_t)_ptr__920_idxs[_925_i];
          ++ _924_k;
        }
      }
      {}
    }
  }
  task_var_putintlist(_923_nativeidxs);
}
// End mosek.fusion.Model.make_integer

// Begin mosek.fusion.Model.putlicensewait
// Method mosek.fusion.Model.putlicensewait @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4277:6-87
void mosek::fusion::Model::putlicensewait
  ( bool _926_wait) { mosek::fusion::p_Model::putlicensewait(_926_wait); }
void mosek::fusion::p_Model::putlicensewait(bool _926_wait)
{
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_926_wait);
}
// End mosek.fusion.Model.putlicensewait

// Begin mosek.fusion.Model.putlicensepath
// Method mosek.fusion.Model.putlicensepath @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4274:6-90
void mosek::fusion::Model::putlicensepath
  ( const std::string & _927_licfile) { mosek::fusion::p_Model::putlicensepath(_927_licfile); }
void mosek::fusion::p_Model::putlicensepath(const std::string & _927_licfile)
{
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_927_licfile);
}
// End mosek.fusion.Model.putlicensepath

// Begin mosek.fusion.Model.putlicensecode
// Method mosek.fusion.Model.putlicensecode @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4270:6-87
void mosek::fusion::Model::putlicensecode
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _928_code) { mosek::fusion::p_Model::putlicensecode(_928_code); }
void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int32_t,1 > > _928_code)
{
  _checked_ptr_1<int32_t> _ptr__928_code(_928_code ? _928_code->raw() : nullptr, _928_code ? _928_code->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_928_code);
}
// End mosek.fusion.Model.putlicensecode

// Begin mosek.fusion.Model.dispose
// Method mosek.fusion.Model.dispose @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4255:6-4264:7
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }
void mosek::fusion::p_Model::dispose()
{
  int32_t _9530_ = (int)0;
  int32_t _9531_ = (int)((vars)->size(0));
  for (int32_t _929_i = _9530_; _929_i < _9531_; ++_929_i)
  {
    {
      ((*vars)(_929_i)) = nullptr;
    }
  }
  int32_t _9532_ = (int)0;
  int32_t _9533_ = (int)((cons)->size(0));
  for (int32_t _930_i = _9532_; _930_i < _9533_; ++_930_i)
  {
    {
      ((*cons)(_930_i)) = nullptr;
    }
  }
  int32_t _9534_ = (int)0;
  int32_t _9535_ = (int)((acons)->size(0));
  for (int32_t _931_i = _9534_; _931_i < _9535_; ++_931_i)
  {
    {
      ((*acons)(_931_i)) = nullptr;
    }
  }
  int32_t _9536_ = (int)0;
  int32_t _9537_ = (int)((barvars)->size(0));
  for (int32_t _932_i = _9536_; _932_i < _9537_; ++_932_i)
  {
    {
      ((*barvars)(_932_i)) = nullptr;
    }
  }
  if ((NULL != parameters.get()))
  {
    {
      int32_t _9538_ = (int)0;
      int32_t _9539_ = (int)((parameters)->size(0));
      for (int32_t _933_i = _9538_; _933_i < _9539_; ++_933_i)
      {
        {
          ((*parameters)(_933_i)) = nullptr;
        }
      }
    }
  }
  {}
  ::mosek::fusion::p_BaseModel::dispose();
}
// End mosek.fusion.Model.dispose

// Begin mosek.fusion.Model.getTask
// Method mosek.fusion.Model.getTask @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4235:6-64
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask()
{
  return __mosek_2fusion_2BaseModel__task_get();
}
// End mosek.fusion.Model.getTask

// Begin mosek.fusion.Model.getConstraintDuals
// Method mosek.fusion.Model.getConstraintDuals @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4209:6-4224:7
void mosek::fusion::Model :: getConstraintDuals(bool _934_lower,std::shared_ptr< monty::ndarray< int32_t,1 > > _935_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _936_res,int32_t _937_offset) { mosek::fusion::p_Model::_get_impl(this)->getConstraintDuals(_934_lower,_935_nativeidxs,_936_res,_937_offset); }
void mosek::fusion::p_Model::getConstraintDuals(bool _934_lower,std::shared_ptr< monty::ndarray< int32_t,1 > > _935_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _936_res,int32_t _937_offset)
{
  _checked_ptr_1<int32_t> _ptr__935_nativeidxs(_935_nativeidxs ? _935_nativeidxs->raw() : nullptr, _935_nativeidxs ? _935_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__936_res(_936_res ? _936_res->raw() : nullptr, _936_res ? _936_res->size(0) : 0);
  int32_t _938_n = (int)((_935_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _939_slc = getSolution_slc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__939_slc(_939_slc ? _939_slc->raw() : nullptr,_939_slc ? _939_slc->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _940_suc = getSolution_suc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__940_suc(_940_suc ? _940_suc->raw() : nullptr,_940_suc ? _940_suc->size(0) : 0);
  int32_t _9540_ = (int)0;
  int32_t _9541_ = _938_n;
  for (int32_t _941_p = _9540_; _941_p < _9541_; ++_941_p)
  {
    {
      if ((_ptr__935_nativeidxs[_941_p] >= (int)0))
      {
        {
          if (_934_lower)
          {
            {
              _ptr__936_res[safe_add( _937_offset,_941_p )] = _ptr__939_slc[_ptr__935_nativeidxs[_941_p]];
            }
          }
          else
          {
            {
              _ptr__936_res[safe_add( _937_offset,_941_p )] = (-_ptr__940_suc[_ptr__935_nativeidxs[_941_p]]);
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::SolutionError(std::string ("Requested invalid solution item"));
        }
      }
    }
  }
}
// End mosek.fusion.Model.getConstraintDuals

// Begin mosek.fusion.Model.getConstraintValues
// Method mosek.fusion.Model.getConstraintValues @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4175:6-4206:7
void mosek::fusion::Model :: getConstraintValues(bool _942_primal,std::shared_ptr< monty::ndarray< int32_t,1 > > _943_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _944_res,int32_t _945_offset) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_942_primal,_943_nativeidxs,_944_res,_945_offset); }
void mosek::fusion::p_Model::getConstraintValues(bool _942_primal,std::shared_ptr< monty::ndarray< int32_t,1 > > _943_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _944_res,int32_t _945_offset)
{
  _checked_ptr_1<int32_t> _ptr__943_nativeidxs(_943_nativeidxs ? _943_nativeidxs->raw() : nullptr, _943_nativeidxs ? _943_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__944_res(_944_res ? _944_res->raw() : nullptr, _944_res ? _944_res->size(0) : 0);
  int32_t _946_n = (int)((_943_nativeidxs)->size(0));
  if (_942_primal)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _947_xc = getSolution_xc(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__947_xc(_947_xc ? _947_xc->raw() : nullptr,_947_xc ? _947_xc->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _948_accx = getSolution_accx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__948_accx(_948_accx ? _948_accx->raw() : nullptr,_948_accx ? _948_accx->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _949_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__949_accptr(_949_accptr ? _949_accptr->raw() : nullptr,_949_accptr ? _949_accptr->size(0) : 0);
      int32_t _9542_ = (int)0;
      int32_t _9543_ = _946_n;
      for (int32_t _950_p = _9542_; _950_p < _9543_; ++_950_p)
      {
        {
          if ((_ptr__943_nativeidxs[_950_p] >= (int)0))
          {
            {
              _ptr__944_res[safe_add( _945_offset,_950_p )] = _ptr__947_xc[_ptr__943_nativeidxs[_950_p]];
            }
          }
          else
          {
            {
              int32_t _951_i = (-safe_add( (int)1,_ptr__943_nativeidxs[_950_p] ));
              _ptr__944_res[safe_add( _945_offset,_950_p )] = (_ptr__948_accx[safe_add( _ptr__949_accptr[((*acon_elm_accid)(_951_i))],((*acon_elm_ofs)(_951_i)) )] * ((*acon_elm_scale)(_951_i)));
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _952_y = getSolution_y(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__952_y(_952_y ? _952_y->raw() : nullptr,_952_y ? _952_y->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _953_accy = getSolution_accy(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__953_accy(_953_accy ? _953_accy->raw() : nullptr,_953_accy ? _953_accy->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _954_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__954_accptr(_954_accptr ? _954_accptr->raw() : nullptr,_954_accptr ? _954_accptr->size(0) : 0);
      int32_t _9544_ = (int)0;
      int32_t _9545_ = _946_n;
      for (int32_t _955_p = _9544_; _955_p < _9545_; ++_955_p)
      {
        {
          if ((_ptr__943_nativeidxs[_955_p] >= (int)0))
          {
            {
              _ptr__944_res[safe_add( _945_offset,_955_p )] = _ptr__952_y[_ptr__943_nativeidxs[_955_p]];
            }
          }
          else
          {
            {
              int32_t _956_i = (-safe_add( (int)1,_ptr__943_nativeidxs[_955_p] ));
              _ptr__944_res[safe_add( _945_offset,_955_p )] = (_ptr__953_accy[safe_add( _ptr__954_accptr[((*acon_elm_accid)(_956_i))],((*acon_elm_ofs)(_956_i)) )] * ((*acon_elm_scale)(_956_i)));
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getConstraintValues

// Begin mosek.fusion.Model.getVariableDuals
// Method mosek.fusion.Model.getVariableDuals @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4145:6-4172:7
void mosek::fusion::Model :: getVariableDuals(bool _957_lower,std::shared_ptr< monty::ndarray< int64_t,1 > > _958_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _959_res,int32_t _960_offset) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_957_lower,_958_nativeidxs,_959_res,_960_offset); }
void mosek::fusion::p_Model::getVariableDuals(bool _957_lower,std::shared_ptr< monty::ndarray< int64_t,1 > > _958_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _959_res,int32_t _960_offset)
{
  _checked_ptr_1<int64_t> _ptr__958_nativeidxs(_958_nativeidxs ? _958_nativeidxs->raw() : nullptr, _958_nativeidxs ? _958_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__959_res(_959_res ? _959_res->raw() : nullptr, _959_res ? _959_res->size(0) : 0);
  int32_t _961_n = (int)((_958_nativeidxs)->size(0));
  if (_957_lower)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _962_xx = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__962_xx(_962_xx ? _962_xx->raw() : nullptr,_962_xx ? _962_xx->size(0) : 0);
      int32_t _9546_ = (int)0;
      int32_t _9547_ = _961_n;
      for (int32_t _963_p = _9546_; _963_p < _9547_; ++_963_p)
      {
        {
          if ((_ptr__958_nativeidxs[_963_p] > (int)0))
          {
            {
              _ptr__959_res[safe_add( _960_offset,_963_p )] = _ptr__962_xx[_ptr__958_nativeidxs[_963_p]];
            }
          }
          else
          {
            {
              _ptr__959_res[safe_add( _960_offset,_963_p )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _964_xx = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__964_xx(_964_xx ? _964_xx->raw() : nullptr,_964_xx ? _964_xx->size(0) : 0);
      int32_t _9548_ = (int)0;
      int32_t _9549_ = _961_n;
      for (int32_t _965_p = _9548_; _965_p < _9549_; ++_965_p)
      {
        {
          if ((_ptr__958_nativeidxs[_965_p] > (int)0))
          {
            {
              _ptr__959_res[safe_add( _960_offset,_965_p )] = (-_ptr__964_xx[_ptr__958_nativeidxs[_965_p]]);
            }
          }
          else
          {
            {
              _ptr__959_res[safe_add( _960_offset,_965_p )] = (int)0;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getVariableDuals

// Begin mosek.fusion.Model.getVariableValues
// Method mosek.fusion.Model.getVariableValues @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4104:6-4141:7
void mosek::fusion::Model :: getVariableValues(bool _966_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _967_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _968_res,int32_t _969_offset) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_966_primal,_967_nativeidxs,_968_res,_969_offset); }
void mosek::fusion::p_Model::getVariableValues(bool _966_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _967_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _968_res,int32_t _969_offset)
{
  _checked_ptr_1<int64_t> _ptr__967_nativeidxs(_967_nativeidxs ? _967_nativeidxs->raw() : nullptr, _967_nativeidxs ? _967_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__968_res(_968_res ? _968_res->raw() : nullptr, _968_res ? _968_res->size(0) : 0);
  int32_t _970_n = (int)((_967_nativeidxs)->size(0));
  barvar_num = task_numbarvar();
  if (_966_primal)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _971_xx = getSolution_xx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__971_xx(_971_xx ? _971_xx->raw() : nullptr,_971_xx ? _971_xx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _9550_;
      bool _9551_ = (barvar_num > (int)0);
      if (_9551_)
      {
        _9550_ = getSolution_barx(::mosek::fusion::SolutionType::Default);
      }
      else
      {
        _9550_ = nullptr;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _972_barx = _9550_;
      _checked_ptr_1<double> _ptr__972_barx(_972_barx ? _972_barx->raw() : nullptr,_972_barx ? _972_barx->size(0) : 0);
      int32_t _9552_ = (int)0;
      int32_t _9553_ = _970_n;
      for (int32_t _973_p = _9552_; _973_p < _9553_; ++_973_p)
      {
        {
          if ((_ptr__967_nativeidxs[_973_p] > (int)0))
          {
            {
              _ptr__968_res[safe_add( _969_offset,_973_p )] = _ptr__971_xx[_ptr__967_nativeidxs[_973_p]];
            }
          }
          else if((_ptr__967_nativeidxs[_973_p] < (int)0))
          {
            {
              int64_t _974_idx = (-safe_add( _ptr__967_nativeidxs[_973_p],(int)1 ));
              _ptr__968_res[safe_add( _969_offset,_973_p )] = _ptr__972_barx[_974_idx];
            }
          }
          else
          {
            {
              _ptr__968_res[safe_add( _969_offset,_973_p )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _975_yx = getSolution_yx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__975_yx(_975_yx ? _975_yx->raw() : nullptr,_975_yx ? _975_yx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _9554_;
      bool _9555_ = (barvar_num > (int)0);
      if (_9555_)
      {
        _9554_ = getSolution_bars(::mosek::fusion::SolutionType::Default);
      }
      else
      {
        _9554_ = nullptr;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _976_bars = _9554_;
      _checked_ptr_1<double> _ptr__976_bars(_976_bars ? _976_bars->raw() : nullptr,_976_bars ? _976_bars->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _977_accy = getSolution_accy(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__977_accy(_977_accy ? _977_accy->raw() : nullptr,_977_accy ? _977_accy->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _978_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__978_accptr(_978_accptr ? _978_accptr->raw() : nullptr,_978_accptr ? _978_accptr->size(0) : 0);
      int32_t _9556_ = (int)0;
      int32_t _9557_ = _970_n;
      for (int32_t _979_p = _9556_; _979_p < _9557_; ++_979_p)
      {
        {
          if ((_ptr__967_nativeidxs[_979_p] < (int)0))
          {
            {
              int64_t _980_idx = (-safe_add( _ptr__967_nativeidxs[_979_p],(int)1 ));
              _ptr__968_res[safe_add( _969_offset,_979_p )] = _ptr__976_bars[_980_idx];
            }
          }
          else if((_ptr__967_nativeidxs[_979_p] == (int)0))
          {
            {
              _ptr__968_res[safe_add( _969_offset,_979_p )] = (int)0;
            }
          }
          else if((((*var_elm_acc_idx)(_ptr__967_nativeidxs[_979_p])) >= (int)0))
          {
            {
              _ptr__968_res[safe_add( _969_offset,_979_p )] = _ptr__977_accy[safe_add( _ptr__978_accptr[((*var_elm_acc_idx)(_ptr__967_nativeidxs[_979_p]))],((*var_elm_acc_ofs)(_ptr__967_nativeidxs[_979_p])) )];
            }
          }
          else
          {
            {
              _ptr__968_res[safe_add( _969_offset,_979_p )] = _ptr__975_yx[_ptr__967_nativeidxs[_979_p]];
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getVariableValues

// Begin mosek.fusion.Model.setVariableValues
// Method mosek.fusion.Model.setVariableValues @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4081:6-4101:7
void mosek::fusion::Model :: setVariableValues(bool _981_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _982_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _983_values) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_981_primal,_982_nativeidxs,_983_values); }
void mosek::fusion::p_Model::setVariableValues(bool _981_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _982_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _983_values)
{
  _checked_ptr_1<int64_t> _ptr__982_nativeidxs(_982_nativeidxs ? _982_nativeidxs->raw() : nullptr, _982_nativeidxs ? _982_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__983_values(_983_values ? _983_values->raw() : nullptr, _983_values ? _983_values->size(0) : 0);
  if (_981_primal)
  {
    {
      int32_t _984_numnz = (int)0;
      int32_t _9558_ = (int)0;
      int32_t _9559_ = (int)((_982_nativeidxs)->size(0));
      for (int32_t _985_i = _9558_; _985_i < _9559_; ++_985_i)
      {
        {
          if ((_ptr__982_nativeidxs[_985_i] >= (int)0))
          {
            {
              ++ _984_numnz;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _986_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_984_numnz)));
      _checked_ptr_1<int32_t> _ptr__986_subj(_986_subj ? _986_subj->raw() : nullptr,_986_subj ? _986_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _987_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_984_numnz)));
      _checked_ptr_1<double> _ptr__987_val(_987_val ? _987_val->raw() : nullptr,_987_val ? _987_val->size(0) : 0);
      int32_t _988_k = (int)0;
      int32_t _9560_ = (int)0;
      int32_t _9561_ = (int)((_982_nativeidxs)->size(0));
      for (int32_t _989_i = _9560_; _989_i < _9561_; ++_989_i)
      {
        {
          if ((_ptr__982_nativeidxs[_989_i] >= (int)0))
          {
            {
              _ptr__986_subj[_988_k] = (int32_t)_ptr__982_nativeidxs[_989_i];
              _ptr__987_val[_988_k] = _ptr__983_values[_989_i];
              ++ _988_k;
            }
          }
          {}
        }
      }
      setSolution_xx(_986_subj,_987_val);
    }
  }
  else
  {
    {
    }
  }
}
// End mosek.fusion.Model.setVariableValues

// Begin mosek.fusion.Model.writeTaskNoFlush
// Method mosek.fusion.Model.writeTaskNoFlush @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4070:6-4073:7
void mosek::fusion::Model :: writeTaskNoFlush(const std::string & _990_filename) { mosek::fusion::p_Model::_get_impl(this)->writeTaskNoFlush(_990_filename); }
void mosek::fusion::p_Model::writeTaskNoFlush(const std::string & _990_filename)
{
  task_write(_990_filename);
}
// End mosek.fusion.Model.writeTaskNoFlush

// Begin mosek.fusion.Model.writeTaskStream
// Method mosek.fusion.Model.writeTaskStream @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4063:6-4067:7
void mosek::fusion::Model :: writeTaskStream(const std::string & _991_ext,std::ostream& _992_stream) { mosek::fusion::p_Model::_get_impl(this)->writeTaskStream(_991_ext,_992_stream); }
void mosek::fusion::p_Model::writeTaskStream(const std::string & _991_ext,std::ostream& _992_stream)
{
  flush_parameters();
  task_write_stream(_991_ext,_992_stream);
}
// End mosek.fusion.Model.writeTaskStream

// Begin mosek.fusion.Model.dataReport
// Method mosek.fusion.Model.dataReport @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4034:6-58
void mosek::fusion::Model :: dataReport() { mosek::fusion::p_Model::_get_impl(this)->dataReport(); }
void mosek::fusion::p_Model::dataReport()
{
  _pubthis->dataReport((int)10);
}
// End mosek.fusion.Model.dataReport

// Begin mosek.fusion.Model.dataReport
// Method mosek.fusion.Model.dataReport @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4029:6-4033:7
void mosek::fusion::Model :: dataReport(int32_t _993_detail) { mosek::fusion::p_Model::_get_impl(this)->dataReport(_993_detail); }
void mosek::fusion::p_Model::dataReport(int32_t _993_detail)
{
  flush_parameters();
  task_analyze_problem(_993_detail);
}
// End mosek.fusion.Model.dataReport

// Begin mosek.fusion.Model.writeTask
// Method mosek.fusion.Model.writeTask @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4023:6-4027:7
void mosek::fusion::Model :: writeTask(const std::string & _994_filename) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_994_filename); }
void mosek::fusion::p_Model::writeTask(const std::string & _994_filename)
{
  flush_parameters();
  task_write(_994_filename);
}
// End mosek.fusion.Model.writeTask

// Begin mosek.fusion.Model.getSolverLIntInfo
// Method mosek.fusion.Model.getSolverLIntInfo @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4015:6-93
int64_t mosek::fusion::Model :: getSolverLIntInfo(const std::string & _995_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_995_name); }
int64_t mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _995_name)
{
  return task_get_liinf(_995_name);
}
// End mosek.fusion.Model.getSolverLIntInfo

// Begin mosek.fusion.Model.getSolverIntInfo
// Method mosek.fusion.Model.getSolverIntInfo @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:4005:6-92
int32_t mosek::fusion::Model :: getSolverIntInfo(const std::string & _996_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_996_name); }
int32_t mosek::fusion::p_Model::getSolverIntInfo(const std::string & _996_name)
{
  return task_get_iinf(_996_name);
}
// End mosek.fusion.Model.getSolverIntInfo

// Begin mosek.fusion.Model.getSolverDoubleInfo
// Method mosek.fusion.Model.getSolverDoubleInfo @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3995:6-92
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _997_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_997_name); }
double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _997_name)
{
  return task_get_dinf(_997_name);
}
// End mosek.fusion.Model.getSolverDoubleInfo

// Begin mosek.fusion.Model.setCallbackHandler
// Method mosek.fusion.Model.setCallbackHandler @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3985:6-110
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _998_h) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_998_h); }
void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _998_h)
{
  task_setCallbackHandler(_998_h);
}
// End mosek.fusion.Model.setCallbackHandler

// Begin mosek.fusion.Model.setDataCallbackHandler
// Method mosek.fusion.Model.setDataCallbackHandler @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3964:6-114
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _999_h) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_999_h); }
void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _999_h)
{
  task_setDataCallbackHandler(_999_h);
}
// End mosek.fusion.Model.setDataCallbackHandler

// Begin mosek.fusion.Model.setLogHandler
// Method mosek.fusion.Model.setLogHandler @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3942:6-89
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _1000_h) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_1000_h); }
void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _1000_h)
{
  task_setLogHandler(_1000_h);
}
// End mosek.fusion.Model.setLogHandler

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3915:6-132
void mosek::fusion::Model :: setSolverParam(const std::string & _1001_name,double _1002_floatval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_1001_name,_1002_floatval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _1001_name,double _1002_floatval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_1001_name,_1002_floatval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3903:6-128
void mosek::fusion::Model :: setSolverParam(const std::string & _1003_name,int32_t _1004_intval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_1003_name,_1004_intval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _1003_name,int32_t _1004_intval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_1003_name,_1004_intval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3891:6-128
void mosek::fusion::Model :: setSolverParam(const std::string & _1005_name,const std::string & _1006_strval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_1005_name,_1006_strval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _1005_name,const std::string & _1006_strval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_1005_name,_1006_strval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.breakSolver
// Method mosek.fusion.Model.breakSolver @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3875:6-3878:7
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }
void mosek::fusion::p_Model::breakSolver()
{
  task_break_solve();
}
// End mosek.fusion.Model.breakSolver

// Begin mosek.fusion.Model.optserverHost
// Method mosek.fusion.Model.optserverHost @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3861:6-3864:7
void mosek::fusion::Model :: optserverHost(const std::string & _1007_addr) { mosek::fusion::p_Model::_get_impl(this)->optserverHost(_1007_addr); }
void mosek::fusion::p_Model::optserverHost(const std::string & _1007_addr)
{
  task_putoptserver_host(_1007_addr);
}
// End mosek.fusion.Model.optserverHost

// Begin mosek.fusion.Model.report_solution
// Method mosek.fusion.Model.report_solution @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3780:6-3856:7
void mosek::fusion::p_Model::report_solution(mosek::fusion::SolutionType _1008_soltype,mosek::fusion::ProblemStatus _1009_prosta,mosek::fusion::SolutionStatus _1010_psolsta,mosek::fusion::SolutionStatus _1011_dsolsta,double _1012_pobj,double _1013_dobj,int32_t _1014_numvar,int32_t _1015_numcon,int32_t _1016_numbarelm,int32_t _1017_numacc,int32_t _1018_numaccelm,bool _1019_hasprimal,bool _1020_hasdual)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1021_sol;
  if ((_1008_soltype == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _1021_sol = sol_itr;
    }
  }
  else if((_1008_soltype == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _1021_sol = sol_bas;
    }
  }
  else if((_1008_soltype == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _1021_sol = sol_itg;
    }
  }
  else
  {
    {
      _1021_sol = nullptr;
    }
  }
  if ((NULL == _1021_sol.get()))
  {
    {
      _1021_sol = ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(_1014_numvar,_1015_numcon,_1016_numbarelm,_1017_numacc,_1018_numaccelm);
    }
  }
  else
  {
    {
      _1021_sol->resize(_1014_numvar,_1015_numcon,_1016_numbarelm,_1017_numacc,_1018_numaccelm);
    }
  }
  mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->pobj = _1012_pobj;
  mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->dobj = _1013_dobj;
  mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->pstatus = _1010_psolsta;
  mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->dstatus = _1011_dsolsta;
  mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->probstatus = _1009_prosta;
  if ((_1014_numvar > (int)0))
  {
    {
      if (_1019_hasprimal)
      {
        {
          report_solution_get_xx(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->xx);
        }
      }
      {}
      if (_1020_hasdual)
      {
        {
          report_solution_get_slx(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->slx);
          report_solution_get_sux(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->sux);
          std::shared_ptr< monty::ndarray< double,1 > > _1022_yx = mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->yx;
          _checked_ptr_1<double> _ptr__1022_yx(_1022_yx ? _1022_yx->raw() : nullptr,_1022_yx ? _1022_yx->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _1023_slx = mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->slx;
          _checked_ptr_1<double> _ptr__1023_slx(_1023_slx ? _1023_slx->raw() : nullptr,_1023_slx ? _1023_slx->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _1024_sux = mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->sux;
          _checked_ptr_1<double> _ptr__1024_sux(_1024_sux ? _1024_sux->raw() : nullptr,_1024_sux ? _1024_sux->size(0) : 0);
          int32_t _9562_ = (int)0;
          int32_t _9563_ = _1014_numvar;
          for (int32_t _1025_i = _9562_; _1025_i < _9563_; ++_1025_i)
          {
            {
              _ptr__1022_yx[_1025_i] = (_ptr__1023_slx[_1025_i] - _ptr__1024_sux[_1025_i]);
            }
          }
        }
      }
      {}
    }
  }
  {}
  if ((_1015_numcon > (int)0))
  {
    {
      if (_1019_hasprimal)
      {
        {
          report_solution_get_xc(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->xc);
        }
      }
      {}
      if (_1020_hasdual)
      {
        {
          report_solution_get_slc(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->slc);
          report_solution_get_suc(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->suc);
          std::shared_ptr< monty::ndarray< double,1 > > _1026_y = mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->y;
          _checked_ptr_1<double> _ptr__1026_y(_1026_y ? _1026_y->raw() : nullptr,_1026_y ? _1026_y->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _1027_slc = mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->slc;
          _checked_ptr_1<double> _ptr__1027_slc(_1027_slc ? _1027_slc->raw() : nullptr,_1027_slc ? _1027_slc->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _1028_suc = mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->suc;
          _checked_ptr_1<double> _ptr__1028_suc(_1028_suc ? _1028_suc->raw() : nullptr,_1028_suc ? _1028_suc->size(0) : 0);
          int32_t _9564_ = (int)0;
          int32_t _9565_ = _1015_numcon;
          for (int32_t _1029_i = _9564_; _1029_i < _9565_; ++_1029_i)
          {
            {
              _ptr__1026_y[_1029_i] = (_ptr__1027_slc[_1029_i] - _ptr__1028_suc[_1029_i]);
            }
          }
        }
      }
      {}
    }
  }
  {}
  if ((_1016_numbarelm > (int)0))
  {
    {
      if (_1019_hasprimal)
      {
        {
          report_solution_get_barx(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->barx);
        }
      }
      {}
      if (_1020_hasdual)
      {
        {
          report_solution_get_bars(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->bars);
        }
      }
      {}
    }
  }
  {}
  if ((task_numacc() > (int)0))
  {
    {
      report_solution_get_accptr(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->accptr);
      if (_1019_hasprimal)
      {
        {
          report_solution_get_accx(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->accx);
        }
      }
      {}
      if (_1020_hasdual)
      {
        {
          report_solution_get_accy(mosek::fusion::p_SolutionStruct::_get_impl(_1021_sol)->accy);
        }
      }
      {}
    }
  }
  {}
  if ((_1008_soltype == ::mosek::fusion::SolutionType::Interior))
  {
    {
      sol_itr = _1021_sol;
    }
  }
  else if((_1008_soltype == ::mosek::fusion::SolutionType::Basic))
  {
    {
      sol_bas = _1021_sol;
    }
  }
  else if((_1008_soltype == ::mosek::fusion::SolutionType::Integer))
  {
    {
      sol_itg = _1021_sol;
    }
  }
  {}
}
// End mosek.fusion.Model.report_solution

// Begin mosek.fusion.Model.clear_solutions
// Method mosek.fusion.Model.clear_solutions @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3774:6-3778:7
void mosek::fusion::p_Model::clear_solutions()
{
  sol_itr = nullptr;
  sol_itg = nullptr;
  sol_bas = nullptr;
}
// End mosek.fusion.Model.clear_solutions

// Begin mosek.fusion.Model.solveBatch
// Method mosek.fusion.Model.solveBatch @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3749:6-3772:7
std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > mosek::fusion::Model::solveBatch
  ( bool _1030_israce,
    double _1031_maxtime,
    int32_t _1032_numthreads,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Model >,1 > > _1033_models) { return mosek::fusion::p_Model::solveBatch(_1030_israce,_1031_maxtime,_1032_numthreads,_1033_models); }
std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > mosek::fusion::p_Model::solveBatch(bool _1030_israce,double _1031_maxtime,int32_t _1032_numthreads,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Model >,1 > > _1033_models)
{
  int32_t _1034_n = (int)((_1033_models)->size(0));
  int32_t _9566_ = (int)0;
  int32_t _9567_ = _1034_n;
  for (int32_t _1035_i = _9566_; _1035_i < _9567_; ++_1035_i)
  {
    {
      if ((NULL == ((*_1033_models)(_1035_i)).get()))
      {
        {
          throw ::mosek::fusion::OptimizeError(std::string ("One of the models is a null object"));
        }
      }
      {}
    }
  }
  int32_t _9568_ = (int)0;
  int32_t _9569_ = _1034_n;
  for (int32_t _1036_i = _9568_; _1036_i < _9569_; ++_1036_i)
  {
    {
      ((*_1033_models)(_1036_i))->flushSolutions();
      mosek::fusion::p_Model::_get_impl(((*_1033_models)(_1036_i)).get())->flush_parameters();
    }
  }
  std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > _1037_wasOK = ::mosek::fusion::p_BaseModel::env_solve_batch(_1030_israce,_1031_maxtime,_1032_numthreads,_1033_models);
  int32_t _9570_ = (int)0;
  int32_t _9571_ = _1034_n;
  for (int32_t _1038_i = _9570_; _1038_i < _9571_; ++_1038_i)
  {
    {
      mosek::fusion::p_Model::_get_impl(((*_1033_models)(_1038_i)).get())->task_post_solve();
    }
  }
  return _1037_wasOK;
}
// End mosek.fusion.Model.solveBatch

// Begin mosek.fusion.Model.solve
// Method mosek.fusion.Model.solve @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3740:6-3747:7
void mosek::fusion::Model :: solve(const std::string & _1039_addr,const std::string & _1040_accesstoken) { mosek::fusion::p_Model::_get_impl(this)->solve(_1039_addr,_1040_accesstoken); }
void mosek::fusion::p_Model::solve(const std::string & _1039_addr,const std::string & _1040_accesstoken)
{
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(true,_1039_addr,_1040_accesstoken);
  task_post_solve();
}
// End mosek.fusion.Model.solve

// Begin mosek.fusion.Model.solve
// Method mosek.fusion.Model.solve @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3731:6-3738:7
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }
void mosek::fusion::p_Model::solve()
{
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(false,std::string (""),std::string (""));
  task_post_solve();
}
// End mosek.fusion.Model.solve

// Begin mosek.fusion.Model.flush_parameters
// Method mosek.fusion.Model.flush_parameters @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3652:6-3699:7
void mosek::fusion::p_Model::flush_parameters()
{
  int32_t _1041_num_con_param_nz = con_blocks->num_parameterized();
  int32_t _1042_num_afe_param_nz = afe_blocks->num_parameterized();
  int32_t _1043_num_obj_param_nz = obj_blocks->num_parameterized();
  if ((_1041_num_con_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1044_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1041_num_con_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1044_subi(_1044_subi ? _1044_subi->raw() : nullptr,_1044_subi ? _1044_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1045_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1041_num_con_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1045_subj(_1045_subj ? _1045_subj->raw() : nullptr,_1045_subj ? _1045_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1046_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1041_num_con_param_nz)));
      _checked_ptr_1<double> _ptr__1046_val(_1046_val ? _1046_val->raw() : nullptr,_1046_val ? _1046_val->size(0) : 0);
      con_blocks->evaluate(xs,param_value,_1044_subi,_1045_subj,_1046_val);
      task_putaijlist(_1044_subi,_1045_subj,_1046_val,(int64_t)(_1041_num_con_param_nz));
    }
  }
  {}
  if ((_1042_num_afe_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1047_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1042_num_afe_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1047_subi(_1047_subi ? _1047_subi->raw() : nullptr,_1047_subi ? _1047_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1048_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1042_num_afe_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1048_subj(_1048_subj ? _1048_subj->raw() : nullptr,_1048_subj ? _1048_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1049_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1042_num_afe_param_nz)));
      _checked_ptr_1<double> _ptr__1049_val(_1049_val ? _1049_val->raw() : nullptr,_1049_val ? _1049_val->size(0) : 0);
      afe_blocks->evaluate(xs,param_value,_1047_subi,_1048_subj,_1049_val);
      task_putafefijlist(_1047_subi,_1048_subj,_1049_val);
    }
  }
  {}
  if ((_1043_num_obj_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1050_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1043_num_obj_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1050_subi(_1050_subi ? _1050_subi->raw() : nullptr,_1050_subi ? _1050_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1051_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1043_num_obj_param_nz)));
      _checked_ptr_1<int32_t> _ptr__1051_subj(_1051_subj ? _1051_subj->raw() : nullptr,_1051_subj ? _1051_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1052_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1043_num_obj_param_nz)));
      _checked_ptr_1<double> _ptr__1052_val(_1052_val ? _1052_val->raw() : nullptr,_1052_val ? _1052_val->size(0) : 0);
      obj_blocks->evaluate(xs,param_value,_1050_subi,_1051_subj,_1052_val);
      task_putclist(_1051_subj,_1052_val);
    }
  }
  {}
}
// End mosek.fusion.Model.flush_parameters

// Begin mosek.fusion.Model.flushParameters
// Method mosek.fusion.Model.flushParameters @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3650:6-61
void mosek::fusion::Model :: flushParameters() { mosek::fusion::p_Model::_get_impl(this)->flushParameters(); }
void mosek::fusion::p_Model::flushParameters()
{
  flush_parameters();
}
// End mosek.fusion.Model.flushParameters

// Begin mosek.fusion.Model.evaluate_parameterized
// Method mosek.fusion.Model.evaluate_parameterized @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3581:6-3644:7
void mosek::fusion::p_Model::evaluate_parameterized(monty::rc_ptr< ::mosek::fusion::WorkStack > _1053_xs,int32_t _1054_numrow,std::shared_ptr< monty::ndarray< int32_t,1 > > _1055_rowptrb,std::shared_ptr< monty::ndarray< int32_t,1 > > _1056_rowptre,std::shared_ptr< monty::ndarray< int64_t,1 > > _1057_codenidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _1058_codeptr,std::shared_ptr< monty::ndarray< int32_t,1 > > _1059_codesizes,std::shared_ptr< monty::ndarray< int32_t,1 > > _1060_code,std::shared_ptr< monty::ndarray< double,1 > > _1061_cconst,std::shared_ptr< monty::ndarray< int32_t,1 > > _1062_subj,std::shared_ptr< monty::ndarray< double,1 > > _1063_val)
{
  _checked_ptr_1<int32_t> _ptr__1055_rowptrb(_1055_rowptrb ? _1055_rowptrb->raw() : nullptr, _1055_rowptrb ? _1055_rowptrb->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1056_rowptre(_1056_rowptre ? _1056_rowptre->raw() : nullptr, _1056_rowptre ? _1056_rowptre->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1057_codenidx(_1057_codenidx ? _1057_codenidx->raw() : nullptr, _1057_codenidx ? _1057_codenidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1058_codeptr(_1058_codeptr ? _1058_codeptr->raw() : nullptr, _1058_codeptr ? _1058_codeptr->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1059_codesizes(_1059_codesizes ? _1059_codesizes->raw() : nullptr, _1059_codesizes ? _1059_codesizes->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1060_code(_1060_code ? _1060_code->raw() : nullptr, _1060_code ? _1060_code->size(0) : 0);
  _checked_ptr_1<double> _ptr__1061_cconst(_1061_cconst ? _1061_cconst->raw() : nullptr, _1061_cconst ? _1061_cconst->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1062_subj(_1062_subj ? _1062_subj->raw() : nullptr, _1062_subj ? _1062_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__1063_val(_1063_val ? _1063_val->raw() : nullptr, _1063_val ? _1063_val->size(0) : 0);
  int32_t _1064_stack = _1053_xs->allocf64((int)((_1060_code)->size(0)));
  int32_t _1065_stackp = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _1066_xf64 = mosek::fusion::p_WorkStack::_get_impl(_1053_xs)->f64;
  _checked_ptr_1<double> _ptr__1066_xf64(_1066_xf64 ? _1066_xf64->raw() : nullptr,_1066_xf64 ? _1066_xf64->size(0) : 0);
  int32_t _1067_idx = (int)0;
  int32_t _9572_ = (int)0;
  int32_t _9573_ = _1054_numrow;
  for (int32_t _1068_i = _9572_; _1068_i < _9573_; ++_1068_i)
  {
    {
      int32_t _1069_k = _ptr__1058_codeptr[_1068_i];
      int32_t _9574_ = _ptr__1055_rowptrb[_1068_i];
      int32_t _9575_ = _ptr__1056_rowptre[_1068_i];
      for (int32_t _1070_j = _9574_; _1070_j < _9575_; ++_1070_j)
      {
        {
          int32_t _9576_ = (int)0;
          int32_t _9577_ = _ptr__1059_codesizes[_1070_j];
          for (int32_t _1071_l = _9576_; _1071_l < _9577_; ++_1071_l)
          {
            {
              if ((_ptr__1060_code[_1069_k] == 0))
              {
                {
                }
              }
              else
              {
                {
                  if ((_ptr__1060_code[_1069_k] == 1))
                  {
                    {
                      _ptr__1066_xf64[safe_add( _1064_stack,_1065_stackp )] = ((*param_value)((int32_t)_ptr__1061_cconst[_1069_k]));
                      ++ _1065_stackp;
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__1060_code[_1069_k] == 2))
                      {
                        {
                          _ptr__1066_xf64[safe_add( _1064_stack,_1065_stackp )] = _ptr__1061_cconst[_1069_k];
                          ++ _1065_stackp;
                        }
                      }
                      else
                      {
                        {
                          if ((_ptr__1060_code[_1069_k] == 3))
                          {
                            {
                              _ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)2)] += _ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)1)];
                              -- _1065_stackp;
                            }
                          }
                          else
                          {
                            {
                              if ((_ptr__1060_code[_1069_k] == 4))
                              {
                                {
                                  _ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)1)] = (-_ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)1)]);
                                }
                              }
                              else
                              {
                                {
                                  if ((_ptr__1060_code[_1069_k] == 5))
                                  {
                                    {
                                      _ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)2)] *= _ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)1)];
                                      -- _1065_stackp;
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((_ptr__1060_code[_1069_k] == 6))
                                      {
                                        {
                                          _ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)1)] = (1.0 / _ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)1)]);
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((_ptr__1060_code[_1069_k] == 8))
                                          {
                                            {
                                              double _1072_v = 0.0;
                                              int32_t _9578_ = (int)0;
                                              int32_t _9579_ = (int32_t)_ptr__1061_cconst[_1069_k];
                                              for (int32_t _1073_i = _9578_; _1073_i < _9579_; ++_1073_i)
                                              {
                                                {
                                                  _1072_v += _ptr__1066_xf64[(safe_add( _1064_stack,_1065_stackp ) - (int)1)];
                                                  -- _1065_stackp;
                                                }
                                              }
                                              _ptr__1066_xf64[safe_add( _1064_stack,_1065_stackp )] = _1072_v;
                                              ++ _1065_stackp;
                                            }
                                          }
                                          else
                                          {
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++ _1069_k;
            }
          }
          _ptr__1062_subj[_1067_idx] = (int32_t)_ptr__1057_codenidx[_1070_j];
          _ptr__1063_val[_1067_idx] = _ptr__1066_xf64[_1064_stack];
          _1065_stackp = (int)0;
          ++ _1067_idx;
        }
      }
    }
  }
  _1053_xs->popf64((int)((_1060_code)->size(0)));
}
// End mosek.fusion.Model.evaluate_parameterized

// Begin mosek.fusion.Model.flushSolutions
// Method mosek.fusion.Model.flushSolutions @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3574:6-3579:7
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }
void mosek::fusion::p_Model::flushSolutions()
{
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
// End mosek.fusion.Model.flushSolutions

// Begin mosek.fusion.Model.flush_initsol
// Method mosek.fusion.Model.flush_initsol @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3548:6-3570:7
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _1074_which)
{
  if ((NULL != initsol_xx.get()))
  {
    {
      int32_t _1075_numvar = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _1076_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1075_numvar)));
      _checked_ptr_1<double> _ptr__1076_xx(_1076_xx ? _1076_xx->raw() : nullptr,_1076_xx ? _1076_xx->size(0) : 0);
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3553:10-3559:11 */
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1078_sol = __mosek_2fusion_2Model__get_sol_cache(_1074_which,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_1078_sol)->xx.get()))
          {
            {
              int32_t _9580_;
              bool _9581_ = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_1078_sol)->xx)->size(0)) <= _1075_numvar);
              if (_9581_)
              {
                _9580_ = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_1078_sol)->xx)->size(0));
              }
              else
              {
                _9580_ = _1075_numvar;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_1078_sol)->xx,(int)0,_1076_xx,(int)0,_9580_);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _1077_e)
      {
        {
        }
      }
      int32_t _9582_;
      bool _9583_ = ((int)((initsol_xx)->size(0)) <= _1075_numvar);
      if (_9583_)
      {
        _9582_ = (int)((initsol_xx)->size(0));
      }
      else
      {
        _9582_ = _1075_numvar;
      }
      int32_t _1079_n = _9582_;
      int32_t _9584_ = (int)0;
      int32_t _9585_ = _1079_n;
      for (int32_t _1080_i = _9584_; _1080_i < _9585_; ++_1080_i)
      {
        {
          if (((*initsol_xx_flag)(_1080_i)))
          {
            {
              _ptr__1076_xx[_1080_i] = ((*initsol_xx)(_1080_i));
            }
          }
          {}
        }
      }
      _ptr__1076_xx[bfixidx] = 1.0;
      task_putxx_slice(_1074_which,(int)0,_1075_numvar,_1076_xx);
    }
  }
  {}
}
// End mosek.fusion.Model.flush_initsol

// Begin mosek.fusion.Model.getDualSolutionStatus
// Method mosek.fusion.Model.getDualSolutionStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3543:6-3546:7
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus()
{
  return _pubthis->getDualSolutionStatus(solutionptr);
}
// End mosek.fusion.Model.getDualSolutionStatus

// Begin mosek.fusion.Model.getProblemStatus
// Method mosek.fusion.Model.getProblemStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3537:6-3540:7
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }
mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus()
{
  return _pubthis->getProblemStatus(solutionptr);
}
// End mosek.fusion.Model.getProblemStatus

// Begin mosek.fusion.Model.getPrimalSolutionStatus
// Method mosek.fusion.Model.getPrimalSolutionStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3530:6-3533:7
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus()
{
  return getPrimalSolutionStatus(solutionptr);
}
// End mosek.fusion.Model.getPrimalSolutionStatus

// Begin mosek.fusion.Model.dualObjValue
// Method mosek.fusion.Model.dualObjValue @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3523:6-3526:7
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }
double mosek::fusion::p_Model::dualObjValue()
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
// End mosek.fusion.Model.dualObjValue

// Begin mosek.fusion.Model.primalObjValue
// Method mosek.fusion.Model.primalObjValue @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3517:6-3520:7
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }
double mosek::fusion::p_Model::primalObjValue()
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
// End mosek.fusion.Model.primalObjValue

// Begin mosek.fusion.Model.get_sol_cache
// Method mosek.fusion.Model.get_sol_cache @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3443:6-3514:7
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _1081_which_,bool _1082_primal,bool _1083_nothrow)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1084_res = nullptr;
  mosek::fusion::SolutionType _1085_which = _1081_which_;
  if ((_1085_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      _1085_which = solutionptr;
    }
  }
  {}
  if ((_1085_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _1084_res = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _1084_res = sol_bas;
        }
      }
      else
      {
        {
          _1084_res = sol_itr;
        }
      }
    }
  }
  else if((_1085_which == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _1084_res = sol_itr;
    }
  }
  else if((_1085_which == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _1084_res = sol_bas;
    }
  }
  else if((_1085_which == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _1084_res = sol_itg;
    }
  }
  {}
  if ((NULL == _1084_res.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_1083_nothrow || ((_1082_primal && _1084_res->isPrimalAcceptable(acceptable_sol)) || ((!_1082_primal) && _1084_res->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _1084_res;
        }
      }
      else if(((_1084_res == sol_itg) && (!_1082_primal)))
      {
        {
          throw ::mosek::fusion::SolutionError(std::string ("Dual solution does not exists for mixed-integer problems."));
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1086_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _1087_solsta = mosek::fusion::p_SolutionStruct::_get_impl(_1084_res)->pstatus;
          mosek::fusion::ProblemStatus _1088_probsta = mosek::fusion::p_SolutionStruct::_get_impl(_1084_res)->probstatus;
          if ((!_1082_primal))
          {
            {
              _1087_solsta = mosek::fusion::p_SolutionStruct::_get_impl(_1084_res)->dstatus;
            }
          }
          {}
          _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_1087_solsta == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_1087_solsta == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_1087_solsta == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_1087_solsta == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_1087_solsta == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_1087_solsta == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("at least Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_1084_res == sol_itr))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_1084_res == sol_bas))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_1084_res == sol_itg))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_1088_probsta == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_1088_probsta == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_1088_probsta == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_1088_probsta == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_1088_probsta == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_1088_probsta == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_1088_probsta == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_1088_probsta == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_1088_probsta == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _1086_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_1086_sb->toString());
        }
      }
    }
  }
}
// End mosek.fusion.Model.get_sol_cache

// Begin mosek.fusion.Model.get_sol_cache
// Method mosek.fusion.Model.get_sol_cache @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3436:6-3441:7
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _1089_which_,bool _1090_primal)
{
  return __mosek_2fusion_2Model__get_sol_cache(_1089_which_,_1090_primal,false);
}
// End mosek.fusion.Model.get_sol_cache

// Begin mosek.fusion.Model.setSolution_xx
// Method mosek.fusion.Model.setSolution_xx @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3421:6-3429:7
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int32_t,1 > > _1091_subj,std::shared_ptr< monty::ndarray< double,1 > > _1092_val)
{
  _checked_ptr_1<int32_t> _ptr__1091_subj(_1091_subj ? _1091_subj->raw() : nullptr, _1091_subj ? _1091_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__1092_val(_1092_val ? _1092_val->raw() : nullptr, _1092_val ? _1092_val->size(0) : 0);
  ensure_initsol_xx();
  int32_t _9586_ = (int)0;
  int32_t _9587_ = (int)((_1091_subj)->size(0));
  for (int32_t _1093_i = _9586_; _1093_i < _9587_; ++_1093_i)
  {
    {
      ((*initsol_xx)(_ptr__1091_subj[_1093_i])) = _ptr__1092_val[_1093_i];
      ((*initsol_xx_flag)(_ptr__1091_subj[_1093_i])) = true;
    }
  }
}
// End mosek.fusion.Model.setSolution_xx

// Begin mosek.fusion.Model.ensure_initsol_xx
// Method mosek.fusion.Model.ensure_initsol_xx @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3404:6-3419:7
void mosek::fusion::p_Model::ensure_initsol_xx()
{
  int32_t _1094_natvarmap_num = task_numvar();
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1094_natvarmap_num)));
      std::vector<bool> _9588_;
      for (int32_t _1095_i = (int)0, _9589_ = _1094_natvarmap_num; _1095_i < _9589_ ; ++_1095_i)
      {
        _9588_.push_back(false);
      }
      auto _9590_ = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_9588_.size()),_9588_.begin(),_9588_.end()));
      initsol_xx_flag = _9590_;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _1094_natvarmap_num))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1096_tmp = initsol_xx;
      _checked_ptr_1<double> _ptr__1096_tmp(_1096_tmp ? _1096_tmp->raw() : nullptr,_1096_tmp ? _1096_tmp->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _1097_tmp_flag = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1094_natvarmap_num)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_1094_natvarmap_num)));
      ::mosek::fusion::Utils::Tools::arraycopy(_1096_tmp,(int)0,initsol_xx,(int)0,(int)((_1096_tmp)->size(0)));
      int32_t _9591_ = (int)0;
      int32_t _9592_ = (int)((_1096_tmp)->size(0));
      for (int32_t _1098_i = _9591_; _1098_i < _9592_; ++_1098_i)
      {
        {
          ((*initsol_xx_flag)(_1098_i)) = ((*_1097_tmp_flag)(_1098_i));
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Model.ensure_initsol_xx

// Begin mosek.fusion.Model.getSolution_accptr
// Method mosek.fusion.Model.getSolution_accptr @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3397:6-3401:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Model::getSolution_accptr(mosek::fusion::SolutionType _1099_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1099_which,true,true))->accptr;
}
// End mosek.fusion.Model.getSolution_accptr

// Begin mosek.fusion.Model.getSolution_accy
// Method mosek.fusion.Model.getSolution_accy @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3391:6-3395:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_accy(mosek::fusion::SolutionType _1100_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1100_which,false))->accy;
}
// End mosek.fusion.Model.getSolution_accy

// Begin mosek.fusion.Model.getSolution_accx
// Method mosek.fusion.Model.getSolution_accx @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3385:6-3389:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_accx(mosek::fusion::SolutionType _1101_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1101_which,true))->accx;
}
// End mosek.fusion.Model.getSolution_accx

// Begin mosek.fusion.Model.getSolution_bars
// Method mosek.fusion.Model.getSolution_bars @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3378:6-3382:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _1102_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1102_which,false))->bars;
}
// End mosek.fusion.Model.getSolution_bars

// Begin mosek.fusion.Model.getSolution_barx
// Method mosek.fusion.Model.getSolution_barx @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3372:6-3376:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _1103_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1103_which,true))->barx;
}
// End mosek.fusion.Model.getSolution_barx

// Begin mosek.fusion.Model.getSolution_y
// Method mosek.fusion.Model.getSolution_y @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3366:6-3370:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _1104_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1104_which,false))->y;
}
// End mosek.fusion.Model.getSolution_y

// Begin mosek.fusion.Model.getSolution_xc
// Method mosek.fusion.Model.getSolution_xc @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3360:6-3364:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _1105_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1105_which,true))->xc;
}
// End mosek.fusion.Model.getSolution_xc

// Begin mosek.fusion.Model.getSolution_suc
// Method mosek.fusion.Model.getSolution_suc @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3354:6-3358:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _1106_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1106_which,false))->suc;
}
// End mosek.fusion.Model.getSolution_suc

// Begin mosek.fusion.Model.getSolution_slc
// Method mosek.fusion.Model.getSolution_slc @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3348:6-3352:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _1107_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1107_which,false))->slc;
}
// End mosek.fusion.Model.getSolution_slc

// Begin mosek.fusion.Model.getSolution_sux
// Method mosek.fusion.Model.getSolution_sux @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3342:6-3346:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _1108_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1108_which,false))->sux;
}
// End mosek.fusion.Model.getSolution_sux

// Begin mosek.fusion.Model.getSolution_slx
// Method mosek.fusion.Model.getSolution_slx @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3336:6-3340:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _1109_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1109_which,false))->slx;
}
// End mosek.fusion.Model.getSolution_slx

// Begin mosek.fusion.Model.getSolution_yx
// Method mosek.fusion.Model.getSolution_yx @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3330:6-3334:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _1110_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1110_which,false))->yx;
}
// End mosek.fusion.Model.getSolution_yx

// Begin mosek.fusion.Model.getSolution_xx
// Method mosek.fusion.Model.getSolution_xx @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3325:6-3329:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _1111_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1111_which,true))->xx;
}
// End mosek.fusion.Model.getSolution_xx

// Begin mosek.fusion.Model.selectedSolution
// Method mosek.fusion.Model.selectedSolution @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3320:6-3323:7
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _1112_soltype) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_1112_soltype); }
void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _1112_soltype)
{
  solutionptr = _1112_soltype;
}
// End mosek.fusion.Model.selectedSolution

// Begin mosek.fusion.Model.getAcceptedSolutionStatus
// Method mosek.fusion.Model.getAcceptedSolutionStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3307:6-3310:7
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }
mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus()
{
  return acceptable_sol;
}
// End mosek.fusion.Model.getAcceptedSolutionStatus

// Begin mosek.fusion.Model.acceptedSolutionStatus
// Method mosek.fusion.Model.acceptedSolutionStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3301:6-3304:7
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _1113_what) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_1113_what); }
void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _1113_what)
{
  acceptable_sol = _1113_what;
}
// End mosek.fusion.Model.acceptedSolutionStatus

// Begin mosek.fusion.Model.getProblemStatus
// Method mosek.fusion.Model.getProblemStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3270:6-3288:7
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _1114_which) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_1114_which); }
mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _1114_which)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1115_res = nullptr;
  if ((_1114_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _1115_res = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _1115_res = sol_bas;
        }
      }
      else
      {
        {
          _1115_res = sol_itr;
        }
      }
    }
  }
  else if((_1114_which == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _1115_res = sol_itr;
    }
  }
  else if((_1114_which == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _1115_res = sol_bas;
    }
  }
  else if((_1114_which == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _1115_res = sol_itg;
    }
  }
  {}
  if ((NULL == _1115_res.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_1115_res)->probstatus;
    }
  }
}
// End mosek.fusion.Model.getProblemStatus

// Begin mosek.fusion.Model.getDualSolutionStatus
// Method mosek.fusion.Model.getDualSolutionStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3264:6-122
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _1116_which) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_1116_which); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _1116_which)
{
  return getSolutionStatus(_1116_which,false);
}
// End mosek.fusion.Model.getDualSolutionStatus

// Begin mosek.fusion.Model.getPrimalSolutionStatus
// Method mosek.fusion.Model.getPrimalSolutionStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3258:6-128
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _1117_which) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_1117_which); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _1117_which)
{
  return getSolutionStatus(_1117_which,true);
}
// End mosek.fusion.Model.getPrimalSolutionStatus

// Begin mosek.fusion.Model.getSolutionStatus
// Method mosek.fusion.Model.getSolutionStatus @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3241:6-3252:7
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _1118_which,bool _1119_primal)
{
  /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3242:8-3251:9 */
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1121_sol = __mosek_2fusion_2Model__get_sol_cache(_1118_which,_1119_primal,true);
      if (_1119_primal)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_1121_sol)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_1121_sol)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _1120_e)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
// End mosek.fusion.Model.getSolutionStatus

// Begin mosek.fusion.Model.update
// Method mosek.fusion.Model.update @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:3103:6-3237:7
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int32_t,1 > > _1122_conidxs,monty::rc_ptr< ::mosek::fusion::Expression > _1123_expr)
{
  _checked_ptr_1<int32_t> _ptr__1122_conidxs(_1122_conidxs ? _1122_conidxs->raw() : nullptr, _1122_conidxs ? _1122_conidxs->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1123_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int32_t _1124_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1125_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1126_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1127_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1128_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1129_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1130_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1131_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1132_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1133_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1134_code = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1135_codeptr = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1136_cconst = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1137_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1137_wi32(_1137_wi32 ? _1137_wi32->raw() : nullptr,_1137_wi32 ? _1137_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1138_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1138_wi64(_1138_wi64 ? _1138_wi64->raw() : nullptr,_1138_wi64 ? _1138_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1139_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1139_wf64(_1139_wf64 ? _1139_wf64->raw() : nullptr,_1139_wf64 ? _1139_wf64->size(0) : 0);
  int32_t _1140_num_lincon = (int)0;
  int32_t _9593_ = (int)0;
  int32_t _9594_ = _1126_nelem;
  for (int32_t _1141_i = _9593_; _1141_i < _9594_; ++_1141_i)
  {
    {
      if ((_ptr__1122_conidxs[_1141_i] >= (int)0))
      {
        {
          ++ _1140_num_lincon;
        }
      }
      {}
    }
  }
  int32_t _1142_num_concon = (_1126_nelem - _1140_num_lincon);
  if ((_1140_num_lincon == _1126_nelem))
  {
    {
      putarows(_1122_conidxs,ws,_1126_nelem,_1127_nnz,_1130_ptr_base,_1132_nidxs_base,_1133_cof_base);
      if ((_1129_ncodeatom > (int)0))
      {
        {
          con_blocks->replace_row_code(rs,_1122_conidxs,_1130_ptr_base,_1132_nidxs_base,_1135_codeptr,_1134_code,_1136_cconst);
        }
      }
      else
      {
        {
          con_blocks->clear_row_code(_1122_conidxs);
        }
      }
    }
  }
  else if((_1142_num_concon == _1126_nelem))
  {
    {
      std::vector<int32_t> _9595_;
      for (int32_t _1143_i = (int)0, _9596_ = _1126_nelem; _1143_i < _9596_ ; ++_1143_i)
      {
        _9595_.push_back((-safe_add( (int)1,_ptr__1122_conidxs[_1143_i] )));
      }
      auto _9597_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9595_.size()),_9595_.begin(),_9595_.end()));
      putfrows(_9597_,(int)0,ws,_1126_nelem,_1127_nnz,_1130_ptr_base,_1132_nidxs_base,_1133_cof_base);
      if ((_1129_ncodeatom > (int)0))
      {
        {
          std::vector<int32_t> _9598_;
          for (int32_t _1144_i = (int)0, _9599_ = _1126_nelem; _1144_i < _9599_ ; ++_1144_i)
          {
            _9598_.push_back((-safe_add( (int)1,_ptr__1122_conidxs[_1144_i] )));
          }
          auto _9600_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9598_.size()),_9598_.begin(),_9598_.end()));
          afe_blocks->replace_row_code(rs,_9600_,_1130_ptr_base,_1132_nidxs_base,_1135_codeptr,_1134_code,_1136_cconst);
        }
      }
      else
      {
        {
          std::vector<int32_t> _9601_;
          for (int32_t _1145_i = (int)0, _9602_ = _1126_nelem; _1145_i < _9602_ ; ++_1145_i)
          {
            _9601_.push_back((-safe_add( (int)1,_ptr__1122_conidxs[_1145_i] )));
          }
          auto _9603_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9601_.size()),_9601_.begin(),_9601_.end()));
          afe_blocks->clear_row_code(_9603_);
        }
      }
    }
  }
  else
  {
    {
      int32_t _1146_cncodeelm = (int)0;
      int32_t _1147_lncodeelm = (int)0;
      int32_t _1148_cnnz = (int)0;
      int32_t _1149_lnnz = (int)0;
      int32_t _9604_ = (int)0;
      int32_t _9605_ = _1126_nelem;
      for (int32_t _1150_i = _9604_; _1150_i < _9605_; ++_1150_i)
      {
        {
          if ((_ptr__1122_conidxs[_1150_i] >= (int)0))
          {
            {
              _1149_lnnz += (_ptr__1137_wi32[safe_add( safe_add( _1130_ptr_base,_1150_i ),(int)1 )] - _ptr__1137_wi32[safe_add( _1130_ptr_base,_1150_i )]);
            }
          }
          else
          {
            {
              _1148_cnnz += (_ptr__1137_wi32[safe_add( safe_add( _1130_ptr_base,_1150_i ),(int)1 )] - _ptr__1137_wi32[safe_add( _1130_ptr_base,_1150_i )]);
            }
          }
        }
      }
      int32_t _1151_lrowidx = xs->alloci32(_1140_num_lincon);
      int32_t _1152_crowidx = xs->alloci32(_1142_num_concon);
      int32_t _1153_lptr = xs->alloci32(safe_add( _1140_num_lincon,(int)1 ));
      int32_t _1154_cptr = xs->alloci32(safe_add( _1142_num_concon,(int)1 ));
      int32_t _1155_lnidxs = xs->alloci64(_1149_lnnz);
      int32_t _1156_cnidxs = xs->alloci64(_1148_cnnz);
      int32_t _1157_lcof = xs->allocf64(_1149_lnnz);
      int32_t _1158_ccof = xs->allocf64(_1148_cnnz);
      std::shared_ptr< monty::ndarray< double,1 > > _1159_xf64 = mosek::fusion::p_WorkStack::_get_impl(xs)->f64;
      _checked_ptr_1<double> _ptr__1159_xf64(_1159_xf64 ? _1159_xf64->raw() : nullptr,_1159_xf64 ? _1159_xf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1160_xi64 = mosek::fusion::p_WorkStack::_get_impl(xs)->i64;
      _checked_ptr_1<int64_t> _ptr__1160_xi64(_1160_xi64 ? _1160_xi64->raw() : nullptr,_1160_xi64 ? _1160_xi64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1161_xi32 = mosek::fusion::p_WorkStack::_get_impl(xs)->i32;
      _checked_ptr_1<int32_t> _ptr__1161_xi32(_1161_xi32 ? _1161_xi32->raw() : nullptr,_1161_xi32 ? _1161_xi32->size(0) : 0);
      _ptr__1161_xi32[_1153_lptr] = (int)0;
      _ptr__1161_xi32[_1154_cptr] = (int)0;
      int32_t _1162_ci = (int)0;
      int32_t _1163_li = (int)0;
      int32_t _1164_cnzi = (int)0;
      int32_t _1165_lnzi = (int)0;
      int32_t _9606_ = (int)0;
      int32_t _9607_ = _1126_nelem;
      for (int32_t _1166_i = _9606_; _1166_i < _9607_; ++_1166_i)
      {
        {
          int32_t _1167_pb = _ptr__1137_wi32[safe_add( _1130_ptr_base,_1166_i )];
          int32_t _1168_pe = _ptr__1137_wi32[safe_add( safe_add( _1130_ptr_base,_1166_i ),(int)1 )];
          if ((_ptr__1122_conidxs[_1166_i] >= (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1138_wi64,safe_add( _1132_nidxs_base,_1167_pb ),_1160_xi64,safe_add( _1155_lnidxs,_1165_lnzi ),(_1168_pe - _1167_pb));
              ::mosek::fusion::Utils::Tools::arraycopy(_1139_wf64,safe_add( _1133_cof_base,_1167_pb ),_1159_xf64,safe_add( _1157_lcof,_1165_lnzi ),(_1168_pe - _1167_pb));
              _1165_lnzi += (_1168_pe - _1167_pb);
              _ptr__1161_xi32[safe_add( _1151_lrowidx,_1163_li )] = _ptr__1122_conidxs[_1166_i];
              _ptr__1161_xi32[safe_add( safe_add( _1153_lptr,_1163_li ),(int)1 )] = _1165_lnzi;
              ++ _1163_li;
            }
          }
          else
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1138_wi64,safe_add( _1132_nidxs_base,_1167_pb ),_1160_xi64,safe_add( _1156_cnidxs,_1164_cnzi ),(_1168_pe - _1167_pb));
              ::mosek::fusion::Utils::Tools::arraycopy(_1139_wf64,safe_add( _1133_cof_base,_1167_pb ),_1159_xf64,safe_add( _1158_ccof,_1164_cnzi ),(_1168_pe - _1167_pb));
              _1164_cnzi += (_1168_pe - _1167_pb);
              _ptr__1161_xi32[safe_add( _1152_crowidx,_1162_ci )] = (-safe_add( (int)1,_ptr__1122_conidxs[_1166_i] ));
              _ptr__1161_xi32[safe_add( safe_add( _1154_cptr,_1162_ci ),(int)1 )] = _1164_cnzi;
              ++ _1162_ci;
            }
          }
        }
      }
      std::vector<int32_t> _9608_;
      for (int32_t _1169_i = (int)0, _9609_ = _1140_num_lincon; _1169_i < _9609_ ; ++_1169_i)
      {
        _9608_.push_back(_ptr__1161_xi32[safe_add( _1151_lrowidx,_1169_i )]);
      }
      auto _9610_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9608_.size()),_9608_.begin(),_9608_.end()));
      putarows(_9610_,xs,_1140_num_lincon,_1149_lnnz,_1153_lptr,_1155_lnidxs,_1157_lcof);
      putfrows(_1161_xi32,_1152_crowidx,xs,_1142_num_concon,_1148_cnnz,_1154_cptr,_1156_cnidxs,_1158_ccof);
      if ((_1129_ncodeatom > (int)0))
      {
        {
          int32_t _9611_ = (int)0;
          int32_t _9612_ = _1126_nelem;
          for (int32_t _1170_i = _9611_; _1170_i < _9612_; ++_1170_i)
          {
            {
              if ((_ptr__1122_conidxs[_1170_i] >= (int)0))
              {
                {
                  _1147_lncodeelm += (_ptr__1137_wi32[safe_add( _1135_codeptr,_ptr__1137_wi32[safe_add( safe_add( _1130_ptr_base,_1170_i ),(int)1 )] )] - _ptr__1137_wi32[safe_add( _1135_codeptr,_ptr__1137_wi32[safe_add( _1130_ptr_base,_1170_i )] )]);
                }
              }
              else
              {
                {
                  _1146_cncodeelm += (_ptr__1137_wi32[safe_add( _1135_codeptr,_ptr__1137_wi32[safe_add( safe_add( _1130_ptr_base,_1170_i ),(int)1 )] )] - _ptr__1137_wi32[safe_add( _1135_codeptr,_ptr__1137_wi32[safe_add( _1130_ptr_base,_1170_i )] )]);
                }
              }
            }
          }
          int32_t _1171_lcodeptr = xs->alloci32(safe_add( _1149_lnnz,(int)1 ));
          int32_t _1172_ccodeptr = xs->alloci32(safe_add( _1148_cnnz,(int)1 ));
          int32_t _1173_lcode = xs->alloci32(_1147_lncodeelm);
          int32_t _1174_ccode = xs->alloci32(_1146_cncodeelm);
          int32_t _1175_lcconst = xs->allocf64(_1147_lncodeelm);
          int32_t _1176_ccconst = xs->allocf64(_1146_cncodeelm);
          _ptr__1161_xi32[_1171_lcodeptr] = (int)0;
          _ptr__1161_xi32[_1172_ccodeptr] = (int)0;
          int32_t _1177_ccodei = (int)0;
          int32_t _1178_lcodei = (int)0;
          int32_t _1179_rnzi = (int)0;
          int32_t _1180_lnzi = (int)0;
          int32_t _9613_ = (int)0;
          int32_t _9614_ = _1126_nelem;
          for (int32_t _1181_i = _9613_; _1181_i < _9614_; ++_1181_i)
          {
            {
              int32_t _1182_pb = _ptr__1137_wi32[safe_add( _1130_ptr_base,_1181_i )];
              int32_t _1183_pe = _ptr__1137_wi32[safe_add( safe_add( _1130_ptr_base,_1181_i ),(int)1 )];
              if ((_ptr__1122_conidxs[_1181_i] >= (int)0))
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1137_wi32,safe_add( _1134_code,_ptr__1137_wi32[safe_add( _1135_codeptr,_1182_pb )] ),_1161_xi32,safe_add( _1173_lcode,_1178_lcodei ),(_ptr__1137_wi32[safe_add( _1135_codeptr,_1183_pe )] - _ptr__1137_wi32[safe_add( _1135_codeptr,_1182_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1139_wf64,safe_add( _1136_cconst,_ptr__1137_wi32[safe_add( _1135_codeptr,_1182_pb )] ),_1159_xf64,safe_add( _1175_lcconst,_1178_lcodei ),(_ptr__1137_wi32[safe_add( _1135_codeptr,_1183_pe )] - _ptr__1137_wi32[safe_add( _1135_codeptr,_1182_pb )]));
                  int32_t _9615_ = _1182_pb;
                  int32_t _9616_ = _1183_pe;
                  for (int32_t _1184_j = _9615_; _1184_j < _9616_; ++_1184_j)
                  {
                    {
                      _1178_lcodei += (_ptr__1137_wi32[safe_add( safe_add( _1135_codeptr,_1184_j ),(int)1 )] - _ptr__1137_wi32[safe_add( _1135_codeptr,_1184_j )]);
                      _ptr__1161_xi32[safe_add( safe_add( _1171_lcodeptr,_1180_lnzi ),(int)1 )] = _1178_lcodei;
                      ++ _1180_lnzi;
                    }
                  }
                }
              }
              else
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1137_wi32,safe_add( _1134_code,_ptr__1137_wi32[safe_add( _1135_codeptr,_1182_pb )] ),_1161_xi32,safe_add( _1174_ccode,_1177_ccodei ),(_ptr__1137_wi32[safe_add( _1135_codeptr,_1183_pe )] - _ptr__1137_wi32[safe_add( _1135_codeptr,_1182_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1139_wf64,safe_add( _1136_cconst,_ptr__1137_wi32[safe_add( _1135_codeptr,_1182_pb )] ),_1159_xf64,safe_add( _1176_ccconst,_1177_ccodei ),(_ptr__1137_wi32[safe_add( _1135_codeptr,_1183_pe )] - _ptr__1137_wi32[safe_add( _1135_codeptr,_1182_pb )]));
                  int32_t _9617_ = _1182_pb;
                  int32_t _9618_ = _1183_pe;
                  for (int32_t _1185_j = _9617_; _1185_j < _9618_; ++_1185_j)
                  {
                    {
                      _1177_ccodei += (_ptr__1137_wi32[safe_add( safe_add( _1135_codeptr,_1185_j ),(int)1 )] - _ptr__1137_wi32[safe_add( _1135_codeptr,_1185_j )]);
                      _ptr__1161_xi32[safe_add( safe_add( _1172_ccodeptr,_1164_cnzi ),(int)1 )] = _1177_ccodei;
                      ++ _1164_cnzi;
                    }
                  }
                }
              }
            }
          }
          std::vector<int32_t> _9619_;
          for (int32_t _1186_i = (int)0, _9620_ = _1140_num_lincon; _1186_i < _9620_ ; ++_1186_i)
          {
            _9619_.push_back(_ptr__1161_xi32[safe_add( _1151_lrowidx,_1186_i )]);
          }
          auto _9621_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9619_.size()),_9619_.begin(),_9619_.end()));
          con_blocks->replace_row_code(xs,_9621_,_1153_lptr,_1155_lnidxs,_1171_lcodeptr,_1173_lcode,_1175_lcconst);
          std::vector<int32_t> _9622_;
          for (int32_t _1187_i = (int)0, _9623_ = _1142_num_concon; _1187_i < _9623_ ; ++_1187_i)
          {
            _9622_.push_back((int32_t)_ptr__1160_xi64[safe_add( _1152_crowidx,_1187_i )]);
          }
          auto _9624_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9622_.size()),_9622_.begin(),_9622_.end()));
          afe_blocks->replace_row_code(xs,_9624_,_1154_cptr,_1156_cnidxs,_1172_ccodeptr,_1174_ccode,_1176_ccconst);
        }
      }
      else
      {
        {
          std::vector<int32_t> _9625_;
          for (int32_t _1188_i = (int)0, _9626_ = _1140_num_lincon; _1188_i < _9626_ ; ++_1188_i)
          {
            _9625_.push_back(_ptr__1161_xi32[safe_add( _1151_lrowidx,_1188_i )]);
          }
          auto _9627_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9625_.size()),_9625_.begin(),_9625_.end()));
          con_blocks->clear_row_code(_9627_);
          std::vector<int32_t> _9628_;
          for (int32_t _1189_i = (int)0, _9629_ = _1142_num_concon; _1189_i < _9629_ ; ++_1189_i)
          {
            _9628_.push_back((int32_t)_ptr__1160_xi64[safe_add( _1152_crowidx,_1189_i )]);
          }
          auto _9630_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9628_.size()),_9628_.begin(),_9628_.end()));
          afe_blocks->clear_row_code(_9630_);
        }
      }
    }
  }
  xs->clear();
}
// End mosek.fusion.Model.update

// Begin mosek.fusion.Model.update
// Method mosek.fusion.Model.update @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2888:6-3099:7
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int32_t,1 > > _1190_conidxs,monty::rc_ptr< ::mosek::fusion::Expression > _1191_expr,std::shared_ptr< monty::ndarray< int32_t,1 > > _1192_varidxs)
{
  _checked_ptr_1<int32_t> _ptr__1190_conidxs(_1190_conidxs ? _1190_conidxs->raw() : nullptr, _1190_conidxs ? _1190_conidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1192_varidxs(_1192_varidxs ? _1192_varidxs->raw() : nullptr, _1192_varidxs ? _1192_varidxs->size(0) : 0);
  int32_t _9631_ = (int)0;
  int32_t _9632_ = (int)((_1190_conidxs)->size(0));
  for (int32_t _1193_i = _9631_; _1193_i < _9632_; ++_1193_i)
  {
    {
      if (((_ptr__1190_conidxs[_1193_i] >= (int)0) && con_blocks->row_is_parameterized(_1193_i)))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      else if(((_ptr__1190_conidxs[_1193_i] < (int)0) && con_blocks->row_is_parameterized((-safe_add( _1193_i,(int)1 )))))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      {}
    }
  }
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1191_expr)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int32_t _1194_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1195_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1196_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1197_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1198_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1199_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1200_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1201_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1202_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1203_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1204_code = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1205_codeptr = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1206_cconst = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1207_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1207_wi32(_1207_wi32 ? _1207_wi32->raw() : nullptr,_1207_wi32 ? _1207_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1208_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1208_wi64(_1208_wi64 ? _1208_wi64->raw() : nullptr,_1208_wi64 ? _1208_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1209_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1209_wf64(_1209_wf64 ? _1209_wf64->raw() : nullptr,_1209_wf64 ? _1209_wf64->size(0) : 0);
  int32_t _1210_num_lincon = (int)0;
  int32_t _9633_ = (int)0;
  int32_t _9634_ = _1195_nelem;
  for (int32_t _1211_i = _9633_; _1211_i < _9634_; ++_1211_i)
  {
    {
      if ((_ptr__1190_conidxs[_1211_i] >= (int)0))
      {
        {
          ++ _1210_num_lincon;
        }
      }
      {}
    }
  }
  int32_t _1212_num_concon = (_1195_nelem - _1210_num_lincon);
  if (((_1210_num_lincon == _1195_nelem) || (_1212_num_concon == _1195_nelem)))
  {
    {
      int32_t _1213_N = safe_mul( (int)((_1190_conidxs)->size(0)),(int)((_1192_varidxs)->size(0)) );
      std::shared_ptr< monty::ndarray< double,1 > > _1214_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1213_N)));
      _checked_ptr_1<double> _ptr__1214_cof(_1214_cof ? _1214_cof->raw() : nullptr,_1214_cof ? _1214_cof->size(0) : 0);
      int32_t _1215_nzi = (int)0;
      int32_t _9635_ = (int)0;
      int32_t _9636_ = _1195_nelem;
      for (int32_t _1216_i = _9635_; _1216_i < _9636_; ++_1216_i)
      {
        {
          int32_t _1217_p0 = _ptr__1207_wi32[safe_add( _1200_ptr_base,_1216_i )];
          int32_t _1218_p1 = _ptr__1207_wi32[safe_add( safe_add( _1200_ptr_base,_1216_i ),(int)1 )];
          int32_t _1219_p = _1217_p0;
          int32_t _1220_l = (int)0;
          while ( ((_1220_l < (int)((_1192_varidxs)->size(0))) && (_1219_p < _1218_p1)) )
          {
            {
              if ((_ptr__1192_varidxs[_1220_l] < _ptr__1208_wi64[safe_add( _1202_nidxs_base,_1219_p )]))
              {
                {
                  ++ _1220_l;
                }
              }
              else if((_ptr__1192_varidxs[_1220_l] > _ptr__1208_wi64[safe_add( _1202_nidxs_base,_1219_p )]))
              {
                {
                  ++ _1219_p;
                }
              }
              else
              {
                {
                  _ptr__1214_cof[safe_add( _1215_nzi,_1220_l )] = _ptr__1209_wf64[safe_add( _1203_cof_base,_1219_p )];
                  ++ _1220_l;
                  ++ _1219_p;
                }
              }
            }
          }
          _1215_nzi += (int)((_1192_varidxs)->size(0));
        }
      }
      std::vector<int32_t> _9637_;
      for (int32_t _1222_i = (int)0, _9638_ = _1195_nelem; _1222_i < _9638_ ; ++_1222_i)
      {
        for (int32_t _1223_j = (int)0, _9639_ = (int)((_1192_varidxs)->size(0)); _1223_j < _9639_ ; ++_1223_j)
        {
          _9637_.push_back(_ptr__1192_varidxs[_1223_j]);
        }
      }
      auto _9640_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9637_.size()),_9637_.begin(),_9637_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1221_subj = _9640_;
      _checked_ptr_1<int32_t> _ptr__1221_subj(_1221_subj ? _1221_subj->raw() : nullptr,_1221_subj ? _1221_subj->size(0) : 0);
      if ((_1210_num_lincon == _1195_nelem))
      {
        {
          std::vector<int32_t> _9641_;
          for (int32_t _1225_i = (int)0, _9642_ = _1195_nelem; _1225_i < _9642_ ; ++_1225_i)
          {
            for (int32_t _1226_j = (int)0, _9643_ = (int)((_1192_varidxs)->size(0)); _1226_j < _9643_ ; ++_1226_j)
            {
              _9641_.push_back(_ptr__1190_conidxs[_1225_i]);
            }
          }
          auto _9644_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9641_.size()),_9641_.begin(),_9641_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1224_subi = _9644_;
          _checked_ptr_1<int32_t> _ptr__1224_subi(_1224_subi ? _1224_subi->raw() : nullptr,_1224_subi ? _1224_subi->size(0) : 0);
          task_putaijlist(_1224_subi,_1221_subj,_1214_cof,(int64_t)(_1215_nzi));
          if ((_1198_ncodeatom > (int)0))
          {
            {
              con_blocks->replace_row_code(rs,_1190_conidxs,_1200_ptr_base,_1202_nidxs_base,_1205_codeptr,_1204_code,_1206_cconst);
            }
          }
          {}
        }
      }
      else
      {
        {
          std::vector<int32_t> _9645_;
          for (int32_t _1228_i = (int)0, _9646_ = _1195_nelem; _1228_i < _9646_ ; ++_1228_i)
          {
            for (int32_t _1229_j = (int)0, _9647_ = (int)((_1192_varidxs)->size(0)); _1229_j < _9647_ ; ++_1229_j)
            {
              _9645_.push_back((-safe_add( _ptr__1190_conidxs[_1228_i],(int)1 )));
            }
          }
          auto _9648_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9645_.size()),_9645_.begin(),_9645_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1227_subi = _9648_;
          _checked_ptr_1<int32_t> _ptr__1227_subi(_1227_subi ? _1227_subi->raw() : nullptr,_1227_subi ? _1227_subi->size(0) : 0);
          task_putafefijlist(_1227_subi,_1221_subj,_1214_cof);
          if ((_1198_ncodeatom > (int)0))
          {
            {
              std::vector<int32_t> _9649_;
              for (int32_t _1230_i = (int)0, _9650_ = _1195_nelem; _1230_i < _9650_ ; ++_1230_i)
              {
                _9649_.push_back((-safe_add( (int)1,_ptr__1190_conidxs[_1230_i] )));
              }
              auto _9651_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9649_.size()),_9649_.begin(),_9649_.end()));
              afe_blocks->replace_row_code(rs,_9651_,_1200_ptr_base,_1202_nidxs_base,_1205_codeptr,_1204_code,_1206_cconst);
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int32_t _1231_cN = safe_mul( _1212_num_concon,(int)((_1192_varidxs)->size(0)) );
      int32_t _1232_lN = safe_mul( _1210_num_lincon,(int)((_1192_varidxs)->size(0)) );
      std::shared_ptr< monty::ndarray< double,1 > > _1233_lcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1232_lN)));
      _checked_ptr_1<double> _ptr__1233_lcof(_1233_lcof ? _1233_lcof->raw() : nullptr,_1233_lcof ? _1233_lcof->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1234_ccof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1231_cN)));
      _checked_ptr_1<double> _ptr__1234_ccof(_1234_ccof ? _1234_ccof->raw() : nullptr,_1234_ccof ? _1234_ccof->size(0) : 0);
      std::vector<int32_t> _9652_;
      for (int32_t _1236_i = (int)0, _9653_ = _1210_num_lincon; _1236_i < _9653_ ; ++_1236_i)
      {
        for (int32_t _1237_j = (int)0, _9654_ = (int)((_1192_varidxs)->size(0)); _1237_j < _9654_ ; ++_1237_j)
        {
          _9652_.push_back(_ptr__1192_varidxs[_1237_j]);
        }
      }
      auto _9655_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9652_.size()),_9652_.begin(),_9652_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1235_lsubj = _9655_;
      _checked_ptr_1<int32_t> _ptr__1235_lsubj(_1235_lsubj ? _1235_lsubj->raw() : nullptr,_1235_lsubj ? _1235_lsubj->size(0) : 0);
      std::vector<int32_t> _9656_;
      for (int32_t _1239_i = (int)0, _9657_ = _1212_num_concon; _1239_i < _9657_ ; ++_1239_i)
      {
        for (int32_t _1240_j = (int)0, _9658_ = (int)((_1192_varidxs)->size(0)); _1240_j < _9658_ ; ++_1240_j)
        {
          _9656_.push_back(_ptr__1192_varidxs[_1240_j]);
        }
      }
      auto _9659_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9656_.size()),_9656_.begin(),_9656_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1238_csubj = _9659_;
      _checked_ptr_1<int32_t> _ptr__1238_csubj(_1238_csubj ? _1238_csubj->raw() : nullptr,_1238_csubj ? _1238_csubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1241_lsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1210_num_lincon)));
      _checked_ptr_1<int32_t> _ptr__1241_lsubi(_1241_lsubi ? _1241_lsubi->raw() : nullptr,_1241_lsubi ? _1241_lsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1242_csubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1212_num_concon)));
      _checked_ptr_1<int32_t> _ptr__1242_csubi(_1242_csubi ? _1242_csubi->raw() : nullptr,_1242_csubi ? _1242_csubi->size(0) : 0);
      int32_t _1243_crowi = (int)0;
      int32_t _1244_lrowi = (int)0;
      int32_t _1245_cncodeelm = (int)0;
      int32_t _1246_lncodeelm = (int)0;
      int32_t _1247_cnnz = (int)0;
      int32_t _1248_lnnz = (int)0;
      int32_t _9660_ = (int)0;
      int32_t _9661_ = _1195_nelem;
      for (int32_t _1249_i = _9660_; _1249_i < _9661_; ++_1249_i)
      {
        {
          int32_t _1250_p0 = _ptr__1207_wi32[safe_add( _1200_ptr_base,_1249_i )];
          int32_t _1251_p1 = _ptr__1207_wi32[safe_add( safe_add( _1200_ptr_base,_1249_i ),(int)1 )];
          int32_t _1252_p = _1250_p0;
          int32_t _1253_l = (int)0;
          if ((_ptr__1190_conidxs[_1249_i] >= (int)0))
          {
            {
              while ( ((_1253_l < (int)((_1192_varidxs)->size(0))) && (_1252_p < _1251_p1)) )
              {
                {
                  if ((_ptr__1192_varidxs[_1253_l] < _ptr__1208_wi64[safe_add( _1202_nidxs_base,_1252_p )]))
                  {
                    {
                      ++ _1253_l;
                    }
                  }
                  else if((_ptr__1192_varidxs[_1253_l] > _ptr__1208_wi64[safe_add( _1202_nidxs_base,_1252_p )]))
                  {
                    {
                      ++ _1252_p;
                    }
                  }
                  else
                  {
                    {
                      _ptr__1233_lcof[safe_add( _1248_lnnz,_1253_l )] = _ptr__1209_wf64[safe_add( _1203_cof_base,_1252_p )];
                      ++ _1253_l;
                      ++ _1252_p;
                    }
                  }
                }
              }
              int32_t _9662_ = (int)0;
              int32_t _9663_ = (int)((_1192_varidxs)->size(0));
              for (int32_t _1254_j = _9662_; _1254_j < _9663_; ++_1254_j)
              {
                {
                  _ptr__1241_lsubi[safe_add( _1248_lnnz,_1254_j )] = _ptr__1190_conidxs[_1249_i];
                }
              }
              _1248_lnnz += (int)((_1192_varidxs)->size(0));
            }
          }
          else
          {
            {
              while ( ((_1253_l < (int)((_1192_varidxs)->size(0))) && (_1252_p < _1251_p1)) )
              {
                {
                  if ((_ptr__1192_varidxs[_1253_l] < _ptr__1208_wi64[safe_add( _1202_nidxs_base,_1252_p )]))
                  {
                    {
                      ++ _1253_l;
                    }
                  }
                  else if((_ptr__1192_varidxs[_1253_l] > _ptr__1208_wi64[safe_add( _1202_nidxs_base,_1252_p )]))
                  {
                    {
                      ++ _1252_p;
                    }
                  }
                  else
                  {
                    {
                      _ptr__1234_ccof[safe_add( _1247_cnnz,_1253_l )] = _ptr__1209_wf64[safe_add( _1203_cof_base,_1252_p )];
                      ++ _1253_l;
                      ++ _1252_p;
                    }
                  }
                }
              }
              int32_t _9664_ = (int)0;
              int32_t _9665_ = (int)((_1192_varidxs)->size(0));
              for (int32_t _1255_j = _9664_; _1255_j < _9665_; ++_1255_j)
              {
                {
                  _ptr__1242_csubi[safe_add( _1247_cnnz,_1255_j )] = (-safe_add( (int)1,_ptr__1190_conidxs[_1249_i] ));
                }
              }
              _1247_cnnz += (int)((_1192_varidxs)->size(0));
            }
          }
        }
      }
      task_putaijlist(_1241_lsubi,_1235_lsubj,_1233_lcof,(int64_t)(_1248_lnnz));
      task_putafefijlist(_1242_csubi,_1238_csubj,_1234_ccof);
      if ((_1198_ncodeatom > (int)0))
      {
        {
          int32_t _9666_ = (int)0;
          int32_t _9667_ = _1195_nelem;
          for (int32_t _1256_i = _9666_; _1256_i < _9667_; ++_1256_i)
          {
            {
              if ((_ptr__1190_conidxs[_1256_i] >= (int)0))
              {
                {
                  _1248_lnnz += (_ptr__1207_wi32[safe_add( safe_add( _1200_ptr_base,_1256_i ),(int)1 )] - _ptr__1207_wi32[safe_add( _1200_ptr_base,_1256_i )]);
                }
              }
              else
              {
                {
                  _1247_cnnz += (_ptr__1207_wi32[safe_add( safe_add( _1200_ptr_base,_1256_i ),(int)1 )] - _ptr__1207_wi32[safe_add( _1200_ptr_base,_1256_i )]);
                }
              }
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1257_lrowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1210_num_lincon)));
          _checked_ptr_1<int32_t> _ptr__1257_lrowidx(_1257_lrowidx ? _1257_lrowidx->raw() : nullptr,_1257_lrowidx ? _1257_lrowidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1258_crowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1212_num_concon)));
          _checked_ptr_1<int32_t> _ptr__1258_crowidx(_1258_crowidx ? _1258_crowidx->raw() : nullptr,_1258_crowidx ? _1258_crowidx->size(0) : 0);
          int32_t _1259_lptr = xs->alloci32(safe_add( _1210_num_lincon,(int)1 ));
          int32_t _1260_cptr = xs->alloci32(safe_add( _1212_num_concon,(int)1 ));
          int32_t _1261_lnidxs = xs->alloci64(_1248_lnnz);
          int32_t _1262_cnidxs = xs->alloci64(_1247_cnnz);
          std::shared_ptr< monty::ndarray< double,1 > > _1263_xf64 = mosek::fusion::p_WorkStack::_get_impl(xs)->f64;
          _checked_ptr_1<double> _ptr__1263_xf64(_1263_xf64 ? _1263_xf64->raw() : nullptr,_1263_xf64 ? _1263_xf64->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _1264_xi64 = mosek::fusion::p_WorkStack::_get_impl(xs)->i64;
          _checked_ptr_1<int64_t> _ptr__1264_xi64(_1264_xi64 ? _1264_xi64->raw() : nullptr,_1264_xi64 ? _1264_xi64->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1265_xi32 = mosek::fusion::p_WorkStack::_get_impl(xs)->i32;
          _checked_ptr_1<int32_t> _ptr__1265_xi32(_1265_xi32 ? _1265_xi32->raw() : nullptr,_1265_xi32 ? _1265_xi32->size(0) : 0);
          _ptr__1265_xi32[_1259_lptr] = (int)0;
          _ptr__1265_xi32[_1260_cptr] = (int)0;
          int32_t _1266_ci = (int)0;
          int32_t _1267_li = (int)0;
          int32_t _1268_cnzi = (int)0;
          int32_t _1269_lnzi = (int)0;
          int32_t _9668_ = (int)0;
          int32_t _9669_ = _1195_nelem;
          for (int32_t _1270_i = _9668_; _1270_i < _9669_; ++_1270_i)
          {
            {
              int32_t _1271_pb = _ptr__1207_wi32[safe_add( _1200_ptr_base,_1270_i )];
              int32_t _1272_pe = _ptr__1207_wi32[safe_add( safe_add( _1200_ptr_base,_1270_i ),(int)1 )];
              if ((_ptr__1190_conidxs[_1270_i] >= (int)0))
              {
                {
                  _1269_lnzi += (_1272_pe - _1271_pb);
                  _ptr__1257_lrowidx[_1267_li] = _ptr__1190_conidxs[_1270_i];
                  _ptr__1265_xi32[safe_add( safe_add( _1259_lptr,_1267_li ),(int)1 )] = _1269_lnzi;
                  ++ _1267_li;
                }
              }
              else
              {
                {
                  _1268_cnzi += (_1272_pe - _1271_pb);
                  _ptr__1258_crowidx[_1266_ci] = (-safe_add( (int)1,_ptr__1190_conidxs[_1270_i] ));
                  _ptr__1265_xi32[safe_add( safe_add( _1260_cptr,_1266_ci ),(int)1 )] = _1268_cnzi;
                  ++ _1266_ci;
                }
              }
            }
          }
          int32_t _9670_ = (int)0;
          int32_t _9671_ = _1195_nelem;
          for (int32_t _1273_i = _9670_; _1273_i < _9671_; ++_1273_i)
          {
            {
              if ((_ptr__1190_conidxs[_1273_i] >= (int)0))
              {
                {
                  _1246_lncodeelm += (_ptr__1207_wi32[safe_add( _1205_codeptr,_ptr__1207_wi32[safe_add( safe_add( _1200_ptr_base,_1273_i ),(int)1 )] )] - _ptr__1207_wi32[safe_add( _1205_codeptr,_ptr__1207_wi32[safe_add( _1200_ptr_base,_1273_i )] )]);
                }
              }
              else
              {
                {
                  _1245_cncodeelm += (_ptr__1207_wi32[safe_add( _1205_codeptr,_ptr__1207_wi32[safe_add( safe_add( _1200_ptr_base,_1273_i ),(int)1 )] )] - _ptr__1207_wi32[safe_add( _1205_codeptr,_ptr__1207_wi32[safe_add( _1200_ptr_base,_1273_i )] )]);
                }
              }
            }
          }
          int32_t _1274_lcodeptr = xs->alloci32(safe_add( _1248_lnnz,(int)1 ));
          int32_t _1275_ccodeptr = xs->alloci32(safe_add( _1247_cnnz,(int)1 ));
          int32_t _1276_lcode = xs->alloci32(_1246_lncodeelm);
          int32_t _1277_ccode = xs->alloci32(_1245_cncodeelm);
          int32_t _1278_lcconst = xs->allocf64(_1246_lncodeelm);
          int32_t _1279_ccconst = xs->allocf64(_1245_cncodeelm);
          _ptr__1265_xi32[_1274_lcodeptr] = (int)0;
          _ptr__1265_xi32[_1275_ccodeptr] = (int)0;
          int32_t _1280_ccodei = (int)0;
          int32_t _1281_lcodei = (int)0;
          int32_t _1282_rnzi = (int)0;
          int32_t _1283_lnzi = (int)0;
          int32_t _9672_ = (int)0;
          int32_t _9673_ = _1195_nelem;
          for (int32_t _1284_i = _9672_; _1284_i < _9673_; ++_1284_i)
          {
            {
              int32_t _1285_pb = _ptr__1207_wi32[safe_add( _1200_ptr_base,_1284_i )];
              int32_t _1286_pe = _ptr__1207_wi32[safe_add( safe_add( _1200_ptr_base,_1284_i ),(int)1 )];
              if ((_ptr__1190_conidxs[_1284_i] >= (int)0))
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1207_wi32,safe_add( _1204_code,_ptr__1207_wi32[safe_add( _1205_codeptr,_1285_pb )] ),_1265_xi32,safe_add( _1276_lcode,_1281_lcodei ),(_ptr__1207_wi32[safe_add( _1205_codeptr,_1286_pe )] - _ptr__1207_wi32[safe_add( _1205_codeptr,_1285_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1209_wf64,safe_add( _1206_cconst,_ptr__1207_wi32[safe_add( _1205_codeptr,_1285_pb )] ),_1263_xf64,safe_add( _1278_lcconst,_1281_lcodei ),(_ptr__1207_wi32[safe_add( _1205_codeptr,_1286_pe )] - _ptr__1207_wi32[safe_add( _1205_codeptr,_1285_pb )]));
                  int32_t _9674_ = _1285_pb;
                  int32_t _9675_ = _1286_pe;
                  for (int32_t _1287_j = _9674_; _1287_j < _9675_; ++_1287_j)
                  {
                    {
                      _1281_lcodei += (_ptr__1207_wi32[safe_add( safe_add( _1205_codeptr,_1287_j ),(int)1 )] - _ptr__1207_wi32[safe_add( _1205_codeptr,_1287_j )]);
                      _ptr__1265_xi32[safe_add( safe_add( _1274_lcodeptr,_1283_lnzi ),(int)1 )] = _1281_lcodei;
                      ++ _1283_lnzi;
                    }
                  }
                }
              }
              else
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1207_wi32,safe_add( _1204_code,_ptr__1207_wi32[safe_add( _1205_codeptr,_1285_pb )] ),_1265_xi32,safe_add( _1277_ccode,_1280_ccodei ),(_ptr__1207_wi32[safe_add( _1205_codeptr,_1286_pe )] - _ptr__1207_wi32[safe_add( _1205_codeptr,_1285_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1209_wf64,safe_add( _1206_cconst,_ptr__1207_wi32[safe_add( _1205_codeptr,_1285_pb )] ),_1263_xf64,safe_add( _1279_ccconst,_1280_ccodei ),(_ptr__1207_wi32[safe_add( _1205_codeptr,_1286_pe )] - _ptr__1207_wi32[safe_add( _1205_codeptr,_1285_pb )]));
                  int32_t _9676_ = _1285_pb;
                  int32_t _9677_ = _1286_pe;
                  for (int32_t _1288_j = _9676_; _1288_j < _9677_; ++_1288_j)
                  {
                    {
                      _1280_ccodei += (_ptr__1207_wi32[safe_add( safe_add( _1205_codeptr,_1288_j ),(int)1 )] - _ptr__1207_wi32[safe_add( _1205_codeptr,_1288_j )]);
                      _ptr__1265_xi32[safe_add( safe_add( _1275_ccodeptr,_1268_cnzi ),(int)1 )] = _1280_ccodei;
                      ++ _1268_cnzi;
                    }
                  }
                }
              }
            }
          }
          con_blocks->replace_row_code(xs,_1257_lrowidx,_1259_lptr,_1261_lnidxs,_1274_lcodeptr,_1276_lcode,_1278_lcconst);
          afe_blocks->replace_row_code(xs,_1258_crowidx,_1260_cptr,_1262_cnidxs,_1275_ccodeptr,_1277_ccode,_1279_ccconst);
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1289_lrowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1210_num_lincon)));
          _checked_ptr_1<int32_t> _ptr__1289_lrowidx(_1289_lrowidx ? _1289_lrowidx->raw() : nullptr,_1289_lrowidx ? _1289_lrowidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1290_crowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1212_num_concon)));
          _checked_ptr_1<int32_t> _ptr__1290_crowidx(_1290_crowidx ? _1290_crowidx->raw() : nullptr,_1290_crowidx ? _1290_crowidx->size(0) : 0);
          int32_t _1291_ci = (int)0;
          int32_t _1292_li = (int)0;
          int32_t _9678_ = (int)0;
          int32_t _9679_ = _1195_nelem;
          for (int32_t _1293_i = _9678_; _1293_i < _9679_; ++_1293_i)
          {
            {
              if ((_ptr__1190_conidxs[_1293_i] >= (int)0))
              {
                {
                  _ptr__1289_lrowidx[_1292_li] = _ptr__1190_conidxs[_1293_i];
                  ++ _1292_li;
                }
              }
              else
              {
                {
                  _ptr__1290_crowidx[_1291_ci] = (-safe_add( (int)1,_ptr__1190_conidxs[_1293_i] ));
                  ++ _1291_ci;
                }
              }
            }
          }
          con_blocks->clear_row_code(_1289_lrowidx);
          afe_blocks->clear_row_code(_1290_crowidx);
        }
      }
    }
  }
  xs->clear();
}
// End mosek.fusion.Model.update

// Begin mosek.fusion.Model.updateObjective
// Method mosek.fusion.Model.updateObjective @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2800:6-2883:7
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _1294_expr,monty::rc_ptr< ::mosek::fusion::Variable > _1295_x) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_1294_expr,_1295_x); }
void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _1294_expr,monty::rc_ptr< ::mosek::fusion::Variable > _1295_x)
{
  if ((_1294_expr->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((mosek::fusion::p_RowBlockManager::_get_impl(obj_blocks)->code_used > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
    }
  }
  {}
  int32_t _1296_ni = _1295_x->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1297_varidxs_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1296_ni)));
  _checked_ptr_1<int64_t> _ptr__1297_varidxs_(_1297_varidxs_ ? _1297_varidxs_->raw() : nullptr,_1297_varidxs_ ? _1297_varidxs_->size(0) : 0);
  if ((_1296_ni < _1295_x->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1298_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1296_ni)));
      _checked_ptr_1<int64_t> _ptr__1298_sp(_1298_sp ? _1298_sp->raw() : nullptr,_1298_sp ? _1298_sp->size(0) : 0);
      _1295_x->inst((int)0,_1298_sp,(int)0,_1297_varidxs_);
    }
  }
  else
  {
    {
      _1295_x->inst((int)0,_1297_varidxs_);
    }
  }
  int32_t _9680_ = (int)0;
  int32_t _9681_ = _1296_ni;
  for (int32_t _1299_i = _9680_; _1299_i < _9681_; ++_1299_i)
  {
    {
      if ((_ptr__1297_varidxs_[_1299_i] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _1300_varidxs_issorted = true;
  int32_t _9682_ = (int)0;
  int32_t _9683_ = (_1296_ni - (int)1);
  for (int32_t _1301_i = _9682_; _1301_i < _9683_; ++_1301_i)
  {
    {
      _1300_varidxs_issorted = (_1300_varidxs_issorted && (_ptr__1297_varidxs_[_1301_i] < _ptr__1297_varidxs_[(_1301_i - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1302_varidxs = nullptr;
  _checked_ptr_1<int32_t> _ptr__1302_varidxs(_1302_varidxs ? _1302_varidxs->raw() : nullptr,_1302_varidxs ? _1302_varidxs->size(0) : 0);
  if (_1300_varidxs_issorted)
  {
    {
      std::vector<int32_t> _9684_;
      for (int32_t _1303_i = (int)0, _9685_ = _1296_ni; _1303_i < _9685_ ; ++_1303_i)
      {
        _9684_.push_back((int32_t)_ptr__1297_varidxs_[_1303_i]);
      }
      auto _9686_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9684_.size()),_9684_.begin(),_9684_.end()));
      _1302_varidxs = _9686_;
      _ptr__1302_varidxs.update(_1302_varidxs ? _1302_varidxs->raw() : nullptr, _1302_varidxs ? _1302_varidxs->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<int64_t> _9687_;
      for (int32_t _1305_i = (-(int)1), _9688_ = _1296_ni; _1305_i < _9688_ ; ++_1305_i)
      {
        _9687_.push_back(_1305_i);
      }
      auto _9689_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9687_.size()),_9687_.begin(),_9687_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1304_perm = _9689_;
      _checked_ptr_1<int64_t> _ptr__1304_perm(_1304_perm ? _1304_perm->raw() : nullptr,_1304_perm ? _1304_perm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1304_perm,_1297_varidxs_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_1296_ni));
      std::vector<int32_t> _9690_;
      for (int32_t _1306_i = (int)0, _9691_ = _1296_ni; _1306_i < _9691_ ; ++_1306_i)
      {
        _9690_.push_back((int32_t)_ptr__1297_varidxs_[_ptr__1304_perm[_1306_i]]);
      }
      auto _9692_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9690_.size()),_9690_.begin(),_9690_.end()));
      _1302_varidxs = _9692_;
      _ptr__1302_varidxs.update(_1302_varidxs ? _1302_varidxs->raw() : nullptr, _1302_varidxs ? _1302_varidxs->size(0) : 0);
    }
  }
  int32_t _1307_N = (int)((_1302_varidxs)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _1308_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1307_N)));
  _checked_ptr_1<double> _ptr__1308_cof(_1308_cof ? _1308_cof->raw() : nullptr,_1308_cof ? _1308_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1309_subj = _1302_varidxs;
  _checked_ptr_1<int32_t> _ptr__1309_subj(_1309_subj ? _1309_subj->raw() : nullptr,_1309_subj ? _1309_subj->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1294_expr)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  {
  }
  int32_t _1310_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1311_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1312_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1313_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1314_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1315_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1316_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1317_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1318_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1319_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1320_code_base = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1321_codeptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1322_cconst_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  {
  }
  if ((_1314_ncodeatom > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1323_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1323_wi32(_1323_wi32 ? _1323_wi32->raw() : nullptr,_1323_wi32 ? _1323_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1324_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1324_wi64(_1324_wi64 ? _1324_wi64->raw() : nullptr,_1324_wi64 ? _1324_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1325_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1325_wf64(_1325_wf64 ? _1325_wf64->raw() : nullptr,_1325_wf64 ? _1325_wf64->size(0) : 0);
  int32_t _1326_k = (int)0;
  int32_t _9693_ = (int)0;
  int32_t _9694_ = _1311_nelem;
  for (int32_t _1327_i = _9693_; _1327_i < _9694_; ++_1327_i)
  {
    {
      int32_t _1328_p0 = _ptr__1323_wi32[safe_add( _1316_ptr_base,_1327_i )];
      int32_t _1329_p1 = _ptr__1323_wi32[safe_add( safe_add( _1316_ptr_base,_1327_i ),(int)1 )];
      int32_t _1330_p = _1328_p0;
      int32_t _1331_l = (int)0;
      while ( ((_1331_l < (int)((_1302_varidxs)->size(0))) && (_1330_p < _1329_p1)) )
      {
        {
          if ((_ptr__1302_varidxs[_1331_l] < _ptr__1324_wi64[safe_add( _1318_nidxs_base,_1330_p )]))
          {
            {
              ++ _1331_l;
            }
          }
          else if((_ptr__1302_varidxs[_1331_l] > _ptr__1324_wi64[safe_add( _1318_nidxs_base,_1330_p )]))
          {
            {
              ++ _1330_p;
            }
          }
          else
          {
            {
              _ptr__1308_cof[safe_add( _1326_k,_1331_l )] = _ptr__1325_wf64[safe_add( _1319_cof_base,_1330_p )];
              ++ _1331_l;
              ++ _1330_p;
            }
          }
        }
      }
      _1326_k += (int)((_1302_varidxs)->size(0));
    }
  }
  task_putclist(_1309_subj,_1308_cof);
  if ((_1314_ncodeatom > (int)0))
  {
    {
      obj_blocks->replace_row_code(rs,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),_1316_ptr_base,_1318_nidxs_base,_1321_codeptr_base,_1320_code_base,_1322_cconst_base);
    }
  }
  {}
}
// End mosek.fusion.Model.updateObjective

// Begin mosek.fusion.Model.parameter_unchecked
// Method mosek.fusion.Model.parameter_unchecked @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2752:6-2785:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_unchecked(const std::string & _1332_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1333_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1334_sp)
{
  _checked_ptr_1<int32_t> _ptr__1333_shape(_1333_shape ? _1333_shape->raw() : nullptr, _1333_shape ? _1333_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1334_sp(_1334_sp ? _1334_sp->raw() : nullptr, _1334_sp ? _1334_sp->size(0) : 0);
  if ((((int)((_1332_name).size()) > (int)0) && par_map->hasItem(_1332_name)))
  {
    {
      throw ::mosek::fusion::NameError(std::string ("Duplicate parameter name"));
    }
  }
  {}
  int64_t _1335_sz = ::mosek::fusion::p_Set::size(_1333_shape);
  int32_t _9695_;
  bool _9696_ = (NULL != _1334_sp.get());
  if (_9696_)
  {
    _9695_ = (int)((_1334_sp)->size(0));
  }
  else
  {
    _9695_ = (int32_t)_1335_sz;
  }
  int32_t _1336_nelem = _9695_;
  if ((NULL == param_value.get()))
  {
    {
      param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1336_nelem)));
    }
  }
  else
  {
    {
      if ((safe_add( param_num,_1336_nelem ) > (int)((param_value)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _1337_old_param_value = param_value;
          _checked_ptr_1<double> _ptr__1337_old_param_value(_1337_old_param_value ? _1337_old_param_value->raw() : nullptr,_1337_old_param_value ? _1337_old_param_value->size(0) : 0);
          int32_t _9697_;
          bool _9698_ = (safe_mul( (int)2,(int)((_1337_old_param_value)->size(0)) ) > safe_add( (int)((_1337_old_param_value)->size(0)),_1336_nelem ));
          if (_9698_)
          {
            _9697_ = safe_mul( (int)2,(int)((_1337_old_param_value)->size(0)) );
          }
          else
          {
            _9697_ = safe_add( (int)((_1337_old_param_value)->size(0)),_1336_nelem );
          }
          int32_t _1338_new_len = _9697_;
          param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1338_new_len)));
          if ((param_num > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1337_old_param_value,(int)0,param_value,(int)0,param_num);
            }
          }
          {}
        }
      }
      {}
    }
  }
  std::vector<int32_t> _9699_;
  for (int32_t _1340_i = (int)0, _9700_ = (int32_t)_1336_nelem; _1340_i < _9700_ ; ++_1340_i)
  {
    _9699_.push_back(safe_add( param_num,_1340_i ));
  }
  auto _9701_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9699_.size()),_9699_.begin(),_9699_.end()));
  monty::rc_ptr< ::mosek::fusion::ParameterImpl > _1339_r = ::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::Model::t(_pubthis),_1333_shape,_1334_sp,_9701_);
  param_num += _1336_nelem;
  if (((int)((_1332_name).size()) > (int)0))
  {
    {
      if (((NULL == parameters.get()) || (numparameter == (int)((parameters)->size(0)))))
      {
        {
          std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _1341_tmppar = parameters;
          std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _9702_;
          for (int32_t _1342_i = (int)0, _9703_ = safe_add( safe_mul( numparameter,(int)2 ),(int)64 ); _1342_i < _9703_ ; ++_1342_i)
          {
            _9702_.push_back(nullptr);
          }
          auto _9704_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_9702_.size()),_9702_.begin(),_9702_.end()));
          parameters = _9704_;
          int32_t _9705_ = (int)0;
          int32_t _9706_ = numparameter;
          for (int32_t _1343_i = _9705_; _1343_i < _9706_; ++_1343_i)
          {
            {
              ((*parameters)(_1343_i)) = ((*_1341_tmppar)(_1343_i));
            }
          }
        }
      }
      {}
      ((*parameters)(numparameter)) = (_1339_r).as<::mosek::fusion::Parameter>();
      par_map->setItem(_1332_name,numparameter);
      numparameter += (int)1;
    }
  }
  {}
  return (_1339_r).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.Model.parameter_unchecked

// Begin mosek.fusion.Model.parameter_
// Method mosek.fusion.Model.parameter_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2736:6-2750:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _1344_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1345_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1346_sp)
{
  _checked_ptr_1<int32_t> _ptr__1345_shape(_1345_shape ? _1345_shape->raw() : nullptr, _1345_shape ? _1345_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1346_sp(_1346_sp ? _1346_sp->raw() : nullptr, _1346_sp ? _1346_sp->size(0) : 0);
  bool _1347_sorted = true;
  int32_t _1348_nd = (int)((_1345_shape)->size(0));
  if (((NULL != _1346_sp.get()) && ((int)((_1346_sp)->size(0)) > (int)0)))
  {
    {
      bool _1349_ok = (_ptr__1346_sp[((int)((_1346_sp)->size(0)) - (int)1)] < ::mosek::fusion::p_Set::size(_1345_shape));
      int32_t _9707_ = (int)1;
      int32_t _9708_ = (int)((_1346_sp)->size(0));
      for (int32_t _1350_i = _9707_; _1350_i < _9708_; ++_1350_i)
      {
        {
          _1349_ok = (_1349_ok && (_ptr__1346_sp[(_1350_i - (int)1)] < _ptr__1346_sp[_1350_i]));
        }
      }
      if ((!_1349_ok))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Unordered sparsity pattern"));
        }
      }
      {}
    }
  }
  {}
  return __mosek_2fusion_2Model__parameter_unchecked(_1344_name,_1345_shape,_1346_sp);
}
// End mosek.fusion.Model.parameter_

// Begin mosek.fusion.Model.parameter_
// Method mosek.fusion.Model.parameter_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2713:6-2734:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _1351_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1352_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1353_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1352_shape(_1352_shape ? _1352_shape->raw() : nullptr, _1352_shape ? _1352_shape->size(0) : 0);
  int32_t _1354_n = (int)((_1353_sparsity)->size(0));
  int32_t _1355_m = (int)((_1353_sparsity)->size(1));
  if (((int)((_1352_shape)->size(0)) != _1355_m))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid sparsity"));
    }
  }
  {}
  if ((NULL == _1353_sparsity.get()))
  {
    {
      return __mosek_2fusion_2Model__parameter_unchecked(_1351_name,_1352_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1356_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1354_n)));
      _checked_ptr_1<int64_t> _ptr__1356_sp(_1356_sp ? _1356_sp->raw() : nullptr,_1356_sp ? _1356_sp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1357_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1355_m)));
      _checked_ptr_1<int64_t> _ptr__1357_strides(_1357_strides ? _1357_strides->raw() : nullptr,_1357_strides ? _1357_strides->size(0) : 0);
      _ptr__1357_strides[(_1355_m - (int)1)] = (int)1;
      int32_t _9709_ = (int)1;
      int32_t _9710_ = _1355_m;
      for (int32_t _1358_i = _9709_; _1358_i < _9710_; ++_1358_i)
      {
        {
          _ptr__1357_strides[((_1355_m - (int)1) - _1358_i)] = safe_mul( _ptr__1357_strides[(_1355_m - _1358_i)],_ptr__1352_shape[(_1355_m - _1358_i)] );
        }
      }
      int32_t _9711_ = (int)0;
      int32_t _9712_ = _1354_n;
      for (int32_t _1359_i = _9711_; _1359_i < _9712_; ++_1359_i)
      {
        {
          _ptr__1356_sp[_1359_i] = (int)0;
          int32_t _9713_ = (int)0;
          int32_t _9714_ = _1355_m;
          for (int32_t _1360_j = _9713_; _1360_j < _9714_; ++_1360_j)
          {
            {
              _ptr__1356_sp[_1359_i] += safe_mul( ((*_1353_sparsity)(_1359_i,_1360_j)),_ptr__1357_strides[_1360_j] );
            }
          }
        }
      }
      return __mosek_2fusion_2Model__parameter_(_1351_name,_1352_shape,_1356_sp);
    }
  }
}
// End mosek.fusion.Model.parameter_

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2711:6-139
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1361_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1361_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1361_name) { return __mosek_2fusion_2Model__parameter(_1361_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1361_name)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1362_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1362_sp(_1362_sp ? _1362_sp->raw() : nullptr,_1362_sp ? _1362_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1361_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),_1362_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2710:6-159
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1363_name,int32_t _1364_d1,int32_t _1365_d2,int32_t _1366_d3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1363_name,_1364_d1,_1365_d2,_1366_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1363_name,int32_t _1364_d1,int32_t _1365_d2,int32_t _1366_d3) { return __mosek_2fusion_2Model__parameter(_1363_name,_1364_d1,_1365_d2,_1366_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1363_name,int32_t _1364_d1,int32_t _1365_d2,int32_t _1366_d3)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1367_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1367_sp(_1367_sp ? _1367_sp->raw() : nullptr,_1367_sp ? _1367_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1363_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1364_d1),(int32_t)(_1365_d2),(int32_t)(_1366_d3)}),_1367_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2709:6-146
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1368_name,int32_t _1369_d1,int32_t _1370_d2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1368_name,_1369_d1,_1370_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1368_name,int32_t _1369_d1,int32_t _1370_d2) { return __mosek_2fusion_2Model__parameter(_1368_name,_1369_d1,_1370_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1368_name,int32_t _1369_d1,int32_t _1370_d2)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1371_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1371_sp(_1371_sp ? _1371_sp->raw() : nullptr,_1371_sp ? _1371_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1368_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1369_d1),(int32_t)(_1370_d2)}),_1371_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2708:6-143
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1372_name,int32_t _1373_d1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1372_name,_1373_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1372_name,int32_t _1373_d1) { return __mosek_2fusion_2Model__parameter(_1372_name,_1373_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1372_name,int32_t _1373_d1)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1374_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1374_sp(_1374_sp ? _1374_sp->raw() : nullptr,_1374_sp ? _1374_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1372_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1373_d1)}),_1374_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2707:6-134
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1375_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1376_shape) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1375_name,_1376_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1375_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1376_shape) { return __mosek_2fusion_2Model__parameter(_1375_name,_1376_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1375_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1376_shape)
{
  _checked_ptr_1<int32_t> _ptr__1376_shape(_1376_shape ? _1376_shape->raw() : nullptr, _1376_shape ? _1376_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1377_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1377_sp(_1377_sp ? _1377_sp->raw() : nullptr,_1377_sp ? _1377_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1375_name,_1376_shape,_1377_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2706:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1378_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1379_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1380_sp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1378_name,_1379_shape,_1380_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1378_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1379_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1380_sp) { return __mosek_2fusion_2Model__parameter(_1378_name,_1379_shape,_1380_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1378_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1379_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1380_sp)
{
  _checked_ptr_1<int32_t> _ptr__1379_shape(_1379_shape ? _1379_shape->raw() : nullptr, _1379_shape ? _1379_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1380_sp(_1380_sp ? _1380_sp->raw() : nullptr, _1380_sp ? _1380_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1378_name,_1379_shape,_1380_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2705:6-136
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1381_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1382_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1383_sparsity) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1381_name,_1382_shape,_1383_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1381_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1382_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1383_sparsity) { return __mosek_2fusion_2Model__parameter(_1381_name,_1382_shape,_1383_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1381_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1382_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1383_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1382_shape(_1382_shape ? _1382_shape->raw() : nullptr, _1382_shape ? _1382_shape->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1381_name,_1382_shape,_1383_sparsity);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2703:6-126
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter() { return __mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter()
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1384_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1384_sp(_1384_sp ? _1384_sp->raw() : nullptr,_1384_sp ? _1384_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),_1384_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2702:6-145
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1385_d1,int32_t _1386_d2,int32_t _1387_d3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1385_d1,_1386_d2,_1387_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1385_d1,int32_t _1386_d2,int32_t _1387_d3) { return __mosek_2fusion_2Model__parameter(_1385_d1,_1386_d2,_1387_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1385_d1,int32_t _1386_d2,int32_t _1387_d3)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1388_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1388_sp(_1388_sp ? _1388_sp->raw() : nullptr,_1388_sp ? _1388_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1385_d1),(int32_t)(_1386_d2),(int32_t)(_1387_d3)}),_1388_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2701:6-132
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1389_d1,int32_t _1390_d2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1389_d1,_1390_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1389_d1,int32_t _1390_d2) { return __mosek_2fusion_2Model__parameter(_1389_d1,_1390_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1389_d1,int32_t _1390_d2)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1391_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1391_sp(_1391_sp ? _1391_sp->raw() : nullptr,_1391_sp ? _1391_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1389_d1),(int32_t)(_1390_d2)}),_1391_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2700:6-129
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1392_d1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1392_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1392_d1) { return __mosek_2fusion_2Model__parameter(_1392_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1392_d1)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1393_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1393_sp(_1393_sp ? _1393_sp->raw() : nullptr,_1393_sp ? _1393_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1392_d1)}),_1393_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2699:6-120
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1394_shape) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1394_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1394_shape) { return __mosek_2fusion_2Model__parameter(_1394_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1394_shape)
{
  _checked_ptr_1<int32_t> _ptr__1394_shape(_1394_shape ? _1394_shape->raw() : nullptr, _1394_shape ? _1394_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1395_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1395_sp(_1395_sp ? _1395_sp->raw() : nullptr,_1395_sp ? _1395_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1394_shape,_1395_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2698:6-109
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1396_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1397_sp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1396_shape,_1397_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1396_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1397_sp) { return __mosek_2fusion_2Model__parameter(_1396_shape,_1397_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1396_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1397_sp)
{
  _checked_ptr_1<int32_t> _ptr__1396_shape(_1396_shape ? _1396_shape->raw() : nullptr, _1396_shape ? _1396_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1397_sp(_1397_sp ? _1397_sp->raw() : nullptr, _1397_sp ? _1397_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1396_shape,_1397_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2697:6-122
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1398_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1399_sparsity) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1398_shape,_1399_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1398_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1399_sparsity) { return __mosek_2fusion_2Model__parameter(_1398_shape,_1399_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1398_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1399_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1398_shape(_1398_shape ? _1398_shape->raw() : nullptr, _1398_shape ? _1398_shape->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1398_shape,_1399_sparsity);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.objective_
// Method mosek.fusion.Model.objective_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2601:6-2690:7
void mosek::fusion::p_Model::objective_(const std::string & _1400_name,mosek::fusion::ObjectiveSense _1401_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1402_expr)
{
  task_putobjectivename(_1400_name);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _1403_rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _1404_ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1405_obje = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1402_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1405_obje->eval(_1403_rs,_1404_ws,xs);
  _1403_rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1406_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1406_ri32(_1406_ri32 ? _1406_ri32->raw() : nullptr,_1406_ri32 ? _1406_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1407_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1407_ri64(_1407_ri64 ? _1407_ri64->raw() : nullptr,_1407_ri64 ? _1407_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1408_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->f64;
  _checked_ptr_1<double> _ptr__1408_rf64(_1408_rf64 ? _1408_rf64->raw() : nullptr,_1408_rf64 ? _1408_rf64->size(0) : 0);
  int32_t _1409_nd = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->nd;
  int32_t _1410_nelem = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->nelem;
  int32_t _1411_nnz = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->nnz;
  bool _1412_hassp = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->hassp;
  int32_t _1413_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->ncodeatom;
  int32_t _1414_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->ptr_base;
  int32_t _1415_shape_base = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->shape_base;
  int32_t _1416_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->nidxs_base;
  int32_t _1417_cof_base = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->cof_base;
  int32_t _1418_code_base = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->code_base;
  int32_t _1419_codeptr_base = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->codeptr_base;
  int32_t _1420_cconst_base = mosek::fusion::p_WorkStack::_get_impl(_1403_rs)->cconst_base;
  int64_t _1421_totalsize = (int64_t)1;
  int32_t _9715_ = (int)0;
  int32_t _9716_ = _1409_nd;
  for (int32_t _1422_i = _9715_; _1422_i < _9716_; ++_1422_i)
  {
    {
      _1409_nd *= _ptr__1406_ri32[safe_add( _1415_shape_base,_1422_i )];
    }
  }
  if ((_1421_totalsize != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((_1410_nelem != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int32_t _1423_linnz = (int)0;
  int32_t _1424_psdnz = (int)0;
  int32_t _9717_ = (int)0;
  int32_t _9718_ = _1411_nnz;
  for (int32_t _1425_i = _9717_; _1425_i < _9718_; ++_1425_i)
  {
    {
      if ((_ptr__1407_ri64[safe_add( _1416_nidxs_base,_1425_i )] < (int)0))
      {
        {
          ++ _1424_psdnz;
        }
      }
      else if((_ptr__1407_ri64[safe_add( _1416_nidxs_base,_1425_i )] >= (int)0))
      {
        {
          ++ _1423_linnz;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1426_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1423_linnz)));
  _checked_ptr_1<int32_t> _ptr__1426_subj(_1426_subj ? _1426_subj->raw() : nullptr,_1426_subj ? _1426_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1427_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1423_linnz)));
  _checked_ptr_1<double> _ptr__1427_cof(_1427_cof ? _1427_cof->raw() : nullptr,_1427_cof ? _1427_cof->size(0) : 0);
  {
    int32_t _1428_k = (int)0;
    int32_t _9719_ = (int)0;
    int32_t _9720_ = _1411_nnz;
    for (int32_t _1429_j = _9719_; _1429_j < _9720_; ++_1429_j)
    {
      {
        if ((_ptr__1407_ri64[safe_add( _1416_nidxs_base,_1429_j )] >= (int)0))
        {
          {
            _ptr__1426_subj[_1428_k] = (int32_t)_ptr__1407_ri64[safe_add( _1416_nidxs_base,_1429_j )];
            _ptr__1427_cof[_1428_k] = _ptr__1408_rf64[safe_add( _1417_cof_base,_1429_j )];
            ++ _1428_k;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_1401_sense == ::mosek::fusion::ObjectiveSense::Maximize),_1426_subj,_1427_cof,0.0);
  if ((_1424_psdnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1430_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1424_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1430_subj(_1430_subj ? _1430_subj->raw() : nullptr,_1430_subj ? _1430_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1431_subk = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1424_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1431_subk(_1431_subk ? _1431_subk->raw() : nullptr,_1431_subk ? _1431_subk->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1432_subl = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1424_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1432_subl(_1432_subl ? _1432_subl->raw() : nullptr,_1432_subl ? _1432_subl->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1433_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1424_psdnz)));
      _checked_ptr_1<double> _ptr__1433_val(_1433_val ? _1433_val->raw() : nullptr,_1433_val ? _1433_val->size(0) : 0);
      int32_t _9721_ = (int)0;
      int32_t _9722_ = _1424_psdnz;
      for (int32_t _1434_i = _9721_; _1434_i < _9722_; ++_1434_i)
      {
        {
          int64_t _1435_varidx = (-safe_add( _ptr__1407_ri64[safe_add( _1416_nidxs_base,_1434_i )],(int)1 ));
          _ptr__1430_subj[_1434_i] = ((*barvar_block_elm_barj)(_1435_varidx));
          _ptr__1431_subk[_1434_i] = ((*barvar_block_elm_i)(_1435_varidx));
          _ptr__1432_subl[_1434_i] = ((*barvar_block_elm_j)(_1435_varidx));
          double _9723_;
          bool _9724_ = (_ptr__1431_subk[_1434_i] == _ptr__1432_subl[_1434_i]);
          if (_9724_)
          {
            _9723_ = _ptr__1408_rf64[safe_add( _1417_cof_base,_1434_i )];
          }
          else
          {
            _9723_ = (0.5 * _ptr__1408_rf64[safe_add( _1417_cof_base,_1434_i )]);
          }
          _ptr__1433_val[_1434_i] = _9723_;
        }
      }
      task_putbarc(_1430_subj,_1431_subk,_1432_subl,_1433_val);
    }
  }
  {}
  if ((_1413_ncodeatom > (int)0))
  {
    {
      obj_blocks->replace_row_code(_1403_rs,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),_1414_ptr_base,_1416_nidxs_base,_1419_codeptr_base,_1418_code_base,_1420_cconst_base);
    }
  }
  {}
}
// End mosek.fusion.Model.objective_

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2598:6-163
void mosek::fusion::Model :: objective(double _1436_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1436_c); }
void mosek::fusion::p_Model::objective(double _1436_c)
{
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_1436_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2597:6-145
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _1437_sense,double _1438_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1437_sense,_1438_c); }
void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _1437_sense,double _1438_c)
{
  objective_(std::string (""),_1437_sense,::mosek::fusion::p_Expr::constTerm(_1438_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2596:6-132
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _1439_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1440_expr) { mosek::fusion::p_Model::_get_impl(this)->objective(_1439_sense,_1440_expr); }
void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _1439_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1440_expr)
{
  objective_(std::string (""),_1439_sense,_1440_expr);
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2595:6-165
void mosek::fusion::Model :: objective(const std::string & _1441_name,double _1442_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1441_name,_1442_c); }
void mosek::fusion::p_Model::objective(const std::string & _1441_name,double _1442_c)
{
  objective_(_1441_name,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_1442_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2594:6-147
void mosek::fusion::Model :: objective(const std::string & _1443_name,mosek::fusion::ObjectiveSense _1444_sense,double _1445_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1443_name,_1444_sense,_1445_c); }
void mosek::fusion::p_Model::objective(const std::string & _1443_name,mosek::fusion::ObjectiveSense _1444_sense,double _1445_c)
{
  objective_(_1443_name,_1444_sense,::mosek::fusion::p_Expr::constTerm(_1445_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2593:6-134
void mosek::fusion::Model :: objective(const std::string & _1446_name,mosek::fusion::ObjectiveSense _1447_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1448_expr) { mosek::fusion::p_Model::_get_impl(this)->objective(_1446_name,_1447_sense,_1448_expr); }
void mosek::fusion::p_Model::objective(const std::string & _1446_name,mosek::fusion::ObjectiveSense _1447_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1448_expr)
{
  objective_(_1446_name,_1447_sense,_1448_expr);
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2591:6-159
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _1449_exprdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1449_exprdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _1449_exprdom) { return __mosek_2fusion_2Model__constraint(_1449_exprdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _1449_exprdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),mosek::fusion::p_ExprRangeDomain::_get_impl(_1449_exprdom)->expr,mosek::fusion::p_ExprRangeDomain::_get_impl(_1449_exprdom)->dom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2589:6-159
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1450_name,monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _1451_exprdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1450_name,_1451_exprdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(const std::string &  _1450_name,monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _1451_exprdom) { return __mosek_2fusion_2Model__constraint(_1450_name,_1451_exprdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1450_name,monty::rc_ptr< ::mosek::fusion::ExprRangeDomain > _1451_exprdom)
{
  return __mosek_2fusion_2Model__constraint_(_1450_name,mosek::fusion::p_ExprRangeDomain::_get_impl(_1451_exprdom)->expr,mosek::fusion::p_ExprRangeDomain::_get_impl(_1451_exprdom)->dom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2587:6-144
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1452_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1453_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1452_expr,_1453_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1452_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1453_rdom) { return __mosek_2fusion_2Model__constraint(_1452_expr,_1453_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1452_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1453_rdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1452_expr,_1453_rdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2586:6-144
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1454_name,monty::rc_ptr< ::mosek::fusion::Expression > _1455_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1456_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1454_name,_1455_expr,_1456_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(const std::string &  _1454_name,monty::rc_ptr< ::mosek::fusion::Expression > _1455_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1456_rdom) { return __mosek_2fusion_2Model__constraint(_1454_name,_1455_expr,_1456_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1454_name,monty::rc_ptr< ::mosek::fusion::Expression > _1455_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1456_rdom)
{
  return __mosek_2fusion_2Model__constraint_(_1454_name,_1455_expr,_1456_rdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2584:6-154
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::ExprConicDomain > _1457_exprdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1457_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::ExprConicDomain > _1457_exprdom) { return __mosek_2fusion_2Model__constraint(_1457_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::ExprConicDomain > _1457_exprdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),mosek::fusion::p_ExprConicDomain::_get_impl(_1457_exprdom)->expr,mosek::fusion::p_ExprConicDomain::_get_impl(_1457_exprdom)->dom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2582:6-154
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1458_name,monty::rc_ptr< ::mosek::fusion::ExprConicDomain > _1459_exprdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1458_name,_1459_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1458_name,monty::rc_ptr< ::mosek::fusion::ExprConicDomain > _1459_exprdom) { return __mosek_2fusion_2Model__constraint(_1458_name,_1459_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1458_name,monty::rc_ptr< ::mosek::fusion::ExprConicDomain > _1459_exprdom)
{
  return __mosek_2fusion_2Model__constraint_(_1458_name,mosek::fusion::p_ExprConicDomain::_get_impl(_1459_exprdom)->expr,mosek::fusion::p_ExprConicDomain::_get_impl(_1459_exprdom)->dom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2580:6-139
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1460_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1461_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1460_expr,_1461_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1460_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1461_qdom) { return __mosek_2fusion_2Model__constraint(_1460_expr,_1461_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1460_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1461_qdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1460_expr,_1461_qdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2579:6-139
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1462_name,monty::rc_ptr< ::mosek::fusion::Expression > _1463_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1464_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1462_name,_1463_expr,_1464_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1462_name,monty::rc_ptr< ::mosek::fusion::Expression > _1463_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1464_qdom) { return __mosek_2fusion_2Model__constraint(_1462_name,_1463_expr,_1464_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1462_name,monty::rc_ptr< ::mosek::fusion::Expression > _1463_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1464_qdom)
{
  return __mosek_2fusion_2Model__constraint_(_1462_name,_1463_expr,_1464_qdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2577:6-154
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _1465_exprdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1465_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _1465_exprdom) { return __mosek_2fusion_2Model__constraint(_1465_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _1465_exprdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),mosek::fusion::p_ExprLinearDomain::_get_impl(_1465_exprdom)->expr,mosek::fusion::p_ExprLinearDomain::_get_impl(_1465_exprdom)->dom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2575:6-154
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1466_name,monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _1467_exprdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1466_name,_1467_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1466_name,monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _1467_exprdom) { return __mosek_2fusion_2Model__constraint(_1466_name,_1467_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1466_name,monty::rc_ptr< ::mosek::fusion::ExprLinearDomain > _1467_exprdom)
{
  return __mosek_2fusion_2Model__constraint_(_1466_name,mosek::fusion::p_ExprLinearDomain::_get_impl(_1467_exprdom)->expr,mosek::fusion::p_ExprLinearDomain::_get_impl(_1467_exprdom)->dom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2573:6-139
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1468_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1469_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1468_expr,_1469_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1468_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1469_ldom) { return __mosek_2fusion_2Model__constraint(_1468_expr,_1469_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1468_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1469_ldom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1468_expr,_1469_ldom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2572:6-139
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1470_name,monty::rc_ptr< ::mosek::fusion::Expression > _1471_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1472_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1470_name,_1471_expr,_1472_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1470_name,monty::rc_ptr< ::mosek::fusion::Expression > _1471_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1472_ldom) { return __mosek_2fusion_2Model__constraint(_1470_name,_1471_expr,_1472_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1470_name,monty::rc_ptr< ::mosek::fusion::Expression > _1471_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1472_ldom)
{
  return __mosek_2fusion_2Model__constraint_(_1470_name,_1471_expr,_1472_ldom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2570:6-154
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::ExprPSDDomain > _1473_exprdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1473_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::ExprPSDDomain > _1473_exprdom) { return __mosek_2fusion_2Model__constraint(_1473_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::ExprPSDDomain > _1473_exprdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),mosek::fusion::p_ExprPSDDomain::_get_impl(_1473_exprdom)->expr,mosek::fusion::p_ExprPSDDomain::_get_impl(_1473_exprdom)->dom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2568:6-154
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1474_name,monty::rc_ptr< ::mosek::fusion::ExprPSDDomain > _1475_exprdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1474_name,_1475_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1474_name,monty::rc_ptr< ::mosek::fusion::ExprPSDDomain > _1475_exprdom) { return __mosek_2fusion_2Model__constraint(_1474_name,_1475_exprdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1474_name,monty::rc_ptr< ::mosek::fusion::ExprPSDDomain > _1475_exprdom)
{
  return __mosek_2fusion_2Model__constraint_(_1474_name,mosek::fusion::p_ExprPSDDomain::_get_impl(_1475_exprdom)->expr,mosek::fusion::p_ExprPSDDomain::_get_impl(_1475_exprdom)->dom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2566:6-141
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1476_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1477_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1476_expr,_1477_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1476_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1477_psddom) { return __mosek_2fusion_2Model__constraint(_1476_expr,_1477_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1476_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1477_psddom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1476_expr,_1477_psddom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2565:6-141
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1478_name,monty::rc_ptr< ::mosek::fusion::Expression > _1479_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1480_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1478_name,_1479_expr,_1480_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1478_name,monty::rc_ptr< ::mosek::fusion::Expression > _1479_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1480_psddom) { return __mosek_2fusion_2Model__constraint(_1478_name,_1479_expr,_1480_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1478_name,monty::rc_ptr< ::mosek::fusion::Expression > _1479_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1480_psddom)
{
  return __mosek_2fusion_2Model__constraint_(_1478_name,_1479_expr,_1480_psddom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2554:6-170
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1481_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1481_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1481_psddom) { return __mosek_2fusion_2Model__variable(_1481_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1481_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_1481_psddom)->shape,_1481_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2553:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1482_n,int32_t _1483_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1484_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1482_n,_1483_m,_1484_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1482_n,int32_t _1483_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1484_psddom) { return __mosek_2fusion_2Model__variable(_1482_n,_1483_m,_1484_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1482_n,int32_t _1483_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1484_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1483_m),(int32_t)(_1482_n),(int32_t)(_1482_n)}),_1484_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2552:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1485_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1486_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1485_n,_1486_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1485_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1486_psddom) { return __mosek_2fusion_2Model__variable(_1485_n,_1486_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1485_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1486_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1485_n),(int32_t)(_1485_n)}),_1486_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2551:6-170
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1487_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1488_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1487_name,_1488_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1487_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1488_psddom) { return __mosek_2fusion_2Model__variable(_1487_name,_1488_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1487_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1488_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1487_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1488_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2550:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1489_name,int32_t _1490_n,int32_t _1491_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1492_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1489_name,_1490_n,_1491_m,_1492_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1489_name,int32_t _1490_n,int32_t _1491_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1492_psddom) { return __mosek_2fusion_2Model__variable(_1489_name,_1490_n,_1491_m,_1492_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1489_name,int32_t _1490_n,int32_t _1491_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1492_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1489_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1491_m),(int32_t)(_1490_n),(int32_t)(_1490_n)}),_1492_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2549:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1493_name,int32_t _1494_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1495_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1493_name,_1494_n,_1495_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1493_name,int32_t _1494_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1495_psddom) { return __mosek_2fusion_2Model__variable(_1493_name,_1494_n,_1495_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1493_name,int32_t _1494_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1495_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1493_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1494_n),(int32_t)(_1494_n)}),_1495_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2548:6-157
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1496_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1497_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1498_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1496_name,_1497_shp,_1498_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1496_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1497_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1498_psddom) { return __mosek_2fusion_2Model__variable(_1496_name,_1497_shp,_1498_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1496_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1497_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1498_psddom)
{
  _checked_ptr_1<int32_t> _ptr__1497_shp(_1497_shp ? _1497_shp->raw() : nullptr, _1497_shp ? _1497_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1496_name,_1497_shp,_1498_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2546:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1499_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1499_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1499_qdom) { return __mosek_2fusion_2Model__variable(_1499_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1499_qdom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1499_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2545:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1500_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1500_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1500_rdom) { return __mosek_2fusion_2Model__variable(_1500_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1500_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1500_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2544:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1501_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1501_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1501_ldom) { return __mosek_2fusion_2Model__variable(_1501_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1501_ldom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1501_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2543:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1502_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1503_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1502_shp,_1503_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1502_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1503_qdom) { return __mosek_2fusion_2Model__variable(_1502_shp,_1503_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1502_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1503_qdom)
{
  _checked_ptr_1<int32_t> _ptr__1502_shp(_1502_shp ? _1502_shp->raw() : nullptr, _1502_shp ? _1502_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1502_shp,_1503_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2542:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1504_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1505_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1504_shp,_1505_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1504_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1505_rdom) { return __mosek_2fusion_2Model__variable(_1504_shp,_1505_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1504_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1505_rdom)
{
  _checked_ptr_1<int32_t> _ptr__1504_shp(_1504_shp ? _1504_shp->raw() : nullptr, _1504_shp ? _1504_shp->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_1504_shp,_1505_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2541:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1506_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1507_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1506_shp,_1507_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1506_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1507_ldom) { return __mosek_2fusion_2Model__variable(_1506_shp,_1507_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1506_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1507_ldom)
{
  _checked_ptr_1<int32_t> _ptr__1506_shp(_1506_shp ? _1506_shp->raw() : nullptr, _1506_shp ? _1506_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1506_shp,_1507_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2540:6-162
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1508_shp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1508_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1508_shp) { return __mosek_2fusion_2Model__variable(_1508_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1508_shp)
{
  _checked_ptr_1<int32_t> _ptr__1508_shp(_1508_shp ? _1508_shp->raw() : nullptr, _1508_shp ? _1508_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1508_shp,::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2539:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1509_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1510_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1509_size,_1510_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1509_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1510_qdom) { return __mosek_2fusion_2Model__variable(_1509_size,_1510_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1509_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1510_qdom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1509_size)}),_1510_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2538:6-161
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1511_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1512_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1511_size,_1512_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(int32_t _1511_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1512_rdom) { return __mosek_2fusion_2Model__variable(_1511_size,_1512_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1511_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1512_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1511_size)}),_1512_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2537:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1513_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1514_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1513_size,_1514_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1513_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1514_ldom) { return __mosek_2fusion_2Model__variable(_1513_size,_1514_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1513_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1514_ldom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1513_size)}),_1514_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2536:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1515_size) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1515_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1515_size) { return __mosek_2fusion_2Model__variable(_1515_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1515_size)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1515_size)}),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2535:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable()
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2533:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1516_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1517_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1516_name,_1517_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1516_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1517_qdom) { return __mosek_2fusion_2Model__variable(_1516_name,_1517_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1516_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1517_qdom)
{
  return __mosek_2fusion_2Model__variable_(_1516_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1517_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2532:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1518_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1519_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1518_name,_1519_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1518_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1519_rdom) { return __mosek_2fusion_2Model__variable(_1518_name,_1519_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1518_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1519_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(_1518_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1519_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2531:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1520_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1521_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1520_name,_1521_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1520_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1521_ldom) { return __mosek_2fusion_2Model__variable(_1520_name,_1521_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1520_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1521_ldom)
{
  return __mosek_2fusion_2Model__variable_(_1520_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1521_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2530:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1522_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1523_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1524_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1522_name,_1523_shp,_1524_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1522_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1523_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1524_qdom) { return __mosek_2fusion_2Model__variable(_1522_name,_1523_shp,_1524_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1522_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1523_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1524_qdom)
{
  _checked_ptr_1<int32_t> _ptr__1523_shp(_1523_shp ? _1523_shp->raw() : nullptr, _1523_shp ? _1523_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1522_name,_1523_shp,_1524_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2529:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1525_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1526_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1527_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1525_name,_1526_shp,_1527_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1525_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1526_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1527_rdom) { return __mosek_2fusion_2Model__variable(_1525_name,_1526_shp,_1527_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1525_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1526_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1527_rdom)
{
  _checked_ptr_1<int32_t> _ptr__1526_shp(_1526_shp ? _1526_shp->raw() : nullptr, _1526_shp ? _1526_shp->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_1525_name,_1526_shp,_1527_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2528:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1528_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1529_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1530_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1528_name,_1529_shp,_1530_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1528_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1529_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1530_ldom) { return __mosek_2fusion_2Model__variable(_1528_name,_1529_shp,_1530_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1528_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1529_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1530_ldom)
{
  _checked_ptr_1<int32_t> _ptr__1529_shp(_1529_shp ? _1529_shp->raw() : nullptr, _1529_shp ? _1529_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1528_name,_1529_shp,_1530_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2527:6-162
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1531_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1532_shp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1531_name,_1532_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1531_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1532_shp) { return __mosek_2fusion_2Model__variable(_1531_name,_1532_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1531_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1532_shp)
{
  _checked_ptr_1<int32_t> _ptr__1532_shp(_1532_shp ? _1532_shp->raw() : nullptr, _1532_shp ? _1532_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1531_name,_1532_shp,::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2526:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1533_name,int32_t _1534_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1535_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1533_name,_1534_size,_1535_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1533_name,int32_t _1534_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1535_qdom) { return __mosek_2fusion_2Model__variable(_1533_name,_1534_size,_1535_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1533_name,int32_t _1534_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1535_qdom)
{
  return __mosek_2fusion_2Model__variable_(_1533_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1534_size)}),_1535_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2525:6-161
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1536_name,int32_t _1537_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1538_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1536_name,_1537_size,_1538_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1536_name,int32_t _1537_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1538_rdom) { return __mosek_2fusion_2Model__variable(_1536_name,_1537_size,_1538_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1536_name,int32_t _1537_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1538_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(_1536_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1537_size)}),_1538_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2524:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1539_name,int32_t _1540_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1541_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1539_name,_1540_size,_1541_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1539_name,int32_t _1540_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1541_ldom) { return __mosek_2fusion_2Model__variable(_1539_name,_1540_size,_1541_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1539_name,int32_t _1540_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1541_ldom)
{
  return __mosek_2fusion_2Model__variable_(_1539_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1540_size)}),_1541_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2523:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1542_name,int32_t _1543_size) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1542_name,_1543_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1542_name,int32_t _1543_size) { return __mosek_2fusion_2Model__variable(_1542_name,_1543_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1542_name,int32_t _1543_size)
{
  return __mosek_2fusion_2Model__variable_(_1542_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1543_size)}),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2522:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1544_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1544_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1544_name) { return __mosek_2fusion_2Model__variable(_1544_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1544_name)
{
  return __mosek_2fusion_2Model__variable_(_1544_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.removeConstraintBlock
// Method mosek.fusion.Model.removeConstraintBlock @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2513:6-2520:7
void mosek::fusion::p_Model::removeConstraintBlock(int32_t _1545_conid)
{
  if ((_1545_conid >= (int)0))
  {
    {
      con_release(_1545_conid);
    }
  }
  else
  {
    {
      acon_release((-safe_add( (int)1,_1545_conid )));
    }
  }
}
// End mosek.fusion.Model.removeConstraintBlock

// Begin mosek.fusion.Model.removeVariableBlock
// Method mosek.fusion.Model.removeVariableBlock @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2485:6-2510:7
void mosek::fusion::p_Model::removeVariableBlock(int64_t _1546_varid64)
{
  if ((con_blocks->is_parameterized() || afe_blocks->is_parameterized()))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("Cannot remove variables in parameterized model"));
    }
  }
  {}
  if ((_1546_varid64 < (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("PSD variables cannot be removed"));
    }
  }
  else
  {
    {
      int32_t _1547_varid = (int32_t)_1546_varid64;
      int32_t _1548_sz = var_block_map->blocksize(_1547_varid);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1549_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1548_sz)));
      _checked_ptr_1<int32_t> _ptr__1549_nidxs(_1549_nidxs ? _1549_nidxs->raw() : nullptr,_1549_nidxs ? _1549_nidxs->size(0) : 0);
      var_block_map->get(_1547_varid,_1549_nidxs,(int)0);
      var_block_map->free(_1547_varid);
      int32_t _1550_conid = ((*var_block_acc_id)(_1547_varid));
      if ((_1550_conid >= (int)0))
      {
        {
          removeConstraintBlock(_1550_conid);
        }
      }
      {}
      task_var_putboundlist_fr(_1549_nidxs);
      task_clearacollist(_1549_nidxs);
    }
  }
}
// End mosek.fusion.Model.removeVariableBlock

// Begin mosek.fusion.Model.ranged_variable
// Method mosek.fusion.Model.ranged_variable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2256:6-2482:7
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _1551_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1552_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1553_dom_)
{
  _checked_ptr_1<int32_t> _ptr__1552_shp(_1552_shp ? _1552_shp->raw() : nullptr, _1552_shp ? _1552_shp->size(0) : 0);
  if ((((int)((_1551_name).size()) > (int)0) && hasVariable(_1551_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1551_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::RangeDomain > _1554_dom = mosek::fusion::p_RangeDomain::_get_impl(_1553_dom_.get())->__mosek_2fusion_2RangeDomain__finalize_and_validate(_1552_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1555_shape = mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1555_shape(_1555_shape ? _1555_shape->raw() : nullptr,_1555_shape ? _1555_shape->size(0) : 0);
  int32_t _1556_nd = (int)((_1555_shape)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1557_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1556_nd)));
  _checked_ptr_1<int32_t> _ptr__1557_strides(_1557_strides ? _1557_strides->raw() : nullptr,_1557_strides ? _1557_strides->size(0) : 0);
  if ((_1556_nd > (int)0))
  {
    {
      _ptr__1557_strides[(_1556_nd - (int)1)] = (int)1;
      int32_t _9725_ = (int)1;
      int32_t _9726_ = _1556_nd;
      for (int32_t _1558_i = _9725_; _1558_i < _9726_; ++_1558_i)
      {
        {
          _ptr__1557_strides[((_1556_nd - _1558_i) - (int)1)] = safe_mul( _ptr__1557_strides[(_1556_nd - _1558_i)],_ptr__1555_shape[(_1556_nd - _1558_i)] );
        }
      }
    }
  }
  {}
  int32_t _1559_domsize = (int)1;
  int32_t _9727_ = (int)0;
  int32_t _9728_ = (int)((_1555_shape)->size(0));
  for (int32_t _1560_i = _9727_; _1560_i < _9728_; ++_1560_i)
  {
    {
      _1559_domsize *= _ptr__1555_shape[_1560_i];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1561_axisptr = nullptr;
  _checked_ptr_1<int32_t> _ptr__1561_axisptr(_1561_axisptr ? _1561_axisptr->raw() : nullptr,_1561_axisptr ? _1561_axisptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1562_nameptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1562_nameptr(_1562_nameptr ? _1562_nameptr->raw() : nullptr,_1562_nameptr ? _1562_nameptr->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1563_axisnames = nullptr;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1564_accaxisptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1564_accaxisptr(_1564_accaxisptr ? _1564_accaxisptr->raw() : nullptr,_1564_accaxisptr ? _1564_accaxisptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1565_accnameptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1565_accnameptr(_1565_accnameptr ? _1565_accnameptr->raw() : nullptr,_1565_accnameptr ? _1565_accnameptr->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1566_accaxisnames = nullptr;
  if ((((int)((_1551_name).size()) > (int)0) && (NULL != mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames.get())))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1567_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1568_accsb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      int32_t _1569_axisp = (int)0;
      int64_t _1570_namep = (int)0;
      int64_t _1571_numnames = (int)0;
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames)->size(0)) != _1556_nd))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid index name definition"));
        }
      }
      {}
      int32_t _9729_ = (int)0;
      int32_t _9730_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames)->size(0));
      for (int32_t _1572_i = _9729_; _1572_i < _9730_; ++_1572_i)
      {
        {
          if ((NULL != ((*mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames)(_1572_i)).get()))
          {
            {
              if ((_ptr__1555_shape[_1572_i] != (int)((((*mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames)(_1572_i)))->size(0))))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Invalid index name definition"));
                }
              }
              {}
              _1571_numnames += _ptr__1555_shape[_1572_i];
            }
          }
          {}
        }
      }
      _1562_nameptr = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1571_numnames,(int)1 ))));
      _ptr__1562_nameptr.update(_1562_nameptr ? _1562_nameptr->raw() : nullptr, _1562_nameptr ? _1562_nameptr->size(0) : 0);
      std::vector<int32_t> _9731_;
      for (int32_t _1573_i = (int)0, _9732_ = _1556_nd; _1573_i < _9732_ ; ++_1573_i)
      {
        _9731_.push_back((-(int)1));
      }
      auto _9733_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9731_.size()),_9731_.begin(),_9731_.end()));
      _1561_axisptr = _9733_;
      _ptr__1561_axisptr.update(_1561_axisptr ? _1561_axisptr->raw() : nullptr, _1561_axisptr ? _1561_axisptr->size(0) : 0);
      int32_t _9734_ = (int)0;
      int32_t _9735_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames)->size(0));
      for (int32_t _1574_i = _9734_; _1574_i < _9735_; ++_1574_i)
      {
        {
          if ((NULL != ((*mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames)(_1574_i)).get()))
          {
            {
              _ptr__1561_axisptr[_1574_i] = _1569_axisp;
              int32_t _9736_ = (int)0;
              int32_t _9737_ = _ptr__1555_shape[_1574_i];
              for (int32_t _1575_j = _9736_; _1575_j < _9737_; ++_1575_j)
              {
                {
                  _1567_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*((*mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames)(_1574_i)))(_1575_j)));
                  ++ _1569_axisp;
                  _1570_namep += (int)((((*((*mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames)(_1574_i)))(_1575_j))).size());
                  _ptr__1562_nameptr[_1569_axisp] = _1570_namep;
                }
              }
            }
          }
          {}
        }
      }
      _1563_axisnames = _1567_sb;
      _1566_accaxisnames = _1568_accsb;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1576_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__1576_sparsity(_1576_sparsity ? _1576_sparsity->raw() : nullptr,_1576_sparsity ? _1576_sparsity->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1577_perm = nullptr;
  _checked_ptr_1<int32_t> _ptr__1577_perm(_1577_perm ? _1577_perm->raw() : nullptr,_1577_perm ? _1577_perm->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->empty)
  {
    {
      _1576_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0)));
      _ptr__1576_sparsity.update(_1576_sparsity ? _1576_sparsity->raw() : nullptr, _1576_sparsity ? _1576_sparsity->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->sparsity)->size(1)) != _1556_nd))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int32_t _1578_n = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->sparsity)->size(0));
      _1576_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1578_n)));
      _ptr__1576_sparsity.update(_1576_sparsity ? _1576_sparsity->raw() : nullptr, _1576_sparsity ? _1576_sparsity->size(0) : 0);
      {
        bool _1579_err = false;
        std::shared_ptr< monty::ndarray< int32_t,2 > > _1580_sp = mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->sparsity;
        int32_t _9738_ = (int)0;
        int32_t _9739_ = _1578_n;
        for (int32_t _1581_i = _9738_; _1581_i < _9739_; ++_1581_i)
        {
          {
            int32_t _9740_ = (int)0;
            int32_t _9741_ = (int)((_1580_sp)->size(1));
            for (int32_t _1582_j = _9740_; _1582_j < _9741_; ++_1582_j)
            {
              {
                _1579_err = (_1579_err || ((((*_1580_sp)(_1581_i,_1582_j)) < (int)0) || (((*_1580_sp)(_1581_i,_1582_j)) >= _ptr__1555_shape[_1582_j])));
              }
            }
            if ((!_1579_err))
            {
              {
                int64_t _1583_linidx = (int)0;
                int32_t _9742_ = (int)0;
                int32_t _9743_ = (int)((_1580_sp)->size(1));
                for (int32_t _1584_j = _9742_; _1584_j < _9743_; ++_1584_j)
                {
                  {
                    _1583_linidx += safe_mul( _ptr__1557_strides[_1584_j],((*_1580_sp)(_1581_i,_1584_j)) );
                  }
                }
                _ptr__1576_sparsity[_1581_i] = _1583_linidx;
              }
            }
            {}
          }
        }
        if (_1579_err)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int32_t,2 > > _1585_midxs = mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->sparsity;
      int32_t _1586_maxdim = (int)0;
      int32_t _9744_ = (int)0;
      int32_t _9745_ = _1556_nd;
      for (int32_t _1587_i = _9744_; _1587_i < _9745_; ++_1587_i)
      {
        {
          if ((_1586_maxdim < _ptr__1555_shape[_1587_i]))
          {
            {
              _1586_maxdim = _ptr__1555_shape[_1587_i];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1588_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1578_n)));
      _checked_ptr_1<int32_t> _ptr__1588_curperm(_1588_curperm ? _1588_curperm->raw() : nullptr,_1588_curperm ? _1588_curperm->size(0) : 0);
      int32_t _9746_ = (int)0;
      int32_t _9747_ = _1578_n;
      for (int32_t _1589_i = _9746_; _1589_i < _9747_; ++_1589_i)
      {
        {
          _ptr__1588_curperm[_1589_i] = _1589_i;
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1590_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1578_n)));
      _checked_ptr_1<int32_t> _ptr__1590_tgtperm(_1590_tgtperm ? _1590_tgtperm->raw() : nullptr,_1590_tgtperm ? _1590_tgtperm->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1591_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1586_maxdim,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__1591_ptr(_1591_ptr ? _1591_ptr->raw() : nullptr,_1591_ptr ? _1591_ptr->size(0) : 0);
      int32_t _9748_ = (int)0;
      int32_t _9749_ = _1556_nd;
      for (int32_t _1592_dd = _9748_; _1592_dd < _9749_; ++_1592_dd)
      {
        {
          {
            int32_t _1593_d = ((_1556_nd - _1592_dd) - (int)1);
            int32_t _9750_ = (int)0;
            int32_t _9751_ = safe_add( _ptr__1555_shape[_1593_d],(int)1 );
            for (int32_t _1594_i = _9750_; _1594_i < _9751_; ++_1594_i)
            {
              {
                _ptr__1591_ptr[_1594_i] = (int)0;
              }
            }
            int32_t _9752_ = (int)0;
            int32_t _9753_ = _1578_n;
            for (int32_t _1595_i = _9752_; _1595_i < _9753_; ++_1595_i)
            {
              {
                ++ _ptr__1591_ptr[safe_add( ((*_1585_midxs)(_1595_i,_1593_d)),(int)1 )];
              }
            }
            int32_t _9754_ = (int)0;
            int32_t _9755_ = _ptr__1555_shape[_1593_d];
            for (int32_t _1596_i = _9754_; _1596_i < _9755_; ++_1596_i)
            {
              {
                _ptr__1591_ptr[safe_add( _1596_i,(int)1 )] += _ptr__1591_ptr[_1596_i];
              }
            }
            int32_t _9756_ = (int)0;
            int32_t _9757_ = _1578_n;
            for (int32_t _1597_ii = _9756_; _1597_ii < _9757_; ++_1597_ii)
            {
              {
                int32_t _1598_i = _ptr__1588_curperm[_1597_ii];
                _ptr__1590_tgtperm[_ptr__1591_ptr[((*_1585_midxs)(_1598_i,_1593_d))]] = _1598_i;
                ++ _ptr__1591_ptr[((*_1585_midxs)(_1598_i,_1593_d))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1599_tmp = _1588_curperm;
          _checked_ptr_1<int32_t> _ptr__1599_tmp(_1599_tmp ? _1599_tmp->raw() : nullptr,_1599_tmp ? _1599_tmp->size(0) : 0);
          _1588_curperm = _1590_tgtperm;
          _ptr__1588_curperm.update(_1588_curperm ? _1588_curperm->raw() : nullptr, _1588_curperm ? _1588_curperm->size(0) : 0);
          _1590_tgtperm = _1599_tmp;
          _ptr__1590_tgtperm.update(_1590_tgtperm ? _1590_tgtperm->raw() : nullptr, _1590_tgtperm ? _1590_tgtperm->size(0) : 0);
        }
      }
      int32_t _9758_ = (int)0;
      int32_t _9759_ = _1578_n;
      for (int32_t _1600_ii = _9758_; _1600_ii < _9759_; ++_1600_ii)
      {
        {
          int32_t _1601_i = _ptr__1588_curperm[_1600_ii];
          int64_t _1602_k = (int)0;
          int32_t _9760_ = (int)0;
          int32_t _9761_ = _1556_nd;
          for (int32_t _1603_j = _9760_; _1603_j < _9761_; ++_1603_j)
          {
            {
              _1602_k += safe_mul( _ptr__1557_strides[_1603_j],((*_1585_midxs)(_1601_i,_1603_j)) );
            }
          }
          _ptr__1576_sparsity[_1600_ii] = _1602_k;
        }
      }
    }
  }
  {}
  int32_t _9762_;
  bool _9763_ = (NULL != _1576_sparsity.get());
  if (_9763_)
  {
    _9762_ = (int)((_1576_sparsity)->size(0));
  }
  else
  {
    _9762_ = _1559_domsize;
  }
  int32_t _1604_nvaritems = _9762_;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1605_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1604_nvaritems)));
  _checked_ptr_1<int32_t> _ptr__1605_nativeidxs(_1605_nativeidxs ? _1605_nativeidxs->raw() : nullptr,_1605_nativeidxs ? _1605_nativeidxs->size(0) : 0);
  int32_t _1606_varblockid = linearvar_alloc(_1604_nvaritems,_1605_nativeidxs);
  if (((int)((_1551_name).size()) > (int)0))
  {
    {
      var_map->setItem(_1551_name,_1606_varblockid);
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1607_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1607_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1551_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1556_nd > (int)0))
      {
        {
          _1607_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9764_ = (int)1;
          int32_t _9765_ = _1556_nd;
          for (int32_t _1608_i = _9764_; _1608_i < _9765_; ++_1608_i)
          {
            {
              _1607_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1608_i);
            }
          }
        }
      }
      {}
      _1607_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames.get()))
      {
        {
          task_format_var_names(_1605_nativeidxs,_1607_sb->toString(),_1555_shape,_1576_sparsity,mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_var_names(_1605_nativeidxs,_1607_sb->toString(),_1555_shape,_1576_sparsity,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _1609_bl;
  _checked_ptr_1<double> _ptr__1609_bl(_1609_bl ? _1609_bl->raw() : nullptr,_1609_bl ? _1609_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1610_bu;
  _checked_ptr_1<double> _ptr__1610_bu(_1610_bu ? _1610_bu->raw() : nullptr,_1610_bu ? _1610_bu->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->scalable)
  {
    {
      std::vector<double> _9766_;
      for (int32_t _1611_i = (int)0, _9767_ = _1604_nvaritems; _1611_i < _9767_ ; ++_1611_i)
      {
        _9766_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->lb)((int)0)));
      }
      auto _9768_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9766_.size()),_9766_.begin(),_9766_.end()));
      _1609_bl = _9768_;
      _ptr__1609_bl.update(_1609_bl ? _1609_bl->raw() : nullptr, _1609_bl ? _1609_bl->size(0) : 0);
      std::vector<double> _9769_;
      for (int32_t _1612_i = (int)0, _9770_ = _1604_nvaritems; _1612_i < _9770_ ; ++_1612_i)
      {
        _9769_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->ub)((int)0)));
      }
      auto _9771_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9769_.size()),_9769_.begin(),_9769_.end()));
      _1610_bu = _9771_;
      _ptr__1610_bu.update(_1610_bu ? _1610_bu->raw() : nullptr, _1610_bu ? _1610_bu->size(0) : 0);
    }
  }
  else
  {
    {
      _1609_bl = mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->lb;
      _ptr__1609_bl.update(_1609_bl ? _1609_bl->raw() : nullptr, _1609_bl ? _1609_bl->size(0) : 0);
      _1610_bu = mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->ub;
      _ptr__1610_bu.update(_1610_bu ? _1610_bu->raw() : nullptr, _1610_bu ? _1610_bu->size(0) : 0);
    }
  }
  task_var_putboundlist_ra(_1605_nativeidxs,_1609_bl,_1610_bu);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _1613_res = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_1551_name,(int64_t)(_1606_varblockid),_1555_shape,_1576_sparsity,_1605_nativeidxs);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1554_dom)->cardinal_flag)
  {
    {
      task_var_putintlist(_1605_nativeidxs);
    }
  }
  {}
  ((*vars)(_1606_varblockid)) = (_1613_res).as<::mosek::fusion::ModelVariable>();
  return _1613_res;
}
// End mosek.fusion.Model.ranged_variable

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:2000:6-2250:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1614_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1615_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1616_dom_)
{
  _checked_ptr_1<int32_t> _ptr__1615_shp(_1615_shp ? _1615_shp->raw() : nullptr, _1615_shp ? _1615_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::ConeDomain > _1617_dom = mosek::fusion::p_ConeDomain::_get_impl(_1616_dom_.get())->__mosek_2fusion_2ConeDomain__finalize_and_validate(_1615_shp);
  if ((((int)((_1614_name).size()) > (int)0) && hasVariable(_1614_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1614_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1618_shape = mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1618_shape(_1618_shape ? _1618_shape->raw() : nullptr,_1618_shape ? _1618_shape->size(0) : 0);
  int32_t _1619_nd = (int)((_1618_shape)->size(0));
  int32_t _1620_coneaxis = _1617_dom->getAxis();
  int32_t _1621_conesize = _ptr__1618_shape[_1620_coneaxis];
  int32_t _1622_d1 = (int)1;
  int32_t _1623_d0 = (int)1;
  int32_t _1624_domsize = (int)1;
  int32_t _9772_ = (int)0;
  int32_t _9773_ = _1619_nd;
  for (int32_t _1625_i = _9772_; _1625_i < _9773_; ++_1625_i)
  {
    {
      _1624_domsize *= _ptr__1618_shape[_1625_i];
    }
  }
  int32_t _9774_ = (int)0;
  int32_t _9775_ = _1620_coneaxis;
  for (int32_t _1626_i = _9774_; _1626_i < _9775_; ++_1626_i)
  {
    {
      _1623_d0 *= _ptr__1618_shape[_1626_i];
    }
  }
  int32_t _9776_ = safe_add( _1620_coneaxis,(int)1 );
  int32_t _9777_ = _1619_nd;
  for (int32_t _1627_i = _9776_; _1627_i < _9777_; ++_1627_i)
  {
    {
      _1622_d1 *= _ptr__1618_shape[_1627_i];
    }
  }
  int32_t _1628_numcone = safe_mul( _1623_d0,_1622_d1 );
  int64_t _1629_domainidx;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      if ((_1621_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_quad(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      if ((_1621_conesize < (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_rquad(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      if ((_1621_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_pexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      if ((_1621_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_ppow(_1621_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      if ((_1621_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_dexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      if ((_1621_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_dpow(_1621_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InPGeoMeanCone))
  {
    {
      if ((_1621_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for primal geometric mean cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_pgeomean(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InDGeoMeanCone))
  {
    {
      if ((_1621_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual geometric mean cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_dgeomean(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::Positive))
  {
    {
      _1629_domainidx = task_append_domain_rpos(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InSVecPSDCone))
  {
    {
      int32_t _1630_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1621_conesize ) ))) - (int)1) / (int)2);
      if (((safe_mul( _1630_d,safe_add( _1630_d,(int)1 ) ) / (int)2) != _1621_conesize))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for vector positive semidefinite cone"))->toString());
        }
      }
      {}
      _1629_domainidx = task_append_domain_svec_psd(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::Negative))
  {
    {
      _1629_domainidx = task_append_domain_rneg(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::Unbounded))
  {
    {
      _1629_domainidx = task_append_domain_r(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::Zero))
  {
    {
      _1629_domainidx = task_append_domain_rzero(_1621_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->key == ::mosek::fusion::QConeKey::InPSDCone))
  {
    {
      if ((_1621_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
        }
      }
      else
      {
        {
          int32_t _1631_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1621_conesize ) ))) - (int)1) / (int)2);
          if (((safe_mul( _1631_d,safe_add( _1631_d,(int)1 ) ) / (int)2) != _1621_conesize))
          {
            {
              throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1621_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
            }
          }
          {}
        }
      }
      _1629_domainidx = task_append_domain_svec_psd(_1621_conesize);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1632_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( _1628_numcone,_1621_conesize ))));
  _checked_ptr_1<int32_t> _ptr__1632_nativeidxs(_1632_nativeidxs ? _1632_nativeidxs->raw() : nullptr,_1632_nativeidxs ? _1632_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1633_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1628_numcone)));
  _checked_ptr_1<int32_t> _ptr__1633_accidxs(_1633_accidxs ? _1633_accidxs->raw() : nullptr,_1633_accidxs ? _1633_accidxs->size(0) : 0);
  int32_t _1634_varid = conicvar_alloc(_1629_domainidx,_1621_conesize,_1628_numcone,_1633_accidxs,_1632_nativeidxs);
  task_var_putboundlist_fr(_1632_nativeidxs);
  if (mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->int_flag)
  {
    {
      task_var_putintlist(_1632_nativeidxs);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1635_permidxs = _1632_nativeidxs;
  _checked_ptr_1<int32_t> _ptr__1635_permidxs(_1635_permidxs ? _1635_permidxs->raw() : nullptr,_1635_permidxs ? _1635_permidxs->size(0) : 0);
  if ((_1620_coneaxis < ((int)((_1618_shape)->size(0)) - (int)1)))
  {
    {
      _1635_permidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_1632_nativeidxs)->size(0)))));
      _ptr__1635_permidxs.update(_1635_permidxs ? _1635_permidxs->raw() : nullptr, _1635_permidxs ? _1635_permidxs->size(0) : 0);
      int32_t _1636_p = (int)0;
      int32_t _9778_ = (int)0;
      int32_t _9779_ = _1623_d0;
      for (int32_t _1637_i0 = _9778_; _1637_i0 < _9779_; ++_1637_i0)
      {
        {
          int32_t _9780_ = (int)0;
          int32_t _9781_ = _1622_d1;
          for (int32_t _1638_i1 = _9780_; _1638_i1 < _9781_; ++_1638_i1)
          {
            {
              int32_t _9782_ = (int)0;
              int32_t _9783_ = _1621_conesize;
              for (int32_t _1639_k = _9782_; _1639_k < _9783_; ++_1639_k)
              {
                {
                  _ptr__1635_permidxs[_1636_p] = _ptr__1632_nativeidxs[safe_add( safe_mul( safe_add( safe_mul( _1637_i0,_1621_conesize ),_1639_k ),_1622_d1 ),_1638_i1 )];
                  ++ _1636_p;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _1640_res = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_1614_name,_1634_varid,_1618_shape,_1632_nativeidxs);
  ((*vars)(_1634_varid)) = (_1640_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1614_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1641_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      {
        _1641_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1614_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
        if ((_1619_nd > (int)0))
        {
          {
            _1641_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
            int32_t _9784_ = (int)1;
            int32_t _9785_ = _1619_nd;
            for (int32_t _1642_i = _9784_; _1642_i < _9785_; ++_1642_i)
            {
              {
                _1641_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1642_i);
              }
            }
          }
        }
        {}
        _1641_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
        if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->indexnames.get()))
        {
          {
            task_format_var_names(_1635_permidxs,_1641_sb->toString(),_1618_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->indexnames);
          }
        }
        else
        {
          {
            task_format_var_names(_1635_permidxs,_1641_sb->toString(),_1618_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
          }
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1643_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1628_numcone)));
      _checked_ptr_1<int32_t> _ptr__1643_accidxs(_1643_accidxs ? _1643_accidxs->raw() : nullptr,_1643_accidxs ? _1643_accidxs->size(0) : 0);
      acc_block_map->get(((*var_block_acc_id)(_1634_varid)),_1643_accidxs,(int)0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _1644_accshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1618_shape)->size(0)) - (int)1))));
        _checked_ptr_1<int32_t> _ptr__1644_accshape(_1644_accshape ? _1644_accshape->raw() : nullptr,_1644_accshape ? _1644_accshape->size(0) : 0);
        int32_t _9786_ = (int)0;
        int32_t _9787_ = _1620_coneaxis;
        for (int32_t _1645_i = _9786_; _1645_i < _9787_; ++_1645_i)
        {
          {
            _ptr__1644_accshape[_1645_i] = _ptr__1618_shape[_1645_i];
          }
        }
        int32_t _9788_ = safe_add( _1620_coneaxis,(int)1 );
        int32_t _9789_ = _1619_nd;
        for (int32_t _1646_i = _9788_; _1646_i < _9789_; ++_1646_i)
        {
          {
            _ptr__1644_accshape[(_1646_i - (int)1)] = _ptr__1618_shape[_1646_i];
          }
        }
        monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1647_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
        _1647_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1614_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
        if (((_1619_nd - (int)1) > (int)0))
        {
          {
            _1647_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
            int32_t _9790_ = (int)1;
            int32_t _9791_ = (_1619_nd - (int)1);
            for (int32_t _1648_i = _9790_; _1648_i < _9791_; ++_1648_i)
            {
              {
                _1647_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1648_i);
              }
            }
          }
        }
        {}
        _1647_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
        if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->indexnames.get()))
        {
          {
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1649_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1619_nd - (int)1))));
            int32_t _9792_ = (int)0;
            int32_t _9793_ = _1620_coneaxis;
            for (int32_t _1650_i = _9792_; _1650_i < _9793_; ++_1650_i)
            {
              {
                ((*_1649_indexnames)(_1650_i)) = ((*mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->indexnames)(_1650_i));
              }
            }
            int32_t _9794_ = safe_add( _1620_coneaxis,(int)1 );
            int32_t _9795_ = _1619_nd;
            for (int32_t _1651_i = _9794_; _1651_i < _9795_; ++_1651_i)
            {
              {
                ((*_1649_indexnames)((_1651_i - (int)1))) = ((*mosek::fusion::p_ConeDomain::_get_impl(_1617_dom)->indexnames)(_1651_i));
              }
            }
            std::vector<int64_t> _9796_;
            for (int32_t _1652_i = (int)0, _9797_ = _1628_numcone; _1652_i < _9797_ ; ++_1652_i)
            {
              _9796_.push_back((int64_t)_ptr__1643_accidxs[_1652_i]);
            }
            auto _9798_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9796_.size()),_9796_.begin(),_9796_.end()));
            task_format_acc_names(_9798_,_1647_sb->toString(),_1644_accshape,_1649_indexnames);
          }
        }
        else
        {
          {
            std::vector<int64_t> _9799_;
            for (int32_t _1653_i = (int)0, _9800_ = _1628_numcone; _1653_i < _9800_ ; ++_1653_i)
            {
              _9799_.push_back((int64_t)_ptr__1643_accidxs[_1653_i]);
            }
            auto _9801_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9799_.size()),_9799_.begin(),_9799_.end()));
            task_format_acc_names(_9801_,_1647_sb->toString(),_1644_accshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
          }
        }
      }
      var_map->setItem(_1614_name,_1634_varid);
    }
  }
  {}
  return (_1640_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:1809:6-1995:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1654_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1655_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1656_dom_)
{
  _checked_ptr_1<int32_t> _ptr__1655_shp(_1655_shp ? _1655_shp->raw() : nullptr, _1655_shp ? _1655_shp->size(0) : 0);
  if ((((int)((_1654_name).size()) > (int)0) && hasVariable(_1654_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1654_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearDomain > _1657_dom = mosek::fusion::p_LinearDomain::_get_impl(_1656_dom_.get())->__mosek_2fusion_2LinearDomain__finalize_and_validate(_1655_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1658_shape = mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1658_shape(_1658_shape ? _1658_shape->raw() : nullptr,_1658_shape ? _1658_shape->size(0) : 0);
  int32_t _1659_nd = (int)((_1658_shape)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1660_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1659_nd)));
  _checked_ptr_1<int32_t> _ptr__1660_strides(_1660_strides ? _1660_strides->raw() : nullptr,_1660_strides ? _1660_strides->size(0) : 0);
  if ((_1659_nd > (int)0))
  {
    {
      _ptr__1660_strides[(_1659_nd - (int)1)] = (int)1;
      int32_t _9802_ = (int)1;
      int32_t _9803_ = _1659_nd;
      for (int32_t _1661_i = _9802_; _1661_i < _9803_; ++_1661_i)
      {
        {
          _ptr__1660_strides[((_1659_nd - _1661_i) - (int)1)] = safe_mul( _ptr__1660_strides[(_1659_nd - _1661_i)],_ptr__1658_shape[(_1659_nd - _1661_i)] );
        }
      }
    }
  }
  {}
  int32_t _1662_domsize = (int)1;
  int32_t _9804_ = (int)0;
  int32_t _9805_ = (int)((_1658_shape)->size(0));
  for (int32_t _1663_i = _9804_; _1663_i < _9805_; ++_1663_i)
  {
    {
      _1662_domsize *= _ptr__1658_shape[_1663_i];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1664_axisptr = nullptr;
  _checked_ptr_1<int32_t> _ptr__1664_axisptr(_1664_axisptr ? _1664_axisptr->raw() : nullptr,_1664_axisptr ? _1664_axisptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1665_nameptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1665_nameptr(_1665_nameptr ? _1665_nameptr->raw() : nullptr,_1665_nameptr ? _1665_nameptr->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1666_axisnames = nullptr;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1667_accaxisptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1667_accaxisptr(_1667_accaxisptr ? _1667_accaxisptr->raw() : nullptr,_1667_accaxisptr ? _1667_accaxisptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1668_accnameptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1668_accnameptr(_1668_accnameptr ? _1668_accnameptr->raw() : nullptr,_1668_accnameptr ? _1668_accnameptr->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1669_accaxisnames = nullptr;
  if ((((int)((_1654_name).size()) > (int)0) && (NULL != mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames.get())))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1670_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1671_accsb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      int32_t _1672_axisp = (int)0;
      int64_t _1673_namep = (int)0;
      int64_t _1674_numnames = (int)0;
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames)->size(0)) != _1659_nd))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid index name definition"));
        }
      }
      {}
      int32_t _9806_ = (int)0;
      int32_t _9807_ = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames)->size(0));
      for (int32_t _1675_i = _9806_; _1675_i < _9807_; ++_1675_i)
      {
        {
          if ((NULL != ((*mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames)(_1675_i)).get()))
          {
            {
              if ((_ptr__1658_shape[_1675_i] != (int)((((*mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames)(_1675_i)))->size(0))))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Invalid index name definition"));
                }
              }
              {}
              _1674_numnames += _ptr__1658_shape[_1675_i];
            }
          }
          {}
        }
      }
      _1665_nameptr = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1674_numnames,(int)1 ))));
      _ptr__1665_nameptr.update(_1665_nameptr ? _1665_nameptr->raw() : nullptr, _1665_nameptr ? _1665_nameptr->size(0) : 0);
      std::vector<int32_t> _9808_;
      for (int32_t _1676_i = (int)0, _9809_ = _1659_nd; _1676_i < _9809_ ; ++_1676_i)
      {
        _9808_.push_back((-(int)1));
      }
      auto _9810_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9808_.size()),_9808_.begin(),_9808_.end()));
      _1664_axisptr = _9810_;
      _ptr__1664_axisptr.update(_1664_axisptr ? _1664_axisptr->raw() : nullptr, _1664_axisptr ? _1664_axisptr->size(0) : 0);
      int32_t _9811_ = (int)0;
      int32_t _9812_ = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames)->size(0));
      for (int32_t _1677_i = _9811_; _1677_i < _9812_; ++_1677_i)
      {
        {
          if ((NULL != ((*mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames)(_1677_i)).get()))
          {
            {
              _ptr__1664_axisptr[_1677_i] = _1672_axisp;
              int32_t _9813_ = (int)0;
              int32_t _9814_ = _ptr__1658_shape[_1677_i];
              for (int32_t _1678_j = _9813_; _1678_j < _9814_; ++_1678_j)
              {
                {
                  _1670_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*((*mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames)(_1677_i)))(_1678_j)));
                  ++ _1672_axisp;
                  _1673_namep += (int)((((*((*mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames)(_1677_i)))(_1678_j))).size());
                  _ptr__1665_nameptr[_1672_axisp] = _1673_namep;
                }
              }
            }
          }
          {}
        }
      }
      _1666_axisnames = _1670_sb;
      _1669_accaxisnames = _1671_accsb;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1679_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__1679_sparsity(_1679_sparsity ? _1679_sparsity->raw() : nullptr,_1679_sparsity ? _1679_sparsity->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1680_perm = nullptr;
  _checked_ptr_1<int32_t> _ptr__1680_perm(_1680_perm ? _1680_perm->raw() : nullptr,_1680_perm ? _1680_perm->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->empty)
  {
    {
      _1679_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0)));
      _ptr__1679_sparsity.update(_1679_sparsity ? _1679_sparsity->raw() : nullptr, _1679_sparsity ? _1679_sparsity->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->sparsity)->size(1)) != _1659_nd))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int32_t _1681_n = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->sparsity)->size(0));
      _1679_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1681_n)));
      _ptr__1679_sparsity.update(_1679_sparsity ? _1679_sparsity->raw() : nullptr, _1679_sparsity ? _1679_sparsity->size(0) : 0);
      {
        bool _1682_err = false;
        std::shared_ptr< monty::ndarray< int32_t,2 > > _1683_sp = mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->sparsity;
        int32_t _9815_ = (int)0;
        int32_t _9816_ = _1681_n;
        for (int32_t _1684_i = _9815_; _1684_i < _9816_; ++_1684_i)
        {
          {
            int32_t _9817_ = (int)0;
            int32_t _9818_ = (int)((_1683_sp)->size(1));
            for (int32_t _1685_j = _9817_; _1685_j < _9818_; ++_1685_j)
            {
              {
                _1682_err = (_1682_err || ((((*_1683_sp)(_1684_i,_1685_j)) < (int)0) || (((*_1683_sp)(_1684_i,_1685_j)) >= _ptr__1658_shape[_1685_j])));
              }
            }
            if ((!_1682_err))
            {
              {
                int64_t _1686_linidx = (int)0;
                int32_t _9819_ = (int)0;
                int32_t _9820_ = (int)((_1683_sp)->size(1));
                for (int32_t _1687_j = _9819_; _1687_j < _9820_; ++_1687_j)
                {
                  {
                    _1686_linidx += safe_mul( _ptr__1660_strides[_1687_j],((*_1683_sp)(_1684_i,_1687_j)) );
                  }
                }
                _ptr__1679_sparsity[_1684_i] = _1686_linidx;
              }
            }
            {}
          }
        }
        if (_1682_err)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int32_t,2 > > _1688_midxs = mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->sparsity;
      int32_t _1689_maxdim = (int)0;
      int32_t _9821_ = (int)0;
      int32_t _9822_ = _1659_nd;
      for (int32_t _1690_i = _9821_; _1690_i < _9822_; ++_1690_i)
      {
        {
          if ((_1689_maxdim < _ptr__1658_shape[_1690_i]))
          {
            {
              _1689_maxdim = _ptr__1658_shape[_1690_i];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1691_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1681_n)));
      _checked_ptr_1<int32_t> _ptr__1691_curperm(_1691_curperm ? _1691_curperm->raw() : nullptr,_1691_curperm ? _1691_curperm->size(0) : 0);
      int32_t _9823_ = (int)0;
      int32_t _9824_ = _1681_n;
      for (int32_t _1692_i = _9823_; _1692_i < _9824_; ++_1692_i)
      {
        {
          _ptr__1691_curperm[_1692_i] = _1692_i;
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1693_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1681_n)));
      _checked_ptr_1<int32_t> _ptr__1693_tgtperm(_1693_tgtperm ? _1693_tgtperm->raw() : nullptr,_1693_tgtperm ? _1693_tgtperm->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1694_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1689_maxdim,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__1694_ptr(_1694_ptr ? _1694_ptr->raw() : nullptr,_1694_ptr ? _1694_ptr->size(0) : 0);
      int32_t _9825_ = (int)0;
      int32_t _9826_ = _1659_nd;
      for (int32_t _1695_dd = _9825_; _1695_dd < _9826_; ++_1695_dd)
      {
        {
          {
            int32_t _1696_d = ((_1659_nd - _1695_dd) - (int)1);
            int32_t _9827_ = (int)0;
            int32_t _9828_ = safe_add( _ptr__1658_shape[_1696_d],(int)1 );
            for (int32_t _1697_i = _9827_; _1697_i < _9828_; ++_1697_i)
            {
              {
                _ptr__1694_ptr[_1697_i] = (int)0;
              }
            }
            int32_t _9829_ = (int)0;
            int32_t _9830_ = _1681_n;
            for (int32_t _1698_i = _9829_; _1698_i < _9830_; ++_1698_i)
            {
              {
                ++ _ptr__1694_ptr[safe_add( ((*_1688_midxs)(_1698_i,_1696_d)),(int)1 )];
              }
            }
            int32_t _9831_ = (int)0;
            int32_t _9832_ = _ptr__1658_shape[_1696_d];
            for (int32_t _1699_i = _9831_; _1699_i < _9832_; ++_1699_i)
            {
              {
                _ptr__1694_ptr[safe_add( _1699_i,(int)1 )] += _ptr__1694_ptr[_1699_i];
              }
            }
            int32_t _9833_ = (int)0;
            int32_t _9834_ = _1681_n;
            for (int32_t _1700_ii = _9833_; _1700_ii < _9834_; ++_1700_ii)
            {
              {
                int32_t _1701_i = _ptr__1691_curperm[_1700_ii];
                _ptr__1693_tgtperm[_ptr__1694_ptr[((*_1688_midxs)(_1701_i,_1696_d))]] = _1701_i;
                ++ _ptr__1694_ptr[((*_1688_midxs)(_1701_i,_1696_d))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1702_tmp = _1691_curperm;
          _checked_ptr_1<int32_t> _ptr__1702_tmp(_1702_tmp ? _1702_tmp->raw() : nullptr,_1702_tmp ? _1702_tmp->size(0) : 0);
          _1691_curperm = _1693_tgtperm;
          _ptr__1691_curperm.update(_1691_curperm ? _1691_curperm->raw() : nullptr, _1691_curperm ? _1691_curperm->size(0) : 0);
          _1693_tgtperm = _1702_tmp;
          _ptr__1693_tgtperm.update(_1693_tgtperm ? _1693_tgtperm->raw() : nullptr, _1693_tgtperm ? _1693_tgtperm->size(0) : 0);
        }
      }
      int32_t _9835_ = (int)0;
      int32_t _9836_ = _1681_n;
      for (int32_t _1703_ii = _9835_; _1703_ii < _9836_; ++_1703_ii)
      {
        {
          int32_t _1704_i = _ptr__1691_curperm[_1703_ii];
          int64_t _1705_k = (int)0;
          int32_t _9837_ = (int)0;
          int32_t _9838_ = _1659_nd;
          for (int32_t _1706_j = _9837_; _1706_j < _9838_; ++_1706_j)
          {
            {
              _1705_k += safe_mul( _ptr__1660_strides[_1706_j],((*_1688_midxs)(_1704_i,_1706_j)) );
            }
          }
          _ptr__1679_sparsity[_1703_ii] = _1705_k;
        }
      }
    }
  }
  {}
  int32_t _9839_;
  bool _9840_ = (NULL != _1679_sparsity.get());
  if (_9840_)
  {
    _9839_ = (int)((_1679_sparsity)->size(0));
  }
  else
  {
    _9839_ = _1662_domsize;
  }
  int32_t _1707_nvaritems = _9839_;
  std::shared_ptr< monty::ndarray< double,1 > > _1708_bnds = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1707_nvaritems)));
  _checked_ptr_1<double> _ptr__1708_bnds(_1708_bnds ? _1708_bnds->raw() : nullptr,_1708_bnds ? _1708_bnds->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->bnd)->size(0)) == (int)1))
      {
        {
          int32_t _9841_ = (int)0;
          int32_t _9842_ = _1707_nvaritems;
          for (int32_t _1709_i = _9841_; _1709_i < _9842_; ++_1709_i)
          {
            {
              _ptr__1708_bnds[_1709_i] = ((*mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->bnd)->size(0)) == _1707_nvaritems))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->bnd,(int)0,_1708_bnds,(int)0,_1707_nvaritems);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1710_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1707_nvaritems)));
  _checked_ptr_1<int32_t> _ptr__1710_nativeidxs(_1710_nativeidxs ? _1710_nativeidxs->raw() : nullptr,_1710_nativeidxs ? _1710_nativeidxs->size(0) : 0);
  int32_t _1711_varblockid = linearvar_alloc(_1707_nvaritems,_1710_nativeidxs);
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1710_nativeidxs);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1710_nativeidxs,_1708_bnds);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1710_nativeidxs,_1708_bnds);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1710_nativeidxs,_1708_bnds);
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1712_res = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_1654_name,(int64_t)(_1711_varblockid),_1658_shape,_1679_sparsity,_1710_nativeidxs);
  ((*vars)(_1711_varblockid)) = (_1712_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1654_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1713_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1713_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1654_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1659_nd > (int)0))
      {
        {
          _1713_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9843_ = (int)1;
          int32_t _9844_ = _1659_nd;
          for (int32_t _1714_i = _9843_; _1714_i < _9844_; ++_1714_i)
          {
            {
              _1713_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1714_i);
            }
          }
        }
      }
      {}
      _1713_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames.get()))
      {
        {
          task_format_var_names(_1710_nativeidxs,_1713_sb->toString(),_1658_shape,_1679_sparsity,mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_var_names(_1710_nativeidxs,_1713_sb->toString(),_1658_shape,_1679_sparsity,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
      var_map->setItem(_1654_name,_1711_varblockid);
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1657_dom)->cardinal_flag)
  {
    {
      task_var_putintlist(_1710_nativeidxs);
    }
  }
  {}
  return (_1712_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:1625:6-1747:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1715_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1716_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1717_dom_)
{
  _checked_ptr_1<int32_t> _ptr__1716_shp(_1716_shp ? _1716_shp->raw() : nullptr, _1716_shp ? _1716_shp->size(0) : 0);
  if ((((int)((_1715_name).size()) > (int)0) && hasVariable(_1715_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1715_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::PSDDomain > _1718_dom = mosek::fusion::p_PSDDomain::_get_impl(_1717_dom_.get())->__mosek_2fusion_2PSDDomain__finalize_and_validate(_1716_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1719_shape = mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1719_shape(_1719_shape ? _1719_shape->raw() : nullptr,_1719_shape ? _1719_shape->size(0) : 0);
  int32_t _1720_conedim1 = mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->conedim1;
  int32_t _1721_conedim2 = mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->conedim2;
  int32_t _1722_nd = (int)((_1719_shape)->size(0));
  int32_t _1723_d = _ptr__1719_shape[_1720_conedim1];
  if ((_1720_conedim1 > _1721_conedim2))
  {
    {
      int32_t _1724_tmp = _1720_conedim1;
      _1720_conedim1 = _1721_conedim2;
      _1721_conedim2 = _1724_tmp;
    }
  }
  {}
  if (((_1720_conedim1 == _1721_conedim2) || ((_1720_conedim1 < (int)0) || (_1721_conedim2 >= _1722_nd))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1719_shape[_1720_conedim1] != _ptr__1719_shape[_1721_conedim2]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int32_t _1725_numcone = (int)1;
  int32_t _9845_ = (int)0;
  int32_t _9846_ = _1720_conedim1;
  for (int32_t _1726_i = _9845_; _1726_i < _9846_; ++_1726_i)
  {
    {
      _1725_numcone *= _ptr__1719_shape[_1726_i];
    }
  }
  int32_t _9847_ = safe_add( _1720_conedim1,(int)1 );
  int32_t _9848_ = _1721_conedim2;
  for (int32_t _1727_i = _9847_; _1727_i < _9848_; ++_1727_i)
  {
    {
      _1725_numcone *= _ptr__1719_shape[_1727_i];
    }
  }
  int32_t _9849_ = safe_add( _1721_conedim2,(int)1 );
  int32_t _9850_ = _1722_nd;
  for (int32_t _1728_i = _9849_; _1728_i < _9850_; ++_1728_i)
  {
    {
      _1725_numcone *= _ptr__1719_shape[_1728_i];
    }
  }
  int32_t _1729_numelm = (safe_mul( safe_mul( _1725_numcone,_1723_d ),safe_add( _1723_d,(int)1 ) ) / (int)2);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1730_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1729_numelm)));
  _checked_ptr_1<int64_t> _ptr__1730_nativeidxs(_1730_nativeidxs ? _1730_nativeidxs->raw() : nullptr,_1730_nativeidxs ? _1730_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1731_barvaridxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1725_numcone)));
  _checked_ptr_1<int32_t> _ptr__1731_barvaridxs(_1731_barvaridxs ? _1731_barvaridxs->raw() : nullptr,_1731_barvaridxs ? _1731_barvaridxs->size(0) : 0);
  int32_t _1732_varid = barvar_alloc(_1723_d,_1725_numcone,_1731_barvaridxs,_1730_nativeidxs);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1733_res = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1715_name,_1732_varid,_1719_shape,mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->conedim2,_1731_barvaridxs,_1730_nativeidxs);
  if (((int)((_1715_name).size()) > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1734_coneshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((_1722_nd - (int)2))));
      _checked_ptr_1<int32_t> _ptr__1734_coneshape(_1734_coneshape ? _1734_coneshape->raw() : nullptr,_1734_coneshape ? _1734_coneshape->size(0) : 0);
      int32_t _9851_;
      bool _9852_ = (_1720_conedim1 < _1721_conedim2);
      if (_9852_)
      {
        _9851_ = _1720_conedim1;
      }
      else
      {
        _9851_ = _1721_conedim2;
      }
      int32_t _1735_cdim1 = _9851_;
      int32_t _9853_;
      bool _9854_ = (_1720_conedim1 < _1721_conedim2);
      if (_9854_)
      {
        _9853_ = _1721_conedim2;
      }
      else
      {
        _9853_ = _1720_conedim1;
      }
      int32_t _1736_cdim2 = _9853_;
      int32_t _9855_ = (int)0;
      int32_t _9856_ = _1735_cdim1;
      for (int32_t _1737_i = _9855_; _1737_i < _9856_; ++_1737_i)
      {
        {
          _ptr__1734_coneshape[_1737_i] = _ptr__1719_shape[_1737_i];
        }
      }
      int32_t _9857_ = safe_add( _1735_cdim1,(int)1 );
      int32_t _9858_ = _1736_cdim2;
      for (int32_t _1738_i = _9857_; _1738_i < _9858_; ++_1738_i)
      {
        {
          _ptr__1734_coneshape[(_1738_i - (int)1)] = _ptr__1719_shape[_1738_i];
        }
      }
      int32_t _9859_ = safe_add( _1736_cdim2,(int)1 );
      int32_t _9860_ = _1722_nd;
      for (int32_t _1739_i = _9859_; _1739_i < _9860_; ++_1739_i)
      {
        {
          _ptr__1734_coneshape[(_1739_i - (int)2)] = _ptr__1719_shape[_1739_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1740_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1740_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1715_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((_1722_nd - (int)2) > (int)0))
      {
        {
          _1740_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9861_ = (int)1;
          int32_t _9862_ = (_1722_nd - (int)2);
          for (int32_t _1741_i = _9861_; _1741_i < _9862_; ++_1741_i)
          {
            {
              _1740_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1741_i);
            }
          }
        }
      }
      {}
      _1740_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1742_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1722_nd - (int)2))));
          int32_t _9863_ = (int)0;
          int32_t _9864_ = _1735_cdim1;
          for (int32_t _1743_i = _9863_; _1743_i < _9864_; ++_1743_i)
          {
            {
              ((*_1742_indexnames)(_1743_i)) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->indexnames)(_1743_i));
            }
          }
          int32_t _9865_ = safe_add( _1735_cdim1,(int)1 );
          int32_t _9866_ = _1736_cdim2;
          for (int32_t _1744_i = _9865_; _1744_i < _9866_; ++_1744_i)
          {
            {
              ((*_1742_indexnames)((_1744_i - (int)1))) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->indexnames)(_1744_i));
            }
          }
          int32_t _9867_ = safe_add( _1736_cdim2,(int)1 );
          int32_t _9868_ = _1722_nd;
          for (int32_t _1745_i = _9867_; _1745_i < _9868_; ++_1745_i)
          {
            {
              ((*_1742_indexnames)((_1745_i - (int)2))) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1718_dom)->indexnames)(_1745_i));
            }
          }
          task_format_barvar_names(_1731_barvaridxs,_1740_sb->toString(),_1734_coneshape,_1742_indexnames);
        }
      }
      else
      {
        {
          task_format_barvar_names(_1731_barvaridxs,_1740_sb->toString(),_1734_coneshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  ((*barvars)(_1732_varid)) = (_1733_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1715_name).size()) > (int)0))
  {
    {
      var_map->setItem(_1715_name,(-safe_add( _1732_varid,(int)1 )));
    }
  }
  {}
  return (_1733_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.putfrows
// Method mosek.fusion.Model.putfrows @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:1494:6-1618:7
void mosek::fusion::p_Model::putfrows(std::shared_ptr< monty::ndarray< int32_t,1 > > _1746_nativeidxs,int32_t _1747_nativebaseptr,monty::rc_ptr< ::mosek::fusion::WorkStack > _1748_rs,int32_t _1749_nelem,int32_t _1750_nnz,int32_t _1751_ptr_base,int32_t _1752_nidxs_base,int32_t _1753_cof_base)
{
  _checked_ptr_1<int32_t> _ptr__1746_nativeidxs(_1746_nativeidxs ? _1746_nativeidxs->raw() : nullptr, _1746_nativeidxs ? _1746_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1754_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1748_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1754_ri32(_1754_ri32 ? _1754_ri32->raw() : nullptr,_1754_ri32 ? _1754_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1755_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1748_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1755_ri64(_1755_ri64 ? _1755_ri64->raw() : nullptr,_1755_ri64 ? _1755_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1756_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1748_rs)->f64;
  _checked_ptr_1<double> _ptr__1756_rf64(_1756_rf64 ? _1756_rf64->raw() : nullptr,_1756_rf64 ? _1756_rf64->size(0) : 0);
  int32_t _1757_linnz = (int)0;
  int32_t _1758_barnnz = (int)0;
  int32_t _1759_totalpsdelm = (int)0;
  int32_t _9869_ = (int)0;
  int32_t _9870_ = _1749_nelem;
  for (int32_t _1760_i = _9869_; _1760_i < _9870_; ++_1760_i)
  {
    {
      int32_t _1761_ps = _ptr__1754_ri32[safe_add( _1751_ptr_base,_1760_i )];
      int32_t _1762_pe = _ptr__1754_ri32[safe_add( safe_add( _1751_ptr_base,_1760_i ),(int)1 )];
      int32_t _1763_p = _1761_ps;
      while ( ((_1763_p < _1762_pe) && (_ptr__1755_ri64[safe_add( _1752_nidxs_base,_1763_p )] < (int)0)) )
      {
        {
          int32_t _1764_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1755_ri64[safe_add( _1752_nidxs_base,_1763_p )],(int)1 ))));
          int32_t _1765_p0 = _1763_p;
          ++ _1763_p;
          while ( ((_1763_p < _1762_pe) && ((_ptr__1755_ri64[safe_add( _1752_nidxs_base,_1763_p )] < (int)0) && (_1764_barj == ((*barvar_block_elm_barj)((-safe_add( _ptr__1755_ri64[safe_add( _1752_nidxs_base,_1763_p )],(int)1 ))))))) )
          {
            {
              ++ _1763_p;
            }
          }
          ++ _1758_barnnz;
        }
      }
      _1759_totalpsdelm += (_1763_p - _1761_ps);
      while ( ((_1763_p < _1762_pe) && (_ptr__1755_ri64[safe_add( _1752_nidxs_base,_1763_p )] == (int)0)) )
      {
        {
          ++ _1763_p;
        }
      }
      _1757_linnz += (_1762_pe - _1763_p);
    }
  }
  if ((_1749_nelem > ((int)((_1746_nativeidxs)->size(0)) - _1747_nativebaseptr)))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching sizes"));
    }
  }
  {}
  int32_t _1766_numcon = _1749_nelem;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1767_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1766_numcon,(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__1767_ptrb(_1767_ptrb ? _1767_ptrb->raw() : nullptr,_1767_ptrb ? _1767_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1768_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1757_linnz)));
  _checked_ptr_1<int32_t> _ptr__1768_subj(_1768_subj ? _1768_subj->raw() : nullptr,_1768_subj ? _1768_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1769_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1757_linnz)));
  _checked_ptr_1<double> _ptr__1769_cof(_1769_cof ? _1769_cof->raw() : nullptr,_1769_cof ? _1769_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1770_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1749_nelem)));
  _checked_ptr_1<double> _ptr__1770_bfix(_1770_bfix ? _1770_bfix->raw() : nullptr,_1770_bfix ? _1770_bfix->size(0) : 0);
  {
    int32_t _1771_k = (int)0;
    int32_t _9871_ = (int)0;
    int32_t _9872_ = _1749_nelem;
    for (int32_t _1772_i = _9871_; _1772_i < _9872_; ++_1772_i)
    {
      {
        int32_t _1773_knz = (int)0;
        int32_t _9873_ = _ptr__1754_ri32[safe_add( _1751_ptr_base,_1772_i )];
        int32_t _9874_ = _ptr__1754_ri32[safe_add( safe_add( _1751_ptr_base,_1772_i ),(int)1 )];
        for (int32_t _1774_j = _9873_; _1774_j < _9874_; ++_1774_j)
        {
          {
            if ((_ptr__1755_ri64[safe_add( _1752_nidxs_base,_1774_j )] == (int)0))
            {
              {
                _ptr__1770_bfix[_1772_i] += _ptr__1756_rf64[safe_add( _1753_cof_base,_1774_j )];
              }
            }
            else if((_ptr__1755_ri64[safe_add( _1752_nidxs_base,_1774_j )] > (int)0))
            {
              {
                _ptr__1768_subj[safe_add( _1771_k,_1773_knz )] = (int32_t)_ptr__1755_ri64[safe_add( _1752_nidxs_base,_1774_j )];
                _ptr__1769_cof[safe_add( _1771_k,_1773_knz )] = _ptr__1756_rf64[safe_add( _1753_cof_base,_1774_j )];
                ++ _1773_knz;
              }
            }
            {}
          }
        }
        _ptr__1767_ptrb[safe_add( _1772_i,(int)1 )] = safe_add( _ptr__1767_ptrb[_1772_i],_1773_knz );
        _1771_k += _1773_knz;
      }
    }
  }
  std::vector<int64_t> _9875_;
  for (int32_t _1775_i = (int)0, _9876_ = _1749_nelem; _1775_i < _9876_ ; ++_1775_i)
  {
    _9875_.push_back(_ptr__1746_nativeidxs[safe_add( _1775_i,_1747_nativebaseptr )]);
  }
  auto _9877_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9875_.size()),_9875_.begin(),_9875_.end()));
  task_putafeflist(_9877_,_1767_ptrb,_1768_subj,_1769_cof,_1770_bfix);
  if ((_1758_barnnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1776_subi = _1746_nativeidxs;
      _checked_ptr_1<int32_t> _ptr__1776_subi(_1776_subi ? _1776_subi->raw() : nullptr,_1776_subi ? _1776_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1777_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1766_numcon,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__1777_ptr(_1777_ptr ? _1777_ptr->raw() : nullptr,_1777_ptr ? _1777_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1778_barsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1758_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1778_barsubj(_1778_barsubj ? _1778_barsubj->raw() : nullptr,_1778_barsubj ? _1778_barsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1779_matdim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1758_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1779_matdim(_1779_matdim ? _1779_matdim->raw() : nullptr,_1779_matdim ? _1779_matdim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1780_matnnz = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1758_barnnz)));
      _checked_ptr_1<int64_t> _ptr__1780_matnnz(_1780_matnnz ? _1780_matnnz->raw() : nullptr,_1780_matnnz ? _1780_matnnz->size(0) : 0);
      std::vector<int32_t> _9878_;
      for (int32_t _1782_i = (int)0, _9879_ = _1759_totalpsdelm; _1782_i < _9879_ ; ++_1782_i)
      {
        _9878_.push_back((-(int)1));
      }
      auto _9880_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9878_.size()),_9878_.begin(),_9878_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1781_matsubi = _9880_;
      _checked_ptr_1<int32_t> _ptr__1781_matsubi(_1781_matsubi ? _1781_matsubi->raw() : nullptr,_1781_matsubi ? _1781_matsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1783_matsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1759_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1783_matsubj(_1783_matsubj ? _1783_matsubj->raw() : nullptr,_1783_matsubj ? _1783_matsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1784_matcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1759_totalpsdelm)));
      _checked_ptr_1<double> _ptr__1784_matcof(_1784_matcof ? _1784_matcof->raw() : nullptr,_1784_matcof ? _1784_matcof->size(0) : 0);
      int32_t _1785_barnzi = (int)0;
      int32_t _1786_barmatnzi = (int)0;
      int32_t _9881_ = (int)0;
      int32_t _9882_ = _1766_numcon;
      for (int32_t _1787_i = _9881_; _1787_i < _9882_; ++_1787_i)
      {
        {
          int32_t _1788_p = _ptr__1754_ri32[safe_add( _1751_ptr_base,_1787_i )];
          int32_t _1789_pe = _ptr__1754_ri32[safe_add( safe_add( _1751_ptr_base,_1787_i ),(int)1 )];
          while ( ((_1788_p < _1789_pe) && (_ptr__1755_ri64[safe_add( _1752_nidxs_base,_1788_p )] < (int)0)) )
          {
            {
              int32_t _1790_p0 = _1788_p;
              int32_t _1791_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1755_ri64[safe_add( _1752_nidxs_base,_1788_p )],(int)1 ))));
              while ( ((_1788_p < _1789_pe) && ((_ptr__1755_ri64[safe_add( _1752_nidxs_base,_1788_p )] < (int)0) && (((*barvar_block_elm_barj)((-safe_add( _ptr__1755_ri64[safe_add( _1752_nidxs_base,_1788_p )],(int)1 )))) == _1791_barj))) )
              {
                {
                  _ptr__1781_matsubi[_1786_barmatnzi] = ((*barvar_block_elm_i)((-safe_add( _ptr__1755_ri64[safe_add( _1752_nidxs_base,_1788_p )],(int)1 ))));
                  _ptr__1783_matsubj[_1786_barmatnzi] = ((*barvar_block_elm_j)((-safe_add( _ptr__1755_ri64[safe_add( _1752_nidxs_base,_1788_p )],(int)1 ))));
                  if ((_ptr__1781_matsubi[_1786_barmatnzi] == _ptr__1783_matsubj[_1786_barmatnzi]))
                  {
                    {
                      _ptr__1784_matcof[_1786_barmatnzi] = _ptr__1756_rf64[safe_add( _1753_cof_base,_1788_p )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1784_matcof[_1786_barmatnzi] = (0.5 * _ptr__1756_rf64[safe_add( _1753_cof_base,_1788_p )]);
                    }
                  }
                  ++ _1786_barmatnzi;
                  ++ _1788_p;
                }
              }
              _ptr__1778_barsubj[_1785_barnzi] = _1791_barj;
              _ptr__1779_matdim[_1785_barnzi] = ((*barvar_dim)(_1791_barj));
              _ptr__1780_matnnz[_1785_barnzi] = (_1788_p - _1790_p0);
              ++ _1785_barnzi;
            }
          }
          _1788_p = _1789_pe;
          _ptr__1777_ptr[safe_add( _1787_i,(int)1 )] = _1785_barnzi;
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1792_symmatidx = task_appendsymmatlist(_1779_matdim,_1780_matnnz,_1781_matsubi,_1783_matsubj,_1784_matcof);
      _checked_ptr_1<int64_t> _ptr__1792_symmatidx(_1792_symmatidx ? _1792_symmatidx->raw() : nullptr,_1792_symmatidx ? _1792_symmatidx->size(0) : 0);
      task_putafebarfrowlist(_1776_subi,_1777_ptr,_1778_barsubj,_1792_symmatidx);
    }
  }
  {}
}
// End mosek.fusion.Model.putfrows

// Begin mosek.fusion.Model.putarows
// Method mosek.fusion.Model.putarows @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:1377:6-1491:7
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int32_t,1 > > _1793_nativeidxs,monty::rc_ptr< ::mosek::fusion::WorkStack > _1794_rs,int32_t _1795_nelem,int32_t _1796_nnz,int32_t _1797_ptr_base,int32_t _1798_nidxs_base,int32_t _1799_cof_base)
{
  _checked_ptr_1<int32_t> _ptr__1793_nativeidxs(_1793_nativeidxs ? _1793_nativeidxs->raw() : nullptr, _1793_nativeidxs ? _1793_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1800_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1794_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1800_ri32(_1800_ri32 ? _1800_ri32->raw() : nullptr,_1800_ri32 ? _1800_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1801_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1794_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1801_ri64(_1801_ri64 ? _1801_ri64->raw() : nullptr,_1801_ri64 ? _1801_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1802_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1794_rs)->f64;
  _checked_ptr_1<double> _ptr__1802_rf64(_1802_rf64 ? _1802_rf64->raw() : nullptr,_1802_rf64 ? _1802_rf64->size(0) : 0);
  int32_t _1803_linnz = (int)0;
  int32_t _1804_barnnz = (int)0;
  int32_t _1805_totalpsdelm = (int)0;
  int32_t _9883_ = (int)0;
  int32_t _9884_ = _1795_nelem;
  for (int32_t _1806_i = _9883_; _1806_i < _9884_; ++_1806_i)
  {
    {
      int32_t _1807_ps = _ptr__1800_ri32[safe_add( _1797_ptr_base,_1806_i )];
      int32_t _1808_pe = _ptr__1800_ri32[safe_add( safe_add( _1797_ptr_base,_1806_i ),(int)1 )];
      int32_t _1809_p = _1807_ps;
      while ( ((_1809_p < _1808_pe) && (_ptr__1801_ri64[safe_add( _1798_nidxs_base,_1809_p )] < (int)0)) )
      {
        {
          int32_t _1810_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1801_ri64[safe_add( _1798_nidxs_base,_1809_p )],(int)1 ))));
          int32_t _1811_p0 = _1809_p;
          ++ _1809_p;
          while ( ((_1809_p < _1808_pe) && ((_ptr__1801_ri64[safe_add( _1798_nidxs_base,_1809_p )] < (int)0) && (_1810_barj == ((*barvar_block_elm_barj)((-safe_add( _ptr__1801_ri64[safe_add( _1798_nidxs_base,_1809_p )],(int)1 ))))))) )
          {
            {
              ++ _1809_p;
            }
          }
          ++ _1804_barnnz;
        }
      }
      _1805_totalpsdelm += (_1809_p - _1807_ps);
      while ( (_1809_p < _1808_pe) )
      {
        {
          if ((0.0 != _ptr__1802_rf64[safe_add( _1799_cof_base,_1809_p )]))
          {
            {
              _1803_linnz += (int)1;
            }
          }
          {}
          ++ _1809_p;
        }
      }
    }
  }
  int32_t _1812_numcon = (int)((_1793_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1813_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1812_numcon,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__1813_ptrb(_1813_ptrb ? _1813_ptrb->raw() : nullptr,_1813_ptrb ? _1813_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1814_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1803_linnz)));
  _checked_ptr_1<int32_t> _ptr__1814_subj(_1814_subj ? _1814_subj->raw() : nullptr,_1814_subj ? _1814_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1815_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1803_linnz)));
  _checked_ptr_1<double> _ptr__1815_cof(_1815_cof ? _1815_cof->raw() : nullptr,_1815_cof ? _1815_cof->size(0) : 0);
  {
    int32_t _1816_k = (int)0;
    int32_t _9885_ = (int)0;
    int32_t _9886_ = _1795_nelem;
    for (int32_t _1817_i = _9885_; _1817_i < _9886_; ++_1817_i)
    {
      {
        int32_t _1818_knz = (int)0;
        int32_t _9887_ = _ptr__1800_ri32[safe_add( _1797_ptr_base,_1817_i )];
        int32_t _9888_ = _ptr__1800_ri32[safe_add( safe_add( _1797_ptr_base,_1817_i ),(int)1 )];
        for (int32_t _1819_j = _9887_; _1819_j < _9888_; ++_1819_j)
        {
          {
            if (((_ptr__1801_ri64[safe_add( _1798_nidxs_base,_1819_j )] >= (int)0) && ((int)0 != _ptr__1802_rf64[safe_add( _1799_cof_base,_1819_j )])))
            {
              {
                _ptr__1814_subj[safe_add( _1816_k,_1818_knz )] = (int32_t)_ptr__1801_ri64[safe_add( _1798_nidxs_base,_1819_j )];
                _ptr__1815_cof[safe_add( _1816_k,_1818_knz )] = _ptr__1802_rf64[safe_add( _1799_cof_base,_1819_j )];
                ++ _1818_knz;
              }
            }
            {}
          }
        }
        _ptr__1813_ptrb[safe_add( _1817_i,(int)1 )] = safe_add( _ptr__1813_ptrb[_1817_i],_1818_knz );
        _1816_k += _1818_knz;
      }
    }
  }
  task_putarowlist(_1793_nativeidxs,_1813_ptrb,_1814_subj,_1815_cof);
  if ((_1804_barnnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1820_subi = _1793_nativeidxs;
      _checked_ptr_1<int32_t> _ptr__1820_subi(_1820_subi ? _1820_subi->raw() : nullptr,_1820_subi ? _1820_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1821_ptr = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1812_numcon,(int)1 ))));
      _checked_ptr_1<int64_t> _ptr__1821_ptr(_1821_ptr ? _1821_ptr->raw() : nullptr,_1821_ptr ? _1821_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1822_barsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1804_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1822_barsubj(_1822_barsubj ? _1822_barsubj->raw() : nullptr,_1822_barsubj ? _1822_barsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1823_matdim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1804_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1823_matdim(_1823_matdim ? _1823_matdim->raw() : nullptr,_1823_matdim ? _1823_matdim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1824_matnnz = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1804_barnnz)));
      _checked_ptr_1<int64_t> _ptr__1824_matnnz(_1824_matnnz ? _1824_matnnz->raw() : nullptr,_1824_matnnz ? _1824_matnnz->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1825_matsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1805_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1825_matsubi(_1825_matsubi ? _1825_matsubi->raw() : nullptr,_1825_matsubi ? _1825_matsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1826_matsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1805_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1826_matsubj(_1826_matsubj ? _1826_matsubj->raw() : nullptr,_1826_matsubj ? _1826_matsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1827_matcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1805_totalpsdelm)));
      _checked_ptr_1<double> _ptr__1827_matcof(_1827_matcof ? _1827_matcof->raw() : nullptr,_1827_matcof ? _1827_matcof->size(0) : 0);
      int32_t _1828_barnzi = (int)0;
      int32_t _1829_barmatnzi = (int)0;
      int32_t _9889_ = (int)0;
      int32_t _9890_ = _1812_numcon;
      for (int32_t _1830_i = _9889_; _1830_i < _9890_; ++_1830_i)
      {
        {
          int32_t _1831_p = _ptr__1800_ri32[safe_add( _1797_ptr_base,_1830_i )];
          int32_t _1832_pe = _ptr__1800_ri32[safe_add( safe_add( _1797_ptr_base,_1830_i ),(int)1 )];
          while ( ((_1831_p < _1832_pe) && (_ptr__1801_ri64[safe_add( _1798_nidxs_base,_1831_p )] < (int)0)) )
          {
            {
              int32_t _1833_p0 = _1831_p;
              int32_t _1834_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1801_ri64[safe_add( _1798_nidxs_base,_1831_p )],(int)1 ))));
              while ( ((_1831_p < _1832_pe) && ((_ptr__1801_ri64[safe_add( _1798_nidxs_base,_1831_p )] < (int)0) && (((*barvar_block_elm_barj)((-safe_add( _ptr__1801_ri64[safe_add( _1798_nidxs_base,_1831_p )],(int)1 )))) == _1834_barj))) )
              {
                {
                  _ptr__1825_matsubi[_1829_barmatnzi] = ((*barvar_block_elm_i)((-safe_add( _ptr__1801_ri64[safe_add( _1798_nidxs_base,_1831_p )],(int)1 ))));
                  _ptr__1826_matsubj[_1829_barmatnzi] = ((*barvar_block_elm_j)((-safe_add( _ptr__1801_ri64[safe_add( _1798_nidxs_base,_1831_p )],(int)1 ))));
                  if ((_ptr__1825_matsubi[_1829_barmatnzi] == _ptr__1826_matsubj[_1829_barmatnzi]))
                  {
                    {
                      _ptr__1827_matcof[_1829_barmatnzi] = _ptr__1802_rf64[safe_add( _1799_cof_base,_1831_p )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1827_matcof[_1829_barmatnzi] = (0.5 * _ptr__1802_rf64[safe_add( _1799_cof_base,_1831_p )]);
                    }
                  }
                  ++ _1829_barmatnzi;
                  ++ _1831_p;
                }
              }
              _ptr__1822_barsubj[_1828_barnzi] = _1834_barj;
              _ptr__1823_matdim[_1828_barnzi] = ((*barvar_dim)(_1834_barj));
              _ptr__1824_matnnz[_1828_barnzi] = (_1831_p - _1833_p0);
              ++ _1828_barnzi;
            }
          }
          _1831_p = _1832_pe;
          _ptr__1821_ptr[safe_add( _1830_i,(int)1 )] = _1828_barnzi;
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1835_symmatidx = task_appendsymmatlist(_1823_matdim,_1824_matnnz,_1825_matsubi,_1826_matsubj,_1827_matcof);
      _checked_ptr_1<int64_t> _ptr__1835_symmatidx(_1835_symmatidx ? _1835_symmatidx->raw() : nullptr,_1835_symmatidx ? _1835_symmatidx->size(0) : 0);
      task_putbararowlist(_1820_subi,_1821_ptr,_1822_barsubj,_1835_symmatidx);
    }
  }
  {}
}
// End mosek.fusion.Model.putarows

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:1245:6-1361:7
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1836_name,monty::rc_ptr< ::mosek::fusion::Expression > _1837_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1838_dom_)
{
  if (((mosek::fusion::p_WorkStack::_get_impl(rs)->pi32 != (int)0) || ((mosek::fusion::p_WorkStack::_get_impl(rs)->pi64 != (int)0) || (mosek::fusion::p_WorkStack::_get_impl(rs)->pf64 != (int)0))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Stack rs not clean"));
    }
  }
  {}
  if (((mosek::fusion::p_WorkStack::_get_impl(ws)->pi32 != (int)0) || ((mosek::fusion::p_WorkStack::_get_impl(ws)->pi64 != (int)0) || (mosek::fusion::p_WorkStack::_get_impl(ws)->pf64 != (int)0))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Stack ws not clean"));
    }
  }
  {}
  xs->clear();
  if ((((int)((_1836_name).size()) > (int)0) && hasConstraint(_1836_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1836_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1838_dom_)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1839_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1837_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1839_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1840_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1840_ri32(_1840_ri32 ? _1840_ri32->raw() : nullptr,_1840_ri32 ? _1840_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1841_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1841_ri64(_1841_ri64 ? _1841_ri64->raw() : nullptr,_1841_ri64 ? _1841_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1842_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1842_rf64(_1842_rf64 ? _1842_rf64->raw() : nullptr,_1842_rf64 ? _1842_rf64->size(0) : 0);
  int32_t _1843_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1844_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1845_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1846_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int32_t _1847_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1848_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1849_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1850_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1851_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1852_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1853_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1854_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _9891_;
  for (int32_t _1856_i = (int)0, _9892_ = _1843_nd; _1856_i < _9892_ ; ++_1856_i)
  {
    _9891_.push_back(_ptr__1840_ri32[safe_add( _1844_shape_base,_1856_i )]);
  }
  auto _9893_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9891_.size()),_9891_.begin(),_9891_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1855_shape = _9893_;
  _checked_ptr_1<int32_t> _ptr__1855_shape(_1855_shape ? _1855_shape->raw() : nullptr,_1855_shape ? _1855_shape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::RangeDomain > _1857_dom = mosek::fusion::p_RangeDomain::_get_impl(_1838_dom_.get())->__mosek_2fusion_2RangeDomain__finalize_and_validate(_1855_shape);
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->shape)->size(0)) != _1843_nd))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int32_t _9894_ = (int)0;
          int32_t _9895_ = _1843_nd;
          for (int32_t _1858_i = _9894_; _1858_i < _9895_; ++_1858_i)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->shape)(_1858_i)) != _ptr__1840_ri32[safe_add( _1844_shape_base,_1858_i )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int32_t _1859_numcon = (int)1;
  int32_t _9896_ = (int)0;
  int32_t _9897_ = _1843_nd;
  for (int32_t _1860_i = _9896_; _1860_i < _9897_; ++_1860_i)
  {
    {
      _1859_numcon *= _ptr__1840_ri32[safe_add( _1844_shape_base,_1860_i )];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1861_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1859_numcon)));
  _checked_ptr_1<int32_t> _ptr__1861_nativeidxs(_1861_nativeidxs ? _1861_nativeidxs->raw() : nullptr,_1861_nativeidxs ? _1861_nativeidxs->size(0) : 0);
  int32_t _1862_conid = con_allocate(_1861_nativeidxs);
  putarows(_1861_nativeidxs,rs,_1845_nelem,_1846_nnz,_1849_ptr_base,_1850_nidxs_base,_1851_cof_base);
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1863_bl = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1859_numcon)));
  _checked_ptr_1<double> _ptr__1863_bl(_1863_bl ? _1863_bl->raw() : nullptr,_1863_bl ? _1863_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1864_bu = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1859_numcon)));
  _checked_ptr_1<double> _ptr__1864_bu(_1864_bu ? _1864_bu->raw() : nullptr,_1864_bu ? _1864_bu->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1865_domlb = mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->lb;
  _checked_ptr_1<double> _ptr__1865_domlb(_1865_domlb ? _1865_domlb->raw() : nullptr,_1865_domlb ? _1865_domlb->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1866_domub = mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->ub;
  _checked_ptr_1<double> _ptr__1866_domub(_1866_domub ? _1866_domub->raw() : nullptr,_1866_domub ? _1866_domub->size(0) : 0);
  bool _1867_domempty = mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->empty;
  bool _1868_domsc = mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->scalable;
  std::shared_ptr< monty::ndarray< int32_t,2 > > _1869_domsp = mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->sparsity;
  {
    if (_1868_domsc)
    {
      {
        int32_t _9898_ = (int)0;
        int32_t _9899_ = _1859_numcon;
        for (int32_t _1870_i = _9898_; _1870_i < _9899_; ++_1870_i)
        {
          {
            _ptr__1863_bl[_1870_i] = _ptr__1865_domlb[(int)0];
            _ptr__1864_bu[_1870_i] = _ptr__1866_domub[(int)0];
          }
        }
      }
    }
    else if(_1867_domempty)
    {
      {
      }
    }
    else if((NULL != _1869_domsp.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _1871_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1843_nd)));
        _checked_ptr_1<int32_t> _ptr__1871_stride(_1871_stride ? _1871_stride->raw() : nullptr,_1871_stride ? _1871_stride->size(0) : 0);
        _ptr__1871_stride[(_1843_nd - (int)1)] = (int)1;
        int32_t _9900_ = (int)1;
        int32_t _9901_ = _1843_nd;
        for (int32_t _1872_i = _9900_; _1872_i < _9901_; ++_1872_i)
        {
          {
            _ptr__1871_stride[((_1843_nd - _1872_i) - (int)1)] = safe_mul( _ptr__1871_stride[(_1843_nd - _1872_i)],_ptr__1840_ri32[(safe_add( _1844_shape_base,_1843_nd ) - _1872_i)] );
          }
        }
        int32_t _9902_ = (int)0;
        int32_t _9903_ = (int)((_1865_domlb)->size(0));
        for (int32_t _1873_i = _9902_; _1873_i < _9903_; ++_1873_i)
        {
          {
            int32_t _1874_idx = (int)0;
            int32_t _9904_ = (int)0;
            int32_t _9905_ = _1843_nd;
            for (int32_t _1875_j = _9904_; _1875_j < _9905_; ++_1875_j)
            {
              {
                _1874_idx += safe_mul( _ptr__1871_stride[_1875_j],((*_1869_domsp)(_1873_i,_1875_j)) );
              }
            }
            _ptr__1863_bl[_1874_idx] = _ptr__1865_domlb[_1873_i];
            _ptr__1864_bu[_1874_idx] = _ptr__1866_domub[_1873_i];
          }
        }
      }
    }
    else
    {
      {
        int32_t _9906_ = (int)0;
        int32_t _9907_ = _1859_numcon;
        for (int32_t _1876_i = _9906_; _1876_i < _9907_; ++_1876_i)
        {
          {
            _ptr__1863_bl[_1876_i] = _ptr__1865_domlb[_1876_i];
            _ptr__1864_bu[_1876_i] = _ptr__1866_domub[_1876_i];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1861_nativeidxs,_1863_bl,_1864_bu);
  if ((_1847_ncodeatom > (int)0))
  {
    {
      con_blocks->replace_row_code(rs,_1861_nativeidxs,_1849_ptr_base,_1850_nidxs_base,_1852_codeptr,_1853_code,_1854_cconst);
    }
  }
  {}
  if (((int)((_1836_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1877_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1877_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1836_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((int)((_1855_shape)->size(0)) > (int)0))
      {
        {
          _1877_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
        }
      }
      {}
      int32_t _9908_ = (int)1;
      int32_t _9909_ = (int)((_1855_shape)->size(0));
      for (int32_t _1878_i = _9908_; _1878_i < _9909_; ++_1878_i)
      {
        {
          _1877_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1878_i);
        }
      }
      _1877_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->indexnames.get()))
      {
        {
          task_format_con_names(_1861_nativeidxs,_1877_sb->toString(),_1855_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_RangeDomain::_get_impl(_1857_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_con_names(_1861_nativeidxs,_1877_sb->toString(),_1855_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  std::vector<int32_t> _9910_;
  for (int32_t _1880_i = (int)0, _9911_ = _1843_nd; _1880_i < _9911_ ; ++_1880_i)
  {
    _9910_.push_back(_ptr__1840_ri32[safe_add( _1844_shape_base,_1880_i )]);
  }
  auto _9912_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9910_.size()),_9910_.begin(),_9910_.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1879_res = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1836_name,_9912_,_1861_nativeidxs,_1862_conid);
  ((*cons)(_1862_conid)) = (_1879_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1836_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1836_name,_1862_conid);
    }
  }
  {}
  return _1879_res;
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:1038:6-1225:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1881_name,monty::rc_ptr< ::mosek::fusion::Expression > _1882_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1883_dom_)
{
  if (((mosek::fusion::p_WorkStack::_get_impl(rs)->pi32 != (int)0) || ((mosek::fusion::p_WorkStack::_get_impl(rs)->pi64 != (int)0) || (mosek::fusion::p_WorkStack::_get_impl(rs)->pf64 != (int)0))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Stack rs not clean"));
    }
  }
  {}
  if (((mosek::fusion::p_WorkStack::_get_impl(ws)->pi32 != (int)0) || ((mosek::fusion::p_WorkStack::_get_impl(ws)->pi64 != (int)0) || (mosek::fusion::p_WorkStack::_get_impl(ws)->pf64 != (int)0))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Stack ws not clean"));
    }
  }
  {}
  xs->clear();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1884_shape = _1882_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__1884_shape(_1884_shape ? _1884_shape->raw() : nullptr,_1884_shape ? _1884_shape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::PSDDomain > _1885_dom = mosek::fusion::p_PSDDomain::_get_impl(_1883_dom_.get())->__mosek_2fusion_2PSDDomain__finalize_and_validate(_1884_shape);
  bool _1886_tril = (mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim2);
  int32_t _9913_;
  bool _9914_ = (mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim2);
  if (_9914_)
  {
    _9913_ = mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim2;
  }
  else
  {
    _9913_ = mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim1;
  }
  int32_t _1887_conedim1 = _9913_;
  int32_t _9915_;
  bool _9916_ = (mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim2);
  if (_9916_)
  {
    _9915_ = mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim1;
  }
  else
  {
    _9915_ = mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->conedim2;
  }
  int32_t _1888_conedim0 = _9915_;
  monty::rc_ptr< ::mosek::fusion::Expression > _9917_;
  bool _9918_ = (mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_9918_)
  {
    _9917_ = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1888_conedim0,_1887_conedim1,_1882_expr).as<::mosek::fusion::Expression>();
  }
  else
  {
    _9917_ = _1882_expr;
  }
  monty::rc_ptr< ::mosek::fusion::ExprDenseTril > _1889_e = ::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1888_conedim0,_1887_conedim1,(::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprScaleVecPSD::_new_ExprScaleVecPSD(_1888_conedim0,_1887_conedim1,(::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1888_conedim0,_1887_conedim1,_9917_)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1889_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1890_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1890_ri32(_1890_ri32 ? _1890_ri32->raw() : nullptr,_1890_ri32 ? _1890_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1891_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1891_ri64(_1891_ri64 ? _1891_ri64->raw() : nullptr,_1891_ri64 ? _1891_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1892_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1892_rf64(_1892_rf64 ? _1892_rf64->raw() : nullptr,_1892_rf64 ? _1892_rf64->size(0) : 0);
  int32_t _1893_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1894_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1895_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1896_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1897_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int32_t _1898_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1899_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1900_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1901_sp_base = mosek::fusion::p_WorkStack::_get_impl(rs)->sp_base;
  int32_t _1902_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1903_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1904_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1905_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  int32_t _1906_conedim = _ptr__1884_shape[_1887_conedim1];
  int32_t _1907_conesize = (safe_mul( _1906_conedim,safe_add( _1906_conedim,(int)1 ) ) / (int)2);
  int32_t _1908_numcone = (int)1;
  int32_t _9919_ = (int)0;
  int32_t _9920_ = _1893_nd;
  for (int32_t _1909_i = _9919_; _1909_i < _9920_; ++_1909_i)
  {
    {
      if (((_1909_i != _1888_conedim0) && (_1909_i != _1887_conedim1)))
      {
        {
          _1908_numcone *= _ptr__1884_shape[_1909_i];
        }
      }
      {}
    }
  }
  int64_t _1910_domainidx = task_append_domain_svec_psd(_1907_conesize);
  int32_t _1911_domsize = safe_mul( _1907_conesize,_1908_numcone );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1912_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1911_domsize)));
  _checked_ptr_1<int32_t> _ptr__1912_afeidxs(_1912_afeidxs ? _1912_afeidxs->raw() : nullptr,_1912_afeidxs ? _1912_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1913_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1908_numcone)));
  _checked_ptr_1<int32_t> _ptr__1913_accidxs(_1913_accidxs ? _1913_accidxs->raw() : nullptr,_1913_accidxs ? _1913_accidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1914_conelmidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1911_domsize)));
  _checked_ptr_1<int32_t> _ptr__1914_conelmidx(_1914_conelmidx ? _1914_conelmidx->raw() : nullptr,_1914_conelmidx ? _1914_conelmidx->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1915_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1911_domsize)));
  _checked_ptr_1<double> _ptr__1915_g(_1915_g ? _1915_g->raw() : nullptr,_1915_g ? _1915_g->size(0) : 0);
  int32_t _1916_conid = acon_allocate(_1910_domainidx,_1907_conesize,_1908_numcone,_1915_g,_1912_afeidxs,_1913_accidxs);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1917_aconidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1911_domsize)));
  _checked_ptr_1<int32_t> _ptr__1917_aconidxs(_1917_aconidxs ? _1917_aconidxs->raw() : nullptr,_1917_aconidxs ? _1917_aconidxs->size(0) : 0);
  acon_block_map->get(_1916_conid,_1917_aconidxs,(int)0);
  int64_t _1918_d5 = (int)1;
  int64_t _1919_d4 = _ptr__1884_shape[_1887_conedim1];
  int64_t _1920_d3 = (int)1;
  int64_t _1921_d2 = _ptr__1884_shape[_1888_conedim0];
  int64_t _1922_d1 = (int)1;
  int32_t _9921_ = (int)0;
  int32_t _9922_ = _1888_conedim0;
  for (int32_t _1923_i = _9921_; _1923_i < _9922_; ++_1923_i)
  {
    {
      _1922_d1 *= _ptr__1884_shape[_1923_i];
    }
  }
  int32_t _9923_ = safe_add( _1888_conedim0,(int)1 );
  int32_t _9924_ = _1887_conedim1;
  for (int32_t _1924_i = _9923_; _1924_i < _9924_; ++_1924_i)
  {
    {
      _1920_d3 *= _ptr__1884_shape[_1924_i];
    }
  }
  int32_t _9925_ = safe_add( _1887_conedim1,(int)1 );
  int32_t _9926_ = _1893_nd;
  for (int32_t _1925_i = _9925_; _1925_i < _9926_; ++_1925_i)
  {
    {
      _1918_d5 *= _ptr__1884_shape[_1925_i];
    }
  }
  {
    int32_t _1926_k = (int)0;
    double _1927_s = (1.0 / ::mosek::fusion::Utils::Tools::sqrt((double)((int)2)));
    int32_t _9927_ = (int)0;
    int64_t _9928_ = safe_mul( safe_mul( _1922_d1,_1920_d3 ),_1918_d5 );
    for (int64_t _1928_i1 = _9927_; _1928_i1 < _9928_; ++_1928_i1)
    {
      {
        int32_t _9929_ = (int)0;
        int64_t _9930_ = _1921_d2;
        for (int64_t _1929_i2 = _9929_; _1929_i2 < _9930_; ++_1929_i2)
        {
          {
            ++ _1926_k;
            int64_t _9931_ = safe_add( _1929_i2,(int)1 );
            int64_t _9932_ = _1919_d4;
            for (int64_t _1930_i4 = _9931_; _1930_i4 < _9932_; ++_1930_i4)
            {
              {
                ((*acon_elm_scale)(_ptr__1917_aconidxs[_1926_k])) = _1927_s;
                ++ _1926_k;
              }
            }
          }
        }
      }
    }
  }
  {
    std::shared_ptr< monty::ndarray< int32_t,1 > > _1931_afetrilperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1894_nelem)));
    _checked_ptr_1<int32_t> _ptr__1931_afetrilperm(_1931_afetrilperm ? _1931_afetrilperm->raw() : nullptr,_1931_afetrilperm ? _1931_afetrilperm->size(0) : 0);
    int32_t _1932_k = (int)0;
    if (_1886_tril)
    {
      {
        int32_t _9933_ = (int)0;
        int64_t _9934_ = _1922_d1;
        for (int64_t _1933_i1 = _9933_; _1933_i1 < _9934_; ++_1933_i1)
        {
          {
            int32_t _9935_ = (int)0;
            int64_t _9936_ = _1919_d4;
            for (int64_t _1934_i4 = _9935_; _1934_i4 < _9936_; ++_1934_i4)
            {
              {
                int32_t _9937_ = (int)0;
                int64_t _9938_ = _1920_d3;
                for (int64_t _1935_i3 = _9937_; _1935_i3 < _9938_; ++_1935_i3)
                {
                  {
                    int64_t _9939_ = _1934_i4;
                    int64_t _9940_ = _1921_d2;
                    for (int64_t _1936_i2 = _9939_; _1936_i2 < _9940_; ++_1936_i2)
                    {
                      {
                        int32_t _9941_ = (int)0;
                        int64_t _9942_ = _1918_d5;
                        for (int64_t _1937_i5 = _9941_; _1937_i5 < _9942_; ++_1937_i5)
                        {
                          {
                            int64_t _1938_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1933_i1,_1920_d3 ),_1918_d5 ),safe_mul( _1935_i3,_1918_d5 ) ),_1937_i5 );
                            int64_t _1939_coneofs = safe_add( (safe_mul( _1936_i2,safe_add( _1936_i2,(int)1 ) ) / (int)2),_1934_i4 );
                            _ptr__1931_afetrilperm[safe_add( safe_mul( _1938_coneidx,_1907_conesize ),_1939_coneofs )] = _ptr__1912_afeidxs[_1932_k];
                            ++ _1932_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _9943_ = (int)0;
        int64_t _9944_ = _1922_d1;
        for (int64_t _1940_i1 = _9943_; _1940_i1 < _9944_; ++_1940_i1)
        {
          {
            int32_t _9945_ = (int)0;
            int64_t _9946_ = _1919_d4;
            for (int64_t _1941_i4 = _9945_; _1941_i4 < _9946_; ++_1941_i4)
            {
              {
                int32_t _9947_ = (int)0;
                int64_t _9948_ = _1920_d3;
                for (int64_t _1942_i3 = _9947_; _1942_i3 < _9948_; ++_1942_i3)
                {
                  {
                    int32_t _9949_ = (int)0;
                    int64_t _9950_ = safe_add( _1941_i4,(int)1 );
                    for (int64_t _1943_i2 = _9949_; _1943_i2 < _9950_; ++_1943_i2)
                    {
                      {
                        int32_t _9951_ = (int)0;
                        int64_t _9952_ = _1918_d5;
                        for (int64_t _1944_i5 = _9951_; _1944_i5 < _9952_; ++_1944_i5)
                        {
                          {
                            int64_t _1945_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1940_i1,_1920_d3 ),_1918_d5 ),safe_mul( _1942_i3,_1918_d5 ) ),_1944_i5 );
                            int64_t _1946_coneofs = safe_add( (safe_mul( _1943_i2,((safe_mul( (int)2,_1921_d2 ) - _1943_i2) - (int)1) ) / (int)2),_1941_i4 );
                            _ptr__1931_afetrilperm[safe_add( safe_mul( _1945_coneidx,_1907_conesize ),_1946_coneofs )] = _ptr__1912_afeidxs[_1932_k];
                            ++ _1932_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    putfrows(_1931_afetrilperm,(int)0,rs,_1894_nelem,_1895_nnz,_1899_ptr_base,_1900_nidxs_base,_1902_cof_base);
    if ((_1897_ncodeatom > (int)0))
    {
      {
        afe_blocks->replace_row_code(rs,_1931_afetrilperm,_1899_ptr_base,_1900_nidxs_base,_1903_codeptr,_1904_code,_1905_cconst);
      }
    }
    else
    {
      {
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1947_pafeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( safe_mul( _1908_numcone,_1921_d2 ),_1921_d2 ))));
  _checked_ptr_1<int32_t> _ptr__1947_pafeidxs(_1947_pafeidxs ? _1947_pafeidxs->raw() : nullptr,_1947_pafeidxs ? _1947_pafeidxs->size(0) : 0);
  {
    int32_t _1948_k = (int)0;
    if (_1886_tril)
    {
      {
        int32_t _9953_ = (int)0;
        int64_t _9954_ = _1922_d1;
        for (int64_t _1949_i1 = _9953_; _1949_i1 < _9954_; ++_1949_i1)
        {
          {
            int32_t _9955_ = (int)0;
            int64_t _9956_ = _1921_d2;
            for (int64_t _1950_i2 = _9955_; _1950_i2 < _9956_; ++_1950_i2)
            {
              {
                int32_t _9957_ = (int)0;
                int64_t _9958_ = _1920_d3;
                for (int64_t _1951_i3 = _9957_; _1951_i3 < _9958_; ++_1951_i3)
                {
                  {
                    int32_t _9959_ = (int)0;
                    int64_t _9960_ = _1919_d4;
                    for (int64_t _1952_i4 = _9959_; _1952_i4 < _9960_; ++_1952_i4)
                    {
                      {
                        int32_t _9961_ = (int)0;
                        int64_t _9962_ = _1918_d5;
                        for (int64_t _1953_i5 = _9961_; _1953_i5 < _9962_; ++_1953_i5)
                        {
                          {
                            int64_t _1954_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1949_i1,_1920_d3 ),_1918_d5 ),safe_mul( _1951_i3,_1918_d5 ) ),_1953_i5 );
                            int64_t _9963_;
                            bool _9964_ = (_1950_i2 >= _1952_i4);
                            if (_9964_)
                            {
                              _9963_ = safe_add( (safe_mul( _1952_i4,((safe_mul( (int)2,_1921_d2 ) - _1952_i4) - (int)1) ) / (int)2),_1950_i2 );
                            }
                            else
                            {
                              _9963_ = safe_add( (safe_mul( _1950_i2,((safe_mul( (int)2,_1921_d2 ) - _1950_i2) - (int)1) ) / (int)2),_1952_i4 );
                            }
                            int64_t _1955_coneofs = _9963_;
                            _ptr__1947_pafeidxs[_1948_k] = _ptr__1912_afeidxs[safe_add( safe_mul( _1954_coneidx,_1907_conesize ),_1955_coneofs )];
                            ++ _1948_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _9965_ = (int)0;
        int64_t _9966_ = _1922_d1;
        for (int64_t _1956_i1 = _9965_; _1956_i1 < _9966_; ++_1956_i1)
        {
          {
            int32_t _9967_ = (int)0;
            int64_t _9968_ = _1921_d2;
            for (int64_t _1957_i2 = _9967_; _1957_i2 < _9968_; ++_1957_i2)
            {
              {
                int32_t _9969_ = (int)0;
                int64_t _9970_ = _1920_d3;
                for (int64_t _1958_i3 = _9969_; _1958_i3 < _9970_; ++_1958_i3)
                {
                  {
                    int32_t _9971_ = (int)0;
                    int64_t _9972_ = _1919_d4;
                    for (int64_t _1959_i4 = _9971_; _1959_i4 < _9972_; ++_1959_i4)
                    {
                      {
                        int32_t _9973_ = (int)0;
                        int64_t _9974_ = _1918_d5;
                        for (int64_t _1960_i5 = _9973_; _1960_i5 < _9974_; ++_1960_i5)
                        {
                          {
                            int64_t _1961_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1956_i1,_1920_d3 ),_1918_d5 ),safe_mul( _1958_i3,_1918_d5 ) ),_1960_i5 );
                            int64_t _9975_;
                            bool _9976_ = (_1957_i2 >= _1959_i4);
                            if (_9976_)
                            {
                              _9975_ = safe_add( (safe_mul( _1959_i4,((safe_mul( (int)2,_1921_d2 ) - _1959_i4) - (int)1) ) / (int)2),_1957_i2 );
                            }
                            else
                            {
                              _9975_ = safe_add( (safe_mul( _1957_i2,((safe_mul( (int)2,_1921_d2 ) - _1957_i2) - (int)1) ) / (int)2),_1959_i4 );
                            }
                            int64_t _1962_coneofs = _9975_;
                            _ptr__1947_pafeidxs[_1948_k] = _ptr__1912_afeidxs[safe_add( safe_mul( _1961_coneidx,_1907_conesize ),_1962_coneofs )];
                            ++ _1948_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (((int)((_1881_name).size()) > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1963_coneshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1884_shape)->size(0)) - (int)2))));
      _checked_ptr_1<int32_t> _ptr__1963_coneshape(_1963_coneshape ? _1963_coneshape->raw() : nullptr,_1963_coneshape ? _1963_coneshape->size(0) : 0);
      int32_t _9977_ = (int)0;
      int32_t _9978_ = _1888_conedim0;
      for (int32_t _1964_i = _9977_; _1964_i < _9978_; ++_1964_i)
      {
        {
          _ptr__1963_coneshape[_1964_i] = _ptr__1884_shape[_1964_i];
        }
      }
      int32_t _9979_ = safe_add( _1888_conedim0,(int)1 );
      int32_t _9980_ = _1887_conedim1;
      for (int32_t _1965_i = _9979_; _1965_i < _9980_; ++_1965_i)
      {
        {
          _ptr__1963_coneshape[(_1965_i - (int)1)] = _ptr__1884_shape[_1965_i];
        }
      }
      int32_t _9981_ = safe_add( _1887_conedim1,(int)1 );
      int32_t _9982_ = _1893_nd;
      for (int32_t _1966_i = _9981_; _1966_i < _9982_; ++_1966_i)
      {
        {
          _ptr__1963_coneshape[(_1966_i - (int)2)] = _ptr__1884_shape[_1966_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1967_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1967_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1881_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1893_nd > (int)2))
      {
        {
          _1967_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9983_ = (int)1;
          int32_t _9984_ = (_1893_nd - (int)2);
          for (int32_t _1968_i = _9983_; _1968_i < _9984_; ++_1968_i)
          {
            {
              _1967_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1968_i);
            }
          }
        }
      }
      {}
      _1967_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1969_dindexnames = mosek::fusion::p_PSDDomain::_get_impl(_1885_dom)->indexnames;
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1970_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1893_nd - (int)2))));
          int32_t _9985_ = (int)0;
          int32_t _9986_ = _1888_conedim0;
          for (int32_t _1971_i = _9985_; _1971_i < _9986_; ++_1971_i)
          {
            {
              ((*_1970_indexnames)(_1971_i)) = ((*_1969_dindexnames)(_1971_i));
            }
          }
          int32_t _9987_ = safe_add( _1888_conedim0,(int)1 );
          int32_t _9988_ = _1887_conedim1;
          for (int32_t _1972_i = _9987_; _1972_i < _9988_; ++_1972_i)
          {
            {
              ((*_1970_indexnames)((_1972_i - (int)1))) = ((*_1969_dindexnames)(_1972_i));
            }
          }
          int32_t _9989_ = safe_add( _1887_conedim1,(int)1 );
          int32_t _9990_ = _1893_nd;
          for (int32_t _1973_i = _9989_; _1973_i < _9990_; ++_1973_i)
          {
            {
              ((*_1970_indexnames)((_1973_i - (int)2))) = ((*_1969_dindexnames)(_1973_i));
            }
          }
          std::vector<int64_t> _9991_;
          for (int32_t _1974_i = (int)0, _9992_ = (int)((_1913_accidxs)->size(0)); _1974_i < _9992_ ; ++_1974_i)
          {
            _9991_.push_back(_ptr__1913_accidxs[_1974_i]);
          }
          auto _9993_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9991_.size()),_9991_.begin(),_9991_.end()));
          task_format_acc_names(_9993_,_1967_sb->toString(),_1963_coneshape,_1970_indexnames);
        }
      }
      else
      {
        {
          std::vector<int64_t> _9994_;
          for (int32_t _1975_i = (int)0, _9995_ = (int)((_1913_accidxs)->size(0)); _1975_i < _9995_ ; ++_1975_i)
          {
            _9994_.push_back(_ptr__1913_accidxs[_1975_i]);
          }
          auto _9996_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9994_.size()),_9994_.begin(),_9994_.end()));
          task_format_acc_names(_9996_,_1967_sb->toString(),_1963_coneshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1976_res = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1881_name,nullptr,_1884_shape,_1916_conid,_1947_pafeidxs,nullptr);
  ((*acons)(_1916_conid)) = (_1976_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1881_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1881_name,(-safe_add( (int)1,_1916_conid )));
    }
  }
  {}
  return (_1976_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:832:6-1035:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1977_name,monty::rc_ptr< ::mosek::fusion::Expression > _1978_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1979_dom_)
{
  if (((mosek::fusion::p_WorkStack::_get_impl(rs)->pi32 != (int)0) || ((mosek::fusion::p_WorkStack::_get_impl(rs)->pi64 != (int)0) || (mosek::fusion::p_WorkStack::_get_impl(rs)->pf64 != (int)0))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Stack rs not clean"));
    }
  }
  {}
  if (((mosek::fusion::p_WorkStack::_get_impl(ws)->pi32 != (int)0) || ((mosek::fusion::p_WorkStack::_get_impl(ws)->pi64 != (int)0) || (mosek::fusion::p_WorkStack::_get_impl(ws)->pf64 != (int)0))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Stack ws not clean"));
    }
  }
  {}
  xs->clear();
  if ((((int)((_1977_name).size()) > (int)0) && hasConstraint(_1977_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1977_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1977_name).size()) > (int)0) && hasConstraint(_1977_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1977_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1979_dom_)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1980_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1978_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1980_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1981_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1981_ri32(_1981_ri32 ? _1981_ri32->raw() : nullptr,_1981_ri32 ? _1981_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1982_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1982_ri64(_1982_ri64 ? _1982_ri64->raw() : nullptr,_1982_ri64 ? _1982_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1983_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1983_rf64(_1983_rf64 ? _1983_rf64->raw() : nullptr,_1983_rf64 ? _1983_rf64->size(0) : 0);
  int32_t _1984_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1985_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1986_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1987_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int32_t _1988_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1989_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1990_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1991_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1992_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1993_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1994_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1995_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _9997_;
  for (int32_t _1997_i = (int)0, _9998_ = _1984_nd; _1997_i < _9998_ ; ++_1997_i)
  {
    _9997_.push_back(_ptr__1981_ri32[safe_add( _1985_shape_base,_1997_i )]);
  }
  auto _9999_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9997_.size()),_9997_.begin(),_9997_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1996_shape = _9999_;
  _checked_ptr_1<int32_t> _ptr__1996_shape(_1996_shape ? _1996_shape->raw() : nullptr,_1996_shape ? _1996_shape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::ConeDomain > _1998_dom = mosek::fusion::p_ConeDomain::_get_impl(_1979_dom_.get())->__mosek_2fusion_2ConeDomain__finalize_and_validate(_1996_shape);
  int32_t _10000_;
  bool _10001_ = _1998_dom->axisIsSet();
  if (_10001_)
  {
    _10000_ = _1998_dom->getAxis();
  }
  else
  {
    _10000_ = (_1984_nd - (int)1);
  }
  int32_t _1999_coneaxis = _10000_;
  int32_t _2000_conesize = _ptr__1996_shape[_1999_coneaxis];
  int32_t _2001_d1 = (int)1;
  int32_t _2002_d0 = (int)1;
  int32_t _2003_domsize = (int)1;
  int32_t _10002_ = (int)0;
  int32_t _10003_ = _1984_nd;
  for (int32_t _2004_i = _10002_; _2004_i < _10003_; ++_2004_i)
  {
    {
      _2003_domsize *= _ptr__1996_shape[_2004_i];
    }
  }
  int32_t _10004_ = (int)0;
  int32_t _10005_ = _1999_coneaxis;
  for (int32_t _2005_i = _10004_; _2005_i < _10005_; ++_2005_i)
  {
    {
      _2002_d0 *= _ptr__1996_shape[_2005_i];
    }
  }
  int32_t _10006_ = safe_add( _1999_coneaxis,(int)1 );
  int32_t _10007_ = _1984_nd;
  for (int32_t _2006_i = _10006_; _2006_i < _10007_; ++_2006_i)
  {
    {
      _2001_d1 *= _ptr__1996_shape[_2006_i];
    }
  }
  int32_t _2007_numcone = safe_mul( _2002_d0,_2001_d1 );
  int64_t _2008_domainidx;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      if ((_2000_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_quad(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      if ((_2000_conesize < (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_rquad(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      if ((_2000_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_pexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      if ((_2000_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
        }
      }
      {}
      if (((int)((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->alpha)->size(0)) < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Power cone requires at least two parameters"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_ppow(_2000_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      if ((_2000_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_dexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      if ((_2000_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
        }
      }
      {}
      if (((int)((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->alpha)->size(0)) < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Power cone requires at least two parameters"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_dpow(_2000_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InPGeoMeanCone))
  {
    {
      if ((_2000_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for primal geometric mean cone"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_pgeomean(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InDGeoMeanCone))
  {
    {
      if ((_2000_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual geometric mean cone"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_dgeomean(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InSVecPSDCone))
  {
    {
      int32_t _2009_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_2000_conesize ) ))) - (int)1) / (int)2);
      if (((safe_mul( _2009_d,safe_add( _2009_d,(int)1 ) ) / (int)2) != _2000_conesize))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for vector positive semidefinite cone"))->toString());
        }
      }
      {}
      _2008_domainidx = task_append_domain_svec_psd(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::Positive))
  {
    {
      _2008_domainidx = task_append_domain_rpos(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::Negative))
  {
    {
      _2008_domainidx = task_append_domain_rneg(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::Unbounded))
  {
    {
      _2008_domainidx = task_append_domain_r(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::Zero))
  {
    {
      _2008_domainidx = task_append_domain_rzero(_2000_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->key == ::mosek::fusion::QConeKey::InPSDCone))
  {
    {
      if ((_2000_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
        }
      }
      else
      {
        {
          int32_t _2010_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_2000_conesize ) ))) - (int)1) / (int)2);
          if (((safe_mul( _2010_d,safe_add( _2010_d,(int)1 ) ) / (int)2) != _2000_conesize))
          {
            {
              throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_2000_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
            }
          }
          {}
        }
      }
      _2008_domainidx = task_append_domain_svec_psd(_2000_conesize);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _2011_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2003_domsize)));
  _checked_ptr_1<double> _ptr__2011_g(_2011_g ? _2011_g->raw() : nullptr,_2011_g ? _2011_g->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2012_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2003_domsize)));
  _checked_ptr_1<int32_t> _ptr__2012_afeidxs(_2012_afeidxs ? _2012_afeidxs->raw() : nullptr,_2012_afeidxs ? _2012_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2013_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2007_numcone)));
  _checked_ptr_1<int32_t> _ptr__2013_accidxs(_2013_accidxs ? _2013_accidxs->raw() : nullptr,_2013_accidxs ? _2013_accidxs->size(0) : 0);
  int32_t _2014_conid = acon_allocate(_2008_domainidx,_2000_conesize,_2007_numcone,_2011_g,_2012_afeidxs,_2013_accidxs);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2015_perm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2003_domsize)));
  _checked_ptr_1<int32_t> _ptr__2015_perm(_2015_perm ? _2015_perm->raw() : nullptr,_2015_perm ? _2015_perm->size(0) : 0);
  {
    int32_t _2016_idx = (int)0;
    std::shared_ptr< monty::ndarray< double,1 > > _2017_ofs = mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->domofs;
    _checked_ptr_1<double> _ptr__2017_ofs(_2017_ofs ? _2017_ofs->raw() : nullptr,_2017_ofs ? _2017_ofs->size(0) : 0);
    {
      int32_t _10008_ = (int)0;
      int32_t _10009_ = _2002_d0;
      for (int32_t _2018_i0 = _10008_; _2018_i0 < _10009_; ++_2018_i0)
      {
        {
          int32_t _10010_ = (int)0;
          int32_t _10011_ = _2001_d1;
          for (int32_t _2019_i1 = _10010_; _2019_i1 < _10011_; ++_2019_i1)
          {
            {
              int32_t _10012_ = (int)0;
              int32_t _10013_ = _2000_conesize;
              for (int32_t _2020_ic = _10012_; _2020_ic < _10013_; ++_2020_ic)
              {
                {
                  _ptr__2015_perm[safe_add( safe_add( safe_mul( safe_mul( _2018_i0,_2001_d1 ),_2000_conesize ),safe_mul( _2020_ic,_2001_d1 ) ),_2019_i1 )] = _2016_idx;
                  ++ _2016_idx;
                }
              }
            }
          }
        }
      }
      if ((NULL != _2017_ofs.get()))
      {
        {
          int32_t _10014_ = (int)0;
          int32_t _10015_ = _2003_domsize;
          for (int32_t _2021_i = _10014_; _2021_i < _10015_; ++_2021_i)
          {
            {
              _ptr__2011_g[_ptr__2015_perm[_2021_i]] = _ptr__2017_ofs[_2021_i];
            }
          }
        }
      }
      {}
    }
  }
  std::vector<int32_t> _10016_;
  for (int32_t _2023_i = (int)0, _10017_ = _2003_domsize; _2023_i < _10017_ ; ++_2023_i)
  {
    _10016_.push_back(_ptr__2012_afeidxs[_ptr__2015_perm[_2023_i]]);
  }
  auto _10018_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10016_.size()),_10016_.begin(),_10016_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2022_pafeidxs = _10018_;
  _checked_ptr_1<int32_t> _ptr__2022_pafeidxs(_2022_pafeidxs ? _2022_pafeidxs->raw() : nullptr,_2022_pafeidxs ? _2022_pafeidxs->size(0) : 0);
  putfrows(_2022_pafeidxs,(int)0,rs,_1986_nelem,_1987_nnz,_1990_ptr_base,_1991_nidxs_base,_1992_cof_base);
  if ((_1988_ncodeatom > (int)0))
  {
    {
      afe_blocks->replace_row_code(rs,_2022_pafeidxs,_1990_ptr_base,_1991_nidxs_base,_1994_codeptr,_1993_code,_1995_cconst);
    }
  }
  {}
  if (((int)((_1977_name).size()) > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2024_accshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1996_shape)->size(0)) - (int)1))));
      _checked_ptr_1<int32_t> _ptr__2024_accshape(_2024_accshape ? _2024_accshape->raw() : nullptr,_2024_accshape ? _2024_accshape->size(0) : 0);
      int32_t _10019_ = (int)0;
      int32_t _10020_ = _1999_coneaxis;
      for (int32_t _2025_i = _10019_; _2025_i < _10020_; ++_2025_i)
      {
        {
          _ptr__2024_accshape[_2025_i] = _ptr__1996_shape[_2025_i];
        }
      }
      int32_t _10021_ = safe_add( _1999_coneaxis,(int)1 );
      int32_t _10022_ = _1984_nd;
      for (int32_t _2026_i = _10021_; _2026_i < _10022_; ++_2026_i)
      {
        {
          _ptr__2024_accshape[(_2026_i - (int)1)] = _ptr__1996_shape[_2026_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2027_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _2027_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1977_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1984_nd > (int)1))
      {
        {
          _2027_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _10023_ = (int)1;
          int32_t _10024_ = (_1984_nd - (int)1);
          for (int32_t _2028_i = _10023_; _2028_i < _10024_; ++_2028_i)
          {
            {
              _2027_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2028_i);
            }
          }
        }
      }
      {}
      _2027_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2029_dindexnames = mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->indexnames;
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2030_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1984_nd - (int)1))));
          int32_t _10025_ = (int)0;
          int32_t _10026_ = _1999_coneaxis;
          for (int32_t _2031_i = _10025_; _2031_i < _10026_; ++_2031_i)
          {
            {
              ((*_2030_indexnames)(_2031_i)) = ((*_2029_dindexnames)(_2031_i));
            }
          }
          int32_t _10027_ = safe_add( _1999_coneaxis,(int)1 );
          int32_t _10028_ = _1984_nd;
          for (int32_t _2032_i = _10027_; _2032_i < _10028_; ++_2032_i)
          {
            {
              ((*_2030_indexnames)((_2032_i - (int)1))) = ((*_2029_dindexnames)(_2032_i));
            }
          }
          std::vector<int64_t> _10029_;
          for (int32_t _2033_i = (int)0, _10030_ = (int)((_2013_accidxs)->size(0)); _2033_i < _10030_ ; ++_2033_i)
          {
            _10029_.push_back(_ptr__2013_accidxs[_2033_i]);
          }
          auto _10031_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10029_.size()),_10029_.begin(),_10029_.end()));
          task_format_acc_names(_10031_,_2027_sb->toString(),_2024_accshape,_2030_indexnames);
        }
      }
      else
      {
        {
          std::vector<int64_t> _10032_;
          for (int32_t _2034_i = (int)0, _10033_ = (int)((_2013_accidxs)->size(0)); _2034_i < _10033_ ; ++_2034_i)
          {
            _10032_.push_back(_ptr__2013_accidxs[_2034_i]);
          }
          auto _10034_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10032_.size()),_10032_.begin(),_10032_.end()));
          task_format_acc_names(_10034_,_2027_sb->toString(),_2024_accshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2035_res = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1977_name,_1998_dom,_1996_shape,_2014_conid,_2012_afeidxs,mosek::fusion::p_ConeDomain::_get_impl(_1998_dom)->indexnames);
  ((*acons)(_2014_conid)) = (_2035_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1977_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1977_name,(-safe_add( _2014_conid,(int)1 )));
    }
  }
  {}
  return (_2035_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:702:6-827:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _2036_name,monty::rc_ptr< ::mosek::fusion::Expression > _2037_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _2038_dom_)
{
  if (((mosek::fusion::p_WorkStack::_get_impl(rs)->pi32 != (int)0) || ((mosek::fusion::p_WorkStack::_get_impl(rs)->pi64 != (int)0) || (mosek::fusion::p_WorkStack::_get_impl(rs)->pf64 != (int)0))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Stack rs not clean"));
    }
  }
  {}
  if (((mosek::fusion::p_WorkStack::_get_impl(ws)->pi32 != (int)0) || ((mosek::fusion::p_WorkStack::_get_impl(ws)->pi64 != (int)0) || (mosek::fusion::p_WorkStack::_get_impl(ws)->pf64 != (int)0))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Stack ws not clean"));
    }
  }
  {}
  xs->clear();
  if ((((int)((_2036_name).size()) > (int)0) && hasConstraint(_2036_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2036_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_2038_dom_)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _2039_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_2037_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _2039_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2040_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__2040_ri32(_2040_ri32 ? _2040_ri32->raw() : nullptr,_2040_ri32 ? _2040_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2041_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__2041_ri64(_2041_ri64 ? _2041_ri64->raw() : nullptr,_2041_ri64 ? _2041_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2042_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__2042_rf64(_2042_rf64 ? _2042_rf64->raw() : nullptr,_2042_rf64 ? _2042_rf64->size(0) : 0);
  int32_t _2043_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _2044_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _2045_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _2046_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _2047_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int32_t _2048_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _2049_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _2050_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _2051_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _2052_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _2053_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _2054_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _10035_;
  for (int32_t _2056_i = (int)0, _10036_ = _2043_nd; _2056_i < _10036_ ; ++_2056_i)
  {
    _10035_.push_back(_ptr__2040_ri32[safe_add( _2048_shape_base,_2056_i )]);
  }
  auto _10037_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10035_.size()),_10035_.begin(),_10035_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2055_shape = _10037_;
  _checked_ptr_1<int32_t> _ptr__2055_shape(_2055_shape ? _2055_shape->raw() : nullptr,_2055_shape ? _2055_shape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::LinearDomain > _2057_dom = mosek::fusion::p_LinearDomain::_get_impl(_2038_dom_.get())->__mosek_2fusion_2LinearDomain__finalize_and_validate(_2055_shape);
  int64_t _2058_domsize = mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->domsize;
  std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2059_indexnames = mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->indexnames;
  std::shared_ptr< monty::ndarray< double,1 > > _2060_b;
  _checked_ptr_1<double> _ptr__2060_b(_2060_b ? _2060_b->raw() : nullptr,_2060_b ? _2060_b->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2061_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2058_domsize)));
  _checked_ptr_1<int32_t> _ptr__2061_nativeidxs(_2061_nativeidxs ? _2061_nativeidxs->raw() : nullptr,_2061_nativeidxs ? _2061_nativeidxs->size(0) : 0);
  int32_t _2062_conid = con_allocate(_2061_nativeidxs);
  putarows(_2061_nativeidxs,rs,_2044_nelem,_2045_nnz,_2049_ptr_base,_2050_nidxs_base,_2051_cof_base);
  {
    std::shared_ptr< monty::ndarray< int32_t,2 > > _2063_domsp = mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->sparsity;
    bool _2064_domempty = mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _2065_dombnd = mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->bnd;
    _checked_ptr_1<double> _ptr__2065_dombnd(_2065_dombnd ? _2065_dombnd->raw() : nullptr,_2065_dombnd ? _2065_dombnd->size(0) : 0);
    bool _2066_domscalable = mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->scalable;
    {
      if ((NULL == _2065_dombnd.get()))
      {
        {
          _2060_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_2061_nativeidxs)->size(0)))));
          _ptr__2060_b.update(_2060_b ? _2060_b->raw() : nullptr, _2060_b ? _2060_b->size(0) : 0);
        }
      }
      else if(_2066_domscalable)
      {
        {
          std::vector<double> _10038_;
          for (int32_t _2067_i = (int)0, _10039_ = (int)((_2061_nativeidxs)->size(0)); _2067_i < _10039_ ; ++_2067_i)
          {
            _10038_.push_back(_ptr__2065_dombnd[(int)0]);
          }
          auto _10040_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10038_.size()),_10038_.begin(),_10038_.end()));
          _2060_b = _10040_;
          _ptr__2060_b.update(_2060_b ? _2060_b->raw() : nullptr, _2060_b ? _2060_b->size(0) : 0);
        }
      }
      else if((NULL != _2063_domsp.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2068_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2043_nd)));
          _checked_ptr_1<int32_t> _ptr__2068_stride(_2068_stride ? _2068_stride->raw() : nullptr,_2068_stride ? _2068_stride->size(0) : 0);
          _ptr__2068_stride[(_2043_nd - (int)1)] = (int)1;
          int32_t _10041_ = (int)1;
          int32_t _10042_ = _2043_nd;
          for (int32_t _2069_i = _10041_; _2069_i < _10042_; ++_2069_i)
          {
            {
              _ptr__2068_stride[((_2043_nd - _2069_i) - (int)1)] = safe_mul( _ptr__2068_stride[(_2043_nd - _2069_i)],_ptr__2055_shape[(_2043_nd - _2069_i)] );
            }
          }
          _2060_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_2061_nativeidxs)->size(0)))));
          _ptr__2060_b.update(_2060_b ? _2060_b->raw() : nullptr, _2060_b ? _2060_b->size(0) : 0);
          int32_t _10043_ = (int)0;
          int32_t _10044_ = (int)((_2063_domsp)->size(0));
          for (int32_t _2070_i = _10043_; _2070_i < _10044_; ++_2070_i)
          {
            {
              int32_t _2071_idx = (int)0;
              int32_t _10045_ = (int)0;
              int32_t _10046_ = _2043_nd;
              for (int32_t _2072_j = _10045_; _2072_j < _10046_; ++_2072_j)
              {
                {
                  _2071_idx += safe_mul( _ptr__2068_stride[_2072_j],((*_2063_domsp)(_2070_i,_2072_j)) );
                }
              }
              _ptr__2060_b[_2071_idx] = _ptr__2065_dombnd[_2070_i];
            }
          }
        }
      }
      else if(_2064_domempty)
      {
        {
          _2060_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_2061_nativeidxs)->size(0)))));
          _ptr__2060_b.update(_2060_b ? _2060_b->raw() : nullptr, _2060_b ? _2060_b->size(0) : 0);
        }
      }
      else
      {
        {
          std::vector<double> _10047_;
          for (int32_t _2073_i = (int)0, _10048_ = (int)((_2061_nativeidxs)->size(0)); _2073_i < _10048_ ; ++_2073_i)
          {
            _10047_.push_back(_ptr__2065_dombnd[_2073_i]);
          }
          auto _10049_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10047_.size()),_10047_.begin(),_10047_.end()));
          _2060_b = _10049_;
          _ptr__2060_b.update(_2060_b ? _2060_b->raw() : nullptr, _2060_b ? _2060_b->size(0) : 0);
        }
      }
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_con_putboundlist_fr(_2061_nativeidxs);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_con_putboundlist_up(_2061_nativeidxs,_2060_b);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_con_putboundlist_lo(_2061_nativeidxs,_2060_b);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_con_putboundlist_fx(_2061_nativeidxs,_2060_b);
    }
  }
  {}
  if ((_2047_ncodeatom > (int)0))
  {
    {
      con_blocks->replace_row_code(rs,_2061_nativeidxs,_2049_ptr_base,_2050_nidxs_base,_2052_codeptr,_2053_code,_2054_cconst);
    }
  }
  {}
  if (((int)((_2036_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2074_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _2074_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_2036_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((int)((_2055_shape)->size(0)) > (int)0))
      {
        {
          _2074_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
        }
      }
      {}
      int32_t _10050_ = (int)1;
      int32_t _10051_ = (int)((_2055_shape)->size(0));
      for (int32_t _2075_i = _10050_; _2075_i < _10051_; ++_2075_i)
      {
        {
          _2074_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2075_i);
        }
      }
      _2074_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->indexnames.get()))
      {
        {
          task_format_con_names(_2061_nativeidxs,_2074_sb->toString(),_2055_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_LinearDomain::_get_impl(_2057_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_con_names(_2061_nativeidxs,_2074_sb->toString(),_2055_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2076_res = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_2036_name,_2062_conid,_2055_shape,_2061_nativeidxs,_2059_indexnames);
  ((*cons)(_2062_conid)) = (_2076_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_2036_name).size()) > (int)0))
  {
    {
      con_map->setItem(_2036_name,_2062_conid);
    }
  }
  {}
  return (_2076_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.getVersion
// Method mosek.fusion.Model.getVersion @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:698:6-700:7
std::string mosek::fusion::Model::getVersion
  ( ) { return mosek::fusion::p_Model::getVersion(); }
std::string mosek::fusion::p_Model::getVersion()
{
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
// End mosek.fusion.Model.getVersion

// Begin mosek.fusion.Model.hasParameter
// Method mosek.fusion.Model.hasParameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:693:6-93
bool mosek::fusion::Model :: hasParameter(const std::string & _2077_name) { return mosek::fusion::p_Model::_get_impl(this)->hasParameter(_2077_name); }
bool mosek::fusion::p_Model::hasParameter(const std::string & _2077_name)
{
  return par_map->hasItem(_2077_name);
}
// End mosek.fusion.Model.hasParameter

// Begin mosek.fusion.Model.hasConstraint
// Method mosek.fusion.Model.hasConstraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:692:6-93
bool mosek::fusion::Model :: hasConstraint(const std::string & _2078_name) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_2078_name); }
bool mosek::fusion::p_Model::hasConstraint(const std::string & _2078_name)
{
  return con_map->hasItem(_2078_name);
}
// End mosek.fusion.Model.hasConstraint

// Begin mosek.fusion.Model.hasVariable
// Method mosek.fusion.Model.hasVariable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:691:6-93
bool mosek::fusion::Model :: hasVariable(const std::string & _2079_name) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_2079_name); }
bool mosek::fusion::p_Model::hasVariable(const std::string & _2079_name)
{
  return var_map->hasItem(_2079_name);
}
// End mosek.fusion.Model.hasVariable

// Begin mosek.fusion.Model.getParameter
// Method mosek.fusion.Model.getParameter @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:689:6-149
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__getParameter(const std::string & _2080_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getParameter(_2080_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::getParameter(const std::string &  _2080_name) { return __mosek_2fusion_2Model__getParameter(_2080_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__getParameter(const std::string & _2080_name)
{
  monty::rc_ptr< ::mosek::fusion::Parameter > _10052_;
  bool _10053_ = par_map->hasItem(_2080_name);
  if (_10053_)
  {
    _10052_ = ((*parameters)(par_map->getItem(_2080_name)));
  }
  else
  {
    _10052_ = nullptr;
  }
  return _10052_;
}
// End mosek.fusion.Model.getParameter

// Begin mosek.fusion.Model.getConstraint
// Method mosek.fusion.Model.getConstraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:688:6-167
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int32_t _2081_index) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_2081_index); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int32_t _2081_index) { return __mosek_2fusion_2Model__getConstraint(_2081_index); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int32_t _2081_index)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _2082_res;
  if ((_2081_index >= (int)0))
  {
    {
      _2082_res = (((*cons)(_2081_index))).as<::mosek::fusion::Constraint>();
    }
  }
  else
  {
    {
      _2082_res = (((*acons)((-safe_add( (int)1,_2081_index ))))).as<::mosek::fusion::Constraint>();
    }
  }
  return _2082_res;
}
// End mosek.fusion.Model.getConstraint

// Begin mosek.fusion.Model.getConstraint
// Method mosek.fusion.Model.getConstraint @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:678:6-687:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _2083_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_2083_name); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _2083_name) { return __mosek_2fusion_2Model__getConstraint(_2083_name); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _2083_name)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _2084_retval = nullptr;
  if (con_map->hasItem(_2083_name))
  {
    {
      int32_t _2085_idx = con_map->getItem(_2083_name);
      if ((_2085_idx >= (int)0))
      {
        {
          _2084_retval = (((*cons)(_2085_idx))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          _2084_retval = (((*acons)((-safe_add( (int)1,_2085_idx ))))).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
  {}
  return _2084_retval;
}
// End mosek.fusion.Model.getConstraint

// Begin mosek.fusion.Model.getVariable
// Method mosek.fusion.Model.getVariable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:676:6-86
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int32_t _2086_index) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_2086_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int32_t _2086_index) { return __mosek_2fusion_2Model__getVariable(_2086_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int32_t _2086_index)
{
  return (((*vars)(_2086_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.getVariable

// Begin mosek.fusion.Model.getVariable
// Method mosek.fusion.Model.getVariable @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:665:6-675:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _2087_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_2087_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _2087_name) { return __mosek_2fusion_2Model__getVariable(_2087_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _2087_name)
{
  if (var_map->hasItem(_2087_name))
  {
    {
      int32_t _2088_varid = var_map->getItem(_2087_name);
      if ((_2088_varid < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _2088_varid,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_2088_varid))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
// End mosek.fusion.Model.getVariable

// Begin mosek.fusion.Model.getName
// Method mosek.fusion.Model.getName @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:663:6-67
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }
std::string mosek::fusion::p_Model::getName()
{
  return model_name;
}
// End mosek.fusion.Model.getName

// Begin mosek.fusion.Model.getParameterValue
// Method mosek.fusion.Model.getParameterValue @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:655:6-660:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getParameterValue(std::shared_ptr< monty::ndarray< int32_t,1 > > _2089_idxs)
{
  _checked_ptr_1<int32_t> _ptr__2089_idxs(_2089_idxs ? _2089_idxs->raw() : nullptr, _2089_idxs ? _2089_idxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2090_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_2089_idxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2090_res(_2090_res ? _2090_res->raw() : nullptr,_2090_res ? _2090_res->size(0) : 0);
  int32_t _10054_ = (int)0;
  int32_t _10055_ = (int)((_2089_idxs)->size(0));
  for (int32_t _2091_i = _10054_; _2091_i < _10055_; ++_2091_i)
  {
    {
      _ptr__2090_res[_2091_i] = ((*param_value)(_ptr__2089_idxs[_2091_i]));
    }
  }
  return _2090_res;
}
// End mosek.fusion.Model.getParameterValue

// Begin mosek.fusion.Model.setParameterValue
// Method mosek.fusion.Model.setParameterValue @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:650:6-653:7
void mosek::fusion::p_Model::setParameterValue(std::shared_ptr< monty::ndarray< int32_t,1 > > _2092_idxs,std::shared_ptr< monty::ndarray< double,1 > > _2093_vals)
{
  _checked_ptr_1<int32_t> _ptr__2092_idxs(_2092_idxs ? _2092_idxs->raw() : nullptr, _2092_idxs ? _2092_idxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__2093_vals(_2093_vals ? _2093_vals->raw() : nullptr, _2093_vals ? _2093_vals->size(0) : 0);
  int32_t _10056_ = (int)0;
  int32_t _10057_ = (int)((_2092_idxs)->size(0));
  for (int32_t _2094_i = _10056_; _2094_i < _10057_; ++_2094_i)
  {
    {
      ((*param_value)(_ptr__2092_idxs[_2094_i])) = _ptr__2093_vals[_2094_i];
    }
  }
}
// End mosek.fusion.Model.setParameterValue

// Begin mosek.fusion.Model.clone
// Method mosek.fusion.Model.clone @ bld/docker-rockylinux-8/final/default/src/fusion/Model.mbi:645:6-648:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone()
{
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
// End mosek.fusion.Model.clone

void mosek::fusion::p_Model::destroy()
{
  xs.reset();
  ws.reset();
  rs.reset();
  sol_itg.reset();
  sol_bas.reset();
  sol_itr.reset();
  con_map.reset();
  acons.reset();
  cons.reset();
  param_value.reset();
  par_map.reset();
  parameters.reset();
  initsol_xx_flag.reset();
  initsol_xx.reset();
  var_map.reset();
  barvars.reset();
  vars.reset();
  barvar_block_elm_j.reset();
  barvar_block_elm_i.reset();
  barvar_block_elm_barj.reset();
  barvar_block_elm_ptr.reset();
  barvar_block_dim.reset();
  barvar_block_ptr.reset();
  barvar_dim.reset();
  var_elm_acc_ofs.reset();
  var_elm_acc_idx.reset();
  var_block_acc_id.reset();
  var_block_map.reset();
  acon_elm_afe.reset();
  acon_elm_ofs.reset();
  acon_elm_scale.reset();
  acon_elm_accid.reset();
  acon_afe.reset();
  acon_acc.reset();
  acon_block_map.reset();
  acc_block_map.reset();
  obj_blocks.reset();
  afe_blocks.reset();
  con_blocks.reset();
}
void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }
// } class Model
// class BoundInterfaceVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:29:4-85:5
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }
mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable
  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.BoundInterfaceVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:41:6-50:7
mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2095_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2096_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2097_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2098_nativeidxs,
    bool _2099_islower)
{ return new mosek::fusion::BoundInterfaceVariable(_2095_m,_2096_shape,_2097_sparsity,_2098_nativeidxs,_2099_islower); }
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2095_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2096_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2097_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2098_nativeidxs,
    bool _2099_islower) : 
   BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this))
{ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_2095_m,_2096_shape,_2097_sparsity,_2098_nativeidxs,_2099_islower); }
void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2095_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2096_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2097_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2098_nativeidxs,
    bool _2099_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2096_shape(_2096_shape ? _2096_shape->raw() : nullptr, _2096_shape ? _2096_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2097_sparsity(_2097_sparsity ? _2097_sparsity->raw() : nullptr, _2097_sparsity ? _2097_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2098_nativeidxs(_2098_nativeidxs ? _2098_nativeidxs->raw() : nullptr, _2098_nativeidxs ? _2098_nativeidxs->size(0) : 0);
    mosek::fusion::p_SliceVariable::_initialize(_2095_m,_2096_shape,_2097_sparsity,_2098_nativeidxs);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _2099_islower;
  }
}
// mosek.fusion.BoundInterfaceVariable.ctor

// mosek.fusion.BoundInterfaceVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:33:6-39:7
mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2100_v,
    bool _2101_islower)
{ return new mosek::fusion::BoundInterfaceVariable(_2100_v,_2101_islower); }
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2100_v,
    bool _2101_islower) : 
   BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this))
{ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_2100_v,_2101_islower); }
void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2100_v,
    bool _2101_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_SliceVariable::_initialize(_2100_v);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _2101_islower;
  }
}
// mosek.fusion.BoundInterfaceVariable.ctor

// Begin mosek.fusion.BoundInterfaceVariable.dual
// Method mosek.fusion.BoundInterfaceVariable.dual @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:80:6-84:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceVariable :: dual() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceVariable::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2102_target = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2102_target(_2102_target ? _2102_target->raw() : nullptr,_2102_target ? _2102_target->size(0) : 0);
  dual_lu((int)0,_2102_target,islower);
  return _2102_target;
}
// End mosek.fusion.BoundInterfaceVariable.dual

// Begin mosek.fusion.BoundInterfaceVariable.transpose
// Method mosek.fusion.BoundInterfaceVariable.transpose @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:78:6-78
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__transpose() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
/* override: mosek.fusion.BaseVariable.transpose*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__transpose()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.transpose

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:77:6-112
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2103_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2104_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2105_i2) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_2103_i0,_2104_i1,_2105_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2103_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2104_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2105_i2) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2103_i0,_2104_i1,_2105_i2); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2103_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2104_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2105_i2) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2103_i0,_2104_i1,_2105_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2103_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2104_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2105_i2)
{
  _checked_ptr_1<int32_t> _ptr__2103_i0(_2103_i0 ? _2103_i0->raw() : nullptr, _2103_i0 ? _2103_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2104_i1(_2104_i1 ? _2104_i1->raw() : nullptr, _2104_i1 ? _2104_i1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2105_i2(_2105_i2 ? _2105_i2->raw() : nullptr, _2105_i2 ? _2105_i2->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_2103_i0,_2104_i1,_2105_i2))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:76:6-98
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2106_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2107_i1) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_2106_i0,_2107_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2106_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2107_i1) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2106_i0,_2107_i1); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2106_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2107_i1) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2106_i0,_2107_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2106_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2107_i1)
{
  _checked_ptr_1<int32_t> _ptr__2106_i0(_2106_i0 ? _2106_i0->raw() : nullptr, _2106_i0 ? _2106_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2107_i1(_2107_i1 ? _2107_i1->raw() : nullptr, _2107_i1 ? _2107_i1->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_2106_i0,_2107_i1))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:75:6-91
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2108_midxs) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_2108_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2108_midxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2108_midxs); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2108_midxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2108_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2108_midxs)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_2108_midxs))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:74:6-88
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2109_idxs) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_2109_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2109_idxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2109_idxs); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2109_idxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_2109_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2109_idxs)
{
  _checked_ptr_1<int32_t> _ptr__2109_idxs(_2109_idxs ? _2109_idxs->raw() : nullptr, _2109_idxs ? _2109_idxs->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_2109_idxs))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.antidiag
// Method mosek.fusion.BoundInterfaceVariable.antidiag @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:73:6-93
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag(int32_t _2110_index) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(_2110_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag(int32_t _2110_index) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_2110_index); }
/* override: mosek.fusion.BaseVariable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag(int32_t _2110_index) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_2110_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(int32_t _2110_index)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(_2110_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.antidiag

// Begin mosek.fusion.BoundInterfaceVariable.antidiag
// Method mosek.fusion.BoundInterfaceVariable.antidiag @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:72:6-76
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
/* override: mosek.fusion.BaseVariable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.antidiag

// Begin mosek.fusion.BoundInterfaceVariable.diag
// Method mosek.fusion.BoundInterfaceVariable.diag @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:71:6-88
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag(int32_t _2111_index) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(_2111_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag(int32_t _2111_index) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_2111_index); }
/* override: mosek.fusion.BaseVariable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag(int32_t _2111_index) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_2111_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(int32_t _2111_index)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(_2111_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.diag

// Begin mosek.fusion.BoundInterfaceVariable.diag
// Method mosek.fusion.BoundInterfaceVariable.diag @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:70:6-72
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
/* override: mosek.fusion.BaseVariable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.diag

// Begin mosek.fusion.BoundInterfaceVariable.slice
// Method mosek.fusion.BoundInterfaceVariable.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:69:6-113
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2112_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2113_lasta) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_2112_firsta,_2113_lasta); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2112_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2113_lasta) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2112_firsta,_2113_lasta); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2112_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2113_lasta) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2112_firsta,_2113_lasta); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2112_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2113_lasta)
{
  _checked_ptr_1<int32_t> _ptr__2112_firsta(_2112_firsta ? _2112_firsta->raw() : nullptr, _2112_firsta ? _2112_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2113_lasta(_2113_lasta ? _2113_lasta->raw() : nullptr, _2113_lasta ? _2113_lasta->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_2112_firsta,_2113_lasta))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.slice

// Begin mosek.fusion.BoundInterfaceVariable.slice
// Method mosek.fusion.BoundInterfaceVariable.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:68:6-105
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(int32_t _2114_first,int32_t _2115_last) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_2114_first,_2115_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(int32_t _2114_first,int32_t _2115_last) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2114_first,_2115_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2114_first,int32_t _2115_last) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2114_first,_2115_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(int32_t _2114_first,int32_t _2115_last)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_2114_first,_2115_last))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.slice

// Begin mosek.fusion.BoundInterfaceVariable.from_
// Method mosek.fusion.BoundInterfaceVariable.from_ @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceVariable.mbi:52:6-66:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__from_(monty::rc_ptr< ::mosek::fusion::Variable > _2116_v)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2117_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__2117_shape(_2117_shape ? _2117_shape->raw() : nullptr,_2117_shape ? _2117_shape->size(0) : 0);
  int32_t _2118_nnz = _2116_v->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2119_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2118_nnz)));
  _checked_ptr_1<int64_t> _ptr__2119_nativeidxs(_2119_nativeidxs ? _2119_nativeidxs->raw() : nullptr,_2119_nativeidxs ? _2119_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2120_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__2120_sparsity(_2120_sparsity ? _2120_sparsity->raw() : nullptr,_2120_sparsity ? _2120_sparsity->size(0) : 0);
  if ((_2116_v->getSize() == _2118_nnz))
  {
    {
      _2116_v->inst((int)0,_2119_nativeidxs);
    }
  }
  else
  {
    {
      _2120_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2118_nnz)));
      _ptr__2120_sparsity.update(_2120_sparsity ? _2120_sparsity->raw() : nullptr, _2120_sparsity ? _2120_sparsity->size(0) : 0);
      _2116_v->inst((int)0,_2120_sparsity,(int)0,_2119_nativeidxs);
    }
  }
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_2116_v->__mosek_2fusion_2Expression__getModel(),_2117_shape,_2120_sparsity,_2119_nativeidxs,islower);
}
// End mosek.fusion.BoundInterfaceVariable.from_

void mosek::fusion::p_BoundInterfaceVariable::destroy()
{
}
void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }
// } class BoundInterfaceVariable
// class SliceVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/SliceVariable.mbi:18:4-66:5
mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }
mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SliceVariable::p_SliceVariable
  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SliceVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SliceVariable.mbi:54:6-65:7
mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2121_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2122_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2123_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2124_nativeidxs)
{ return new mosek::fusion::SliceVariable(_2121_m,_2122_shape,_2123_sparsity,_2124_nativeidxs); }
mosek::fusion::SliceVariable::SliceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2121_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2122_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2123_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2124_nativeidxs) : 
   SliceVariable(new mosek::fusion::p_SliceVariable(this))
{ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_2121_m,_2122_shape,_2123_sparsity,_2124_nativeidxs); }
void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2121_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2122_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2123_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2124_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2122_shape(_2122_shape ? _2122_shape->raw() : nullptr, _2122_shape ? _2122_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2123_sparsity(_2123_sparsity ? _2123_sparsity->raw() : nullptr, _2123_sparsity ? _2123_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2124_nativeidxs(_2124_nativeidxs ? _2124_nativeidxs->raw() : nullptr, _2124_nativeidxs ? _2124_nativeidxs->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_2121_m,_2122_shape,_2123_sparsity,_2124_nativeidxs);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _2124_nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _2123_sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _2122_shape;
  }
}
// mosek.fusion.SliceVariable.ctor

// mosek.fusion.SliceVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SliceVariable.mbi:47:6-52:7
mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2125_v)
{ return new mosek::fusion::SliceVariable(_2125_v); }
mosek::fusion::SliceVariable::SliceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2125_v) : 
   SliceVariable(new mosek::fusion::p_SliceVariable(this))
{ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_2125_v); }
void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2125_v)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseVariable::_initialize(_2125_v,_2125_v->__mosek_2fusion_2BaseVariable__getModel());
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_SliceVariable::_get_impl(_2125_v)->nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = mosek::fusion::p_SliceVariable::_get_impl(_2125_v)->sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = mosek::fusion::p_SliceVariable::_get_impl(_2125_v)->shape;
  }
}
// mosek.fusion.SliceVariable.ctor

void mosek::fusion::p_SliceVariable::destroy()
{
  shape.reset();
  sparsity.reset();
  nativeidxs.reset();
}
void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }
// } class SliceVariable
// class RangedVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:15:4-103:5
mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }
mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_RangedVariable::p_RangedVariable
  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.RangedVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:53:6-61:7
mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable
  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2126_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2127_m)
{ return new mosek::fusion::RangedVariable(_2126_v,_2127_m); }
mosek::fusion::RangedVariable::RangedVariable
  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2126_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2127_m) : 
   RangedVariable(new mosek::fusion::p_RangedVariable(this))
{ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_2126_v,_2127_m); }
void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2126_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2127_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2126_v,_2127_m);
    name = mosek::fusion::p_RangedVariable::_get_impl(_2126_v)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_2126_v)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_2126_v)->sparsity;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_2126_v)->shape;
  }
}
// mosek.fusion.RangedVariable.ctor

// mosek.fusion.RangedVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:38:6-51:7
mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2128_model,
    const std::string &  _2129_name,
    int64_t _2130_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2131_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2132_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2133_nativeidxs)
{ return new mosek::fusion::RangedVariable(_2128_model,_2129_name,_2130_varid,_2131_shape,_2132_sparsity,_2133_nativeidxs); }
mosek::fusion::RangedVariable::RangedVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2128_model,
    const std::string &  _2129_name,
    int64_t _2130_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2131_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2132_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2133_nativeidxs) : 
   RangedVariable(new mosek::fusion::p_RangedVariable(this))
{ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_2128_model,_2129_name,_2130_varid,_2131_shape,_2132_sparsity,_2133_nativeidxs); }
void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2128_model,
    const std::string &  _2129_name,
    int64_t _2130_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2131_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2132_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2133_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2131_shape(_2131_shape ? _2131_shape->raw() : nullptr, _2131_shape ? _2131_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2132_sparsity(_2132_sparsity ? _2132_sparsity->raw() : nullptr, _2132_sparsity ? _2132_sparsity->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2133_nativeidxs(_2133_nativeidxs ? _2133_nativeidxs->raw() : nullptr, _2133_nativeidxs ? _2133_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2128_model,_2129_name,_2131_shape,_2130_varid,_2132_sparsity,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_2133_nativeidxs));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _2133_nativeidxs;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _2132_sparsity;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _2129_name;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _2131_shape;
  }
}
// mosek.fusion.RangedVariable.ctor

// Begin mosek.fusion.RangedVariable.elementDesc
// Method mosek.fusion.RangedVariable.elementDesc @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:97:6-102:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(int64_t _2134_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2135_sb) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_2134_index,_2135_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(int64_t _2134_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2135_sb) { return __mosek_2fusion_2RangedVariable__elementDesc(_2134_index,_2135_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(int64_t _2134_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2135_sb)
{
  _pubthis->elementName(_2134_index,_2135_sb);
  _2135_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _2135_sb;
}
// End mosek.fusion.RangedVariable.elementDesc

// Begin mosek.fusion.RangedVariable.dual_u
// Method mosek.fusion.RangedVariable.dual_u @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:88:6-93:7
void mosek::fusion::p_RangedVariable::dual_u(int32_t _2136_offset,std::shared_ptr< monty::ndarray< double,1 > > _2137_target)
{
  _checked_ptr_1<double> _ptr__2137_target(_2137_target ? _2137_target->raw() : nullptr, _2137_target ? _2137_target->size(0) : 0);
  dual_lu(_2136_offset,_2137_target,false);
}
// End mosek.fusion.RangedVariable.dual_u

// Begin mosek.fusion.RangedVariable.dual_l
// Method mosek.fusion.RangedVariable.dual_l @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:80:6-85:7
void mosek::fusion::p_RangedVariable::dual_l(int32_t _2138_offset,std::shared_ptr< monty::ndarray< double,1 > > _2139_target)
{
  _checked_ptr_1<double> _ptr__2139_target(_2139_target ? _2139_target->raw() : nullptr, _2139_target ? _2139_target->size(0) : 0);
  dual_lu(_2138_offset,_2139_target,true);
}
// End mosek.fusion.RangedVariable.dual_l

// Begin mosek.fusion.RangedVariable.upperBoundVar
// Method mosek.fusion.RangedVariable.upperBoundVar @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:76:6-78:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__upperBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::upperBoundVar() { return __mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__upperBoundVar()
{
  std::vector<int64_t> _10058_;
  for (int32_t _2140_i = (int)0, _10059_ = (int)((nativeidxs)->size(0)); _2140_i < _10059_ ; ++_2140_i)
  {
    _10058_.push_back(((*nativeidxs)(_2140_i)));
  }
  auto _10060_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10058_.size()),_10058_.begin(),_10058_.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_10060_,false);
}
// End mosek.fusion.RangedVariable.upperBoundVar

// Begin mosek.fusion.RangedVariable.lowerBoundVar
// Method mosek.fusion.RangedVariable.lowerBoundVar @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:70:6-72:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__lowerBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::lowerBoundVar() { return __mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__lowerBoundVar()
{
  std::vector<int64_t> _10061_;
  for (int32_t _2141_i = (int)0, _10062_ = (int)((nativeidxs)->size(0)); _2141_i < _10062_ ; ++_2141_i)
  {
    _10061_.push_back(((*nativeidxs)(_2141_i)));
  }
  auto _10063_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10061_.size()),_10061_.begin(),_10061_.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_10063_,true);
}
// End mosek.fusion.RangedVariable.lowerBoundVar

// Begin mosek.fusion.RangedVariable.clone
// Method mosek.fusion.RangedVariable.clone @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:63:6-65:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2142_m)
{
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_2142_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.RangedVariable.clone

// Begin mosek.fusion.RangedVariable.globalNativeIndexes
// Method mosek.fusion.RangedVariable.globalNativeIndexes @ bld/docker-rockylinux-8/final/default/src/fusion/RangedVariable.mbi:24:6-27:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2143_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2143_nativeidxs(_2143_nativeidxs ? _2143_nativeidxs->raw() : nullptr, _2143_nativeidxs ? _2143_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2144_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2143_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2144_r(_2144_r ? _2144_r->raw() : nullptr,_2144_r ? _2144_r->size(0) : 0);
  int32_t _10064_ = (int)0;
  int32_t _10065_ = (int)((_2143_nativeidxs)->size(0));
  for (int32_t _2145_i = _10064_; _2145_i < _10065_; ++_2145_i)
  {
    {
      _ptr__2144_r[_2145_i] = _ptr__2143_nativeidxs[_2145_i];
    }
  }
  return _2144_r;
}
// End mosek.fusion.RangedVariable.globalNativeIndexes

void mosek::fusion::p_RangedVariable::destroy()
{
  shape.reset();
  nativeidxs.reset();
  sparsity.reset();
}
void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }
// } class RangedVariable
// class LinearPSDVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDVariable.monty:8:4-71:5
mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }
mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable
  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearPSDVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDVariable.monty:35:6-43:7
mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2146_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2147_m)
{ return new mosek::fusion::LinearPSDVariable(_2146_v,_2147_m); }
mosek::fusion::LinearPSDVariable::LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2146_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2147_m) : 
   LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this))
{ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2146_v,_2147_m); }
void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2146_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2147_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2146_v,_2147_m);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_2146_v)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_2146_v)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_2146_v)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_2146_v)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_2146_v)->nativeidxs;
  }
}
// mosek.fusion.LinearPSDVariable.ctor

// mosek.fusion.LinearPSDVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDVariable.monty:19:6-33:7
mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2148_model,
    const std::string &  _2149_name,
    int32_t _2150_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2151_shape,
    int32_t _2152_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2153_nativeidxs)
{ return new mosek::fusion::LinearPSDVariable(_2148_model,_2149_name,_2150_varid,_2151_shape,_2152_conedim,_2153_nativeidxs); }
mosek::fusion::LinearPSDVariable::LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2148_model,
    const std::string &  _2149_name,
    int32_t _2150_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2151_shape,
    int32_t _2152_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2153_nativeidxs) : 
   LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this))
{ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2148_model,_2149_name,_2150_varid,_2151_shape,_2152_conedim,_2153_nativeidxs); }
void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2148_model,
    const std::string &  _2149_name,
    int32_t _2150_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2151_shape,
    int32_t _2152_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2153_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2151_shape(_2151_shape ? _2151_shape->raw() : nullptr, _2151_shape ? _2151_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2153_nativeidxs(_2153_nativeidxs ? _2153_nativeidxs->raw() : nullptr, _2153_nativeidxs ? _2153_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2148_model,_2149_name,_2151_shape,_2150_varid,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_2153_nativeidxs));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _2149_name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _2152_conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _2150_varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _2151_shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _2153_nativeidxs;
  }
}
// mosek.fusion.LinearPSDVariable.ctor

// Begin mosek.fusion.LinearPSDVariable.toString
// Method mosek.fusion.LinearPSDVariable.toString @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDVariable.monty:60:6-69:7
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearPSDVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2154_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2154_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2154_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2154_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _10066_ = (int)1;
  int32_t _10067_ = (int)((shape)->size(0));
  for (int32_t _2155_i = _10066_; _2155_i < _10067_; ++_2155_i)
  {
    {
      _2154_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2155_i)));
    }
  }
  _2154_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2154_sb->toString();
}
// End mosek.fusion.LinearPSDVariable.toString

// Begin mosek.fusion.LinearPSDVariable.make_continuous
// Method mosek.fusion.LinearPSDVariable.make_continuous @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDVariable.monty:56:6-58:7
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _2156_idxs) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_2156_idxs); }
void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _2156_idxs)
{
  _checked_ptr_1<int64_t> _ptr__2156_idxs(_2156_idxs ? _2156_idxs->raw() : nullptr, _2156_idxs ? _2156_idxs->size(0) : 0);
}
// End mosek.fusion.LinearPSDVariable.make_continuous

// Begin mosek.fusion.LinearPSDVariable.make_integer
// Method mosek.fusion.LinearPSDVariable.make_integer @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDVariable.monty:51:6-54:7
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _2157_idxs) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_2157_idxs); }
void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _2157_idxs)
{
  _checked_ptr_1<int64_t> _ptr__2157_idxs(_2157_idxs ? _2157_idxs->raw() : nullptr, _2157_idxs ? _2157_idxs->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
// End mosek.fusion.LinearPSDVariable.make_integer

// Begin mosek.fusion.LinearPSDVariable.clone
// Method mosek.fusion.LinearPSDVariable.clone @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDVariable.monty:45:6-48:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2158_m)
{
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_2158_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.LinearPSDVariable.clone

// Begin mosek.fusion.LinearPSDVariable.globalNativeIndexes
// Method mosek.fusion.LinearPSDVariable.globalNativeIndexes @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDVariable.monty:17:6-147
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int64_t,1 > > _2159_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2159_nativeidxs(_2159_nativeidxs ? _2159_nativeidxs->raw() : nullptr, _2159_nativeidxs ? _2159_nativeidxs->size(0) : 0);
  std::vector<int64_t> _10068_;
  for (int32_t _2160_i = (int)0, _10069_ = (int)((_2159_nativeidxs)->size(0)); _2160_i < _10069_ ; ++_2160_i)
  {
    _10068_.push_back((-safe_add( _ptr__2159_nativeidxs[_2160_i],(int)1 )));
  }
  auto _10070_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10068_.size()),_10068_.begin(),_10068_.end()));
  return _10070_;
}
// End mosek.fusion.LinearPSDVariable.globalNativeIndexes

void mosek::fusion::p_LinearPSDVariable::destroy()
{
  shape.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }
// } class LinearPSDVariable
// class PSDVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteVariable.mbi:8:4-126:5
mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }
mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_PSDVariable::p_PSDVariable
  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.PSDVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteVariable.mbi:86:6-98:7
mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable
  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2161_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2162_m)
{ return new mosek::fusion::PSDVariable(_2161_v,_2162_m); }
mosek::fusion::PSDVariable::PSDVariable
  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2161_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2162_m) : 
   PSDVariable(new mosek::fusion::p_PSDVariable(this))
{ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2161_v,_2162_m); }
void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2161_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2162_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2161_v,_2162_m);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_2161_v)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_2161_v)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_2161_v)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_2161_v)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_2161_v)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_2161_v)->conedim2;
    model = _2162_m;
    barvaridxs = mosek::fusion::p_PSDVariable::_get_impl(_2161_v)->barvaridxs;
  }
}
// mosek.fusion.PSDVariable.ctor

// mosek.fusion.PSDVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteVariable.mbi:64:6-84:7
mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2163_model,
    const std::string &  _2164_name,
    int32_t _2165_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2166_shape,
    int32_t _2167_conedim1,
    int32_t _2168_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2169_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2170_nativeidxs)
{ return new mosek::fusion::PSDVariable(_2163_model,_2164_name,_2165_varid,_2166_shape,_2167_conedim1,_2168_conedim2,_2169_barvaridxs,_2170_nativeidxs); }
mosek::fusion::PSDVariable::PSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2163_model,
    const std::string &  _2164_name,
    int32_t _2165_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2166_shape,
    int32_t _2167_conedim1,
    int32_t _2168_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2169_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2170_nativeidxs) : 
   PSDVariable(new mosek::fusion::p_PSDVariable(this))
{ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2163_model,_2164_name,_2165_varid,_2166_shape,_2167_conedim1,_2168_conedim2,_2169_barvaridxs,_2170_nativeidxs); }
void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2163_model,
    const std::string &  _2164_name,
    int32_t _2165_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2166_shape,
    int32_t _2167_conedim1,
    int32_t _2168_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2169_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2170_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2166_shape(_2166_shape ? _2166_shape->raw() : nullptr, _2166_shape ? _2166_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2169_barvaridxs(_2169_barvaridxs ? _2169_barvaridxs->raw() : nullptr, _2169_barvaridxs ? _2169_barvaridxs->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2170_nativeidxs(_2170_nativeidxs ? _2170_nativeidxs->raw() : nullptr, _2170_nativeidxs ? _2170_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2163_model,_2164_name,_2166_shape,_2165_varid,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_2166_shape,_2167_conedim1,_2168_conedim2,_2170_nativeidxs));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _2165_varid;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _2170_nativeidxs;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _2164_name;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _2166_shape;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _2167_conedim1;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _2168_conedim2;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->model = _2163_model;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->barvaridxs = _2169_barvaridxs;
  }
}
// mosek.fusion.PSDVariable.ctor

// Begin mosek.fusion.PSDVariable.toString
// Method mosek.fusion.PSDVariable.toString @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteVariable.mbi:115:6-124:7
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_PSDVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2171_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2171_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2171_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2171_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _10071_ = (int)1;
  int32_t _10072_ = (int)((shape)->size(0));
  for (int32_t _2172_i = _10071_; _2172_i < _10072_; ++_2172_i)
  {
    {
      _2171_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2172_i)));
    }
  }
  _2171_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2171_sb->toString();
}
// End mosek.fusion.PSDVariable.toString

// Begin mosek.fusion.PSDVariable.elementDesc
// Method mosek.fusion.PSDVariable.elementDesc @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteVariable.mbi:107:6-112:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(int64_t _2173_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2174_sb) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_2173_index,_2174_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(int64_t _2173_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2174_sb) { return __mosek_2fusion_2PSDVariable__elementDesc(_2173_index,_2174_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(int64_t _2173_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2174_sb)
{
  _pubthis->elementName(_2173_index,_2174_sb);
  _2174_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _2174_sb;
}
// End mosek.fusion.PSDVariable.elementDesc

// Begin mosek.fusion.PSDVariable.clone
// Method mosek.fusion.PSDVariable.clone @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteVariable.mbi:100:6-103:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2175_m)
{
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_2175_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.PSDVariable.clone

// Begin mosek.fusion.PSDVariable.fullnativeidxs
// Method mosek.fusion.PSDVariable.fullnativeidxs @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteVariable.mbi:21:6-57:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int32_t,1 > > _2176_shape,int32_t _2177_conedim1,int32_t _2178_conedim2,std::shared_ptr< monty::ndarray< int64_t,1 > > _2179_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2176_shape(_2176_shape ? _2176_shape->raw() : nullptr, _2176_shape ? _2176_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2179_nativeidxs(_2179_nativeidxs ? _2179_nativeidxs->raw() : nullptr, _2179_nativeidxs ? _2179_nativeidxs->size(0) : 0);
  int32_t _2180_nd = (int)((_2176_shape)->size(0));
  bool _2181_tril = (_2177_conedim1 < _2178_conedim2);
  int32_t _10073_;
  bool _10074_ = _2181_tril;
  if (_10074_)
  {
    _10073_ = _2177_conedim1;
  }
  else
  {
    _10073_ = _2178_conedim2;
  }
  int32_t _2182_cd1 = _10073_;
  int32_t _10075_;
  bool _10076_ = (!_2181_tril);
  if (_10076_)
  {
    _10075_ = _2177_conedim1;
  }
  else
  {
    _10075_ = _2178_conedim2;
  }
  int32_t _2183_cd2 = _10075_;
  int32_t _2184_d0 = (int)1;
  int32_t _10077_ = (int)0;
  int32_t _10078_ = _2182_cd1;
  for (int32_t _2185_i = _10077_; _2185_i < _10078_; ++_2185_i)
  {
    {
      _2184_d0 *= _ptr__2176_shape[_2185_i];
    }
  }
  int32_t _2186_d1 = _ptr__2176_shape[_2182_cd1];
  int32_t _2187_d2 = (int)1;
  int32_t _10079_ = safe_add( _2182_cd1,(int)1 );
  int32_t _10080_ = _2183_cd2;
  for (int32_t _2188_i = _10079_; _2188_i < _10080_; ++_2188_i)
  {
    {
      _2187_d2 *= _ptr__2176_shape[_2188_i];
    }
  }
  int32_t _2189_d3 = _ptr__2176_shape[_2183_cd2];
  int32_t _2190_d4 = (int)1;
  int32_t _10081_ = safe_add( _2183_cd2,(int)1 );
  int32_t _10082_ = _2180_nd;
  for (int32_t _2191_i = _10081_; _2191_i < _10082_; ++_2191_i)
  {
    {
      _2190_d4 *= _ptr__2176_shape[_2191_i];
    }
  }
  int32_t _2192_size = safe_mul( safe_mul( safe_mul( safe_mul( _2184_d0,_2186_d1 ),_2187_d2 ),_2189_d3 ),_2190_d4 );
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2193_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2192_size)));
  _checked_ptr_1<int64_t> _ptr__2193_residxs(_2193_residxs ? _2193_residxs->raw() : nullptr,_2193_residxs ? _2193_residxs->size(0) : 0);
  int32_t _2194_s3 = _2190_d4;
  int32_t _2195_s2 = safe_mul( _2194_s3,_2189_d3 );
  int32_t _2196_s1 = safe_mul( _2195_s2,_2187_d2 );
  int32_t _2197_s0 = safe_mul( _2196_s1,_2196_s1 );
  {
    int32_t _2198_k = (int)0;
    int32_t _10083_ = (int)0;
    int32_t _10084_ = _2184_d0;
    for (int32_t _2199_i0 = _10083_; _2199_i0 < _10084_; ++_2199_i0)
    {
      {
        int32_t _10085_ = (int)0;
        int32_t _10086_ = _2189_d3;
        for (int32_t _2200_i3 = _10085_; _2200_i3 < _10086_; ++_2200_i3)
        {
          {
            int32_t _10087_ = (int)0;
            int32_t _10088_ = _2187_d2;
            for (int32_t _2201_i2 = _10087_; _2201_i2 < _10088_; ++_2201_i2)
            {
              {
                int32_t _10089_ = _2200_i3;
                int32_t _10090_ = _2186_d1;
                for (int32_t _2202_i1 = _10089_; _2202_i1 < _10090_; ++_2202_i1)
                {
                  {
                    int32_t _10091_ = (int)0;
                    int32_t _10092_ = _2190_d4;
                    for (int32_t _2203_i4 = _10091_; _2203_i4 < _10092_; ++_2203_i4)
                    {
                      {
                        _ptr__2193_residxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2199_i0,_2197_s0 ),safe_mul( _2202_i1,_2196_s1 ) ),safe_mul( _2201_i2,_2195_s2 ) ),safe_mul( _2200_i3,_2194_s3 ) ),_2203_i4 )] = (-safe_add( _ptr__2179_nativeidxs[_2198_k],(int)1 ));
                        _ptr__2193_residxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2199_i0,_2197_s0 ),safe_mul( _2200_i3,_2196_s1 ) ),safe_mul( _2201_i2,_2195_s2 ) ),safe_mul( _2202_i1,_2194_s3 ) ),_2203_i4 )] = (-safe_add( _ptr__2179_nativeidxs[_2198_k],(int)1 ));
                        ++ _2198_k;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2193_residxs;
}
// End mosek.fusion.PSDVariable.fullnativeidxs

void mosek::fusion::p_PSDVariable::destroy()
{
  model.reset();
  barvaridxs.reset();
  shape.reset();
  nativeidxs.reset();
}
void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }
// } class PSDVariable
// class LinearVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/LinearVariable.mbi:21:4-81:5
mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }
mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearVariable::p_LinearVariable
  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinearVariable.mbi:51:6-59:7
mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable
  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2204_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2205_m)
{ return new mosek::fusion::LinearVariable(_2204_v,_2205_m); }
mosek::fusion::LinearVariable::LinearVariable
  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2204_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2205_m) : 
   LinearVariable(new mosek::fusion::p_LinearVariable(this))
{ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2204_v,_2205_m); }
void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2204_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2205_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2204_v,_2205_m);
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_2204_v)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_2204_v)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_2204_v)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_2204_v)->name;
  }
}
// mosek.fusion.LinearVariable.ctor

// mosek.fusion.LinearVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinearVariable.mbi:35:6-49:7
mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2206_model,
    const std::string &  _2207_name,
    int64_t _2208_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2209_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2210_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2211_nativeidxs)
{ return new mosek::fusion::LinearVariable(_2206_model,_2207_name,_2208_varid,_2209_shape,_2210_sparsity,_2211_nativeidxs); }
mosek::fusion::LinearVariable::LinearVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2206_model,
    const std::string &  _2207_name,
    int64_t _2208_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2209_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2210_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2211_nativeidxs) : 
   LinearVariable(new mosek::fusion::p_LinearVariable(this))
{ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2206_model,_2207_name,_2208_varid,_2209_shape,_2210_sparsity,_2211_nativeidxs); }
void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2206_model,
    const std::string &  _2207_name,
    int64_t _2208_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2209_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2210_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2211_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2209_shape(_2209_shape ? _2209_shape->raw() : nullptr, _2209_shape ? _2209_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2210_sparsity(_2210_sparsity ? _2210_sparsity->raw() : nullptr, _2210_sparsity ? _2210_sparsity->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2211_nativeidxs(_2211_nativeidxs ? _2211_nativeidxs->raw() : nullptr, _2211_nativeidxs ? _2211_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2206_model,_2207_name,_2209_shape,_2208_varid,_2210_sparsity,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_2211_nativeidxs));
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _2207_name;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _2211_nativeidxs;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _2210_sparsity;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _2209_shape;
  }
}
// mosek.fusion.LinearVariable.ctor

// Begin mosek.fusion.LinearVariable.toString
// Method mosek.fusion.LinearVariable.toString @ bld/docker-rockylinux-8/final/default/src/fusion/LinearVariable.mbi:65:6-79:7
std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2212_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2212_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _2212_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _10093_ = (int)1;
      int32_t _10094_ = (int)((shape)->size(0));
      for (int32_t _2213_i = _10093_; _2213_i < _10094_; ++_2213_i)
      {
        {
          _2212_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2213_i)));
        }
      }
    }
  }
  {}
  _2212_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sparsity.get()))
  {
    {
      _2212_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _2212_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2212_sb->toString();
}
// End mosek.fusion.LinearVariable.toString

// Begin mosek.fusion.LinearVariable.clone
// Method mosek.fusion.LinearVariable.clone @ bld/docker-rockylinux-8/final/default/src/fusion/LinearVariable.mbi:61:6-63:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2214_m)
{
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_2214_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.LinearVariable.clone

// Begin mosek.fusion.LinearVariable.globalNativeIndexes
// Method mosek.fusion.LinearVariable.globalNativeIndexes @ bld/docker-rockylinux-8/final/default/src/fusion/LinearVariable.mbi:30:6-33:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2215_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2215_nativeidxs(_2215_nativeidxs ? _2215_nativeidxs->raw() : nullptr, _2215_nativeidxs ? _2215_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2216_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2215_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2216_r(_2216_r ? _2216_r->raw() : nullptr,_2216_r ? _2216_r->size(0) : 0);
  int32_t _10095_ = (int)0;
  int32_t _10096_ = (int)((_2215_nativeidxs)->size(0));
  for (int32_t _2217_i = _10095_; _2217_i < _10096_; ++_2217_i)
  {
    {
      _ptr__2216_r[_2217_i] = _ptr__2215_nativeidxs[_2217_i];
    }
  }
  return _2216_r;
}
// End mosek.fusion.LinearVariable.globalNativeIndexes

void mosek::fusion::p_LinearVariable::destroy()
{
  shape.reset();
  sparsity.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }
// } class LinearVariable
// class ConicVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/ConicVariable.mbi:23:4-79:5
mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }
mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ConicVariable::p_ConicVariable
  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ConicVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ConicVariable.mbi:53:6-61:7
mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable
  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2218_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2219_m)
{ return new mosek::fusion::ConicVariable(_2218_v,_2219_m); }
mosek::fusion::ConicVariable::ConicVariable
  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2218_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2219_m) : 
   ConicVariable(new mosek::fusion::p_ConicVariable(this))
{ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2218_v,_2219_m); }
void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2218_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2219_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2218_v,_2219_m);
    shape = mosek::fusion::p_ConicVariable::_get_impl(_2218_v)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_2218_v)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_2218_v)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_2218_v)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_2218_v)->name;
  }
}
// mosek.fusion.ConicVariable.ctor

// mosek.fusion.ConicVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ConicVariable.mbi:39:6-51:7
mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2220_model,
    const std::string &  _2221_name,
    int32_t _2222_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2223_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2224_nativeidxs)
{ return new mosek::fusion::ConicVariable(_2220_model,_2221_name,_2222_varid,_2223_shape,_2224_nativeidxs); }
mosek::fusion::ConicVariable::ConicVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2220_model,
    const std::string &  _2221_name,
    int32_t _2222_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2223_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2224_nativeidxs) : 
   ConicVariable(new mosek::fusion::p_ConicVariable(this))
{ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2220_model,_2221_name,_2222_varid,_2223_shape,_2224_nativeidxs); }
void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2220_model,
    const std::string &  _2221_name,
    int32_t _2222_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2223_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2224_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2223_shape(_2223_shape ? _2223_shape->raw() : nullptr, _2223_shape ? _2223_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2224_nativeidxs(_2224_nativeidxs ? _2224_nativeidxs->raw() : nullptr, _2224_nativeidxs ? _2224_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2220_model,_2221_name,_2223_shape,_2222_varid,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_2224_nativeidxs));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _2221_name;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _2222_varid;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _2223_shape;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _2224_nativeidxs;
  }
}
// mosek.fusion.ConicVariable.ctor

// Begin mosek.fusion.ConicVariable.toString
// Method mosek.fusion.ConicVariable.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ConicVariable.mbi:68:6-78:7
std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ConicVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2225_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2225_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2225_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2225_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _2225_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _10097_ = (int)1;
  int32_t _10098_ = (int)((shape)->size(0));
  for (int32_t _2226_i = _10097_; _2226_i < _10098_; ++_2226_i)
  {
    {
      _2225_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2226_i)));
    }
  }
  _2225_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _2225_sb->toString();
}
// End mosek.fusion.ConicVariable.toString

// Begin mosek.fusion.ConicVariable.clone
// Method mosek.fusion.ConicVariable.clone @ bld/docker-rockylinux-8/final/default/src/fusion/ConicVariable.mbi:63:6-66:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2227_m)
{
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_2227_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.ConicVariable.clone

// Begin mosek.fusion.ConicVariable.globalNativeIndexes
// Method mosek.fusion.ConicVariable.globalNativeIndexes @ bld/docker-rockylinux-8/final/default/src/fusion/ConicVariable.mbi:34:6-37:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2228_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2228_nativeidxs(_2228_nativeidxs ? _2228_nativeidxs->raw() : nullptr, _2228_nativeidxs ? _2228_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2229_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2228_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2229_r(_2229_r ? _2229_r->raw() : nullptr,_2229_r ? _2229_r->size(0) : 0);
  int32_t _10099_ = (int)0;
  int32_t _10100_ = (int)((_2228_nativeidxs)->size(0));
  for (int32_t _2230_i = _10099_; _2230_i < _10100_; ++_2230_i)
  {
    {
      _ptr__2229_r[_2230_i] = _ptr__2228_nativeidxs[_2230_i];
    }
  }
  return _2229_r;
}
// End mosek.fusion.ConicVariable.globalNativeIndexes

void mosek::fusion::p_ConicVariable::destroy()
{
  nativeidxs.reset();
  shape.reset();
}
void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }
// } class ConicVariable
// class ModelVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/ModelVariable.mbi:14:4-90:5
mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }
mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ModelVariable::p_ModelVariable
  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ModelVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ModelVariable.mbi:62:6-72:7
void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _2231_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2232_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseVariable::_initialize(_2231_v,_2232_m);
    name = mosek::fusion::p_ModelVariable::_get_impl(_2231_v)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_2231_v)->varid;
    modelvar_nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_2231_v)->modelvar_nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_2231_v)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_2231_v)->sparsity;
  }
}
// mosek.fusion.ModelVariable.ctor

// mosek.fusion.ModelVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ModelVariable.mbi:44:6-58:7
void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2233_model,
    const std::string &  _2234_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2235_shape,
    int64_t _2236_varid,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2237_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2238_modelvar_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2235_shape(_2235_shape ? _2235_shape->raw() : nullptr, _2235_shape ? _2235_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2237_sparsity(_2237_sparsity ? _2237_sparsity->raw() : nullptr, _2237_sparsity ? _2237_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2238_modelvar_nativeidxs(_2238_modelvar_nativeidxs ? _2238_modelvar_nativeidxs->raw() : nullptr, _2238_modelvar_nativeidxs ? _2238_modelvar_nativeidxs->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_2233_model,_2235_shape,_2237_sparsity,_2238_modelvar_nativeidxs);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _2234_name;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _2236_varid;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _2235_shape;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _2237_sparsity;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->modelvar_nativeidxs = _2238_modelvar_nativeidxs;
  }
}
// mosek.fusion.ModelVariable.ctor

// Begin mosek.fusion.ModelVariable.elementName
// Method mosek.fusion.ModelVariable.elementName @ bld/docker-rockylinux-8/final/default/src/fusion/ModelVariable.mbi:84:6-88:7
void mosek::fusion::ModelVariable :: elementName(int64_t _2239_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2240_sb) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_2239_index,_2240_sb); }
void mosek::fusion::p_ModelVariable::elementName(int64_t _2239_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2240_sb)
{
  std::string _10101_;
  bool _10102_ = ((int)((name).size()) == (int)0);
  if (_10102_)
  {
    _10101_ = std::string ("_");
  }
  else
  {
    _10101_ = name;
  }
  _2240_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_10101_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_2239_index))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
// End mosek.fusion.ModelVariable.elementName

// Begin mosek.fusion.ModelVariable.remove
// Method mosek.fusion.ModelVariable.remove @ bld/docker-rockylinux-8/final/default/src/fusion/ModelVariable.mbi:78:6-80:7
void mosek::fusion::ModelVariable :: remove() { mosek::fusion::p_ModelVariable::_get_impl(this)->remove(); }
void mosek::fusion::p_ModelVariable::remove()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->removeVariableBlock(varid);
}
// End mosek.fusion.ModelVariable.remove

// Begin mosek.fusion.ModelVariable.clone
// End mosek.fusion.ModelVariable.clone

void mosek::fusion::p_ModelVariable::destroy()
{
  sparsity.reset();
  shape.reset();
  modelvar_nativeidxs.reset();
}
void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }
// } class ModelVariable
// class NilVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1000:4-1085:5
mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }
mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_NilVariable::p_NilVariable
  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.NilVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1007:6-1011:7
mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2242_shape)
{ return new mosek::fusion::NilVariable(_2242_shape); }
mosek::fusion::NilVariable::NilVariable
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2242_shape) : 
   NilVariable(new mosek::fusion::p_NilVariable(this))
{ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_2242_shape); }
void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2242_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2242_shape(_2242_shape ? _2242_shape->raw() : nullptr, _2242_shape ? _2242_shape->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_2242_shape),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))));
    std::vector<int32_t> _10103_;
    for (int32_t _2243_i = (int)0, _10104_ = (int)((_2242_shape)->size(0)); _2243_i < _10104_ ; ++_2243_i)
    {
      _10103_.push_back(_ptr__2242_shape[_2243_i]);
    }
    auto _10105_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10103_.size()),_10103_.begin(),_10103_.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _10105_;
  }
}
// mosek.fusion.NilVariable.ctor

// mosek.fusion.NilVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1005:6-45
mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable
  ()
{ return new mosek::fusion::NilVariable(); }
mosek::fusion::NilVariable::NilVariable
  () : 
   NilVariable(new mosek::fusion::p_NilVariable(this))
{ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }
void mosek::fusion::p_NilVariable::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
  }
}
// mosek.fusion.NilVariable.ctor

// Begin mosek.fusion.NilVariable.elementDesc
// Method mosek.fusion.NilVariable.elementDesc @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1083:6-102
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(int64_t _2244_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2245_sb) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_2244_index,_2245_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(int64_t _2244_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2245_sb) { return __mosek_2fusion_2NilVariable__elementDesc(_2244_index,_2245_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(int64_t _2244_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2245_sb)
{
  return _2245_sb;
}
// End mosek.fusion.NilVariable.elementDesc

// Begin mosek.fusion.NilVariable.elementName
// Method mosek.fusion.NilVariable.elementName @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1082:6-76
void mosek::fusion::NilVariable :: elementName(int64_t _2246_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2247_sb) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_2246_index,_2247_sb); }
void mosek::fusion::p_NilVariable::elementName(int64_t _2246_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2247_sb)
{
}
// End mosek.fusion.NilVariable.elementName

// Begin mosek.fusion.NilVariable.numInst
// Method mosek.fusion.NilVariable.numInst @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1078:6-1080:7
int32_t mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }
int32_t mosek::fusion::p_NilVariable::numInst()
{
  return (int)0;
}
// End mosek.fusion.NilVariable.numInst

// Begin mosek.fusion.NilVariable.inst
// Method mosek.fusion.NilVariable.inst @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1070:6-1076:7
int32_t mosek::fusion::NilVariable :: inst(int32_t _2248_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2249_sparsity,std::shared_ptr< monty::ndarray< int64_t,1 > > _2250_basevar_nativeidxs) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2248_offset,_2249_sparsity,_2250_basevar_nativeidxs); }
int32_t mosek::fusion::p_NilVariable::inst(int32_t _2248_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2249_sparsity,std::shared_ptr< monty::ndarray< int64_t,1 > > _2250_basevar_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2249_sparsity(_2249_sparsity ? _2249_sparsity->raw() : nullptr, _2249_sparsity ? _2249_sparsity->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2250_basevar_nativeidxs(_2250_basevar_nativeidxs ? _2250_basevar_nativeidxs->raw() : nullptr, _2250_basevar_nativeidxs ? _2250_basevar_nativeidxs->size(0) : 0);
  return (int)0;
}
// End mosek.fusion.NilVariable.inst

// Begin mosek.fusion.NilVariable.inst
// Method mosek.fusion.NilVariable.inst @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1065:6-1068:8
void mosek::fusion::NilVariable :: inst(int32_t _2251_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2252_nindex) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2251_offset,_2252_nindex); }
void mosek::fusion::p_NilVariable::inst(int32_t _2251_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2252_nindex)
{
  _checked_ptr_1<int64_t> _ptr__2252_nindex(_2252_nindex ? _2252_nindex->raw() : nullptr, _2252_nindex ? _2252_nindex->size(0) : 0);
}
// End mosek.fusion.NilVariable.inst

// Begin mosek.fusion.NilVariable.set_values
// Method mosek.fusion.NilVariable.set_values @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1060:6-1063:8
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2253_target,bool _2254_primal) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2253_target,_2254_primal); }
void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2253_target,bool _2254_primal)
{
  _checked_ptr_1<double> _ptr__2253_target(_2253_target ? _2253_target->raw() : nullptr, _2253_target ? _2253_target->size(0) : 0);
}
// End mosek.fusion.NilVariable.set_values

// Begin mosek.fusion.NilVariable.values
// Method mosek.fusion.NilVariable.values @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1054:6-1058:8
void mosek::fusion::NilVariable :: values(int32_t _2255_offset,std::shared_ptr< monty::ndarray< double,1 > > _2256_target,bool _2257_primal) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2255_offset,_2256_target,_2257_primal); }
void mosek::fusion::p_NilVariable::values(int32_t _2255_offset,std::shared_ptr< monty::ndarray< double,1 > > _2256_target,bool _2257_primal)
{
  _checked_ptr_1<double> _ptr__2256_target(_2256_target ? _2256_target->raw() : nullptr, _2256_target ? _2256_target->size(0) : 0);
}
// End mosek.fusion.NilVariable.values

// Begin mosek.fusion.NilVariable.make_continuous
// Method mosek.fusion.NilVariable.make_continuous @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1052:6-40
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }
void mosek::fusion::p_NilVariable::make_continuous()
{
}
// End mosek.fusion.NilVariable.make_continuous

// Begin mosek.fusion.NilVariable.make_integer
// Method mosek.fusion.NilVariable.make_integer @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1051:6-37
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }
void mosek::fusion::p_NilVariable::make_integer()
{
}
// End mosek.fusion.NilVariable.make_integer

// Begin mosek.fusion.NilVariable.toString
// Method mosek.fusion.NilVariable.toString @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1049:6-63
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_NilVariable::toString()
{
  return std::string ("NilVariable");
}
// End mosek.fusion.NilVariable.toString

// Begin mosek.fusion.NilVariable.index
// Method mosek.fusion.NilVariable.index @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1043:6-1047:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2258_first) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_2258_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2258_first) { return __mosek_2fusion_2NilVariable__index(_2258_first); }
/* override: mosek.fusion.BaseVariable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2258_first) { return __mosek_2fusion_2NilVariable__index(_2258_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2258_first)
{
  _checked_ptr_1<int32_t> _ptr__2258_first(_2258_first ? _2258_first->raw() : nullptr, _2258_first ? _2258_first->size(0) : 0);
  std::vector<int32_t> _10106_;
  for (int32_t _2259_i = (int)0, _10107_ = (int)((shape)->size(0)); _2259_i < _10107_ ; ++_2259_i)
  {
    _10106_.push_back((int)1);
  }
  auto _10108_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10106_.size()),_10106_.begin(),_10106_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_10108_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.index

// Begin mosek.fusion.NilVariable.index
// Method mosek.fusion.NilVariable.index @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1037:6-1041:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int32_t _2260_first) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_2260_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int32_t _2260_first) { return __mosek_2fusion_2NilVariable__index(_2260_first); }
/* override: mosek.fusion.BaseVariable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2260_first) { return __mosek_2fusion_2NilVariable__index(_2260_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int32_t _2260_first)
{
  std::vector<int32_t> _10109_;
  for (int32_t _2261_i = (int)0, _10110_ = (int)((shape)->size(0)); _2261_i < _10110_ ; ++_2261_i)
  {
    _10109_.push_back((int)1);
  }
  auto _10111_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10109_.size()),_10109_.begin(),_10109_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_10111_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.index

// Begin mosek.fusion.NilVariable.slice
// Method mosek.fusion.NilVariable.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1025:6-1035:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2262_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2263_last) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_2262_first,_2263_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2262_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2263_last) { return __mosek_2fusion_2NilVariable__slice(_2262_first,_2263_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2262_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2263_last) { return __mosek_2fusion_2NilVariable__slice(_2262_first,_2263_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2262_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2263_last)
{
  _checked_ptr_1<int32_t> _ptr__2262_first(_2262_first ? _2262_first->raw() : nullptr, _2262_first ? _2262_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2263_last(_2263_last ? _2263_last->raw() : nullptr, _2263_last ? _2263_last->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_2262_first)->size(0))) || ((int)((shape)->size(0)) != (int)((_2263_last)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int32_t _10112_ = (int)0;
  int32_t _10113_ = (int)((_2262_first)->size(0));
  for (int32_t _2264_i = _10112_; _2264_i < _10113_; ++_2264_i)
  {
    {
      if (((_ptr__2263_last[_2264_i] > _ptr__2262_first[_2264_i]) || ((_ptr__2262_first[_2264_i] < (int)0) || (_ptr__2263_last[_2264_i] >= ((*shape)(_2264_i))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _10114_;
  for (int32_t _2265_i = (int)0, _10115_ = (int)((shape)->size(0)); _2265_i < _10115_ ; ++_2265_i)
  {
    _10114_.push_back((_ptr__2263_last[_2265_i] - _ptr__2262_first[_2265_i]));
  }
  auto _10116_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10114_.size()),_10114_.begin(),_10114_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_10116_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.slice

// Begin mosek.fusion.NilVariable.slice
// Method mosek.fusion.NilVariable.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:1013:6-1023:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int32_t _2266_first,int32_t _2267_last) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_2266_first,_2267_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int32_t _2266_first,int32_t _2267_last) { return __mosek_2fusion_2NilVariable__slice(_2266_first,_2267_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2266_first,int32_t _2267_last) { return __mosek_2fusion_2NilVariable__slice(_2266_first,_2267_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int32_t _2266_first,int32_t _2267_last)
{
  if (((_2267_last > _2266_first) || ((_2266_first < (int)0) || (_2267_last > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((_2267_last - _2266_first))}))).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.NilVariable.slice

void mosek::fusion::p_NilVariable::destroy()
{
  shape.reset();
}
void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }
// } class NilVariable
// class BaseVariable { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:53:4-969:5
mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }
mosek::fusion::p_BaseVariable::p_BaseVariable
  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.BaseVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:99:6-108:7
void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _2268_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2269_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    model = _2269_m;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_2268_v)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_2268_v)->sparsity;
    basevar_nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_2268_v)->basevar_nativeidxs;
  }
}
// mosek.fusion.BaseVariable.ctor

// mosek.fusion.BaseVariable.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:83:6-94:7
void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2270_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2271_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2272_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2273_basevar_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2271_shape(_2271_shape ? _2271_shape->raw() : nullptr, _2271_shape ? _2271_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2272_sparsity(_2272_sparsity ? _2272_sparsity->raw() : nullptr, _2272_sparsity ? _2272_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2273_basevar_nativeidxs(_2273_basevar_nativeidxs ? _2273_basevar_nativeidxs->raw() : nullptr, _2273_basevar_nativeidxs ? _2273_basevar_nativeidxs->size(0) : 0);
    model = _2270_m;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _2271_shape;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _2272_sparsity;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->basevar_nativeidxs = _2273_basevar_nativeidxs;
  }
}
// mosek.fusion.BaseVariable.ctor

// Begin mosek.fusion.BaseVariable.toString
// Method mosek.fusion.BaseVariable.toString @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:957:6-968:7
std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_BaseVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2274_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2274_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _2274_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _10117_ = (int)1;
      int32_t _10118_ = (int)((shape)->size(0));
      for (int32_t _2275_i = _10117_; _2275_i < _10118_; ++_2275_i)
      {
        {
          _2274_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2275_i)));
        }
      }
    }
  }
  {}
  _2274_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _2274_sb->toString();
}
// End mosek.fusion.BaseVariable.toString

// Begin mosek.fusion.BaseVariable.eval
// Method mosek.fusion.BaseVariable.eval @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:926:6-954:7
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2276_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _2277_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _2278_xs) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_2276_rs,_2277_ws,_2278_xs); }
void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2276_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _2277_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _2278_xs)
{
  int32_t _2279_nnz = (int)((basevar_nativeidxs)->size(0));
  int32_t _2280_nelem = _2279_nnz;
  int32_t _2281_nd = (int)((shape)->size(0));
  bool _2282_hassp = (NULL != sparsity.get());
  _2276_rs->alloc_expr(_2281_nd,_2280_nelem,_2279_nnz,_2282_hassp);
  int32_t _2283_ptr = mosek::fusion::p_WorkStack::_get_impl(_2276_rs)->ptr_base;
  int32_t _2284_nidxs = mosek::fusion::p_WorkStack::_get_impl(_2276_rs)->nidxs_base;
  int32_t _2285_sp = mosek::fusion::p_WorkStack::_get_impl(_2276_rs)->sp_base;
  int32_t _2286_cof = mosek::fusion::p_WorkStack::_get_impl(_2276_rs)->cof_base;
  int32_t _2287_shape_base = mosek::fusion::p_WorkStack::_get_impl(_2276_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2288_ri32 = mosek::fusion::p_WorkStack::_get_impl(_2276_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__2288_ri32(_2288_ri32 ? _2288_ri32->raw() : nullptr,_2288_ri32 ? _2288_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2289_ri64 = mosek::fusion::p_WorkStack::_get_impl(_2276_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__2289_ri64(_2289_ri64 ? _2289_ri64->raw() : nullptr,_2289_ri64 ? _2289_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2290_rf64 = mosek::fusion::p_WorkStack::_get_impl(_2276_rs)->f64;
  _checked_ptr_1<double> _ptr__2290_rf64(_2290_rf64 ? _2290_rf64->raw() : nullptr,_2290_rf64 ? _2290_rf64->size(0) : 0);
  int32_t _10119_ = (int)0;
  int32_t _10120_ = _2281_nd;
  for (int32_t _2291_i = _10119_; _2291_i < _10120_; ++_2291_i)
  {
    {
      _ptr__2288_ri32[safe_add( _2287_shape_base,_2291_i )] = ((*shape)(_2291_i));
    }
  }
  {
    int32_t _10121_ = (int)0;
    int32_t _10122_ = safe_add( _2279_nnz,(int)1 );
    for (int32_t _2292_i = _10121_; _2292_i < _10122_; ++_2292_i)
    {
      {
        _ptr__2288_ri32[safe_add( _2283_ptr,_2292_i )] = _2292_i;
      }
    }
    int32_t _10123_ = (int)0;
    int32_t _10124_ = _2279_nnz;
    for (int32_t _2293_i = _10123_; _2293_i < _10124_; ++_2293_i)
    {
      {
        _ptr__2289_ri64[safe_add( _2284_nidxs,_2293_i )] = ((*basevar_nativeidxs)(_2293_i));
      }
    }
    if (_2282_hassp)
    {
      {
        int32_t _10125_ = (int)0;
        int32_t _10126_ = _2279_nnz;
        for (int32_t _2294_i = _10125_; _2294_i < _10126_; ++_2294_i)
        {
          {
            _ptr__2289_ri64[safe_add( _2285_sp,_2294_i )] = ((*sparsity)(_2294_i));
          }
        }
      }
    }
    {}
    int32_t _10127_ = (int)0;
    int32_t _10128_ = _2279_nnz;
    for (int32_t _2295_i = _10127_; _2295_i < _10128_; ++_2295_i)
    {
      {
        _ptr__2290_rf64[safe_add( _2286_cof,_2295_i )] = 1.0;
      }
    }
  }
}
// End mosek.fusion.BaseVariable.eval

// Begin mosek.fusion.BaseVariable.remove
// Method mosek.fusion.BaseVariable.remove @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:920:6-922:7
void mosek::fusion::BaseVariable :: remove() { mosek::fusion::p_BaseVariable::_get_impl(this)->remove(); }
void mosek::fusion::p_BaseVariable::remove()
{
  throw ::mosek::fusion::DeletionError(std::string ("Only original variables can be removed"));
}
// End mosek.fusion.BaseVariable.remove

// Begin mosek.fusion.BaseVariable.fromTril
// Method mosek.fusion.BaseVariable.fromTril @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:844:6-918:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int32_t _2296_dim0,int32_t _2297_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_2296_dim0,_2297_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int32_t _2296_dim0,int32_t _2297_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2296_dim0,_2297_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int32_t _2296_dim0,int32_t _2297_d)
{
  if (((_2296_dim0 < (int)0) || (_2296_dim0 >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension"));
    }
  }
  else if((((*shape)(_2296_dim0)) != (safe_mul( _2297_d,safe_add( _2297_d,(int)1 ) ) / (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  {}
  int32_t _2298_d0 = (int)1;
  int32_t _10129_ = (int)0;
  int32_t _10130_ = _2296_dim0;
  for (int32_t _2299_i = _10129_; _2299_i < _10130_; ++_2299_i)
  {
    {
      _2298_d0 *= ((*shape)(_2299_i));
    }
  }
  int32_t _2300_d1 = ((*shape)(_2296_dim0));
  int32_t _2301_d2 = (int)1;
  int32_t _10131_ = safe_add( _2296_dim0,(int)1 );
  int32_t _10132_ = (int)((shape)->size(0));
  for (int32_t _2302_i = _10131_; _2302_i < _10132_; ++_2302_i)
  {
    {
      _2301_d2 *= ((*shape)(_2302_i));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2303_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( (int)((shape)->size(0)),(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__2303_rshape(_2303_rshape ? _2303_rshape->raw() : nullptr,_2303_rshape ? _2303_rshape->size(0) : 0);
  int32_t _10133_ = (int)0;
  int32_t _10134_ = _2296_dim0;
  for (int32_t _2304_i = _10133_; _2304_i < _10134_; ++_2304_i)
  {
    {
      _ptr__2303_rshape[_2304_i] = ((*shape)(_2304_i));
    }
  }
  _ptr__2303_rshape[_2296_dim0] = _2297_d;
  _ptr__2303_rshape[safe_add( _2296_dim0,(int)1 )] = _2297_d;
  int32_t _10135_ = safe_add( _2296_dim0,(int)1 );
  int32_t _10136_ = (int)((shape)->size(0));
  for (int32_t _2305_i = _10135_; _2305_i < _10136_; ++_2305_i)
  {
    {
      _ptr__2303_rshape[safe_add( _2305_i,(int)1 )] = ((*shape)(_2305_i));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2306_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( safe_mul( safe_mul( _2298_d0,_2297_d ),_2297_d ),_2301_d2 ))));
      _checked_ptr_1<int64_t> _ptr__2306_nidxs(_2306_nidxs ? _2306_nidxs->raw() : nullptr,_2306_nidxs ? _2306_nidxs->size(0) : 0);
      int32_t _2307_ofs = (int)0;
      int32_t _10137_ = (int)0;
      int32_t _10138_ = _2298_d0;
      for (int32_t _2308_i0 = _10137_; _2308_i0 < _10138_; ++_2308_i0)
      {
        {
          int32_t _10139_ = (int)0;
          int32_t _10140_ = _2297_d;
          for (int32_t _2309_i10 = _10139_; _2309_i10 < _10140_; ++_2309_i10)
          {
            {
              int32_t _10141_ = (int)0;
              int32_t _10142_ = _2297_d;
              for (int32_t _2310_i11 = _10141_; _2310_i11 < _10142_; ++_2310_i11)
              {
                {
                  int32_t _10143_ = (int)0;
                  int32_t _10144_ = _2301_d2;
                  for (int32_t _2311_i2 = _10143_; _2311_i2 < _10144_; ++_2311_i2)
                  {
                    {
                      if ((_2309_i10 >= _2310_i11))
                      {
                        {
                          _ptr__2306_nidxs[_2307_ofs] = ((*basevar_nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _2308_i0,_2300_d1 ),_2301_d2 ),safe_mul( safe_add( (safe_mul( _2309_i10,safe_add( _2309_i10,(int)1 ) ) / (int)2),_2310_i11 ),_2301_d2 ) ),_2311_i2 )));
                        }
                      }
                      else
                      {
                        {
                          _ptr__2306_nidxs[_2307_ofs] = ((*basevar_nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _2308_i0,_2300_d1 ),_2301_d2 ),safe_mul( safe_add( (safe_mul( _2310_i11,safe_add( _2310_i11,(int)1 ) ) / (int)2),_2309_i10 ),_2301_d2 ) ),_2311_i2 )));
                        }
                      }
                      ++ _2307_ofs;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2303_rshape,nullptr,_2306_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2312_nelm = (int)0;
      int32_t _10145_ = (int)0;
      int32_t _10146_ = (int)((sparsity)->size(0));
      for (int32_t _2313_i = _10145_; _2313_i < _10146_; ++_2313_i)
      {
        {
          int64_t _2314_i1 = ((((*sparsity)(_2313_i)) / _2301_d2) % _2300_d1);
          int32_t _2315_ii = (int32_t)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_2314_i1 ) ),safe_add( (int)1,safe_mul( (int)2,_2314_i1 ) ) )))) / (int)4);
          int64_t _2316_jj = (((*sparsity)(_2313_i)) - (safe_mul( _2315_ii,safe_add( _2315_ii,(int)1 ) ) / (int)2));
          if ((_2315_ii == _2316_jj))
          {
            {
              _2312_nelm += (int)1;
            }
          }
          else
          {
            {
              _2312_nelm += (int)2;
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2317_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2312_nelm)));
      _checked_ptr_1<int64_t> _ptr__2317_nidxs(_2317_nidxs ? _2317_nidxs->raw() : nullptr,_2317_nidxs ? _2317_nidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2318_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2312_nelm)));
      _checked_ptr_1<int64_t> _ptr__2318_sp(_2318_sp ? _2318_sp->raw() : nullptr,_2318_sp ? _2318_sp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2319_perm = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2312_nelm)));
      _checked_ptr_1<int64_t> _ptr__2319_perm(_2319_perm ? _2319_perm->raw() : nullptr,_2319_perm ? _2319_perm->size(0) : 0);
      int32_t _10147_ = (int)0;
      int32_t _10148_ = _2312_nelm;
      for (int32_t _2320_i = _10147_; _2320_i < _10148_; ++_2320_i)
      {
        {
          _ptr__2319_perm[_2320_i] = _2320_i;
        }
      }
      int32_t _2321_elmi = (int)0;
      int32_t _10149_ = (int)0;
      int32_t _10150_ = (int)((sparsity)->size(0));
      for (int32_t _2322_i = _10149_; _2322_i < _10150_; ++_2322_i)
      {
        {
          int64_t _2323_i0 = (((*sparsity)(_2322_i)) / safe_mul( _2300_d1,_2301_d2 ));
          int64_t _2324_i1 = ((((*sparsity)(_2322_i)) / _2301_d2) % _2300_d1);
          int64_t _2325_i2 = (((*sparsity)(_2322_i)) % _2301_d2);
          int32_t _2326_ii1 = (int32_t)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_2324_i1 ) ),safe_add( (int)1,safe_mul( (int)2,_2324_i1 ) ) )))) / (int)4);
          int64_t _2327_jj1 = (((*sparsity)(_2322_i)) - (safe_mul( _2326_ii1,safe_add( _2326_ii1,(int)1 ) ) / (int)2));
          if ((_2326_ii1 == _2327_jj1))
          {
            {
              _ptr__2317_nidxs[_2321_elmi] = ((*basevar_nativeidxs)(_2322_i));
              _ptr__2318_sp[_2321_elmi] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2323_i0,_2297_d ),_2297_d ),_2301_d2 ),safe_mul( safe_add( safe_mul( _2326_ii1,_2297_d ),_2327_jj1 ),_2301_d2 ) ),_2325_i2 );
              _2321_elmi += (int)1;
            }
          }
          else
          {
            {
              _ptr__2317_nidxs[_2321_elmi] = ((*basevar_nativeidxs)(_2322_i));
              _ptr__2317_nidxs[safe_add( _2321_elmi,(int)1 )] = ((*basevar_nativeidxs)(_2322_i));
              _ptr__2318_sp[_2321_elmi] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2323_i0,_2297_d ),_2297_d ),_2301_d2 ),safe_mul( safe_add( safe_mul( _2326_ii1,_2297_d ),_2327_jj1 ),_2301_d2 ) ),_2325_i2 );
              _ptr__2318_sp[safe_add( _2321_elmi,(int)1 )] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2323_i0,_2297_d ),_2297_d ),_2301_d2 ),safe_mul( safe_add( safe_mul( _2327_jj1,_2297_d ),_2326_ii1 ),_2301_d2 ) ),_2325_i2 );
              _2321_elmi += (int)2;
            }
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2319_perm,_2317_nidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2312_nelm));
      std::vector<int64_t> _10151_;
      for (int32_t _2328_i = (int)0, _10152_ = _2312_nelm; _2328_i < _10152_ ; ++_2328_i)
      {
        _10151_.push_back(_ptr__2318_sp[_ptr__2319_perm[_2328_i]]);
      }
      auto _10153_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10151_.size()),_10151_.begin(),_10151_.end()));
      std::vector<int64_t> _10154_;
      for (int32_t _2329_i = (int)0, _10155_ = _2312_nelm; _2329_i < _10155_ ; ++_2329_i)
      {
        _10154_.push_back(_ptr__2317_nidxs[_ptr__2319_perm[_2329_i]]);
      }
      auto _10156_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10154_.size()),_10154_.begin(),_10154_.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2303_rshape,_10153_,_10156_)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.fromTril

// Begin mosek.fusion.BaseVariable.fromTril
// Method mosek.fusion.BaseVariable.fromTril @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:827:6-842:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int32_t _2330_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_2330_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int32_t _2330_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2330_d); }
/* override: mosek.fusion.Variable.fromTril*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__fromTril(int32_t _2330_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2330_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int32_t _2330_d)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__fromTril((int)0,_2330_d);
}
// End mosek.fusion.BaseVariable.fromTril

// Begin mosek.fusion.BaseVariable.tril
// Method mosek.fusion.BaseVariable.tril @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:738:6-825:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril(int32_t _2331_dim1,int32_t _2332_dim2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(_2331_dim1,_2332_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril(int32_t _2331_dim1,int32_t _2332_dim2) { return __mosek_2fusion_2BaseVariable__tril(_2331_dim1,_2332_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(int32_t _2331_dim1,int32_t _2332_dim2)
{
  if (((_2331_dim1 < (int)0) || ((_2331_dim1 >= _2332_dim2) || (_2332_dim2 >= (int)((shape)->size(0))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension specification"));
    }
  }
  else
  {
    {
      if ((((*shape)(_2331_dim1)) != ((*shape)(_2332_dim2))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Operation only valid for square variables"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2333_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((shape)->size(0)) - (int)1))));
  _checked_ptr_1<int32_t> _ptr__2333_rshape(_2333_rshape ? _2333_rshape->raw() : nullptr,_2333_rshape ? _2333_rshape->size(0) : 0);
  int32_t _10157_ = (int)0;
  int32_t _10158_ = _2331_dim1;
  for (int32_t _2334_i = _10157_; _2334_i < _10158_; ++_2334_i)
  {
    {
      _ptr__2333_rshape[_2334_i] = ((*shape)(_2334_i));
    }
  }
  _ptr__2333_rshape[_2331_dim1] = (safe_mul( ((*shape)(_2331_dim1)),safe_add( ((*shape)(_2331_dim1)),(int)1 ) ) / (int)2);
  int32_t _10159_ = safe_add( _2331_dim1,(int)1 );
  int32_t _10160_ = _2332_dim2;
  for (int32_t _2335_i = _10159_; _2335_i < _10160_; ++_2335_i)
  {
    {
      _ptr__2333_rshape[_2335_i] = ((*shape)(_2335_i));
    }
  }
  int32_t _10161_ = safe_add( _2332_dim2,(int)1 );
  int32_t _10162_ = (int)((shape)->size(0));
  for (int32_t _2336_i = _10161_; _2336_i < _10162_; ++_2336_i)
  {
    {
      _ptr__2333_rshape[(_2336_i - (int)1)] = ((*shape)(_2336_i));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      int32_t _2337_d0 = (int)1;
      int32_t _10163_ = (int)0;
      int32_t _10164_ = _2331_dim1;
      for (int32_t _2338_i = _10163_; _2338_i < _10164_; ++_2338_i)
      {
        {
          _2337_d0 *= ((*shape)(_2338_i));
        }
      }
      int32_t _2339_d1 = ((*shape)(_2331_dim1));
      int32_t _2340_d2 = (int)1;
      int32_t _10165_ = safe_add( _2331_dim1,(int)1 );
      int32_t _10166_ = _2332_dim2;
      for (int32_t _2341_i = _10165_; _2341_i < _10166_; ++_2341_i)
      {
        {
          _2340_d2 *= ((*shape)(_2341_i));
        }
      }
      int32_t _2342_d3 = ((*shape)(_2332_dim2));
      int32_t _2343_d4 = (int)1;
      int32_t _10167_ = safe_add( _2332_dim2,(int)1 );
      int32_t _10168_ = (int)((shape)->size(0));
      for (int32_t _2344_i = _10167_; _2344_i < _10168_; ++_2344_i)
      {
        {
          _2343_d4 *= ((*shape)(_2344_i));
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2345_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((safe_mul( safe_mul( safe_mul( safe_mul( _2337_d0,_2340_d2 ),_2343_d4 ),_2339_d1 ),safe_add( _2339_d1,(int)1 ) ) / (int)2))));
      _checked_ptr_1<int64_t> _ptr__2345_nidxs(_2345_nidxs ? _2345_nidxs->raw() : nullptr,_2345_nidxs ? _2345_nidxs->size(0) : 0);
      int32_t _2346_i = (int)0;
      int32_t _10169_ = (int)0;
      int32_t _10170_ = _2337_d0;
      for (int32_t _2347_i0 = _10169_; _2347_i0 < _10170_; ++_2347_i0)
      {
        {
          int32_t _10171_ = (int)0;
          int32_t _10172_ = _2339_d1;
          for (int32_t _2348_i1 = _10171_; _2348_i1 < _10172_; ++_2348_i1)
          {
            {
              int32_t _10173_ = (int)0;
              int32_t _10174_ = safe_add( _2348_i1,(int)1 );
              for (int32_t _2349_i3 = _10173_; _2349_i3 < _10174_; ++_2349_i3)
              {
                {
                  int32_t _10175_ = (int)0;
                  int32_t _10176_ = _2340_d2;
                  for (int32_t _2350_i2 = _10175_; _2350_i2 < _10176_; ++_2350_i2)
                  {
                    {
                      int32_t _10177_ = (int)0;
                      int32_t _10178_ = _2343_d4;
                      for (int32_t _2351_i4 = _10177_; _2351_i4 < _10178_; ++_2351_i4)
                      {
                        {
                          _ptr__2345_nidxs[_2346_i] = ((*basevar_nativeidxs)(safe_add( _2351_i4,safe_mul( _2343_d4,safe_add( _2349_i3,safe_mul( _2342_d3,safe_add( _2350_i2,safe_mul( _2340_d2,safe_add( _2348_i1,safe_mul( _2339_d1,_2347_i0 ) ) ) ) ) ) ) )));
                          _2346_i += (int)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2333_rshape,nullptr,_2345_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2352_d0 = (int)1;
      int32_t _10179_ = (int)0;
      int32_t _10180_ = _2331_dim1;
      for (int32_t _2353_i = _10179_; _2353_i < _10180_; ++_2353_i)
      {
        {
          _2352_d0 *= ((*shape)(_2353_i));
        }
      }
      int32_t _2354_d1 = ((*shape)(_2331_dim1));
      int32_t _2355_d2 = (int)1;
      int32_t _10181_ = safe_add( _2331_dim1,(int)1 );
      int32_t _10182_ = _2332_dim2;
      for (int32_t _2356_i = _10181_; _2356_i < _10182_; ++_2356_i)
      {
        {
          _2355_d2 *= ((*shape)(_2356_i));
        }
      }
      int32_t _2357_d3 = ((*shape)(_2332_dim2));
      int32_t _2358_d4 = (int)1;
      int32_t _10183_ = safe_add( _2332_dim2,(int)1 );
      int32_t _10184_ = (int)((shape)->size(0));
      for (int32_t _2359_i = _10183_; _2359_i < _10184_; ++_2359_i)
      {
        {
          _2358_d4 *= ((*shape)(_2359_i));
        }
      }
      int32_t _2360_s4 = (int)1;
      int32_t _2361_s3 = _2358_d4;
      int32_t _2362_s2 = safe_mul( _2361_s3,_2357_d3 );
      int32_t _2363_s1 = safe_mul( _2362_s2,_2355_d2 );
      int32_t _2364_s0 = safe_mul( _2363_s1,_2354_d1 );
      int32_t _2365_nelm = (int)0;
      int32_t _10185_ = (int)0;
      int32_t _10186_ = (int)((sparsity)->size(0));
      for (int32_t _2366_i = _10185_; _2366_i < _10186_; ++_2366_i)
      {
        {
          if ((((((*sparsity)(_2366_i)) / _2363_s1) % _2354_d1) >= ((((*sparsity)(_2366_i)) / _2361_s3) % _2357_d3)))
          {
            {
              ++ _2365_nelm;
            }
          }
          {}
        }
      }
      int32_t _2367_rs3 = (int)1;
      int32_t _2368_rs2 = _2358_d4;
      int32_t _2369_rs1 = safe_mul( _2368_rs2,_2355_d2 );
      int32_t _2370_rs0 = (safe_mul( safe_mul( _2369_rs1,_2354_d1 ),safe_add( _2354_d1,(int)1 ) ) / (int)2);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2371_perm = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2365_nelm)));
      _checked_ptr_1<int64_t> _ptr__2371_perm(_2371_perm ? _2371_perm->raw() : nullptr,_2371_perm ? _2371_perm->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2372_rnidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2365_nelm)));
      _checked_ptr_1<int64_t> _ptr__2372_rnidxs(_2372_rnidxs ? _2372_rnidxs->raw() : nullptr,_2372_rnidxs ? _2372_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2373_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2365_nelm)));
      _checked_ptr_1<int64_t> _ptr__2373_rsp(_2373_rsp ? _2373_rsp->raw() : nullptr,_2373_rsp ? _2373_rsp->size(0) : 0);
      int32_t _2374_elmi = (int)0;
      {
        int32_t _10187_ = (int)0;
        int32_t _10188_ = (int)((sparsity)->size(0));
        for (int32_t _2375_i = _10187_; _2375_i < _10188_; ++_2375_i)
        {
          {
            if ((((((*sparsity)(_2375_i)) / _2363_s1) % _2354_d1) >= ((((*sparsity)(_2375_i)) / _2361_s3) % _2357_d3)))
            {
              {
                int64_t _2376_i0 = (((*sparsity)(_2375_i)) / _2364_s0);
                int64_t _2377_i1 = ((((*sparsity)(_2375_i)) / _2363_s1) % _2354_d1);
                int64_t _2378_i2 = ((((*sparsity)(_2375_i)) / _2362_s2) % _2355_d2);
                int64_t _2379_i3 = ((((*sparsity)(_2375_i)) / _2361_s3) % _2357_d3);
                int64_t _2380_i4 = ((((*sparsity)(_2375_i)) / _2360_s4) % _2358_d4);
                _ptr__2372_rnidxs[_2374_elmi] = ((*basevar_nativeidxs)(_2375_i));
                _ptr__2373_rsp[_2374_elmi] = safe_add( safe_add( safe_add( safe_mul( _2370_rs0,_2376_i0 ),safe_mul( _2369_rs1,safe_add( (safe_mul( _2377_i1,safe_add( _2377_i1,(int)1 ) ) / (int)2),_2379_i3 ) ) ),safe_mul( _2368_rs2,_2378_i2 ) ),safe_mul( _2367_rs3,_2380_i4 ) );
                ++ _2374_elmi;
              }
            }
            {}
          }
        }
        int32_t _10189_ = (int)0;
        int32_t _10190_ = _2365_nelm;
        for (int32_t _2381_i = _10189_; _2381_i < _10190_; ++_2381_i)
        {
          {
            _ptr__2371_perm[_2381_i] = _2381_i;
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2371_perm,_2372_rnidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2365_nelm));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2382_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2365_nelm)));
      _checked_ptr_1<int64_t> _ptr__2382_nidxs(_2382_nidxs ? _2382_nidxs->raw() : nullptr,_2382_nidxs ? _2382_nidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2383_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2365_nelm)));
      _checked_ptr_1<int64_t> _ptr__2383_sp(_2383_sp ? _2383_sp->raw() : nullptr,_2383_sp ? _2383_sp->size(0) : 0);
      int32_t _10191_ = (int)0;
      int32_t _10192_ = _2365_nelm;
      for (int32_t _2384_i = _10191_; _2384_i < _10192_; ++_2384_i)
      {
        {
          _ptr__2382_nidxs[_2384_i] = _ptr__2372_rnidxs[_ptr__2371_perm[_2384_i]];
        }
      }
      int32_t _10193_ = (int)0;
      int32_t _10194_ = _2365_nelm;
      for (int32_t _2385_i = _10193_; _2385_i < _10194_; ++_2385_i)
      {
        {
          _ptr__2383_sp[_2385_i] = _ptr__2373_rsp[_ptr__2371_perm[_2385_i]];
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2333_rshape,_2383_sp,_2382_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.tril

// Begin mosek.fusion.BaseVariable.tril
// Method mosek.fusion.BaseVariable.tril @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:736:6-57
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril() { return __mosek_2fusion_2BaseVariable__tril(); }
/* override: mosek.fusion.Variable.tril*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__tril() { return __mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril()
{
  return _pubthis->__mosek_2fusion_2BaseVariable__tril((int)0,(int)1);
}
// End mosek.fusion.BaseVariable.tril

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:734:6-114
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2386_dim0,int32_t _2387_dim1,int32_t _2388_dim2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2386_dim0,_2387_dim1,_2388_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2386_dim0,int32_t _2387_dim1,int32_t _2388_dim2) { return __mosek_2fusion_2BaseVariable__reshape(_2386_dim0,_2387_dim1,_2388_dim2); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2386_dim0,int32_t _2387_dim1,int32_t _2388_dim2) { return __mosek_2fusion_2BaseVariable__reshape(_2386_dim0,_2387_dim1,_2388_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2386_dim0,int32_t _2387_dim1,int32_t _2388_dim2)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2386_dim0),(int32_t)(_2387_dim1),(int32_t)(_2388_dim2)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:733:6-98
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2389_dim0,int32_t _2390_dim1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2389_dim0,_2390_dim1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2389_dim0,int32_t _2390_dim1) { return __mosek_2fusion_2BaseVariable__reshape(_2389_dim0,_2390_dim1); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2389_dim0,int32_t _2390_dim1) { return __mosek_2fusion_2BaseVariable__reshape(_2389_dim0,_2390_dim1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2389_dim0,int32_t _2390_dim1)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2389_dim0),(int32_t)(_2390_dim1)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:732:6-82
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2391_dim0) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2391_dim0); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2391_dim0) { return __mosek_2fusion_2BaseVariable__reshape(_2391_dim0); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2391_dim0) { return __mosek_2fusion_2BaseVariable__reshape(_2391_dim0); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2391_dim0)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2391_dim0)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:719:6-730:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2392_shape) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2392_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2392_shape) { return __mosek_2fusion_2BaseVariable__reshape(_2392_shape); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2392_shape) { return __mosek_2fusion_2BaseVariable__reshape(_2392_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2392_shape)
{
  _checked_ptr_1<int32_t> _ptr__2392_shape(_2392_shape ? _2392_shape->raw() : nullptr, _2392_shape ? _2392_shape->size(0) : 0);
  int64_t _2393_shapesize = (int)1;
  int32_t _10195_ = (int)0;
  int32_t _10196_ = (int)((_2392_shape)->size(0));
  for (int32_t _2394_i = _10195_; _2394_i < _10196_; ++_2394_i)
  {
    {
      if ((_ptr__2392_shape[_2394_i] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _2393_shapesize *= _ptr__2392_shape[_2394_i];
    }
  }
  if ((_2393_shapesize != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int32_t> _10197_;
  for (int32_t _2395_i = (int)0, _10198_ = (int)((_2392_shape)->size(0)); _2395_i < _10198_ ; ++_2395_i)
  {
    _10197_.push_back(_ptr__2392_shape[_2395_i]);
  }
  auto _10199_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10197_.size()),_10197_.begin(),_10197_.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_10199_,sparsity,basevar_nativeidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.setLevel
// Method mosek.fusion.BaseVariable.setLevel @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:705:6-717:7
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2396_v) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2396_v); }
void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2396_v)
{
  _checked_ptr_1<double> _ptr__2396_v(_2396_v ? _2396_v->raw() : nullptr, _2396_v ? _2396_v->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_2396_v)->size(0)) != (int)((basevar_nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,basevar_nativeidxs,_2396_v);
    }
  }
  else
  {
    {
      if (((int)((_2396_v)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _10200_;
      for (int32_t _2398_i = (int)0, _10201_ = (int)((basevar_nativeidxs)->size(0)); _2398_i < _10201_ ; ++_2398_i)
      {
        _10200_.push_back(_ptr__2396_v[((*sparsity)(_2398_i))]);
      }
      auto _10202_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10200_.size()),_10200_.begin(),_10200_.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _2397_v = _10202_;
      _checked_ptr_1<double> _ptr__2397_v(_2397_v ? _2397_v->raw() : nullptr,_2397_v ? _2397_v->size(0) : 0);
      model->setVariableValues(true,basevar_nativeidxs,_2397_v);
    }
  }
}
// End mosek.fusion.BaseVariable.setLevel

// Begin mosek.fusion.BaseVariable.getModel
// Method mosek.fusion.BaseVariable.getModel @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:703:6-55
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
/* override: mosek.fusion.Expression.getModel*/
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Expression__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel()
{
  return model;
}
// End mosek.fusion.BaseVariable.getModel

// Begin mosek.fusion.BaseVariable.getND
// Method mosek.fusion.BaseVariable.getND @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:702:6-56
int32_t mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_BaseVariable::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.BaseVariable.getND

// Begin mosek.fusion.BaseVariable.getDim
// Method mosek.fusion.BaseVariable.getDim @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:701:6-62
int32_t mosek::fusion::BaseVariable :: getDim(int32_t _2399_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_2399_d); }
int32_t mosek::fusion::p_BaseVariable::getDim(int32_t _2399_d)
{
  return ((*shape)(_2399_d));
}
// End mosek.fusion.BaseVariable.getDim

// Begin mosek.fusion.BaseVariable.getShape
// Method mosek.fusion.BaseVariable.getShape @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:700:6-79
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_BaseVariable::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.BaseVariable.getShape

// Begin mosek.fusion.BaseVariable.getSize
// Method mosek.fusion.BaseVariable.getSize @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:699:6-107
int64_t mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_BaseVariable::getSize()
{
  int64_t _2400_sz = (int64_t)1;
  int32_t _10203_ = (int)0;
  int32_t _10204_ = (int)((shape)->size(0));
  for (int32_t _2401_i = _10203_; _2401_i < _10204_; ++_2401_i)
  {
    {
      _2400_sz *= ((*shape)(_2401_i));
    }
  }
  return _2400_sz;
}
// End mosek.fusion.BaseVariable.getSize

// Begin mosek.fusion.BaseVariable.dual
// Method mosek.fusion.BaseVariable.dual @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:686:6-696:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2402_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((basevar_nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2402_res(_2402_res ? _2402_res->raw() : nullptr,_2402_res ? _2402_res->size(0) : 0);
  model->getVariableValues(false,basevar_nativeidxs,_2402_res,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2403_spread_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2403_spread_res(_2403_spread_res ? _2403_spread_res->raw() : nullptr,_2403_spread_res ? _2403_spread_res->size(0) : 0);
      int32_t _10205_ = (int)0;
      int32_t _10206_ = (int)((basevar_nativeidxs)->size(0));
      for (int32_t _2404_i = _10205_; _2404_i < _10206_; ++_2404_i)
      {
        {
          _ptr__2403_spread_res[((*sparsity)(_2404_i))] = _ptr__2402_res[_2404_i];
        }
      }
      _2402_res = _2403_spread_res;
      _ptr__2402_res.update(_2402_res ? _2402_res->raw() : nullptr, _2402_res ? _2402_res->size(0) : 0);
    }
  }
  {}
  return _2402_res;
}
// End mosek.fusion.BaseVariable.dual

// Begin mosek.fusion.BaseVariable.level
// Method mosek.fusion.BaseVariable.level @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:674:6-684:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2405_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((basevar_nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2405_res(_2405_res ? _2405_res->raw() : nullptr,_2405_res ? _2405_res->size(0) : 0);
  model->getVariableValues(true,basevar_nativeidxs,_2405_res,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2406_spread_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2406_spread_res(_2406_spread_res ? _2406_spread_res->raw() : nullptr,_2406_spread_res ? _2406_spread_res->size(0) : 0);
      int32_t _10207_ = (int)0;
      int32_t _10208_ = (int)((basevar_nativeidxs)->size(0));
      for (int32_t _2407_i = _10207_; _2407_i < _10208_; ++_2407_i)
      {
        {
          _ptr__2406_spread_res[((*sparsity)(_2407_i))] = _ptr__2405_res[_2407_i];
        }
      }
      _2405_res = _2406_spread_res;
      _ptr__2405_res.update(_2405_res ? _2405_res->raw() : nullptr, _2405_res ? _2405_res->size(0) : 0);
    }
  }
  {}
  return _2405_res;
}
// End mosek.fusion.BaseVariable.level

// Begin mosek.fusion.BaseVariable.makeContinuous
// Method mosek.fusion.BaseVariable.makeContinuous @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:670:6-59
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }
void mosek::fusion::p_BaseVariable::makeContinuous()
{
  _pubthis->make_continuous();
}
// End mosek.fusion.BaseVariable.makeContinuous

// Begin mosek.fusion.BaseVariable.makeInteger
// Method mosek.fusion.BaseVariable.makeInteger @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:669:6-53
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }
void mosek::fusion::p_BaseVariable::makeInteger()
{
  _pubthis->make_integer();
}
// End mosek.fusion.BaseVariable.makeInteger

// Begin mosek.fusion.BaseVariable.transpose
// Method mosek.fusion.BaseVariable.transpose @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:630:6-665:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
/* override: mosek.fusion.Variable.transpose*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose()
{
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(((*shape)((int)0)))}),sparsity,basevar_nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2408_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((basevar_nativeidxs)->size(0)))));
      _checked_ptr_1<int64_t> _ptr__2408_idxs(_2408_idxs ? _2408_idxs->raw() : nullptr,_2408_idxs ? _2408_idxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _10209_;
      bool _10210_ = (NULL == sparsity.get());
      if (_10210_)
      {
        _10209_ = nullptr;
      }
      else
      {
        _10209_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((basevar_nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2409_sp = _10209_;
      _checked_ptr_1<int64_t> _ptr__2409_sp(_2409_sp ? _2409_sp->raw() : nullptr,_2409_sp ? _2409_sp->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int32_t _2410_k = (int)0;
          int32_t _10211_ = (int)0;
          int32_t _10212_ = ((*shape)((int)1));
          for (int32_t _2411_j = _10211_; _2411_j < _10212_; ++_2411_j)
          {
            {
              int32_t _10213_ = (int)0;
              int32_t _10214_ = ((*shape)((int)0));
              for (int32_t _2412_i = _10213_; _2412_i < _10214_; ++_2412_i)
              {
                {
                  _ptr__2408_idxs[_2410_k] = ((*basevar_nativeidxs)(safe_add( safe_mul( _2412_i,((*shape)((int)1)) ),_2411_j )));
                  ++ _2410_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2413_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__2413_ptr(_2413_ptr ? _2413_ptr->raw() : nullptr,_2413_ptr ? _2413_ptr->size(0) : 0);
          int32_t _2414_dim0 = ((*shape)((int)0));
          int32_t _2415_dim1 = ((*shape)((int)1));
          int32_t _10215_ = (int)0;
          int32_t _10216_ = (int)((sparsity)->size(0));
          for (int32_t _2416_i = _10215_; _2416_i < _10216_; ++_2416_i)
          {
            {
              ++ _ptr__2413_ptr[safe_add( (((*sparsity)(_2416_i)) % _2415_dim1),(int)1 )];
            }
          }
          int32_t _10217_ = (int)0;
          int32_t _10218_ = _2415_dim1;
          for (int32_t _2417_i = _10217_; _2417_i < _10218_; ++_2417_i)
          {
            {
              _ptr__2413_ptr[safe_add( _2417_i,(int)1 )] += _ptr__2413_ptr[_2417_i];
            }
          }
          int32_t _10219_ = (int)0;
          int32_t _10220_ = (int)((sparsity)->size(0));
          for (int32_t _2418_i = _10219_; _2418_i < _10220_; ++_2418_i)
          {
            {
              int64_t _2419_ii = (((*sparsity)(_2418_i)) % _2415_dim1);
              _ptr__2408_idxs[_ptr__2413_ptr[_2419_ii]] = ((*basevar_nativeidxs)(_2418_i));
              _ptr__2409_sp[_ptr__2413_ptr[_2419_ii]] = safe_add( (((*sparsity)(_2418_i)) / _2415_dim1),safe_mul( (((*sparsity)(_2418_i)) % _2415_dim1),_2414_dim0 ) );
              ++ _ptr__2413_ptr[_2419_ii];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*shape)((int)1))),(int32_t)(((*shape)((int)0)))}),_2409_sp,_2408_idxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.transpose

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:619:6-622:40
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2420_i0,int32_t _2421_i1,int32_t _2422_i2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2420_i0,_2421_i1,_2422_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2420_i0,int32_t _2421_i1,int32_t _2422_i2) { return __mosek_2fusion_2BaseVariable__index(_2420_i0,_2421_i1,_2422_i2); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2420_i0,int32_t _2421_i1,int32_t _2422_i2) { return __mosek_2fusion_2BaseVariable__index(_2420_i0,_2421_i1,_2422_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2420_i0,int32_t _2421_i1,int32_t _2422_i2)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2420_i0),(int32_t)(_2421_i1),(int32_t)(_2422_i2)}));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:614:6-616:37
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2423_i0,int32_t _2424_i1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2423_i0,_2424_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2423_i0,int32_t _2424_i1) { return __mosek_2fusion_2BaseVariable__index(_2423_i0,_2424_i1); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2423_i0,int32_t _2424_i1) { return __mosek_2fusion_2BaseVariable__index(_2423_i0,_2424_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2423_i0,int32_t _2424_i1)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2423_i0),(int32_t)(_2424_i1)}));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:606:6-611:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2425_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2425_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2425_index) { return __mosek_2fusion_2BaseVariable__index(_2425_index); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2425_index) { return __mosek_2fusion_2BaseVariable__index(_2425_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2425_index)
{
  _checked_ptr_1<int32_t> _ptr__2425_index(_2425_index ? _2425_index->raw() : nullptr, _2425_index ? _2425_index->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2426_midx = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)((_2425_index)->size(0)))));
  int32_t _10221_ = (int)0;
  int32_t _10222_ = (int)((_2425_index)->size(0));
  for (int32_t _2427_i = _10221_; _2427_i < _10222_; ++_2427_i)
  {
    {
      ((*_2426_midx)((int)0,_2427_i)) = _ptr__2425_index[_2427_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2426_midx)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:600:6-603:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2428_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2428_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2428_index) { return __mosek_2fusion_2BaseVariable__index(_2428_index); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2428_index) { return __mosek_2fusion_2BaseVariable__index(_2428_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2428_index)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2428_index)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:579:6-597:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2429_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2430_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2431_i2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2429_i0,_2430_i1,_2431_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2429_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2430_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2431_i2) { return __mosek_2fusion_2BaseVariable__pick(_2429_i0,_2430_i1,_2431_i2); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2429_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2430_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2431_i2) { return __mosek_2fusion_2BaseVariable__pick(_2429_i0,_2430_i1,_2431_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2429_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2430_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2431_i2)
{
  _checked_ptr_1<int32_t> _ptr__2429_i0(_2429_i0 ? _2429_i0->raw() : nullptr, _2429_i0 ? _2429_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2430_i1(_2430_i1 ? _2430_i1->raw() : nullptr, _2430_i1 ? _2430_i1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2431_i2(_2431_i2 ? _2431_i2->raw() : nullptr, _2431_i2 ? _2431_i2->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_2429_i0)->size(0)) != (int)((_2430_i1)->size(0))) || ((int)((_2429_i0)->size(0)) != (int)((_2431_i2)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2432_midxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_2429_i0)->size(0)),(int)3)));
  int32_t _10223_ = (int)0;
  int32_t _10224_ = (int)((_2429_i0)->size(0));
  for (int32_t _2433_i = _10223_; _2433_i < _10224_; ++_2433_i)
  {
    {
      ((*_2432_midxs)(_2433_i,(int)0)) = _ptr__2429_i0[_2433_i];
      ((*_2432_midxs)(_2433_i,(int)1)) = _ptr__2430_i1[_2433_i];
      ((*_2432_midxs)(_2433_i,(int)2)) = _ptr__2431_i2[_2433_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2432_midxs);
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:563:6-577:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2434_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2435_i1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2434_i0,_2435_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2434_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2435_i1) { return __mosek_2fusion_2BaseVariable__pick(_2434_i0,_2435_i1); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2434_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2435_i1) { return __mosek_2fusion_2BaseVariable__pick(_2434_i0,_2435_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2434_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2435_i1)
{
  _checked_ptr_1<int32_t> _ptr__2434_i0(_2434_i0 ? _2434_i0->raw() : nullptr, _2434_i0 ? _2434_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2435_i1(_2435_i1 ? _2435_i1->raw() : nullptr, _2435_i1 ? _2435_i1->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_2434_i0)->size(0)) != (int)((_2435_i1)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2436_midxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_2434_i0)->size(0)),(int)2)));
  int32_t _10225_ = (int)0;
  int32_t _10226_ = (int)((_2434_i0)->size(0));
  for (int32_t _2437_i = _10225_; _2437_i < _10226_; ++_2437_i)
  {
    {
      ((*_2436_midxs)(_2437_i,(int)0)) = _ptr__2434_i0[_2437_i];
      ((*_2436_midxs)(_2437_i,(int)1)) = _ptr__2435_i1[_2437_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2436_midxs);
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:502:6-561:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2438_midxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2438_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2438_midxs) { return __mosek_2fusion_2BaseVariable__pick(_2438_midxs); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2438_midxs) { return __mosek_2fusion_2BaseVariable__pick(_2438_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2438_midxs)
{
  if (((int)((shape)->size(0)) != (int)((_2438_midxs)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2439_invalidindex = false;
  int32_t _10227_ = (int)0;
  int32_t _10228_ = (int)((_2438_midxs)->size(0));
  for (int32_t _2440_i = _10227_; _2440_i < _10228_; ++_2440_i)
  {
    {
      int32_t _10229_ = (int)0;
      int32_t _10230_ = (int)((_2438_midxs)->size(1));
      for (int32_t _2441_j = _10229_; _2441_j < _10230_; ++_2441_j)
      {
        {
          if (((((*_2438_midxs)(_2440_i,_2441_j)) < (int)0) || (((*_2438_midxs)(_2440_i,_2441_j)) >= ((*shape)(_2441_j)))))
          {
            {
              _2439_invalidindex = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_2439_invalidindex)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int32_t _2442_nd = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2443_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2442_nd)));
  _checked_ptr_1<int64_t> _ptr__2443_strides(_2443_strides ? _2443_strides->raw() : nullptr,_2443_strides ? _2443_strides->size(0) : 0);
  _ptr__2443_strides[(_2442_nd - (int)1)] = (int)1;
  int32_t _10231_ = (int)1;
  int32_t _10232_ = _2442_nd;
  for (int32_t _2444_i = _10231_; _2444_i < _10232_; ++_2444_i)
  {
    {
      _ptr__2443_strides[((_2442_nd - _2444_i) - (int)1)] = safe_mul( _ptr__2443_strides[(_2442_nd - _2444_i)],((*shape)((_2442_nd - _2444_i))) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2445_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_2438_midxs)->size(0)))});
  _checked_ptr_1<int32_t> _ptr__2445_rshape(_2445_rshape ? _2445_rshape->raw() : nullptr,_2445_rshape ? _2445_rshape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2446_idxs;
  _checked_ptr_1<int64_t> _ptr__2446_idxs(_2446_idxs ? _2446_idxs->raw() : nullptr,_2446_idxs ? _2446_idxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2447_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__2447_sp(_2447_sp ? _2447_sp->raw() : nullptr,_2447_sp ? _2447_sp->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _2446_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2438_midxs)->size(0)))));
      _ptr__2446_idxs.update(_2446_idxs ? _2446_idxs->raw() : nullptr, _2446_idxs ? _2446_idxs->size(0) : 0);
      {
        int32_t _10233_ = (int)0;
        int32_t _10234_ = (int)((_2438_midxs)->size(0));
        for (int32_t _2448_i = _10233_; _2448_i < _10234_; ++_2448_i)
        {
          {
            int64_t _2449_ii = (int64_t)0;
            int32_t _10235_ = (int)0;
            int32_t _10236_ = _2442_nd;
            for (int32_t _2450_j = _10235_; _2450_j < _10236_; ++_2450_j)
            {
              {
                _2449_ii += safe_mul( _ptr__2443_strides[_2450_j],((*_2438_midxs)(_2448_i,_2450_j)) );
              }
            }
            _ptr__2446_idxs[_2448_i] = ((*basevar_nativeidxs)(_2449_ii));
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _2451_nnz = (int)0;
      int32_t _10237_ = (int)0;
      int32_t _10238_ = (int)((_2438_midxs)->size(0));
      for (int32_t _2452_i = _10237_; _2452_i < _10238_; ++_2452_i)
      {
        {
          int64_t _2453_ii = (int64_t)0;
          int32_t _10239_ = (int)0;
          int32_t _10240_ = _2442_nd;
          for (int32_t _2454_j = _10239_; _2454_j < _10240_; ++_2454_j)
          {
            {
              _2453_ii += safe_mul( _ptr__2443_strides[_2454_j],((*_2438_midxs)(_2452_i,_2454_j)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2453_ii) >= (int)0))
          {
            {
              ++ _2451_nnz;
            }
          }
          {}
        }
      }
      _2446_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2451_nnz)));
      _ptr__2446_idxs.update(_2446_idxs ? _2446_idxs->raw() : nullptr, _2446_idxs ? _2446_idxs->size(0) : 0);
      _2447_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2451_nnz)));
      _ptr__2447_sp.update(_2447_sp ? _2447_sp->raw() : nullptr, _2447_sp ? _2447_sp->size(0) : 0);
      {
        int32_t _2455_k = (int)0;
        int32_t _10241_ = (int)0;
        int32_t _10242_ = (int)((_2438_midxs)->size(0));
        for (int32_t _2456_i = _10241_; _2456_i < _10242_; ++_2456_i)
        {
          {
            int64_t _2457_ii = (int64_t)0;
            int32_t _10243_ = (int)0;
            int32_t _10244_ = _2442_nd;
            for (int32_t _2458_j = _10243_; _2458_j < _10244_; ++_2458_j)
            {
              {
                _2457_ii += safe_mul( _ptr__2443_strides[_2458_j],((*_2438_midxs)(_2456_i,_2458_j)) );
              }
            }
            int32_t _2459_iidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2457_ii);
            if ((_2459_iidx >= (int)0))
            {
              {
                _ptr__2446_idxs[_2455_k] = ((*basevar_nativeidxs)(_2459_iidx));
                _ptr__2447_sp[_2455_k] = _2456_i;
                ++ _2455_k;
              }
            }
            {}
          }
        }
      }
      if ((_2451_nnz == (int)((_2438_midxs)->size(0))))
      {
        {
          _2447_sp = nullptr;
          _ptr__2447_sp.update(_2447_sp ? _2447_sp->raw() : nullptr, _2447_sp ? _2447_sp->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2445_rshape,_2447_sp,_2446_idxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:460:6-500:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2460_idxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2460_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2460_idxs) { return __mosek_2fusion_2BaseVariable__pick(_2460_idxs); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2460_idxs) { return __mosek_2fusion_2BaseVariable__pick(_2460_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2460_idxs)
{
  _checked_ptr_1<int32_t> _ptr__2460_idxs(_2460_idxs ? _2460_idxs->raw() : nullptr, _2460_idxs ? _2460_idxs->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2461_invalidindex = false;
  int32_t _10245_ = (int)0;
  int32_t _10246_ = (int)((_2460_idxs)->size(0));
  for (int32_t _2462_i = _10245_; _2462_i < _10246_; ++_2462_i)
  {
    {
      if (((_ptr__2460_idxs[_2462_i] < (int)0) || (_ptr__2460_idxs[_2462_i] >= ((*shape)((int)0)))))
      {
        {
          _2461_invalidindex = true;
        }
      }
      {}
    }
  }
  if (_2461_invalidindex)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2463_nidxs;
  _checked_ptr_1<int64_t> _ptr__2463_nidxs(_2463_nidxs ? _2463_nidxs->raw() : nullptr,_2463_nidxs ? _2463_nidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2464_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__2464_sp(_2464_sp ? _2464_sp->raw() : nullptr,_2464_sp ? _2464_sp->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<int64_t> _10247_;
      for (int32_t _2465_i = (int)0, _10248_ = (int)((_2460_idxs)->size(0)); _2465_i < _10248_ ; ++_2465_i)
      {
        _10247_.push_back(((*basevar_nativeidxs)(_ptr__2460_idxs[_2465_i])));
      }
      auto _10249_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10247_.size()),_10247_.begin(),_10247_.end()));
      _2463_nidxs = _10249_;
      _ptr__2463_nidxs.update(_2463_nidxs ? _2463_nidxs->raw() : nullptr, _2463_nidxs ? _2463_nidxs->size(0) : 0);
    }
  }
  else
  {
    {
      int32_t _2466_nnz = (int)0;
      int32_t _10250_ = (int)0;
      int32_t _10251_ = (int)((_2460_idxs)->size(0));
      for (int32_t _2467_i = _10250_; _2467_i < _10251_; ++_2467_i)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(int64_t)(_ptr__2460_idxs[_2467_i])) >= (int)0))
          {
            {
              ++ _2466_nnz;
            }
          }
          {}
        }
      }
      _2463_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2466_nnz)));
      _ptr__2463_nidxs.update(_2463_nidxs ? _2463_nidxs->raw() : nullptr, _2463_nidxs ? _2463_nidxs->size(0) : 0);
      _2464_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2466_nnz)));
      _ptr__2464_sp.update(_2464_sp ? _2464_sp->raw() : nullptr, _2464_sp ? _2464_sp->size(0) : 0);
      int32_t _2468_k = (int)0;
      int32_t _10252_ = (int)0;
      int32_t _10253_ = (int)((_2460_idxs)->size(0));
      for (int32_t _2469_i = _10252_; _2469_i < _10253_; ++_2469_i)
      {
        {
          int32_t _2470_j = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(int64_t)(_ptr__2460_idxs[_2469_i]));
          if ((_2470_j >= (int)0))
          {
            {
              _ptr__2464_sp[_2468_k] = _2469_i;
              _ptr__2463_nidxs[_2468_k] = ((*basevar_nativeidxs)(_2470_j));
              ++ _2468_k;
            }
          }
          {}
        }
      }
      if ((_2466_nnz == (int)((_2460_idxs)->size(0))))
      {
        {
          _2464_sp = nullptr;
          _ptr__2464_sp.update(_2464_sp ? _2464_sp->raw() : nullptr, _2464_sp ? _2464_sp->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_2460_idxs)->size(0)))}),_2464_sp,_2463_nidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.antidiag
// Method mosek.fusion.BaseVariable.antidiag @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:446:6-457:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int32_t _2471_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_2471_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int32_t _2471_index) { return __mosek_2fusion_2BaseVariable__antidiag(_2471_index); }
/* override: mosek.fusion.Variable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int32_t _2471_index) { return __mosek_2fusion_2BaseVariable__antidiag(_2471_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int32_t _2471_index)
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_2471_index >= ((*shape)((int)1))) || ((-_2471_index) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2471_index >= (int)0))
  {
    {
      int32_t _10254_;
      bool _10255_ = (((*shape)((int)0)) < (((*shape)((int)1)) - _2471_index));
      if (_10255_)
      {
        _10254_ = ((*shape)((int)0));
      }
      else
      {
        _10254_ = (((*shape)((int)1)) - _2471_index);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)(((((*shape)((int)1)) - (int)1) - _2471_index))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_10254_);
    }
  }
  else
  {
    {
      int32_t _10256_;
      bool _10257_ = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2471_index ));
      if (_10257_)
      {
        _10256_ = ((*shape)((int)1));
      }
      else
      {
        _10256_ = safe_add( ((*shape)((int)0)),_2471_index );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((-_2471_index)),(int32_t)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_10256_);
    }
  }
}
// End mosek.fusion.BaseVariable.antidiag

// Begin mosek.fusion.BaseVariable.antidiag
// Method mosek.fusion.BaseVariable.antidiag @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:438:6-444:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
/* override: mosek.fusion.Variable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag()
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int32_t _10258_;
  bool _10259_ = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_10259_)
  {
    _10258_ = ((*shape)((int)0));
  }
  else
  {
    _10258_ = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_10258_);
}
// End mosek.fusion.BaseVariable.antidiag

// Begin mosek.fusion.BaseVariable.diag
// Method mosek.fusion.BaseVariable.diag @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:425:6-436:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int32_t _2472_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_2472_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int32_t _2472_index) { return __mosek_2fusion_2BaseVariable__diag(_2472_index); }
/* override: mosek.fusion.Variable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int32_t _2472_index) { return __mosek_2fusion_2BaseVariable__diag(_2472_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int32_t _2472_index)
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_2472_index >= ((*shape)((int)1))) || ((-_2472_index) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2472_index >= (int)0))
  {
    {
      int32_t _10260_;
      bool _10261_ = (((*shape)((int)0)) < (((*shape)((int)1)) - _2472_index));
      if (_10261_)
      {
        _10260_ = ((*shape)((int)0));
      }
      else
      {
        _10260_ = (((*shape)((int)1)) - _2472_index);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)(_2472_index)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_10260_);
    }
  }
  else
  {
    {
      int32_t _10262_;
      bool _10263_ = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2472_index ));
      if (_10263_)
      {
        _10262_ = ((*shape)((int)1));
      }
      else
      {
        _10262_ = safe_add( ((*shape)((int)0)),_2472_index );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((-_2472_index)),(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_10262_);
    }
  }
}
// End mosek.fusion.BaseVariable.diag

// Begin mosek.fusion.BaseVariable.diag
// Method mosek.fusion.BaseVariable.diag @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:418:6-423:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
/* override: mosek.fusion.Variable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag()
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int32_t _10264_;
  bool _10265_ = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_10265_)
  {
    _10264_ = ((*shape)((int)0));
  }
  else
  {
    _10264_ = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_10264_);
}
// End mosek.fusion.BaseVariable.diag

// Begin mosek.fusion.BaseVariable.general_diag
// Method mosek.fusion.BaseVariable.general_diag @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:368:6-415:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > > _2473_firstidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _2474_step,int32_t _2475_num)
{
  _checked_ptr_1<int32_t> _ptr__2473_firstidx(_2473_firstidx ? _2473_firstidx->raw() : nullptr, _2473_firstidx ? _2473_firstidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2474_step(_2474_step ? _2474_step->raw() : nullptr, _2474_step ? _2474_step->size(0) : 0);
  int32_t _2476_nd = (int)((shape)->size(0));
  if (((_2476_nd != (int)((_2473_firstidx)->size(0))) || (_2476_nd != (int)((_2474_step)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int32_t _10266_ = (int)0;
  int32_t _10267_ = _2476_nd;
  for (int32_t _2477_i = _10266_; _2477_i < _10267_; ++_2477_i)
  {
    {
      if (((_ptr__2473_firstidx[_2477_i] < (int)0) || (_ptr__2473_firstidx[_2477_i] >= ((*shape)(_2477_i)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2478_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2476_nd)));
  _checked_ptr_1<int64_t> _ptr__2478_strides(_2478_strides ? _2478_strides->raw() : nullptr,_2478_strides ? _2478_strides->size(0) : 0);
  _ptr__2478_strides[(_2476_nd - (int)1)] = (int)1;
  int32_t _10268_ = (int)1;
  int32_t _10269_ = _2476_nd;
  for (int32_t _2479_i = _10268_; _2479_i < _10269_; ++_2479_i)
  {
    {
      _ptr__2478_strides[((_2476_nd - _2479_i) - (int)1)] = safe_mul( _ptr__2478_strides[(_2476_nd - _2479_i)],((*shape)((_2476_nd - _2479_i))) );
    }
  }
  int64_t _2480_startidx = (int64_t)0;
  int32_t _10270_ = (int)0;
  int32_t _10271_ = (int)((_2474_step)->size(0));
  for (int32_t _2481_i = _10270_; _2481_i < _10271_; ++_2481_i)
  {
    {
      _2480_startidx += safe_mul( _ptr__2473_firstidx[_2481_i],_ptr__2478_strides[_2481_i] );
    }
  }
  int64_t _2482_stepstride = (int64_t)0;
  int32_t _10272_ = (int)0;
  int32_t _10273_ = (int)((_2474_step)->size(0));
  for (int32_t _2483_i = _10272_; _2483_i < _10273_; ++_2483_i)
  {
    {
      _2482_stepstride += safe_mul( _ptr__2474_step[_2483_i],_ptr__2478_strides[_2483_i] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2484_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2475_num)));
      _checked_ptr_1<int64_t> _ptr__2484_residxs(_2484_residxs ? _2484_residxs->raw() : nullptr,_2484_residxs ? _2484_residxs->size(0) : 0);
      int32_t _10274_ = (int)0;
      int32_t _10275_ = _2475_num;
      for (int32_t _2485_i = _10274_; _2485_i < _10275_; ++_2485_i)
      {
        {
          _ptr__2484_residxs[_2485_i] = ((*basevar_nativeidxs)(safe_add( _2480_startidx,safe_mul( _2482_stepstride,_2485_i ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2475_num)}),nullptr,_2484_residxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2486_numnz = (int)0;
      int32_t _10276_ = (int)0;
      int32_t _10277_ = _2475_num;
      for (int32_t _2487_i = _10276_; _2487_i < _10277_; ++_2487_i)
      {
        {
          int64_t _2488_residx = safe_add( _2480_startidx,safe_mul( _2482_stepstride,_2487_i ) );
          int32_t _2489_spidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2488_residx);
          if ((_2489_spidx >= (int)0))
          {
            {
              ++ _2486_numnz;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2490_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2486_numnz)));
      _checked_ptr_1<int64_t> _ptr__2490_residxs(_2490_residxs ? _2490_residxs->raw() : nullptr,_2490_residxs ? _2490_residxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2491_ressp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2486_numnz)));
      _checked_ptr_1<int64_t> _ptr__2491_ressp(_2491_ressp ? _2491_ressp->raw() : nullptr,_2491_ressp ? _2491_ressp->size(0) : 0);
      int32_t _2492_k = (int)0;
      int32_t _10278_ = (int)0;
      int32_t _10279_ = _2475_num;
      for (int32_t _2493_i = _10278_; _2493_i < _10279_; ++_2493_i)
      {
        {
          _ptr__2490_residxs[_2493_i] = ((*basevar_nativeidxs)(safe_add( _2480_startidx,safe_mul( _2482_stepstride,_2493_i ) )));
          int64_t _2494_residx = safe_add( _2480_startidx,safe_mul( _2482_stepstride,_2493_i ) );
          int32_t _2495_spidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2494_residx);
          if ((_2495_spidx >= (int)0))
          {
            {
              _ptr__2491_ressp[_2492_k] = _2493_i;
              _ptr__2490_residxs[_2492_k] = ((*basevar_nativeidxs)(_2495_spidx));
              ++ _2492_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2475_num)}),_2491_ressp,_2490_residxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.general_diag

// Begin mosek.fusion.BaseVariable.slice
// Method mosek.fusion.BaseVariable.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:260:6-357:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2496_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2497_last) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2496_first,_2497_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2496_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2497_last) { return __mosek_2fusion_2BaseVariable__slice(_2496_first,_2497_last); }
/* override: mosek.fusion.Variable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2496_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2497_last) { return __mosek_2fusion_2BaseVariable__slice(_2496_first,_2497_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2496_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2497_last)
{
  _checked_ptr_1<int32_t> _ptr__2496_first(_2496_first ? _2496_first->raw() : nullptr, _2496_first ? _2496_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2497_last(_2497_last ? _2497_last->raw() : nullptr, _2497_last ? _2497_last->size(0) : 0);
  if (((int)((_2496_first)->size(0)) != (int)((_2497_last)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_2496_first)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10280_ = (int)0;
      int32_t _10281_ = (int)((shape)->size(0));
      for (int32_t _2498_i = _10280_; _2498_i < _10281_; ++_2498_i)
      {
        {
          if (((_ptr__2496_first[_2498_i] < (int)0) || (_ptr__2497_last[_2498_i] > ((*shape)(_2498_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__2496_first[_2498_i] > _ptr__2497_last[_2498_i]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int32_t _2499_nd = (int)((shape)->size(0));
      std::vector<int32_t> _10282_;
      for (int32_t _2501_i = (int)0, _10283_ = _2499_nd; _2501_i < _10283_ ; ++_2501_i)
      {
        _10282_.push_back((_ptr__2497_last[_2501_i] - _ptr__2496_first[_2501_i]));
      }
      auto _10284_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10282_.size()),_10282_.begin(),_10282_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2500_sliceshape = _10284_;
      _checked_ptr_1<int32_t> _ptr__2500_sliceshape(_2500_sliceshape ? _2500_sliceshape->raw() : nullptr,_2500_sliceshape ? _2500_sliceshape->size(0) : 0);
      int32_t _2502_slicesize = (int)1;
      int32_t _10285_ = (int)0;
      int32_t _10286_ = _2499_nd;
      for (int32_t _2503_i = _10285_; _2503_i < _10286_; ++_2503_i)
      {
        {
          _2502_slicesize *= (_ptr__2497_last[_2503_i] - _ptr__2496_first[_2503_i]);
        }
      }
      if ((_2502_slicesize == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int32_t _2504_nnz = (int)0;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2505_key = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2499_nd)));
          _checked_ptr_1<int32_t> _ptr__2505_key(_2505_key ? _2505_key->raw() : nullptr,_2505_key ? _2505_key->size(0) : 0);
          int32_t _10287_ = (int)0;
          int32_t _10288_ = (int)((sparsity)->size(0));
          for (int32_t _2506_i = _10287_; _2506_i < _10288_; ++_2506_i)
          {
            {
              int64_t _2507_rem = ((*sparsity)(_2506_i));
              int32_t _10289_ = (int)1;
              int32_t _10290_ = _2499_nd;
              for (int32_t _2508_k = _10289_; _2508_k < _10290_; ++_2508_k)
              {
                {
                  _ptr__2505_key[(_2499_nd - _2508_k)] = (int32_t)(_2507_rem % ((*shape)((_2499_nd - _2508_k))));
                  _2507_rem /= ((*shape)((_2499_nd - _2508_k)));
                }
              }
              _ptr__2505_key[(int)0] = (int32_t)_2507_rem;
              int32_t _2509_k = (int)0;
              while ( ((_ptr__2505_key[_2509_k] >= _ptr__2496_first[_2509_k]) && (_ptr__2505_key[_2509_k] < _ptr__2497_last[_2509_k])) )
              {
                {
                  ++ _2509_k;
                }
              }
              if ((_2509_k == _2499_nd))
              {
                {
                  ++ _2504_nnz;
                }
              }
              {}
            }
          }
          int32_t _2510_idx = (int)0;
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2511_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2504_nnz)));
          _checked_ptr_1<int64_t> _ptr__2511_idxs(_2511_idxs ? _2511_idxs->raw() : nullptr,_2511_idxs ? _2511_idxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2512_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2504_nnz)));
          _checked_ptr_1<int64_t> _ptr__2512_sp(_2512_sp ? _2512_sp->raw() : nullptr,_2512_sp ? _2512_sp->size(0) : 0);
          int32_t _10291_ = (int)0;
          int32_t _10292_ = (int)((sparsity)->size(0));
          for (int32_t _2513_i = _10291_; _2513_i < _10292_; ++_2513_i)
          {
            {
              int64_t _2514_rem = ((*sparsity)(_2513_i));
              int32_t _10293_ = (int)1;
              int32_t _10294_ = _2499_nd;
              for (int32_t _2515_k = _10293_; _2515_k < _10294_; ++_2515_k)
              {
                {
                  _ptr__2505_key[(_2499_nd - _2515_k)] = (int32_t)(_2514_rem % ((*shape)((_2499_nd - _2515_k))));
                  _2514_rem /= ((*shape)((_2499_nd - _2515_k)));
                }
              }
              _ptr__2505_key[(int)0] = (int32_t)_2514_rem;
              int32_t _2516_k = (int)0;
              while ( ((_ptr__2505_key[_2516_k] >= _ptr__2496_first[_2516_k]) && (_ptr__2505_key[_2516_k] < _ptr__2497_last[_2516_k])) )
              {
                {
                  ++ _2516_k;
                }
              }
              if ((_2516_k == _2499_nd))
              {
                {
                  _ptr__2511_idxs[_2510_idx] = ((*basevar_nativeidxs)(_2513_i));
                  int32_t _2517_spidx = (int)0;
                  int32_t _10295_ = (int)0;
                  int32_t _10296_ = _2499_nd;
                  for (int32_t _2518_i = _10295_; _2518_i < _10296_; ++_2518_i)
                  {
                    {
                      _2517_spidx = safe_add( safe_mul( _2517_spidx,_ptr__2500_sliceshape[_2518_i] ),(_ptr__2505_key[_2518_i] - _ptr__2496_first[_2518_i]) );
                    }
                  }
                  _ptr__2512_sp[_2510_idx] = _2517_spidx;
                  ++ _2510_idx;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2500_sliceshape,_2512_sp,_2511_idxs)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2519_sliceidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2502_slicesize)));
          _checked_ptr_1<int64_t> _ptr__2519_sliceidxs(_2519_sliceidxs ? _2519_sliceidxs->raw() : nullptr,_2519_sliceidxs ? _2519_sliceidxs->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2520_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2499_nd)));
            _checked_ptr_1<int32_t> _ptr__2520_strides(_2520_strides ? _2520_strides->raw() : nullptr,_2520_strides ? _2520_strides->size(0) : 0);
            _ptr__2520_strides[(_2499_nd - (int)1)] = (int)1;
            int32_t _10297_ = (int)1;
            int32_t _10298_ = _2499_nd;
            for (int32_t _2521_i = _10297_; _2521_i < _10298_; ++_2521_i)
            {
              {
                _ptr__2520_strides[((_2499_nd - _2521_i) - (int)1)] = safe_mul( _ptr__2520_strides[(_2499_nd - _2521_i)],((*shape)((_2499_nd - _2521_i))) );
              }
            }
            int32_t _2522_start = (int)0;
            int32_t _10299_ = (int)0;
            int32_t _10300_ = _2499_nd;
            for (int32_t _2523_i = _10299_; _2523_i < _10300_; ++_2523_i)
            {
              {
                _2522_start += safe_mul( _ptr__2496_first[_2523_i],_ptr__2520_strides[_2523_i] );
              }
            }
            std::vector<int32_t> _10301_;
            for (int32_t _2525_i = (int)0, _10302_ = _2499_nd; _2525_i < _10302_ ; ++_2525_i)
            {
              _10301_.push_back(_2522_start);
            }
            auto _10303_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10301_.size()),_10301_.begin(),_10301_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2524_pp = _10303_;
            _checked_ptr_1<int32_t> _ptr__2524_pp(_2524_pp ? _2524_pp->raw() : nullptr,_2524_pp ? _2524_pp->size(0) : 0);
            std::vector<int32_t> _10304_;
            for (int32_t _2527_i = (int)0, _10305_ = _2499_nd; _2527_i < _10305_ ; ++_2527_i)
            {
              _10304_.push_back(_ptr__2496_first[_2527_i]);
            }
            auto _10306_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10304_.size()),_10304_.begin(),_10304_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2526_ii = _10306_;
            _checked_ptr_1<int32_t> _ptr__2526_ii(_2526_ii ? _2526_ii->raw() : nullptr,_2526_ii ? _2526_ii->size(0) : 0);
            int32_t _10307_ = (int)0;
            int32_t _10308_ = _2502_slicesize;
            for (int32_t _2528_i = _10307_; _2528_i < _10308_; ++_2528_i)
            {
              {
                _ptr__2519_sliceidxs[_2528_i] = ((*basevar_nativeidxs)(_ptr__2524_pp[(_2499_nd - (int)1)]));
                _ptr__2526_ii[(_2499_nd - (int)1)] += (int)1;
                _ptr__2524_pp[(_2499_nd - (int)1)] += _ptr__2520_strides[(_2499_nd - (int)1)];
                if ((_ptr__2526_ii[(_2499_nd - (int)1)] >= _ptr__2497_last[(_2499_nd - (int)1)]))
                {
                  {
                    int32_t _2529_k = (_2499_nd - (int)1);
                    while ( ((_2529_k > (int)0) && (_ptr__2526_ii[_2529_k] >= _ptr__2497_last[_2529_k])) )
                    {
                      {
                        _ptr__2526_ii[_2529_k] = _ptr__2496_first[_2529_k];
                        _ptr__2526_ii[(_2529_k - (int)1)] += (int)1;
                        _ptr__2524_pp[(_2529_k - (int)1)] += _ptr__2520_strides[(_2529_k - (int)1)];
                        -- _2529_k;
                      }
                    }
                    int32_t _10309_ = safe_add( _2529_k,(int)1 );
                    int32_t _10310_ = _2499_nd;
                    for (int32_t _2530_k2 = _10309_; _2530_k2 < _10310_; ++_2530_k2)
                    {
                      {
                        _ptr__2524_pp[_2530_k2] = _ptr__2524_pp[_2529_k];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2500_sliceshape,nullptr,_2519_sliceidxs)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.BaseVariable.slice

// Begin mosek.fusion.BaseVariable.slice
// Method mosek.fusion.BaseVariable.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:228:6-257:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int32_t _2531_first,int32_t _2532_last) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2531_first,_2532_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int32_t _2531_first,int32_t _2532_last) { return __mosek_2fusion_2BaseVariable__slice(_2531_first,_2532_last); }
/* override: mosek.fusion.Variable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int32_t _2531_first,int32_t _2532_last) { return __mosek_2fusion_2BaseVariable__slice(_2531_first,_2532_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2531_first,int32_t _2532_last)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2531_first == (int)0) && (_2532_last == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_2531_first < (int)0) || (_2532_last > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2531_first > _2532_last))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_2531_first == _2532_last))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int32_t _2533_slicesize = (_2532_last - _2531_first);
      int32_t _2534_nnz = (int)0;
      int32_t _2535_i0 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(int64_t)(_2531_first));
      int32_t _2536_i1 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(int64_t)(_2532_last));
      std::vector<int64_t> _10311_;
      for (int32_t _2537_i = _2535_i0, _10312_ = _2536_i1; _2537_i < _10312_ ; ++_2537_i)
      {
        _10311_.push_back((((*sparsity)(_2537_i)) - _2531_first));
      }
      auto _10313_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10311_.size()),_10311_.begin(),_10311_.end()));
      std::vector<int64_t> _10314_;
      for (int32_t _2538_i = _2535_i0, _10315_ = _2536_i1; _2538_i < _10315_ ; ++_2538_i)
      {
        _10314_.push_back(((*basevar_nativeidxs)(_2538_i)));
      }
      auto _10316_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10314_.size()),_10314_.begin(),_10314_.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2533_slicesize)}),_10313_,_10316_)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2539_slicesize = (_2532_last - _2531_first);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2540_sliceidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2539_slicesize)));
      _checked_ptr_1<int64_t> _ptr__2540_sliceidxs(_2540_sliceidxs ? _2540_sliceidxs->raw() : nullptr,_2540_sliceidxs ? _2540_sliceidxs->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(basevar_nativeidxs,_2531_first,_2540_sliceidxs,(int)0,_2539_slicesize);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2539_slicesize)}),nullptr,_2540_sliceidxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.slice

// Begin mosek.fusion.BaseVariable.asExpr
// Method mosek.fusion.BaseVariable.asExpr @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:226:6-74
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
/* override: mosek.fusion.Variable.asExpr*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr()
{
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseVariable.asExpr

// Begin mosek.fusion.BaseVariable.inst
// Method mosek.fusion.BaseVariable.inst @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:185:6-207:7
int32_t mosek::fusion::BaseVariable :: inst(int32_t _2541_spoffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2542_sparsity,int32_t _2543_nioffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2544_basevar_nativeidxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2541_spoffset,_2542_sparsity,_2543_nioffset,_2544_basevar_nativeidxs); }
int32_t mosek::fusion::p_BaseVariable::inst(int32_t _2541_spoffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2542_sparsity,int32_t _2543_nioffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2544_basevar_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2542_sparsity(_2542_sparsity ? _2542_sparsity->raw() : nullptr, _2542_sparsity ? _2542_sparsity->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2544_basevar_nativeidxs(_2544_basevar_nativeidxs ? _2544_basevar_nativeidxs->raw() : nullptr, _2544_basevar_nativeidxs ? _2544_basevar_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2545_thisnidxs = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->basevar_nativeidxs;
  _checked_ptr_1<int64_t> _ptr__2545_thisnidxs(_2545_thisnidxs ? _2545_thisnidxs->raw() : nullptr,_2545_thisnidxs ? _2545_thisnidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2546_thissp = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<int64_t> _ptr__2546_thissp(_2546_thissp ? _2546_thissp->raw() : nullptr,_2546_thissp ? _2546_thissp->size(0) : 0);
  if ((NULL == _2546_thissp.get()))
  {
    {
      int32_t _10317_ = (int)0;
      int32_t _10318_ = (int)((_2545_thisnidxs)->size(0));
      for (int32_t _2547_i = _10317_; _2547_i < _10318_; ++_2547_i)
      {
        {
          _ptr__2542_sparsity[safe_add( _2547_i,_2541_spoffset )] = _2547_i;
          _ptr__2544_basevar_nativeidxs[safe_add( _2547_i,_2543_nioffset )] = _ptr__2545_thisnidxs[_2547_i];
        }
      }
    }
  }
  else
  {
    {
      int32_t _10319_ = (int)0;
      int32_t _10320_ = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int32_t _2548_i = _10319_; _2548_i < _10320_; ++_2548_i)
      {
        {
          _ptr__2542_sparsity[safe_add( _2541_spoffset,_2548_i )] = _ptr__2546_thissp[_2548_i];
          _ptr__2544_basevar_nativeidxs[safe_add( _2548_i,_2543_nioffset )] = _ptr__2545_thisnidxs[_2548_i];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->basevar_nativeidxs)->size(0));
}
// End mosek.fusion.BaseVariable.inst

// Begin mosek.fusion.BaseVariable.numInst
// Method mosek.fusion.BaseVariable.numInst @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:181:6-183:7
int32_t mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }
int32_t mosek::fusion::p_BaseVariable::numInst()
{
  return (int)((basevar_nativeidxs)->size(0));
}
// End mosek.fusion.BaseVariable.numInst

// Begin mosek.fusion.BaseVariable.inst
// Method mosek.fusion.BaseVariable.inst @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:165:6-179:7
void mosek::fusion::BaseVariable :: inst(int32_t _2549_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2550_nindex) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2549_offset,_2550_nindex); }
void mosek::fusion::p_BaseVariable::inst(int32_t _2549_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2550_nindex)
{
  _checked_ptr_1<int64_t> _ptr__2550_nindex(_2550_nindex ? _2550_nindex->raw() : nullptr, _2550_nindex ? _2550_nindex->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int32_t _10321_ = (int)0;
      int32_t _10322_ = (int)((basevar_nativeidxs)->size(0));
      for (int32_t _2551_i = _10321_; _2551_i < _10322_; ++_2551_i)
      {
        {
          _ptr__2550_nindex[safe_add( _2549_offset,_2551_i )] = ((*basevar_nativeidxs)(_2551_i));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2552_shape = _pubthis->getShape();
      _checked_ptr_1<int32_t> _ptr__2552_shape(_2552_shape ? _2552_shape->raw() : nullptr,_2552_shape ? _2552_shape->size(0) : 0);
      int32_t _2553_domsize = (int)1;
      int32_t _10323_ = (int)0;
      int32_t _10324_ = (int)((_2552_shape)->size(0));
      for (int32_t _2554_i = _10323_; _2554_i < _10324_; ++_2554_i)
      {
        {
          _2553_domsize *= _ptr__2552_shape[_2554_i];
        }
      }
      int32_t _10325_ = (int)0;
      int32_t _10326_ = _2553_domsize;
      for (int32_t _2555_i = _10325_; _2555_i < _10326_; ++_2555_i)
      {
        {
          _ptr__2550_nindex[safe_add( _2549_offset,_2555_i )] = (int)0;
        }
      }
      int32_t _10327_ = (int)0;
      int32_t _10328_ = (int)((sparsity)->size(0));
      for (int32_t _2556_i = _10327_; _2556_i < _10328_; ++_2556_i)
      {
        {
          _ptr__2550_nindex[safe_add( _2549_offset,((*sparsity)(_2556_i)) )] = ((*basevar_nativeidxs)(_2556_i));
        }
      }
    }
  }
}
// End mosek.fusion.BaseVariable.inst

// Begin mosek.fusion.BaseVariable.set_values
// Method mosek.fusion.BaseVariable.set_values @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:147:6-163:7
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2557_values,bool _2558_primal) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_2557_values,_2558_primal); }
void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2557_values,bool _2558_primal)
{
  _checked_ptr_1<double> _ptr__2557_values(_2557_values ? _2557_values->raw() : nullptr, _2557_values ? _2557_values->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2558_primal,basevar_nativeidxs,_2557_values);
    }
  }
  else
  {
    {
      int32_t _2559_varsize = (int)1;
      int32_t _10329_ = (int)0;
      int32_t _10330_ = (int)((shape)->size(0));
      for (int32_t _2560_i = _10329_; _2560_i < _10330_; ++_2560_i)
      {
        {
          _2559_varsize *= ((*shape)(_2560_i));
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2561_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2559_varsize)));
      _checked_ptr_1<int64_t> _ptr__2561_idxs(_2561_idxs ? _2561_idxs->raw() : nullptr,_2561_idxs ? _2561_idxs->size(0) : 0);
      int32_t _10331_ = (int)0;
      int32_t _10332_ = (int)((basevar_nativeidxs)->size(0));
      for (int32_t _2562_i = _10331_; _2562_i < _10332_; ++_2562_i)
      {
        {
          _ptr__2561_idxs[((*sparsity)(_2562_i))] = ((*basevar_nativeidxs)(_2562_i));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2558_primal,_2561_idxs,_2557_values);
    }
  }
}
// End mosek.fusion.BaseVariable.set_values

// Begin mosek.fusion.BaseVariable.dual_lu
// Method mosek.fusion.BaseVariable.dual_lu @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:131:6-144:7
void mosek::fusion::p_BaseVariable::dual_lu(int32_t _2563_offset,std::shared_ptr< monty::ndarray< double,1 > > _2564_target,bool _2565_lower)
{
  _checked_ptr_1<double> _ptr__2564_target(_2564_target ? _2564_target->raw() : nullptr, _2564_target ? _2564_target->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_2565_lower,basevar_nativeidxs,_2564_target,_2563_offset);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2566_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<int64_t> _ptr__2566_idxs(_2566_idxs ? _2566_idxs->raw() : nullptr,_2566_idxs ? _2566_idxs->size(0) : 0);
      int32_t _10333_ = (int)0;
      int32_t _10334_ = (int)((sparsity)->size(0));
      for (int32_t _2567_i = _10333_; _2567_i < _10334_; ++_2567_i)
      {
        {
          _ptr__2566_idxs[((*sparsity)(_2567_i))] = ((*basevar_nativeidxs)(_2567_i));
        }
      }
      model->getVariableDuals(_2565_lower,_2566_idxs,_2564_target,_2563_offset);
    }
  }
}
// End mosek.fusion.BaseVariable.dual_lu

// Begin mosek.fusion.BaseVariable.values
// Method mosek.fusion.BaseVariable.values @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:116:6-129:7
void mosek::fusion::BaseVariable :: values(int32_t _2568_offset,std::shared_ptr< monty::ndarray< double,1 > > _2569_target,bool _2570_primal) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2568_offset,_2569_target,_2570_primal); }
void mosek::fusion::p_BaseVariable::values(int32_t _2568_offset,std::shared_ptr< monty::ndarray< double,1 > > _2569_target,bool _2570_primal)
{
  _checked_ptr_1<double> _ptr__2569_target(_2569_target ? _2569_target->raw() : nullptr, _2569_target ? _2569_target->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_2570_primal,basevar_nativeidxs,_2569_target,_2568_offset);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2571_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<int64_t> _ptr__2571_idxs(_2571_idxs ? _2571_idxs->raw() : nullptr,_2571_idxs ? _2571_idxs->size(0) : 0);
      int32_t _10335_ = (int)0;
      int32_t _10336_ = (int)((sparsity)->size(0));
      for (int32_t _2572_i = _10335_; _2572_i < _10336_; ++_2572_i)
      {
        {
          _ptr__2571_idxs[((*sparsity)(_2572_i))] = ((*basevar_nativeidxs)(_2572_i));
        }
      }
      model->getVariableValues(_2570_primal,_2571_idxs,_2569_target,_2568_offset);
    }
  }
}
// End mosek.fusion.BaseVariable.values

// Begin mosek.fusion.BaseVariable.make_continuous
// Method mosek.fusion.BaseVariable.make_continuous @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:114:6-89
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }
void mosek::fusion::p_BaseVariable::make_continuous()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(basevar_nativeidxs);
}
// End mosek.fusion.BaseVariable.make_continuous

// Begin mosek.fusion.BaseVariable.make_integer
// Method mosek.fusion.BaseVariable.make_integer @ bld/docker-rockylinux-8/final/default/src/fusion/BaseVariable.monty:113:6-83
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }
void mosek::fusion::p_BaseVariable::make_integer()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(basevar_nativeidxs);
}
// End mosek.fusion.BaseVariable.make_integer

void mosek::fusion::p_BaseVariable::destroy()
{
  sparsity.reset();
  basevar_nativeidxs.reset();
  model.reset();
  shape.reset();
}
void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }
// } class BaseVariable
// class Variable { // @ bld/docker-rockylinux-8/final/default/src/fusion/Variable.mbi:187:4-419:5
// Begin mosek.fusion.Variable.toString
// End mosek.fusion.Variable.toString

// Begin mosek.fusion.Variable.numInst
// End mosek.fusion.Variable.numInst

// Begin mosek.fusion.Variable.inst
// End mosek.fusion.Variable.inst

// Begin mosek.fusion.Variable.inst
// End mosek.fusion.Variable.inst

// Begin mosek.fusion.Variable.remove
// End mosek.fusion.Variable.remove

// Begin mosek.fusion.Variable.getND
// End mosek.fusion.Variable.getND

// Begin mosek.fusion.Variable.getShape
// End mosek.fusion.Variable.getShape

// Begin mosek.fusion.Variable.getSize
// End mosek.fusion.Variable.getSize

// Begin mosek.fusion.Variable.setLevel
// End mosek.fusion.Variable.setLevel

// Begin mosek.fusion.Variable.fromTril
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::fromTril(int32_t _2580_dim) { return __mosek_2fusion_2Variable__fromTril(_2580_dim); }
// End mosek.fusion.Variable.fromTril

// Begin mosek.fusion.Variable.tril
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::tril() { return __mosek_2fusion_2Variable__tril(); }
// End mosek.fusion.Variable.tril

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2581_dim0,int32_t _2582_dim1,int32_t _2583_dim2) { return __mosek_2fusion_2Variable__reshape(_2581_dim0,_2582_dim1,_2583_dim2); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2584_dim0,int32_t _2585_dim1) { return __mosek_2fusion_2Variable__reshape(_2584_dim0,_2585_dim1); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2586_dim0) { return __mosek_2fusion_2Variable__reshape(_2586_dim0); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2587_shape) { return __mosek_2fusion_2Variable__reshape(_2587_shape); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.set_values
// End mosek.fusion.Variable.set_values

// Begin mosek.fusion.Variable.dual
// End mosek.fusion.Variable.dual

// Begin mosek.fusion.Variable.level
// End mosek.fusion.Variable.level

// Begin mosek.fusion.Variable.values
// End mosek.fusion.Variable.values

// Begin mosek.fusion.Variable.make_continuous
// End mosek.fusion.Variable.make_continuous

// Begin mosek.fusion.Variable.make_integer
// End mosek.fusion.Variable.make_integer

// Begin mosek.fusion.Variable.makeContinuous
// End mosek.fusion.Variable.makeContinuous

// Begin mosek.fusion.Variable.makeInteger
// End mosek.fusion.Variable.makeInteger

// Begin mosek.fusion.Variable.transpose
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
// End mosek.fusion.Variable.transpose

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2593_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2594_i2,std::shared_ptr< monty::ndarray< int32_t,1 > > _2595_i3) { return __mosek_2fusion_2Variable__pick(_2593_i1,_2594_i2,_2595_i3); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2596_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2597_i2) { return __mosek_2fusion_2Variable__pick(_2596_i1,_2597_i2); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2598_midxs) { return __mosek_2fusion_2Variable__pick(_2598_midxs); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2598_midxs) { return __mosek_2fusion_2Variable__pick(_2598_midxs); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2599_idxs) { return __mosek_2fusion_2Variable__pick(_2599_idxs); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2599_idxs) { return __mosek_2fusion_2Variable__pick(_2599_idxs); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.antidiag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
// End mosek.fusion.Variable.antidiag

// Begin mosek.fusion.Variable.antidiag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int32_t _2600_index) { return __mosek_2fusion_2Variable__antidiag(_2600_index); }
// End mosek.fusion.Variable.antidiag

// Begin mosek.fusion.Variable.diag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
// End mosek.fusion.Variable.diag

// Begin mosek.fusion.Variable.diag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int32_t _2601_index) { return __mosek_2fusion_2Variable__diag(_2601_index); }
// End mosek.fusion.Variable.diag

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2602_idx) { return __mosek_2fusion_2Variable__index(_2602_idx); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2602_idx) { return __mosek_2fusion_2Variable__index(_2602_idx); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2603_i1,int32_t _2604_i2,int32_t _2605_i3) { return __mosek_2fusion_2Variable__index(_2603_i1,_2604_i2,_2605_i3); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2606_i1,int32_t _2607_i2) { return __mosek_2fusion_2Variable__index(_2606_i1,_2607_i2); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int32_t _2608_i1) { return __mosek_2fusion_2Variable__index(_2608_i1); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2608_i1) { return __mosek_2fusion_2Variable__index(_2608_i1); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2609_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2610_lasta) { return __mosek_2fusion_2Variable__slice(_2609_firsta,_2610_lasta); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2609_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2610_lasta) { return __mosek_2fusion_2Variable__slice(_2609_firsta,_2610_lasta); }
// End mosek.fusion.Variable.slice

// Begin mosek.fusion.Variable.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int32_t _2611_first,int32_t _2612_last) { return __mosek_2fusion_2Variable__slice(_2611_first,_2612_last); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int32_t _2611_first,int32_t _2612_last) { return __mosek_2fusion_2Variable__slice(_2611_first,_2612_last); }
// End mosek.fusion.Variable.slice

// Begin mosek.fusion.Variable.asExpr
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
// End mosek.fusion.Variable.asExpr

// } class Variable
// class Var { // @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:144:4-833:5
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Var::p_Var
  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Var.empty
// Method mosek.fusion.Var.empty @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:827:6-832:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _2613_shape) { return mosek::fusion::p_Var::empty(_2613_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int32_t,1 > > _2613_shape)
{
  _checked_ptr_1<int32_t> _ptr__2613_shape(_2613_shape ? _2613_shape->raw() : nullptr, _2613_shape ? _2613_shape->size(0) : 0);
  int32_t _10337_ = (int)0;
  int32_t _10338_ = (int)((_2613_shape)->size(0));
  for (int32_t _2614_i = _10337_; _2614_i < _10338_; ++_2614_i)
  {
    {
      if ((_ptr__2613_shape[_2614_i] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_2613_shape)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Var.empty

// Begin mosek.fusion.Var.compress
// Method mosek.fusion.Var.compress @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:801:6-819:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2615_v) { return mosek::fusion::p_Var::compress(_2615_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _2615_v)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2616_shape = _2615_v->getShape();
  _checked_ptr_1<int32_t> _ptr__2616_shape(_2616_shape ? _2616_shape->raw() : nullptr,_2616_shape ? _2616_shape->size(0) : 0);
  int32_t _2617_nd = (int)((_2616_shape)->size(0));
  int32_t _2618_realnd = (int)0;
  int32_t _10339_ = (int)0;
  int32_t _10340_ = _2617_nd;
  for (int32_t _2619_i = _10339_; _2619_i < _10340_; ++_2619_i)
  {
    {
      if ((_ptr__2616_shape[_2619_i] != (int)1))
      {
        {
          ++ _2618_realnd;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2620_realshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2618_realnd)));
  _checked_ptr_1<int32_t> _ptr__2620_realshape(_2620_realshape ? _2620_realshape->raw() : nullptr,_2620_realshape ? _2620_realshape->size(0) : 0);
  {
    int32_t _2621_k = (int)0;
    int32_t _10341_ = (int)0;
    int32_t _10342_ = _2617_nd;
    for (int32_t _2622_i = _10341_; _2622_i < _10342_; ++_2622_i)
    {
      {
        if ((_ptr__2616_shape[_2622_i] != (int)1))
        {
          {
            _ptr__2620_realshape[_2621_k] = _ptr__2616_shape[_2622_i];
            ++ _2621_k;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_2615_v,_2620_realshape);
}
// End mosek.fusion.Var.compress

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:784:6-787:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2623_v,
    int32_t _2624_d1) { return mosek::fusion::p_Var::reshape(_2623_v,_2624_d1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2623_v,int32_t _2624_d1)
{
  return ::mosek::fusion::p_Var::reshape(_2623_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2624_d1)}));
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:770:6-773:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2625_v,
    int32_t _2626_d1,
    int32_t _2627_d2) { return mosek::fusion::p_Var::reshape(_2625_v,_2626_d1,_2627_d2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2625_v,int32_t _2626_d1,int32_t _2627_d2)
{
  return ::mosek::fusion::p_Var::reshape(_2625_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2626_d1),(int32_t)(_2627_d2)}));
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.flatten
// Method mosek.fusion.Var.flatten @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:757:6-760:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2628_v) { return mosek::fusion::p_Var::flatten(_2628_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _2628_v)
{
  return ::mosek::fusion::p_Var::reshape(_2628_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int32_t)::mosek::fusion::p_Set::size(_2628_v->getShape()))}));
}
// End mosek.fusion.Var.flatten

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:726:6-728:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2629_v,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2630_shape) { return mosek::fusion::p_Var::reshape(_2629_v,_2630_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2629_v,std::shared_ptr< monty::ndarray< int32_t,1 > > _2630_shape)
{
  _checked_ptr_1<int32_t> _ptr__2630_shape(_2630_shape ? _2630_shape->raw() : nullptr, _2630_shape ? _2630_shape->size(0) : 0);
  return _2629_v->__mosek_2fusion_2Variable__reshape(_2630_shape);
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.index_permute_
// Method mosek.fusion.Var.index_permute_ @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:638:6-691:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _2631_v,std::shared_ptr< monty::ndarray< int32_t,1 > > _2632_perm)
{
  _checked_ptr_1<int32_t> _ptr__2632_perm(_2632_perm ? _2632_perm->raw() : nullptr, _2632_perm ? _2632_perm->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2633_sparsity;
  _checked_ptr_1<int64_t> _ptr__2633_sparsity(_2633_sparsity ? _2633_sparsity->raw() : nullptr,_2633_sparsity ? _2633_sparsity->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2634_nativeidxs;
  _checked_ptr_1<int64_t> _ptr__2634_nativeidxs(_2634_nativeidxs ? _2634_nativeidxs->raw() : nullptr,_2634_nativeidxs ? _2634_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2635_shape = _2631_v->getShape();
  _checked_ptr_1<int32_t> _ptr__2635_shape(_2635_shape ? _2635_shape->raw() : nullptr,_2635_shape ? _2635_shape->size(0) : 0);
  int32_t _2636_nd = (int)((_2635_shape)->size(0));
  int32_t _2637_shapesize = (int)1;
  int32_t _10343_ = (int)0;
  int32_t _10344_ = _2636_nd;
  for (int32_t _2638_i = _10343_; _2638_i < _10344_; ++_2638_i)
  {
    {
      _2637_shapesize *= _ptr__2635_shape[_2638_i];
    }
  }
  int32_t _2639_nnz = _2631_v->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2640_pstrides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2636_nd)));
  _checked_ptr_1<int64_t> _ptr__2640_pstrides(_2640_pstrides ? _2640_pstrides->raw() : nullptr,_2640_pstrides ? _2640_pstrides->size(0) : 0);
  _ptr__2640_pstrides[(_2636_nd - (int)1)] = (int)1;
  int32_t _10345_ = (int)1;
  int32_t _10346_ = _2636_nd;
  for (int32_t _2641_i = _10345_; _2641_i < _10346_; ++_2641_i)
  {
    {
      _ptr__2640_pstrides[((_2636_nd - _2641_i) - (int)1)] = safe_mul( _ptr__2640_pstrides[(_2636_nd - _2641_i)],_ptr__2635_shape[_ptr__2632_perm[(_2636_nd - _2641_i)]] );
    }
  }
  if ((_2639_nnz < _2637_shapesize))
  {
    {
      _2633_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2639_nnz)));
      _ptr__2633_sparsity.update(_2633_sparsity ? _2633_sparsity->raw() : nullptr, _2633_sparsity ? _2633_sparsity->size(0) : 0);
      _2634_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2639_nnz)));
      _ptr__2634_nativeidxs.update(_2634_nativeidxs ? _2634_nativeidxs->raw() : nullptr, _2634_nativeidxs ? _2634_nativeidxs->size(0) : 0);
      _2631_v->inst((int)0,_2633_sparsity,(int)0,_2634_nativeidxs);
    }
  }
  else
  {
    {
      _2633_sparsity = nullptr;
      _ptr__2633_sparsity.update(_2633_sparsity ? _2633_sparsity->raw() : nullptr, _2633_sparsity ? _2633_sparsity->size(0) : 0);
      _2634_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2639_nnz)));
      _ptr__2634_nativeidxs.update(_2634_nativeidxs ? _2634_nativeidxs->raw() : nullptr, _2634_nativeidxs ? _2634_nativeidxs->size(0) : 0);
      _2631_v->inst((int)0,_2634_nativeidxs);
    }
  }
  if ((NULL == _2633_sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2642_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2639_nnz)));
      _checked_ptr_1<int64_t> _ptr__2642_residxs(_2642_residxs ? _2642_residxs->raw() : nullptr,_2642_residxs ? _2642_residxs->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _2643_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2636_nd)));
        _checked_ptr_1<int32_t> _ptr__2643_ii(_2643_ii ? _2643_ii->raw() : nullptr,_2643_ii ? _2643_ii->size(0) : 0);
        int32_t _10347_ = (int)0;
        int32_t _10348_ = _2639_nnz;
        for (int32_t _2644_i = _10347_; _2644_i < _10348_; ++_2644_i)
        {
          {
            int32_t _2645_rem = _2644_i;
            int32_t _10349_ = (int)0;
            int32_t _10350_ = _2636_nd;
            for (int32_t _2646_j = _10349_; _2646_j < _10350_; ++_2646_j)
            {
              {
                _ptr__2643_ii[((_2636_nd - _2644_i) - (int)1)] = (_2645_rem % _ptr__2635_shape[((_2636_nd - _2644_i) - (int)1)]);
                _2645_rem /= _ptr__2635_shape[((_2636_nd - _2644_i) - (int)1)];
              }
            }
            int32_t _2647_newi = (int)0;
            int32_t _10351_ = (int)0;
            int32_t _10352_ = _2636_nd;
            for (int32_t _2648_j = _10351_; _2648_j < _10352_; ++_2648_j)
            {
              {
                _2647_newi += (int32_t)safe_mul( _ptr__2643_ii[_ptr__2632_perm[_2648_j]],_ptr__2640_pstrides[_2648_j] );
              }
            }
            _ptr__2642_residxs[_2647_newi] = _ptr__2634_nativeidxs[_2644_i];
          }
        }
      }
      _2634_nativeidxs = _2642_residxs;
      _ptr__2634_nativeidxs.update(_2634_nativeidxs ? _2634_nativeidxs->raw() : nullptr, _2634_nativeidxs ? _2634_nativeidxs->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2649_ressp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2639_nnz)));
      _checked_ptr_1<int64_t> _ptr__2649_ressp(_2649_ressp ? _2649_ressp->raw() : nullptr,_2649_ressp ? _2649_ressp->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _2650_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2636_nd)));
        _checked_ptr_1<int32_t> _ptr__2650_ii(_2650_ii ? _2650_ii->raw() : nullptr,_2650_ii ? _2650_ii->size(0) : 0);
        int32_t _10353_ = (int)0;
        int32_t _10354_ = _2639_nnz;
        for (int32_t _2651_i = _10353_; _2651_i < _10354_; ++_2651_i)
        {
          {
            int32_t _2652_rem = _2651_i;
            int32_t _10355_ = (int)0;
            int32_t _10356_ = _2636_nd;
            for (int32_t _2653_j = _10355_; _2653_j < _10356_; ++_2653_j)
            {
              {
                _ptr__2650_ii[((_2636_nd - _2651_i) - (int)1)] = (_2652_rem % _ptr__2635_shape[((_2636_nd - _2651_i) - (int)1)]);
                _2652_rem /= _ptr__2635_shape[((_2636_nd - _2651_i) - (int)1)];
              }
            }
            int32_t _2654_newi = (int)0;
            int32_t _10357_ = (int)0;
            int32_t _10358_ = _2636_nd;
            for (int32_t _2655_j = _10357_; _2655_j < _10358_; ++_2655_j)
            {
              {
                _2654_newi += (int32_t)safe_mul( _ptr__2650_ii[_ptr__2632_perm[_2655_j]],_ptr__2640_pstrides[_2655_j] );
              }
            }
            _ptr__2649_ressp[_2651_i] = _2654_newi;
          }
        }
      }
      std::vector<int64_t> _10359_;
      for (int32_t _2657_i = (int)0, _10360_ = _2639_nnz; _2657_i < _10360_ ; ++_2657_i)
      {
        _10359_.push_back(_2657_i);
      }
      auto _10361_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10359_.size()),_10359_.begin(),_10359_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2656_spperm = _10361_;
      _checked_ptr_1<int64_t> _ptr__2656_spperm(_2656_spperm ? _2656_spperm->raw() : nullptr,_2656_spperm ? _2656_spperm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2656_spperm,_2649_ressp,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2639_nnz));
      std::vector<int64_t> _10362_;
      for (int32_t _2658_i = (int)0, _10363_ = _2639_nnz; _2658_i < _10363_ ; ++_2658_i)
      {
        _10362_.push_back(_ptr__2633_sparsity[_ptr__2656_spperm[_2658_i]]);
      }
      auto _10364_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10362_.size()),_10362_.begin(),_10362_.end()));
      _2633_sparsity = _10364_;
      _ptr__2633_sparsity.update(_2633_sparsity ? _2633_sparsity->raw() : nullptr, _2633_sparsity ? _2633_sparsity->size(0) : 0);
      std::vector<int64_t> _10365_;
      for (int32_t _2659_i = (int)0, _10366_ = _2639_nnz; _2659_i < _10366_ ; ++_2659_i)
      {
        _10365_.push_back(_ptr__2634_nativeidxs[_ptr__2656_spperm[_2659_i]]);
      }
      auto _10367_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10365_.size()),_10365_.begin(),_10365_.end()));
      _2634_nativeidxs = _10367_;
      _ptr__2634_nativeidxs.update(_2634_nativeidxs ? _2634_nativeidxs->raw() : nullptr, _2634_nativeidxs ? _2634_nativeidxs->size(0) : 0);
    }
  }
  std::vector<int32_t> _10368_;
  for (int32_t _2660_i = (int)0, _10369_ = _2636_nd; _2660_i < _10369_ ; ++_2660_i)
  {
    _10368_.push_back(_ptr__2635_shape[_ptr__2632_perm[_2660_i]]);
  }
  auto _10370_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10368_.size()),_10368_.begin(),_10368_.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2631_v->__mosek_2fusion_2Expression__getModel(),_10370_,_2633_sparsity,_2634_nativeidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Var.index_permute_

// Begin mosek.fusion.Var.hrepeat
// Method mosek.fusion.Var.hrepeat @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:630:6-106
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2661_v,
    int32_t _2662_n) { return mosek::fusion::p_Var::hrepeat(_2661_v,_2662_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2661_v,int32_t _2662_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2661_v,(int)1,_2662_n);
}
// End mosek.fusion.Var.hrepeat

// Begin mosek.fusion.Var.vrepeat
// Method mosek.fusion.Var.vrepeat @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:629:6-106
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2663_v,
    int32_t _2664_n) { return mosek::fusion::p_Var::vrepeat(_2663_v,_2664_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2663_v,int32_t _2664_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2663_v,(int)0,_2664_n);
}
// End mosek.fusion.Var.vrepeat

// Begin mosek.fusion.Var.repeat
// Method mosek.fusion.Var.repeat @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:628:6-106
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2665_v,
    int32_t _2666_n) { return mosek::fusion::p_Var::repeat(_2665_v,_2666_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2665_v,int32_t _2666_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2665_v,(int)0,_2666_n);
}
// End mosek.fusion.Var.repeat

// Begin mosek.fusion.Var.repeat
// Method mosek.fusion.Var.repeat @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:627:6-106
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2667_v,
    int32_t _2668_n,
    int32_t _2669_dim) { return mosek::fusion::p_Var::repeat(_2667_v,_2668_n,_2669_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2667_v,int32_t _2668_n,int32_t _2669_dim)
{
  return ::mosek::fusion::p_Var::drepeat(_2667_v,_2669_dim,_2668_n);
}
// End mosek.fusion.Var.repeat

// Begin mosek.fusion.Var.drepeat
// Method mosek.fusion.Var.drepeat @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:472:6-625:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2670_v,int32_t _2671_dim,int32_t _2672_n)
{
  if ((_2672_n < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_2672_n == (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2673_vshape = _2670_v->getShape();
      _checked_ptr_1<int32_t> _ptr__2673_vshape(_2673_vshape ? _2673_vshape->raw() : nullptr,_2673_vshape ? _2673_vshape->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2674_shape = _2673_vshape;
      _checked_ptr_1<int32_t> _ptr__2674_shape(_2674_shape ? _2674_shape->raw() : nullptr,_2674_shape ? _2674_shape->size(0) : 0);
      if (((int)((_2673_vshape)->size(0)) == _2671_dim))
      {
        {
          _2674_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2671_dim,(int)1 ))));
          _ptr__2674_shape.update(_2674_shape ? _2674_shape->raw() : nullptr, _2674_shape ? _2674_shape->size(0) : 0);
          int32_t _10371_ = (int)0;
          int32_t _10372_ = _2671_dim;
          for (int32_t _2675_i = _10371_; _2675_i < _10372_; ++_2675_i)
          {
            {
              _ptr__2674_shape[_2675_i] = _ptr__2673_vshape[_2675_i];
            }
          }
        }
      }
      {}
      _ptr__2674_shape[_2671_dim] = (int)0;
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("drepeat dim="))->__mosek_2fusion_2Debug__p(_2671_dim)->__mosek_2fusion_2Debug__p(std::string (", n="))->__mosek_2fusion_2Debug__p(_2672_n)->__mosek_2fusion_2Debug__p(std::string (", shape="))->__mosek_2fusion_2Debug__p(_2670_v->getShape())->__mosek_2fusion_2Debug__p(std::string (" -> "))->__mosek_2fusion_2Debug__p(_2674_shape)->__mosek_2fusion_2Debug__lf();
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(_2674_shape)).as<::mosek::fusion::Variable>();
    }
  }
  else if((_2672_n == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2676_vshape = _2670_v->getShape();
      _checked_ptr_1<int32_t> _ptr__2676_vshape(_2676_vshape ? _2676_vshape->raw() : nullptr,_2676_vshape ? _2676_vshape->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2677_shape = _2676_vshape;
      _checked_ptr_1<int32_t> _ptr__2677_shape(_2677_shape ? _2677_shape->raw() : nullptr,_2677_shape ? _2677_shape->size(0) : 0);
      if (((int)((_2676_vshape)->size(0)) == _2671_dim))
      {
        {
          _2677_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2671_dim,(int)1 ))));
          _ptr__2677_shape.update(_2677_shape ? _2677_shape->raw() : nullptr, _2677_shape ? _2677_shape->size(0) : 0);
          int32_t _10373_ = (int)0;
          int32_t _10374_ = _2671_dim;
          for (int32_t _2678_i = _10373_; _2678_i < _10374_; ++_2678_i)
          {
            {
              _ptr__2677_shape[_2678_i] = _ptr__2676_vshape[_2678_i];
            }
          }
          _ptr__2677_shape[_2671_dim] = (int)1;
        }
      }
      {}
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("drepeat dim="))->__mosek_2fusion_2Debug__p(_2671_dim)->__mosek_2fusion_2Debug__p(std::string (", n="))->__mosek_2fusion_2Debug__p(_2672_n)->__mosek_2fusion_2Debug__p(std::string (", shape="))->__mosek_2fusion_2Debug__p(_2670_v->getShape())->__mosek_2fusion_2Debug__p(std::string (" -> "))->__mosek_2fusion_2Debug__p(_2677_shape)->__mosek_2fusion_2Debug__lf();
      return _2670_v;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _2679_model = _2670_v->__mosek_2fusion_2Expression__getModel();
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2680_shape = _2670_v->getShape();
      _checked_ptr_1<int32_t> _ptr__2680_shape(_2680_shape ? _2680_shape->raw() : nullptr,_2680_shape ? _2680_shape->size(0) : 0);
      int32_t _2681_nd = (int)((_2680_shape)->size(0));
      if (((_2671_dim < (int)0) || (_2671_dim > _2681_nd)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int64_t _2682_domsize = ::mosek::fusion::p_Set::size(_2680_shape);
      int32_t _2683_nnz = _2670_v->numInst();
      int32_t _2684_rnnz = safe_mul( _2683_nnz,_2672_n );
      int32_t _2685_d0 = (int)1;
      int32_t _10375_ = (int)0;
      int32_t _10376_ = _2671_dim;
      for (int32_t _2686_i = _10375_; _2686_i < _10376_; ++_2686_i)
      {
        {
          _2685_d0 *= _ptr__2680_shape[_2686_i];
        }
      }
      int32_t _10377_;
      bool _10378_ = (_2671_dim < _2681_nd);
      if (_10378_)
      {
        _10377_ = _ptr__2680_shape[_2671_dim];
      }
      else
      {
        _10377_ = (int)1;
      }
      int32_t _2687_d1 = _10377_;
      int32_t _2688_nd1 = safe_mul( _2687_d1,_2672_n );
      int32_t _2689_d2 = (int)1;
      int32_t _10379_ = safe_add( _2671_dim,(int)1 );
      int32_t _10380_ = _2681_nd;
      for (int32_t _2690_i = _10379_; _2690_i < _10380_; ++_2690_i)
      {
        {
          _2689_d2 *= _ptr__2680_shape[_2690_i];
        }
      }
      int32_t _10381_;
      bool _10382_ = (_2671_dim < _2681_nd);
      if (_10382_)
      {
        _10381_ = _2681_nd;
      }
      else
      {
        _10381_ = safe_add( _2671_dim,(int)1 );
      }
      int32_t _2691_rnd = _10381_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2692_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2691_rnd)));
      _checked_ptr_1<int32_t> _ptr__2692_rshape(_2692_rshape ? _2692_rshape->raw() : nullptr,_2692_rshape ? _2692_rshape->size(0) : 0);
      int32_t _10383_ = (int)0;
      int32_t _10384_ = _2681_nd;
      for (int32_t _2693_i = _10383_; _2693_i < _10384_; ++_2693_i)
      {
        {
          _ptr__2692_rshape[_2693_i] = _ptr__2680_shape[_2693_i];
        }
      }
      int32_t _10385_ = _2681_nd;
      int32_t _10386_ = _2691_rnd;
      for (int32_t _2694_i = _10385_; _2694_i < _10386_; ++_2694_i)
      {
        {
          _ptr__2692_rshape[_2694_i] = (int)1;
        }
      }
      _ptr__2692_rshape[_2671_dim] = _2688_nd1;
      if ((_2683_nnz < _2682_domsize))
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2695_tnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2683_nnz)));
          _checked_ptr_1<int64_t> _ptr__2695_tnativeidxs(_2695_tnativeidxs ? _2695_tnativeidxs->raw() : nullptr,_2695_tnativeidxs ? _2695_tnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2696_tsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2683_nnz)));
          _checked_ptr_1<int64_t> _ptr__2696_tsp(_2696_tsp ? _2696_tsp->raw() : nullptr,_2696_tsp ? _2696_tsp->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2697_rnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2684_rnnz)));
          _checked_ptr_1<int64_t> _ptr__2697_rnativeidxs(_2697_rnativeidxs ? _2697_rnativeidxs->raw() : nullptr,_2697_rnativeidxs ? _2697_rnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2698_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2684_rnnz)));
          _checked_ptr_1<int64_t> _ptr__2698_rsp(_2698_rsp ? _2698_rsp->raw() : nullptr,_2698_rsp ? _2698_rsp->size(0) : 0);
          _2670_v->inst((int)0,_2696_tsp,(int)0,_2695_tnativeidxs);
          {
            int32_t _2699_ns0 = safe_mul( _2688_nd1,_2689_d2 );
            int32_t _2700_s0 = safe_mul( _2687_d1,_2689_d2 );
            int32_t _2701_s1 = _2689_d2;
            if ((_2671_dim == (int)0))
            {
              {
                int32_t _2702_k = (int)0;
                int32_t _10387_ = (int)0;
                int32_t _10388_ = _2672_n;
                for (int32_t _2703_i = _10387_; _2703_i < _10388_; ++_2703_i)
                {
                  {
                    int32_t _10389_ = (int)0;
                    int32_t _10390_ = _2683_nnz;
                    for (int32_t _2704_j = _10389_; _2704_j < _10390_; ++_2704_j)
                    {
                      {
                        _ptr__2698_rsp[_2702_k] = safe_add( _ptr__2696_tsp[_2704_j],safe_mul( _2703_i,_2682_domsize ) );
                        _ptr__2697_rnativeidxs[_2702_k] = _ptr__2695_tnativeidxs[_2704_j];
                        ++ _2702_k;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2679_model,_2692_rshape,_2698_rsp,_2697_rnativeidxs)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_2671_dim >= _2681_nd))
            {
              {
                int32_t _2705_k = (int)0;
                int32_t _10391_ = (int)0;
                int32_t _10392_ = _2683_nnz;
                for (int32_t _2706_j = _10391_; _2706_j < _10392_; ++_2706_j)
                {
                  {
                    int32_t _10393_ = (int)0;
                    int32_t _10394_ = _2672_n;
                    for (int32_t _2707_i = _10393_; _2707_i < _10394_; ++_2707_i)
                    {
                      {
                        _ptr__2698_rsp[_2705_k] = safe_add( safe_mul( _ptr__2696_tsp[_2706_j],_2672_n ),_2707_i );
                        _ptr__2697_rnativeidxs[_2705_k] = _ptr__2695_tnativeidxs[_2706_j];
                        ++ _2705_k;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2679_model,_2692_rshape,_2698_rsp,_2697_rnativeidxs)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int32_t _2708_k = (int)0;
                int32_t _10395_ = (int)0;
                int32_t _10396_ = _2683_nnz;
                for (int32_t _2709_i = _10395_; _2709_i < _10396_; ++_2709_i)
                {
                  {
                    int64_t _2710_i0 = (_ptr__2696_tsp[_2709_i] / _2700_s0);
                    int64_t _2711_i1 = ((_ptr__2696_tsp[_2709_i] / _2701_s1) % _2687_d1);
                    int64_t _2712_i2 = (_ptr__2696_tsp[_2709_i] % _2689_d2);
                    int32_t _10397_ = (int)0;
                    int32_t _10398_ = _2672_n;
                    for (int32_t _2713_j = _10397_; _2713_j < _10398_; ++_2713_j)
                    {
                      {
                        _ptr__2698_rsp[_2708_k] = safe_add( safe_add( safe_mul( _2710_i0,_2699_ns0 ),safe_mul( safe_add( _2711_i1,safe_mul( _2687_d1,_2713_j ) ),_2689_d2 ) ),_2712_i2 );
                        _ptr__2697_rnativeidxs[_2708_k] = _ptr__2695_tnativeidxs[_2709_i];
                        ++ _2708_k;
                      }
                    }
                  }
                }
                int32_t _2714_maxdim = (int)1;
                int32_t _10399_ = (int)0;
                int32_t _10400_ = _2691_rnd;
                for (int32_t _2715_i = _10399_; _2715_i < _10400_; ++_2715_i)
                {
                  {
                    if ((_2714_maxdim < _ptr__2692_rshape[_2715_i]))
                    {
                      {
                        _2714_maxdim = _ptr__2692_rshape[_2715_i];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int32_t,1 > > _2716_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2684_rnnz)));
                _checked_ptr_1<int32_t> _ptr__2716_curperm(_2716_curperm ? _2716_curperm->raw() : nullptr,_2716_curperm ? _2716_curperm->size(0) : 0);
                std::shared_ptr< monty::ndarray< int32_t,1 > > _2717_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2684_rnnz)));
                _checked_ptr_1<int32_t> _ptr__2717_tgtperm(_2717_tgtperm ? _2717_tgtperm->raw() : nullptr,_2717_tgtperm ? _2717_tgtperm->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int32_t,1 > > _2718_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2714_maxdim,(int)1 ))));
                  _checked_ptr_1<int32_t> _ptr__2718_ptr(_2718_ptr ? _2718_ptr->raw() : nullptr,_2718_ptr ? _2718_ptr->size(0) : 0);
                  std::shared_ptr< monty::ndarray< int64_t,1 > > _2719_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2691_rnd)));
                  _checked_ptr_1<int64_t> _ptr__2719_s(_2719_s ? _2719_s->raw() : nullptr,_2719_s ? _2719_s->size(0) : 0);
                  _ptr__2719_s[(_2691_rnd - (int)1)] = (int)1;
                  int32_t _10401_ = (int)1;
                  int32_t _10402_ = _2691_rnd;
                  for (int32_t _2720_i = _10401_; _2720_i < _10402_; ++_2720_i)
                  {
                    {
                      _ptr__2719_s[((_2691_rnd - _2720_i) - (int)1)] = safe_mul( _ptr__2719_s[(_2691_rnd - _2720_i)],_ptr__2692_rshape[(_2691_rnd - _2720_i)] );
                    }
                  }
                  int32_t _10403_ = (int)0;
                  int32_t _10404_ = _2684_rnnz;
                  for (int32_t _2721_i = _10403_; _2721_i < _10404_; ++_2721_i)
                  {
                    {
                      _ptr__2716_curperm[_2721_i] = _2721_i;
                    }
                  }
                  int32_t _10405_ = (int)0;
                  int32_t _10406_ = _2691_rnd;
                  for (int32_t _2722_ii = _10405_; _2722_ii < _10406_; ++_2722_ii)
                  {
                    {
                      int32_t _2723_i = ((_2691_rnd - _2722_ii) - (int)1);
                      int32_t _10407_ = (int)0;
                      int32_t _10408_ = safe_add( _ptr__2692_rshape[_2723_i],(int)1 );
                      for (int32_t _2724_j = _10407_; _2724_j < _10408_; ++_2724_j)
                      {
                        {
                          _ptr__2718_ptr[_2724_j] = (int)0;
                        }
                      }
                      int32_t _10409_ = (int)0;
                      int32_t _10410_ = _2684_rnnz;
                      for (int32_t _2725_j = _10409_; _2725_j < _10410_; ++_2725_j)
                      {
                        {
                          ++ _ptr__2718_ptr[safe_add( ((_ptr__2698_rsp[_2725_j] / _ptr__2719_s[_2723_i]) % _ptr__2692_rshape[_2723_i]),(int)1 )];
                        }
                      }
                      int32_t _10411_ = (int)0;
                      int32_t _10412_ = _ptr__2692_rshape[_2723_i];
                      for (int32_t _2726_j = _10411_; _2726_j < _10412_; ++_2726_j)
                      {
                        {
                          _ptr__2718_ptr[safe_add( _2726_j,(int)1 )] += _ptr__2718_ptr[_2726_j];
                        }
                      }
                      int32_t _10413_ = (int)0;
                      int32_t _10414_ = _2684_rnnz;
                      for (int32_t _2727_jj = _10413_; _2727_jj < _10414_; ++_2727_jj)
                      {
                        {
                          int32_t _2728_j = _ptr__2716_curperm[_2727_jj];
                          int64_t _2729_idx = ((_ptr__2698_rsp[_2728_j] / _ptr__2719_s[_2723_i]) % _ptr__2692_rshape[_2723_i]);
                          _ptr__2717_tgtperm[_ptr__2718_ptr[_2729_idx]] = _2728_j;
                          ++ _ptr__2718_ptr[_2729_idx];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int32_t,1 > > _2730_tmp = _2716_curperm;
                      _checked_ptr_1<int32_t> _ptr__2730_tmp(_2730_tmp ? _2730_tmp->raw() : nullptr,_2730_tmp ? _2730_tmp->size(0) : 0);
                      _2716_curperm = _2717_tgtperm;
                      _ptr__2716_curperm.update(_2716_curperm ? _2716_curperm->raw() : nullptr, _2716_curperm ? _2716_curperm->size(0) : 0);
                      _2717_tgtperm = _2730_tmp;
                      _ptr__2717_tgtperm.update(_2717_tgtperm ? _2717_tgtperm->raw() : nullptr, _2717_tgtperm ? _2717_tgtperm->size(0) : 0);
                    }
                  }
                }
                std::vector<int64_t> _10415_;
                for (int32_t _2731_i = (int)0, _10416_ = _2684_rnnz; _2731_i < _10416_ ; ++_2731_i)
                {
                  _10415_.push_back(_ptr__2698_rsp[_ptr__2716_curperm[_2731_i]]);
                }
                auto _10417_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10415_.size()),_10415_.begin(),_10415_.end()));
                std::vector<int64_t> _10418_;
                for (int32_t _2732_i = (int)0, _10419_ = _2684_rnnz; _2732_i < _10419_ ; ++_2732_i)
                {
                  _10418_.push_back(_ptr__2697_rnativeidxs[_ptr__2716_curperm[_2732_i]]);
                }
                auto _10420_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10418_.size()),_10418_.begin(),_10418_.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2679_model,_2692_rshape,_10417_,_10420_)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2733_tnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2683_nnz)));
          _checked_ptr_1<int64_t> _ptr__2733_tnativeidxs(_2733_tnativeidxs ? _2733_tnativeidxs->raw() : nullptr,_2733_tnativeidxs ? _2733_tnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2734_rnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( _2683_nnz,_2672_n ))));
          _checked_ptr_1<int64_t> _ptr__2734_rnativeidxs(_2734_rnativeidxs ? _2734_rnativeidxs->raw() : nullptr,_2734_rnativeidxs ? _2734_rnativeidxs->size(0) : 0);
          _2670_v->inst((int)0,_2733_tnativeidxs);
          int32_t _2735_s0 = safe_mul( _2688_nd1,_2689_d2 );
          int32_t _2736_s1 = _2689_d2;
          int32_t _2737_k = (int)0;
          int32_t _10421_ = (int)0;
          int32_t _10422_ = _2685_d0;
          for (int32_t _2738_i0 = _10421_; _2738_i0 < _10422_; ++_2738_i0)
          {
            {
              int32_t _10423_ = (int)0;
              int32_t _10424_ = _2687_d1;
              for (int32_t _2739_i1 = _10423_; _2739_i1 < _10424_; ++_2739_i1)
              {
                {
                  int32_t _10425_ = (int)0;
                  int32_t _10426_ = _2689_d2;
                  for (int32_t _2740_i2 = _10425_; _2740_i2 < _10426_; ++_2740_i2)
                  {
                    {
                      int32_t _10427_ = (int)0;
                      int32_t _10428_ = _2672_n;
                      for (int32_t _2741_j = _10427_; _2741_j < _10428_; ++_2741_j)
                      {
                        {
                          _ptr__2734_rnativeidxs[safe_add( safe_add( safe_mul( _2738_i0,_2735_s0 ),safe_mul( safe_add( _2739_i1,safe_mul( _2741_j,_2687_d1 ) ),_2736_s1 ) ),_2740_i2 )] = _ptr__2733_tnativeidxs[_2737_k];
                        }
                      }
                      ++ _2737_k;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2679_model,_2692_rshape,nullptr,_2734_rnativeidxs)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.Var.drepeat

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:450:6-454:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2742_vlist) { return mosek::fusion::p_Var::stack(_2742_vlist); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2742_vlist)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _10429_;
  for (int32_t _2743_i = (int)0, _10430_ = (int)((_2742_vlist)->size(0)); _2743_i < _10430_ ; ++_2743_i)
  {
    _10429_.push_back(::mosek::fusion::p_Var::dstack(((*_2742_vlist)(_2743_i)),(int)1));
  }
  auto _10431_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_10429_.size()),_10429_.begin(),_10429_.end()));
  return ::mosek::fusion::p_Var::dstack(_10431_,(int)0);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:414:6-420:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2744_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2745_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2746_v3) { return mosek::fusion::p_Var::vstack(_2744_v1,_2745_v2,_2746_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2744_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2745_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2746_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2744_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2745_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2746_v3.get())}),(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:396:6-401:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2747_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2748_v2) { return mosek::fusion::p_Var::vstack(_2747_v1,_2748_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2747_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2748_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2747_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2748_v2.get())}),(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:377:6-381:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2749_v) { return mosek::fusion::p_Var::vstack(_2749_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2749_v)
{
  return ::mosek::fusion::p_Var::dstack(_2749_v,(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:357:6-363:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2750_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2751_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2752_v3) { return mosek::fusion::p_Var::hstack(_2750_v1,_2751_v2,_2752_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2750_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2751_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2752_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2750_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2751_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2752_v3.get())}),(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:336:6-341:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2753_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2754_v2) { return mosek::fusion::p_Var::hstack(_2753_v1,_2754_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2753_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2754_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2753_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2754_v2.get())}),(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:315:6-319:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2755_v) { return mosek::fusion::p_Var::hstack(_2755_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2755_v)
{
  return ::mosek::fusion::p_Var::dstack(_2755_v,(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:298:6-91
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2756_v,
    int32_t _2757_dim) { return mosek::fusion::p_Var::stack(_2756_v,_2757_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2756_v,int32_t _2757_dim)
{
  return ::mosek::fusion::p_Var::stack(_2757_dim,_2756_v);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:297:6-130
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2758_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2759_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2760_v3,
    int32_t _2761_dim) { return mosek::fusion::p_Var::stack(_2758_v1,_2759_v2,_2760_v3,_2761_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2758_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2759_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2760_v3,int32_t _2761_dim)
{
  return ::mosek::fusion::p_Var::stack(_2761_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2758_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2759_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2760_v3.get())}));
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:296:6-114
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2762_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2763_v2,
    int32_t _2764_dim) { return mosek::fusion::p_Var::stack(_2762_v1,_2763_v2,_2764_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2762_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2763_v2,int32_t _2764_dim)
{
  return ::mosek::fusion::p_Var::stack(_2764_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2762_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2763_v2.get())}));
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:290:6-293:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2765_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2766_v) { return mosek::fusion::p_Var::stack(_2765_dim,_2766_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2765_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2766_v)
{
  int32_t _2767_maxnd = _2765_dim;
  int32_t _10432_ = (int)0;
  int32_t _10433_ = (int)((_2766_v)->size(0));
  for (int32_t _2768_i = _10432_; _2768_i < _10433_; ++_2768_i)
  {
    {
      if ((_2767_maxnd < ((*_2766_v)(_2768_i))->getND()))
      {
        {
          _2767_maxnd = ((*_2766_v)(_2768_i))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2766_v,_2765_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:289:6-131
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2769_dim,
    monty::rc_ptr< ::mosek::fusion::Variable > _2770_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2771_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2772_v3) { return mosek::fusion::p_Var::stack(_2769_dim,_2770_v1,_2771_v2,_2772_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2769_dim,monty::rc_ptr< ::mosek::fusion::Variable > _2770_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2771_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2772_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2770_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2771_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2772_v3.get())}),_2769_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:288:6-115
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2773_dim,
    monty::rc_ptr< ::mosek::fusion::Variable > _2774_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2775_v2) { return mosek::fusion::p_Var::stack(_2773_dim,_2774_v1,_2775_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2773_dim,monty::rc_ptr< ::mosek::fusion::Variable > _2774_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2775_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2774_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2775_v2.get())}),_2773_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.promote
// Method mosek.fusion.Var.promote @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:275:6-285:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2776_v,
    int32_t _2777_nd) { return mosek::fusion::p_Var::promote(_2776_v,_2777_nd); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2776_v,int32_t _2777_nd)
{
  if ((_2777_nd > _2776_v->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2778_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2777_nd)));
      _checked_ptr_1<int32_t> _ptr__2778_shape(_2778_shape ? _2778_shape->raw() : nullptr,_2778_shape ? _2778_shape->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2779_sh = _2776_v->getShape();
      _checked_ptr_1<int32_t> _ptr__2779_sh(_2779_sh ? _2779_sh->raw() : nullptr,_2779_sh ? _2779_sh->size(0) : 0);
      int32_t _10434_ = (int)0;
      int32_t _10435_ = (int)((_2779_sh)->size(0));
      for (int32_t _2780_i = _10434_; _2780_i < _10435_; ++_2780_i)
      {
        {
          _ptr__2778_shape[_2780_i] = _ptr__2779_sh[_2780_i];
        }
      }
      int32_t _10436_ = (int)((_2779_sh)->size(0));
      int32_t _10437_ = _2777_nd;
      for (int32_t _2781_i = _10436_; _2781_i < _10437_; ++_2781_i)
      {
        {
          _ptr__2778_shape[_2781_i] = (int)1;
        }
      }
      return _2776_v->__mosek_2fusion_2Variable__reshape(_2778_shape);
    }
  }
  else
  {
    {
      return _2776_v;
    }
  }
}
// End mosek.fusion.Var.promote

// Begin mosek.fusion.Var.dstack
// Method mosek.fusion.Var.dstack @ bld/docker-rockylinux-8/final/default/src/fusion/Var.monty:151:6-267:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2782_v,int32_t _2783_dim)
{
  if ((_2783_dim < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2784_m0 = nullptr;
  {
    int32_t _10438_ = (int)0;
    int32_t _10439_ = (int)((_2782_v)->size(0));
    for (int32_t _2785_i = _10438_; _2785_i < _10439_; ++_2785_i)
    {
      {
        if ((NULL == _2784_m0.get()))
        {
          {
            _2784_m0 = ((*_2782_v)(_2785_i))->__mosek_2fusion_2Expression__getModel();
          }
        }
        else if(((NULL != ((*_2782_v)(_2785_i))->__mosek_2fusion_2Expression__getModel().get()) && (((*_2782_v)(_2785_i))->__mosek_2fusion_2Expression__getModel() != _2784_m0)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2786_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _10440_;
            bool _10441_ = ((int)((mosek::fusion::p_Model::_get_impl(_2784_m0.get())->getName()).size()) > (int)0);
            if (_10441_)
            {
              _10440_ = mosek::fusion::p_Model::_get_impl(_2784_m0.get())->getName();
            }
            else
            {
              _10440_ = std::string ("?");
            }
            std::string _2787_m1name = _10440_;
            std::string _10442_;
            bool _10443_ = ((int)((mosek::fusion::p_Model::_get_impl(((*_2782_v)(_2785_i))->__mosek_2fusion_2Expression__getModel().get())->getName()).size()) > (int)0);
            if (_10443_)
            {
              _10442_ = mosek::fusion::p_Model::_get_impl(((*_2782_v)(_2785_i))->__mosek_2fusion_2Expression__getModel().get())->getName();
            }
            else
            {
              _10442_ = std::string ("?");
            }
            std::string _2788_m2name = _10442_;
            _2786_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2787_m1name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2788_m2name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2786_sb->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2782_v)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2782_v)->size(0)) == (int)1))
  {
    {
      return ((*_2782_v)((int)0));
    }
  }
  else
  {
    {
      int32_t _2789_n = (int)((_2782_v)->size(0));
      std::vector<int32_t> _10444_;
      for (int32_t _2791_i = (int)0, _10445_ = _2789_n; _2791_i < _10445_ ; ++_2791_i)
      {
        _10444_.push_back(((*_2782_v)(_2791_i))->numInst());
      }
      auto _10446_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10444_.size()),_10444_.begin(),_10444_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2790_numnz = _10446_;
      _checked_ptr_1<int32_t> _ptr__2790_numnz(_2790_numnz ? _2790_numnz->raw() : nullptr,_2790_numnz ? _2790_numnz->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _10447_;
      for (int32_t _2793_i = (int)0, _10448_ = _2789_n; _2793_i < _10448_ ; ++_2793_i)
      {
        _10447_.push_back(((*_2782_v)(_2793_i))->getShape());
      }
      auto _10449_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_10447_.size()),_10447_.begin(),_10447_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _2792_shapes = _10449_;
      std::vector<int32_t> _10450_;
      for (int32_t _2795_i = (int)0, _10451_ = _2789_n; _2795_i < _10451_ ; ++_2795_i)
      {
        _10450_.push_back((int)((((*_2792_shapes)(_2795_i)))->size(0)));
      }
      auto _10452_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10450_.size()),_10450_.begin(),_10450_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2794_nds = _10452_;
      _checked_ptr_1<int32_t> _ptr__2794_nds(_2794_nds ? _2794_nds->raw() : nullptr,_2794_nds ? _2794_nds->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2796_shape0 = ((*_2792_shapes)((int)0));
      _checked_ptr_1<int32_t> _ptr__2796_shape0(_2796_shape0 ? _2796_shape0->raw() : nullptr,_2796_shape0 ? _2796_shape0->size(0) : 0);
      int32_t _2797_nd0 = _ptr__2794_nds[(int)0];
      int32_t _2798_rnnz = (int)0;
      int32_t _10453_ = (int)0;
      int32_t _10454_ = _2789_n;
      for (int32_t _2799_i = _10453_; _2799_i < _10454_; ++_2799_i)
      {
        {
          _2798_rnnz += _ptr__2790_numnz[_2799_i];
        }
      }
      int32_t _2800_rnd = safe_add( _2783_dim,(int)1 );
      int32_t _10455_ = (int)0;
      int32_t _10456_ = _2789_n;
      for (int32_t _2801_i = _10455_; _2801_i < _10456_; ++_2801_i)
      {
        {
          if ((_2800_rnd < _ptr__2794_nds[_2801_i]))
          {
            {
              _2800_rnd = _ptr__2794_nds[_2801_i];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2802_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2800_rnd)));
      _checked_ptr_1<int32_t> _ptr__2802_rshape(_2802_rshape ? _2802_rshape->raw() : nullptr,_2802_rshape ? _2802_rshape->size(0) : 0);
      int32_t _10457_ = (int)0;
      int32_t _10458_ = _2797_nd0;
      for (int32_t _2803_i = _10457_; _2803_i < _10458_; ++_2803_i)
      {
        {
          _ptr__2802_rshape[_2803_i] = _ptr__2796_shape0[_2803_i];
        }
      }
      int32_t _10459_ = _2797_nd0;
      int32_t _10460_ = _2800_rnd;
      for (int32_t _2804_i = _10459_; _2804_i < _10460_; ++_2804_i)
      {
        {
          _ptr__2802_rshape[_2804_i] = (int)1;
        }
      }
      _ptr__2802_rshape[_2783_dim] = (int)0;
      int32_t _10461_ = (int)0;
      int32_t _10462_ = _2789_n;
      for (int32_t _2805_i = _10461_; _2805_i < _10462_; ++_2805_i)
      {
        {
          int32_t _10463_;
          bool _10464_ = ((int)((((*_2792_shapes)(_2805_i)))->size(0)) > _2783_dim);
          if (_10464_)
          {
            _10463_ = ((*((*_2792_shapes)(_2805_i)))(_2783_dim));
          }
          else
          {
            _10463_ = (int)1;
          }
          _ptr__2802_rshape[_2783_dim] += _10463_;
        }
      }
      int32_t _10465_ = (int)0;
      int32_t _10466_ = _2789_n;
      for (int32_t _2806_i = _10465_; _2806_i < _10466_; ++_2806_i)
      {
        {
          int32_t _10467_ = (int)0;
          int32_t _10468_ = (int)((((*_2792_shapes)(_2806_i)))->size(0));
          for (int32_t _2807_j = _10467_; _2807_j < _10468_; ++_2807_j)
          {
            {
              if (((_2807_j != _2783_dim) && (((*((*_2792_shapes)(_2806_i)))(_2807_j)) != _ptr__2802_rshape[_2807_j])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int32_t _10469_ = (int)((((*_2792_shapes)(_2806_i)))->size(0));
          int32_t _10470_ = _2800_rnd;
          for (int32_t _2808_j = _10469_; _2808_j < _10470_; ++_2808_j)
          {
            {
              if (((_2808_j != _2783_dim) && ((int)1 != _ptr__2802_rshape[_2808_j])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2809_rnidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2798_rnnz)));
      _checked_ptr_1<int64_t> _ptr__2809_rnidxs(_2809_rnidxs ? _2809_rnidxs->raw() : nullptr,_2809_rnidxs ? _2809_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2810_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2798_rnnz)));
      _checked_ptr_1<int64_t> _ptr__2810_rsp(_2810_rsp ? _2810_rsp->raw() : nullptr,_2810_rsp ? _2810_rsp->size(0) : 0);
      std::vector<int32_t> _10471_;
      for (int32_t _2812_i = (int)0, _10472_ = (int)((_2782_v)->size(0)); _2812_i < _10472_ ; ++_2812_i)
      {
        int32_t _10473_;
        bool _10474_ = (_2783_dim < (int)((((*_2792_shapes)(_2812_i)))->size(0)));
        if (_10474_)
        {
          _10473_ = ((*((*_2792_shapes)(_2812_i)))(_2783_dim));
        }
        else
        {
          _10473_ = (int)1;
        }
        _10471_.push_back(_10473_);
      }
      auto _10475_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10471_.size()),_10471_.begin(),_10471_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2811_sdims = _10475_;
      _checked_ptr_1<int32_t> _ptr__2811_sdims(_2811_sdims ? _2811_sdims->raw() : nullptr,_2811_sdims ? _2811_sdims->size(0) : 0);
      int32_t _2813_d0 = (int)1;
      int32_t _10476_ = (int)0;
      int32_t _10477_ = _2783_dim;
      for (int32_t _2814_i = _10476_; _2814_i < _10477_; ++_2814_i)
      {
        {
          int32_t _10478_;
          bool _10479_ = (_2814_i < (int)((_2796_shape0)->size(0)));
          if (_10479_)
          {
            _10478_ = _ptr__2796_shape0[_2814_i];
          }
          else
          {
            _10478_ = (int)1;
          }
          _2813_d0 *= _10478_;
        }
      }
      int32_t _2815_d1 = (int)0;
      int32_t _10480_ = (int)0;
      int32_t _10481_ = _2789_n;
      for (int32_t _2816_i = _10480_; _2816_i < _10481_; ++_2816_i)
      {
        {
          _2815_d1 += _ptr__2811_sdims[_2816_i];
        }
      }
      int32_t _2817_d2 = (int)1;
      int32_t _10482_ = safe_add( _2783_dim,(int)1 );
      int32_t _10483_ = (int)((_2796_shape0)->size(0));
      for (int32_t _2818_i = _10482_; _2818_i < _10483_; ++_2818_i)
      {
        {
          _2817_d2 *= _ptr__2796_shape0[_2818_i];
        }
      }
      if ((_2813_d0 == (int)1))
      {
        {
          int32_t _2819_k = (int)0;
          int64_t _2820_kspofs = (int)0;
          int32_t _10484_ = (int)0;
          int32_t _10485_ = _2789_n;
          for (int32_t _2821_i = _10484_; _2821_i < _10485_; ++_2821_i)
          {
            {
              ((*_2782_v)(_2821_i))->inst(_2819_k,_2810_rsp,_2819_k,_2809_rnidxs);
              int32_t _10486_ = (int)0;
              int32_t _10487_ = _ptr__2790_numnz[_2821_i];
              for (int32_t _2822_j = _10486_; _2822_j < _10487_; ++_2822_j)
              {
                {
                  _ptr__2810_rsp[_2819_k] += _2820_kspofs;
                  ++ _2819_k;
                }
              }
              _2820_kspofs += ::mosek::fusion::p_Set::size(((*_2792_shapes)(_2821_i)));
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _10488_;
          bool _10489_ = (_2798_rnnz < safe_mul( safe_mul( _2813_d0,_2815_d1 ),_2817_d2 ));
          if (_10489_)
          {
            _10488_ = _2810_rsp;
          }
          else
          {
            _10488_ = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2784_m0,_2802_rshape,_10488_,_2809_rnidxs)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int32_t _2823_b = (int)0;
          int32_t _10490_ = (int)0;
          int32_t _10491_ = _2789_n;
          for (int32_t _2824_i = _10490_; _2824_i < _10491_; ++_2824_i)
          {
            {
              _2823_b += ((*_2782_v)(_2824_i))->inst(_2823_b,_2810_rsp,_2823_b,_2809_rnidxs);
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2825_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2798_rnnz)));
          _checked_ptr_1<int32_t> _ptr__2825_curperm(_2825_curperm ? _2825_curperm->raw() : nullptr,_2825_curperm ? _2825_curperm->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2826_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2798_rnnz)));
          _checked_ptr_1<int32_t> _ptr__2826_tgtperm(_2826_tgtperm ? _2826_tgtperm->raw() : nullptr,_2826_tgtperm ? _2826_tgtperm->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2827_offset = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2789_n)));
          _checked_ptr_1<int32_t> _ptr__2827_offset(_2827_offset ? _2827_offset->raw() : nullptr,_2827_offset ? _2827_offset->size(0) : 0);
          int32_t _10492_ = (int)0;
          int32_t _10493_ = (_2789_n - (int)1);
          for (int32_t _2828_i = _10492_; _2828_i < _10493_; ++_2828_i)
          {
            {
              _ptr__2827_offset[safe_add( _2828_i,(int)1 )] = safe_add( _ptr__2827_offset[_2828_i],_ptr__2811_sdims[_2828_i] );
            }
          }
          int32_t _10494_ = (int)0;
          int32_t _10495_ = _2798_rnnz;
          for (int32_t _2829_i = _10494_; _2829_i < _10495_; ++_2829_i)
          {
            {
              _ptr__2825_curperm[_2829_i] = _2829_i;
            }
          }
          int32_t _2830_k = (int)0;
          int32_t _10496_ = (int)0;
          int32_t _10497_ = _2789_n;
          for (int32_t _2831_i = _10496_; _2831_i < _10497_; ++_2831_i)
          {
            {
              int32_t _10498_ = (int)0;
              int32_t _10499_ = _ptr__2790_numnz[_2831_i];
              for (int32_t _2832_j = _10498_; _2832_j < _10499_; ++_2832_j)
              {
                {
                  int64_t _2833_i0 = (_ptr__2810_rsp[_2830_k] / safe_mul( _ptr__2811_sdims[_2831_i],_2817_d2 ));
                  int64_t _2834_i1 = ((_ptr__2810_rsp[_2830_k] / _2817_d2) % _ptr__2811_sdims[_2831_i]);
                  int64_t _2835_i2 = (_ptr__2810_rsp[_2830_k] % _2817_d2);
                  _ptr__2810_rsp[_2830_k] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2833_i0,_2815_d1 ),_2834_i1 ),_ptr__2827_offset[_2831_i] ),_2817_d2 ),_2835_i2 );
                  ++ _2830_k;
                }
              }
            }
          }
          int32_t _2836_maxdim = (int)1;
          int32_t _10500_ = (int)0;
          int32_t _10501_ = _2800_rnd;
          for (int32_t _2837_i = _10500_; _2837_i < _10501_; ++_2837_i)
          {
            {
              int32_t _10502_;
              bool _10503_ = (_2836_maxdim < _ptr__2802_rshape[_2837_i]);
              if (_10503_)
              {
                _10502_ = _ptr__2802_rshape[_2837_i];
              }
              else
              {
                _10502_ = _2836_maxdim;
              }
              _2836_maxdim = _10502_;
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2838_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2800_rnd)));
          _checked_ptr_1<int64_t> _ptr__2838_s(_2838_s ? _2838_s->raw() : nullptr,_2838_s ? _2838_s->size(0) : 0);
          _ptr__2838_s[(_2800_rnd - (int)1)] = (int)1;
          int32_t _10504_ = (int)1;
          int32_t _10505_ = _2800_rnd;
          for (int32_t _2839_i = _10504_; _2839_i < _10505_; ++_2839_i)
          {
            {
              _ptr__2838_s[((_2800_rnd - _2839_i) - (int)1)] = safe_mul( _ptr__2838_s[(_2800_rnd - _2839_i)],_ptr__2802_rshape[(_2800_rnd - _2839_i)] );
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2840_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2836_maxdim,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__2840_ptr(_2840_ptr ? _2840_ptr->raw() : nullptr,_2840_ptr ? _2840_ptr->size(0) : 0);
          int32_t _10506_ = (int)0;
          int32_t _10507_ = _2800_rnd;
          for (int32_t _2841_ii = _10506_; _2841_ii < _10507_; ++_2841_ii)
          {
            {
              int32_t _2842_i = ((_2800_rnd - _2841_ii) - (int)1);
              int32_t _10508_ = (int)0;
              int32_t _10509_ = safe_add( _ptr__2802_rshape[_2842_i],(int)1 );
              for (int32_t _2843_j = _10508_; _2843_j < _10509_; ++_2843_j)
              {
                {
                  _ptr__2840_ptr[_2843_j] = (int)0;
                }
              }
              int32_t _10510_ = (int)0;
              int32_t _10511_ = _2798_rnnz;
              for (int32_t _2844_j = _10510_; _2844_j < _10511_; ++_2844_j)
              {
                {
                  ++ _ptr__2840_ptr[safe_add( ((_ptr__2810_rsp[_2844_j] / _ptr__2838_s[_2842_i]) % _ptr__2802_rshape[_2842_i]),(int)1 )];
                }
              }
              int32_t _10512_ = (int)0;
              int32_t _10513_ = _ptr__2802_rshape[_2842_i];
              for (int32_t _2845_j = _10512_; _2845_j < _10513_; ++_2845_j)
              {
                {
                  _ptr__2840_ptr[safe_add( _2845_j,(int)1 )] += _ptr__2840_ptr[_2845_j];
                }
              }
              int32_t _10514_ = (int)0;
              int32_t _10515_ = _2798_rnnz;
              for (int32_t _2846_jj = _10514_; _2846_jj < _10515_; ++_2846_jj)
              {
                {
                  int32_t _2847_j = _ptr__2825_curperm[_2846_jj];
                  int64_t _2848_idx = ((_ptr__2810_rsp[_2847_j] / _ptr__2838_s[_2842_i]) % _ptr__2802_rshape[_2842_i]);
                  _ptr__2826_tgtperm[_ptr__2840_ptr[_2848_idx]] = _2847_j;
                  ++ _ptr__2840_ptr[_2848_idx];
                }
              }
              std::shared_ptr< monty::ndarray< int32_t,1 > > _2849_tmp = _2825_curperm;
              _checked_ptr_1<int32_t> _ptr__2849_tmp(_2849_tmp ? _2849_tmp->raw() : nullptr,_2849_tmp ? _2849_tmp->size(0) : 0);
              _2825_curperm = _2826_tgtperm;
              _ptr__2825_curperm.update(_2825_curperm ? _2825_curperm->raw() : nullptr, _2825_curperm ? _2825_curperm->size(0) : 0);
              _2826_tgtperm = _2849_tmp;
              _ptr__2826_tgtperm.update(_2826_tgtperm ? _2826_tgtperm->raw() : nullptr, _2826_tgtperm ? _2826_tgtperm->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _10516_;
          bool _10517_ = (_2798_rnnz < safe_mul( safe_mul( _2813_d0,_2815_d1 ),_2817_d2 ));
          if (_10517_)
          {
            std::vector<int64_t> _10518_;
            for (int32_t _2850_i = (int)0, _10519_ = _2798_rnnz; _2850_i < _10519_ ; ++_2850_i)
            {
              _10518_.push_back(_ptr__2810_rsp[_ptr__2825_curperm[_2850_i]]);
            }
            auto _10520_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10518_.size()),_10518_.begin(),_10518_.end()));
            _10516_ = _10520_;
          }
          else
          {
            _10516_ = nullptr;
          }
          std::vector<int64_t> _10521_;
          for (int32_t _2851_i = (int)0, _10522_ = _2798_rnnz; _2851_i < _10522_ ; ++_2851_i)
          {
            _10521_.push_back(_ptr__2809_rnidxs[_ptr__2825_curperm[_2851_i]]);
          }
          auto _10523_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10521_.size()),_10521_.begin(),_10521_.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2784_m0,_2802_rshape,_10516_,_10523_)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.Var.dstack

void mosek::fusion::p_Var::destroy()
{
}
void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }
// } class Var
// class BoundInterfaceConstraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:26:4-69:5
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }
mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint
  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.BoundInterfaceConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:39:6-47:7
mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2852_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2853_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2854_nativeidxs,
    bool _2855_islower)
{ return new mosek::fusion::BoundInterfaceConstraint(_2852_m,_2853_shape,_2854_nativeidxs,_2855_islower); }
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2852_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2853_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2854_nativeidxs,
    bool _2855_islower) : 
   BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this))
{ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2852_m,_2853_shape,_2854_nativeidxs,_2855_islower); }
void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2852_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2853_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2854_nativeidxs,
    bool _2855_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2853_shape(_2853_shape ? _2853_shape->raw() : nullptr, _2853_shape ? _2853_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2854_nativeidxs(_2854_nativeidxs ? _2854_nativeidxs->raw() : nullptr, _2854_nativeidxs ? _2854_nativeidxs->size(0) : 0);
    mosek::fusion::p_SliceConstraint::_initialize(_2852_m,_2853_shape,_2854_nativeidxs);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2855_islower;
  }
}
// mosek.fusion.BoundInterfaceConstraint.ctor

// mosek.fusion.BoundInterfaceConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:31:6-37:7
mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2856_c,
    bool _2857_islower)
{ return new mosek::fusion::BoundInterfaceConstraint(_2856_c,_2857_islower); }
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2856_c,
    bool _2857_islower) : 
   BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this))
{ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2856_c,_2857_islower); }
void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2856_c,
    bool _2857_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_SliceConstraint::_initialize(_2856_c);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2857_islower;
  }
}
// mosek.fusion.BoundInterfaceConstraint.ctor

// Begin mosek.fusion.BoundInterfaceConstraint.dual
// Method mosek.fusion.BoundInterfaceConstraint.dual @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:64:6-68:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceConstraint :: dual() { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceConstraint::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2858_target = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2858_target(_2858_target ? _2858_target->raw() : nullptr,_2858_target ? _2858_target->size(0) : 0);
  dual_lu((int)0,_2858_target,islower);
  return _2858_target;
}
// End mosek.fusion.BoundInterfaceConstraint.dual

// Begin mosek.fusion.BoundInterfaceConstraint.slice
// Method mosek.fusion.BoundInterfaceConstraint.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:62:6-124
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2859_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2860_lasta) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2859_firsta,_2860_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2859_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2860_lasta) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2859_firsta,_2860_lasta); }
/* override: mosek.fusion.Constraint.slice*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2859_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2860_lasta) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2859_firsta,_2860_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2859_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2860_lasta)
{
  _checked_ptr_1<int32_t> _ptr__2859_firsta(_2859_firsta ? _2859_firsta->raw() : nullptr, _2859_firsta ? _2859_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2860_lasta(_2860_lasta ? _2860_lasta->raw() : nullptr, _2860_lasta ? _2860_lasta->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2861_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2859_firsta,_2860_lasta);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2861_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.slice

// Begin mosek.fusion.BoundInterfaceConstraint.slice
// Method mosek.fusion.BoundInterfaceConstraint.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:61:6-122
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(int32_t _2862_first,int32_t _2863_last) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2862_first,_2863_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(int32_t _2862_first,int32_t _2863_last) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2862_first,_2863_last); }
/* override: mosek.fusion.Constraint.slice*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(int32_t _2862_first,int32_t _2863_last) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2862_first,_2863_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(int32_t _2862_first,int32_t _2863_last)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _2864_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2862_first,_2863_last);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2864_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.slice

// Begin mosek.fusion.BoundInterfaceConstraint.index
// Method mosek.fusion.BoundInterfaceConstraint.index @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:60:6-115
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2865_idxa) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2865_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2865_idxa) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2865_idxa); }
/* override: mosek.fusion.Constraint.index*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2865_idxa) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2865_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2865_idxa)
{
  _checked_ptr_1<int32_t> _ptr__2865_idxa(_2865_idxa ? _2865_idxa->raw() : nullptr, _2865_idxa ? _2865_idxa->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2866_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2865_idxa);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2866_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.index

// Begin mosek.fusion.BoundInterfaceConstraint.index
// Method mosek.fusion.BoundInterfaceConstraint.index @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:59:6-114
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(int32_t _2867_idx) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2867_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(int32_t _2867_idx) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2867_idx); }
/* override: mosek.fusion.Constraint.index*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(int32_t _2867_idx) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2867_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(int32_t _2867_idx)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _2868_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2867_idx);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2868_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.index

// Begin mosek.fusion.BoundInterfaceConstraint.from_
// Method mosek.fusion.BoundInterfaceConstraint.from_ @ bld/docker-rockylinux-8/final/default/src/fusion/BoundInterfaceConstraint.mbi:49:6-57:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__from_(monty::rc_ptr< ::mosek::fusion::Constraint > _2869_c)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _10524_ = _2869_c;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::SliceConstraint*>(_10524_.get()))
  {
    ::mosek::fusion::SliceConstraint::t _2870_cc (dynamic_cast<::mosek::fusion::SliceConstraint*>(_10524_.get()));
    {
      return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_2870_cc,islower);
    }
  }
  else
  {
    mosek::fusion::Constraint::t _2871_cc = _10524_;
    {
      return nullptr;
    }
  }
}
// End mosek.fusion.BoundInterfaceConstraint.from_

void mosek::fusion::p_BoundInterfaceConstraint::destroy()
{
}
void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }
// } class BoundInterfaceConstraint
// class LinearPSDConstraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDConstraint.monty:17:4-183:5
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }
mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint
  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearPSDConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDConstraint.monty:48:6-58:7
mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2872_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2873_m)
{ return new mosek::fusion::LinearPSDConstraint(_2872_c,_2873_m); }
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2872_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2873_m) : 
   LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this))
{ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2872_c,_2873_m); }
void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2872_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2873_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2872_c,_2873_m);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2872_c)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2872_c)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2872_c)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2872_c)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2872_c)->shape;
  }
}
// mosek.fusion.LinearPSDConstraint.ctor

// mosek.fusion.LinearPSDConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDConstraint.monty:27:6-46:7
mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2874_model,
    const std::string &  _2875_name,
    int32_t _2876_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2877_shape,
    int32_t _2878_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2879_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2880_slackidxs)
{ return new mosek::fusion::LinearPSDConstraint(_2874_model,_2875_name,_2876_conid,_2877_shape,_2878_conedim,_2879_nativeidxs,_2880_slackidxs); }
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2874_model,
    const std::string &  _2875_name,
    int32_t _2876_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2877_shape,
    int32_t _2878_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2879_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2880_slackidxs) : 
   LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this))
{ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2874_model,_2875_name,_2876_conid,_2877_shape,_2878_conedim,_2879_nativeidxs,_2880_slackidxs); }
void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2874_model,
    const std::string &  _2875_name,
    int32_t _2876_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2877_shape,
    int32_t _2878_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2879_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2880_slackidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2877_shape(_2877_shape ? _2877_shape->raw() : nullptr, _2877_shape ? _2877_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2879_nativeidxs(_2879_nativeidxs ? _2879_nativeidxs->raw() : nullptr, _2879_nativeidxs ? _2879_nativeidxs->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2880_slackidxs(_2880_slackidxs ? _2880_slackidxs->raw() : nullptr, _2880_slackidxs ? _2880_slackidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2874_model,_2875_name,_2877_shape,_2879_nativeidxs,_2876_conid);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2876_conid;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2880_slackidxs;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2879_nativeidxs;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2878_conedim;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2877_shape;
  }
}
// mosek.fusion.LinearPSDConstraint.ctor

// Begin mosek.fusion.LinearPSDConstraint.domainToString
// Method mosek.fusion.LinearPSDConstraint.domainToString @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDConstraint.monty:174:6-182:7
void mosek::fusion::p_LinearPSDConstraint::domainToString(int64_t _2881_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2882_sb)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2883_k = ::mosek::fusion::p_Set::idxtokey(shape,_2881_i);
  _checked_ptr_1<int32_t> _ptr__2883_k(_2883_k ? _2883_k->raw() : nullptr,_2883_k ? _2883_k->size(0) : 0);
  _2882_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2883_k[(int)0]);
  int32_t _10525_ = (int)1;
  int32_t _10526_ = (int)((_2883_k)->size(0));
  for (int32_t _2884_j = _10525_; _2884_j < _10526_; ++_2884_j)
  {
    {
      _2882_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2883_k[_2884_j]);
    }
  }
  _2882_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _10527_ = (int)1;
  int32_t _10528_ = (int)((_2883_k)->size(0));
  for (int32_t _2885_j = _10527_; _2885_j < _10528_; ++_2885_j)
  {
    {
      _2882_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2885_j)));
    }
  }
  _2882_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
// End mosek.fusion.LinearPSDConstraint.domainToString

// Begin mosek.fusion.LinearPSDConstraint.clone
// Method mosek.fusion.LinearPSDConstraint.clone @ bld/docker-rockylinux-8/final/default/src/fusion/LinearPSDConstraint.monty:60:6-63:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2886_m)
{
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2886_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.LinearPSDConstraint.clone

void mosek::fusion::p_LinearPSDConstraint::destroy()
{
  shape.reset();
  slackidxs.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }
// } class LinearPSDConstraint
// class PSDConstraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteConstraint.mbi:17:4-133:5
mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }
mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_PSDConstraint::p_PSDConstraint
  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.PSDConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteConstraint.mbi:100:6-112:7
mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2887_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2888_m)
{ return new mosek::fusion::PSDConstraint(_2887_c,_2888_m); }
mosek::fusion::PSDConstraint::PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2887_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2888_m) : 
   PSDConstraint(new mosek::fusion::p_PSDConstraint(this))
{ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2887_c,_2888_m); }
void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2887_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2888_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2887_c,_2888_m);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2887_c)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2887_c)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2887_c)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2887_c)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2887_c)->nativeidxs;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2887_c)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2887_c)->conedim1;
  }
}
// mosek.fusion.PSDConstraint.ctor

// mosek.fusion.PSDConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteConstraint.mbi:76:6-98:7
mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2889_model,
    const std::string &  _2890_name,
    int32_t _2891_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2892_shape,
    int32_t _2893_conedim0,
    int32_t _2894_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2895_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2896_nativeidxs)
{ return new mosek::fusion::PSDConstraint(_2889_model,_2890_name,_2891_conid,_2892_shape,_2893_conedim0,_2894_conedim1,_2895_slackidxs,_2896_nativeidxs); }
mosek::fusion::PSDConstraint::PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2889_model,
    const std::string &  _2890_name,
    int32_t _2891_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2892_shape,
    int32_t _2893_conedim0,
    int32_t _2894_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2895_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2896_nativeidxs) : 
   PSDConstraint(new mosek::fusion::p_PSDConstraint(this))
{ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2889_model,_2890_name,_2891_conid,_2892_shape,_2893_conedim0,_2894_conedim1,_2895_slackidxs,_2896_nativeidxs); }
void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2889_model,
    const std::string &  _2890_name,
    int32_t _2891_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2892_shape,
    int32_t _2893_conedim0,
    int32_t _2894_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2895_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2896_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2892_shape(_2892_shape ? _2892_shape->raw() : nullptr, _2892_shape ? _2892_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2895_slackidxs(_2895_slackidxs ? _2895_slackidxs->raw() : nullptr, _2895_slackidxs ? _2895_slackidxs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2896_nativeidxs(_2896_nativeidxs ? _2896_nativeidxs->raw() : nullptr, _2896_nativeidxs ? _2896_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2889_model,_2890_name,_2892_shape,::mosek::fusion::p_PSDConstraint::computenidxs(_2892_shape,_2893_conedim0,_2894_conedim1,_2896_nativeidxs),_2891_conid);
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2891_conid;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2896_nativeidxs;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2895_slackidxs;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2890_name;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2892_shape;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2893_conedim0;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2894_conedim1;
  }
}
// mosek.fusion.PSDConstraint.ctor

// Begin mosek.fusion.PSDConstraint.toString
// Method mosek.fusion.PSDConstraint.toString @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteConstraint.mbi:120:6-132:7
std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_PSDConstraint::toString()
{
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
// End mosek.fusion.PSDConstraint.toString

// Begin mosek.fusion.PSDConstraint.clone
// Method mosek.fusion.PSDConstraint.clone @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteConstraint.mbi:114:6-117:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2897_m)
{
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2897_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.PSDConstraint.clone

// Begin mosek.fusion.PSDConstraint.computenidxs
// Method mosek.fusion.PSDConstraint.computenidxs @ bld/docker-rockylinux-8/final/default/src/fusion/SemidefiniteConstraint.mbi:29:6-70:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int32_t,1 > > _2898_shape,int32_t _2899_d0,int32_t _2900_d1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2901_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2898_shape(_2898_shape ? _2898_shape->raw() : nullptr, _2898_shape ? _2898_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2901_nativeidxs(_2901_nativeidxs ? _2901_nativeidxs->raw() : nullptr, _2901_nativeidxs ? _2901_nativeidxs->size(0) : 0);
  int32_t _2902_nd = (int)((_2898_shape)->size(0));
  bool _2903_tril = (_2899_d0 < _2900_d1);
  int32_t _10529_;
  bool _10530_ = _2903_tril;
  if (_10530_)
  {
    _10529_ = _2899_d0;
  }
  else
  {
    _10529_ = _2900_d1;
  }
  int32_t _2904_conedim0 = _10529_;
  int32_t _10531_;
  bool _10532_ = _2903_tril;
  if (_10532_)
  {
    _10531_ = _2900_d1;
  }
  else
  {
    _10531_ = _2899_d0;
  }
  int32_t _2905_conedim1 = _10531_;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2906_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1)});
  _checked_ptr_1<int32_t> _ptr__2906_dim(_2906_dim ? _2906_dim->raw() : nullptr,_2906_dim ? _2906_dim->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2907_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int32_t> _ptr__2907_stride(_2907_stride ? _2907_stride->raw() : nullptr,_2907_stride ? _2907_stride->size(0) : 0);
  int32_t _2908_size = (int)1;
  int32_t _10533_ = (int)0;
  int32_t _10534_ = (int)((_2898_shape)->size(0));
  for (int32_t _2909_i = _10533_; _2909_i < _10534_; ++_2909_i)
  {
    {
      _2908_size *= _ptr__2898_shape[_2909_i];
    }
  }
  int32_t _10535_ = (int)0;
  int32_t _10536_ = _2904_conedim0;
  for (int32_t _2910_i = _10535_; _2910_i < _10536_; ++_2910_i)
  {
    {
      _ptr__2906_dim[(int)0] *= _ptr__2898_shape[_2910_i];
    }
  }
  _ptr__2906_dim[(int)1] = _ptr__2898_shape[_2904_conedim0];
  int32_t _10537_ = safe_add( _2904_conedim0,(int)1 );
  int32_t _10538_ = _2905_conedim1;
  for (int32_t _2911_i = _10537_; _2911_i < _10538_; ++_2911_i)
  {
    {
      _ptr__2906_dim[(int)2] *= _ptr__2898_shape[_2911_i];
    }
  }
  _ptr__2906_dim[(int)3] = _ptr__2898_shape[_2905_conedim1];
  int32_t _10539_ = safe_add( _2905_conedim1,(int)1 );
  int32_t _10540_ = _2902_nd;
  for (int32_t _2912_i = _10539_; _2912_i < _10540_; ++_2912_i)
  {
    {
      _ptr__2906_dim[(int)4] *= _ptr__2898_shape[_2912_i];
    }
  }
  _ptr__2907_stride[(int)4] = (int)1;
  int32_t _10541_ = (int)1;
  int32_t _10542_ = (int)5;
  for (int32_t _2913_i = _10541_; _2913_i < _10542_; ++_2913_i)
  {
    {
      _ptr__2907_stride[(((int)5 - _2913_i) - (int)1)] = safe_mul( _ptr__2907_stride[((int)5 - _2913_i)],_ptr__2906_dim[((int)5 - _2913_i)] );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2914_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2908_size)));
  _checked_ptr_1<int32_t> _ptr__2914_nidxs(_2914_nidxs ? _2914_nidxs->raw() : nullptr,_2914_nidxs ? _2914_nidxs->size(0) : 0);
  int32_t _2915_k = (int)0;
  if (_2903_tril)
  {
    {
      int32_t _10543_ = (int)0;
      int32_t _10544_ = _ptr__2906_dim[(int)0];
      for (int32_t _2916_i0 = _10543_; _2916_i0 < _10544_; ++_2916_i0)
      {
        {
          int32_t _10545_ = (int)0;
          int32_t _10546_ = _ptr__2906_dim[(int)1];
          for (int32_t _2917_i1 = _10545_; _2917_i1 < _10546_; ++_2917_i1)
          {
            {
              int32_t _10547_ = (int)0;
              int32_t _10548_ = _ptr__2906_dim[(int)2];
              for (int32_t _2918_i2 = _10547_; _2918_i2 < _10548_; ++_2918_i2)
              {
                {
                  int32_t _10549_ = _2917_i1;
                  int32_t _10550_ = _ptr__2906_dim[(int)1];
                  for (int32_t _2919_i3 = _10549_; _2919_i3 < _10550_; ++_2919_i3)
                  {
                    {
                      int32_t _10551_ = (int)0;
                      int32_t _10552_ = _ptr__2906_dim[(int)4];
                      for (int32_t _2920_i4 = _10551_; _2920_i4 < _10552_; ++_2920_i4)
                      {
                        {
                          _ptr__2914_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2916_i0,_ptr__2907_stride[(int)0] ),safe_mul( _2917_i1,_ptr__2907_stride[(int)1] ) ),safe_mul( _2918_i2,_ptr__2907_stride[(int)2] ) ),safe_mul( _2919_i3,_ptr__2907_stride[(int)3] ) ),safe_mul( _2920_i4,_ptr__2907_stride[(int)4] ) )] = _ptr__2901_nativeidxs[_2915_k];
                          _ptr__2914_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2916_i0,_ptr__2907_stride[(int)0] ),safe_mul( _2919_i3,_ptr__2907_stride[(int)1] ) ),safe_mul( _2918_i2,_ptr__2907_stride[(int)2] ) ),safe_mul( _2917_i1,_ptr__2907_stride[(int)3] ) ),safe_mul( _2920_i4,_ptr__2907_stride[(int)4] ) )] = _ptr__2901_nativeidxs[_2915_k];
                          ++ _2915_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _10553_ = (int)0;
      int32_t _10554_ = _ptr__2906_dim[(int)0];
      for (int32_t _2921_i0 = _10553_; _2921_i0 < _10554_; ++_2921_i0)
      {
        {
          int32_t _10555_ = (int)0;
          int32_t _10556_ = _ptr__2906_dim[(int)1];
          for (int32_t _2922_i1 = _10555_; _2922_i1 < _10556_; ++_2922_i1)
          {
            {
              int32_t _10557_ = (int)0;
              int32_t _10558_ = _ptr__2906_dim[(int)2];
              for (int32_t _2923_i2 = _10557_; _2923_i2 < _10558_; ++_2923_i2)
              {
                {
                  int32_t _10559_ = (int)0;
                  int32_t _10560_ = safe_add( _2922_i1,(int)1 );
                  for (int32_t _2924_i3 = _10559_; _2924_i3 < _10560_; ++_2924_i3)
                  {
                    {
                      int32_t _10561_ = (int)0;
                      int32_t _10562_ = _ptr__2906_dim[(int)4];
                      for (int32_t _2925_i4 = _10561_; _2925_i4 < _10562_; ++_2925_i4)
                      {
                        {
                          _ptr__2914_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2921_i0,_ptr__2907_stride[(int)0] ),safe_mul( _2922_i1,_ptr__2907_stride[(int)1] ) ),safe_mul( _2923_i2,_ptr__2907_stride[(int)2] ) ),safe_mul( _2924_i3,_ptr__2907_stride[(int)3] ) ),safe_mul( _2925_i4,_ptr__2907_stride[(int)4] ) )] = _ptr__2901_nativeidxs[_2915_k];
                          _ptr__2914_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2921_i0,_ptr__2907_stride[(int)0] ),safe_mul( _2924_i3,_ptr__2907_stride[(int)1] ) ),safe_mul( _2923_i2,_ptr__2907_stride[(int)2] ) ),safe_mul( _2922_i1,_ptr__2907_stride[(int)3] ) ),safe_mul( _2925_i4,_ptr__2907_stride[(int)4] ) )] = _ptr__2901_nativeidxs[_2915_k];
                          ++ _2915_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2914_nidxs;
}
// End mosek.fusion.PSDConstraint.computenidxs

void mosek::fusion::p_PSDConstraint::destroy()
{
  shape.reset();
  slackidxs.reset();
  nativeidxs.reset();
}
void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }
// } class PSDConstraint
// class SliceConstraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/SliceConstraint.mbi:23:4-43:5
mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }
mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SliceConstraint::p_SliceConstraint
  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SliceConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SliceConstraint.mbi:33:6-36:7
mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2926_c)
{ return new mosek::fusion::SliceConstraint(_2926_c); }
mosek::fusion::SliceConstraint::SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2926_c) : 
   SliceConstraint(new mosek::fusion::p_SliceConstraint(this))
{ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2926_c); }
void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2926_c)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Constraint::_initialize(_2926_c,_2926_c->__mosek_2fusion_2Constraint__getModel());
  }
}
// mosek.fusion.SliceConstraint.ctor

// mosek.fusion.SliceConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SliceConstraint.mbi:26:6-31:7
mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2927_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2928_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2929_nativeidxs)
{ return new mosek::fusion::SliceConstraint(_2927_model,_2928_shape,_2929_nativeidxs); }
mosek::fusion::SliceConstraint::SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2927_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2928_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2929_nativeidxs) : 
   SliceConstraint(new mosek::fusion::p_SliceConstraint(this))
{ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2927_model,_2928_shape,_2929_nativeidxs); }
void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2927_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2928_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2929_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2928_shape(_2928_shape ? _2928_shape->raw() : nullptr, _2928_shape ? _2928_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2929_nativeidxs(_2929_nativeidxs ? _2929_nativeidxs->raw() : nullptr, _2929_nativeidxs ? _2929_nativeidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2927_model,_2928_shape,_2929_nativeidxs);
  }
}
// mosek.fusion.SliceConstraint.ctor

// Begin mosek.fusion.SliceConstraint.toString
// Method mosek.fusion.SliceConstraint.toString @ bld/docker-rockylinux-8/final/default/src/fusion/SliceConstraint.mbi:38:6-42:7
std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_SliceConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2930_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2930_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2930_sb->toString();
}
// End mosek.fusion.SliceConstraint.toString

void mosek::fusion::p_SliceConstraint::destroy()
{
}
void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }
// } class SliceConstraint
// class RangedConstraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/RangedConstraint.mbi:13:4-204:5
mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }
mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_RangedConstraint::p_RangedConstraint
  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.RangedConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/RangedConstraint.mbi:32:6-39:7
mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2931_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2932_m)
{ return new mosek::fusion::RangedConstraint(_2931_c,_2932_m); }
mosek::fusion::RangedConstraint::RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2931_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2932_m) : 
   RangedConstraint(new mosek::fusion::p_RangedConstraint(this))
{ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2931_c,_2932_m); }
void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2931_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2932_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2931_c,_2932_m);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2931_c)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2931_c)->nativeidxs;
  }
}
// mosek.fusion.RangedConstraint.ctor

// mosek.fusion.RangedConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/RangedConstraint.mbi:19:6-29:7
mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2933_model,
    const std::string &  _2934_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2935_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2936_nativeidxs,
    int32_t _2937_conid)
{ return new mosek::fusion::RangedConstraint(_2933_model,_2934_name,_2935_shape,_2936_nativeidxs,_2937_conid); }
mosek::fusion::RangedConstraint::RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2933_model,
    const std::string &  _2934_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2935_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2936_nativeidxs,
    int32_t _2937_conid) : 
   RangedConstraint(new mosek::fusion::p_RangedConstraint(this))
{ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2933_model,_2934_name,_2935_shape,_2936_nativeidxs,_2937_conid); }
void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2933_model,
    const std::string &  _2934_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2935_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2936_nativeidxs,
    int32_t _2937_conid)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2935_shape(_2935_shape ? _2935_shape->raw() : nullptr, _2935_shape ? _2935_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2936_nativeidxs(_2936_nativeidxs ? _2936_nativeidxs->raw() : nullptr, _2936_nativeidxs ? _2936_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2933_model,_2934_name,_2935_shape,_2936_nativeidxs,_2937_conid);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2935_shape;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2936_nativeidxs;
  }
}
// mosek.fusion.RangedConstraint.ctor

// Begin mosek.fusion.RangedConstraint.upperBoundCon
// Method mosek.fusion.RangedConstraint.upperBoundCon @ bld/docker-rockylinux-8/final/default/src/fusion/RangedConstraint.mbi:55:6-57:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__upperBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::upperBoundCon() { return __mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__upperBoundCon()
{
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,false);
}
// End mosek.fusion.RangedConstraint.upperBoundCon

// Begin mosek.fusion.RangedConstraint.lowerBoundCon
// Method mosek.fusion.RangedConstraint.lowerBoundCon @ bld/docker-rockylinux-8/final/default/src/fusion/RangedConstraint.mbi:49:6-51:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__lowerBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::lowerBoundCon() { return __mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__lowerBoundCon()
{
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,true);
}
// End mosek.fusion.RangedConstraint.lowerBoundCon

// Begin mosek.fusion.RangedConstraint.clone
// Method mosek.fusion.RangedConstraint.clone @ bld/docker-rockylinux-8/final/default/src/fusion/RangedConstraint.mbi:41:6-44:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2938_m)
{
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2938_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.RangedConstraint.clone

void mosek::fusion::p_RangedConstraint::destroy()
{
  nativeidxs.reset();
  shape.reset();
}
void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }
// } class RangedConstraint
// class ConicConstraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/ConicConstraint.mbi:22:4-94:5
mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }
mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ConicConstraint::p_ConicConstraint
  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ConicConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ConicConstraint.mbi:65:6-75:7
mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2939_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2940_m)
{ return new mosek::fusion::ConicConstraint(_2939_c,_2940_m); }
mosek::fusion::ConicConstraint::ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2939_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2940_m) : 
   ConicConstraint(new mosek::fusion::p_ConicConstraint(this))
{ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2939_c,_2940_m); }
void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2939_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2940_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2939_c,_2940_m);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2939_c)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2939_c)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2939_c)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2939_c)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2939_c)->nativeidxs;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2939_c)->names_flushed;
    indexnames = mosek::fusion::p_ConicConstraint::_get_impl(_2939_c)->indexnames;
  }
}
// mosek.fusion.ConicConstraint.ctor

// mosek.fusion.ConicConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ConicConstraint.mbi:38:6-62:7
mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2941_model,
    const std::string &  _2942_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2943_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2944_shape,
    int32_t _2945_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2946_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2947_indexnames)
{ return new mosek::fusion::ConicConstraint(_2941_model,_2942_name,_2943_dom,_2944_shape,_2945_conid,_2946_nativeidxs,_2947_indexnames); }
mosek::fusion::ConicConstraint::ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2941_model,
    const std::string &  _2942_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2943_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2944_shape,
    int32_t _2945_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2946_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2947_indexnames) : 
   ConicConstraint(new mosek::fusion::p_ConicConstraint(this))
{ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2941_model,_2942_name,_2943_dom,_2944_shape,_2945_conid,_2946_nativeidxs,_2947_indexnames); }
void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2941_model,
    const std::string &  _2942_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2943_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2944_shape,
    int32_t _2945_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2946_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2947_indexnames)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2944_shape(_2944_shape ? _2944_shape->raw() : nullptr, _2944_shape ? _2944_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2946_nativeidxs(_2946_nativeidxs ? _2946_nativeidxs->raw() : nullptr, _2946_nativeidxs ? _2946_nativeidxs->size(0) : 0);
    std::vector<int32_t> _10563_;
    for (int32_t _2948_i = (int)0, _10564_ = (int)((_2946_nativeidxs)->size(0)); _2948_i < _10564_ ; ++_2948_i)
    {
      _10563_.push_back((-safe_add( (int)1,_ptr__2946_nativeidxs[_2948_i] )));
    }
    auto _10565_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10563_.size()),_10563_.begin(),_10563_.end()));
    mosek::fusion::p_ModelConstraint::_initialize(_2941_model,_2942_name,_2944_shape,_10565_,(-safe_add( (int)1,_2945_conid )));
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2943_dom;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2944_shape;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2942_name;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2946_nativeidxs;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->indexnames = _2947_indexnames;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2945_conid;
    names_flushed = false;
  }
}
// mosek.fusion.ConicConstraint.ctor

// Begin mosek.fusion.ConicConstraint.toString
// Method mosek.fusion.ConicConstraint.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ConicConstraint.mbi:88:6-92:7
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ConicConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2949_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2949_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2949_sb->toString();
}
// End mosek.fusion.ConicConstraint.toString

// Begin mosek.fusion.ConicConstraint.domainToString
// Method mosek.fusion.ConicConstraint.domainToString @ bld/docker-rockylinux-8/final/default/src/fusion/ConicConstraint.mbi:83:6-85:7
void mosek::fusion::p_ConicConstraint::domainToString(int64_t _2950_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2951_sb)
{
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
// End mosek.fusion.ConicConstraint.domainToString

// Begin mosek.fusion.ConicConstraint.clone
// Method mosek.fusion.ConicConstraint.clone @ bld/docker-rockylinux-8/final/default/src/fusion/ConicConstraint.mbi:77:6-80:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2952_m)
{
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2952_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.ConicConstraint.clone

void mosek::fusion::p_ConicConstraint::destroy()
{
  indexnames.reset();
  nativeidxs.reset();
  shape.reset();
  dom.reset();
}
void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }
// } class ConicConstraint
// class LinearConstraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/LinearConstraint.mbi:24:4-87:5
mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }
mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearConstraint::p_LinearConstraint
  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinearConstraint.mbi:51:6-60:7
mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2953_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2954_m)
{ return new mosek::fusion::LinearConstraint(_2953_c,_2954_m); }
mosek::fusion::LinearConstraint::LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2953_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2954_m) : 
   LinearConstraint(new mosek::fusion::p_LinearConstraint(this))
{ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2953_c,_2954_m); }
void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2953_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2954_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2953_c,_2954_m);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2953_c)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2953_c)->name;
    nidxs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearConstraint::_get_impl(_2953_c)->nidxs);
    indexnames = mosek::fusion::p_LinearConstraint::_get_impl(_2953_c)->indexnames;
  }
}
// mosek.fusion.LinearConstraint.ctor

// mosek.fusion.LinearConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinearConstraint.mbi:36:6-49:7
mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2955_model,
    const std::string &  _2956_name,
    int32_t _2957_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2958_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2959_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2960_indexnames)
{ return new mosek::fusion::LinearConstraint(_2955_model,_2956_name,_2957_conid,_2958_shape,_2959_nidxs,_2960_indexnames); }
mosek::fusion::LinearConstraint::LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2955_model,
    const std::string &  _2956_name,
    int32_t _2957_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2958_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2959_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2960_indexnames) : 
   LinearConstraint(new mosek::fusion::p_LinearConstraint(this))
{ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2955_model,_2956_name,_2957_conid,_2958_shape,_2959_nidxs,_2960_indexnames); }
void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2955_model,
    const std::string &  _2956_name,
    int32_t _2957_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2958_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2959_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2960_indexnames)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2958_shape(_2958_shape ? _2958_shape->raw() : nullptr, _2958_shape ? _2958_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2959_nidxs(_2959_nidxs ? _2959_nidxs->raw() : nullptr, _2959_nidxs ? _2959_nidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2955_model,_2956_name,_2958_shape,_2959_nidxs,_2957_conid);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->nidxs = _2959_nidxs;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2957_conid;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2956_name;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->indexnames = _2960_indexnames;
  }
}
// mosek.fusion.LinearConstraint.ctor

// Begin mosek.fusion.LinearConstraint.toString
// Method mosek.fusion.LinearConstraint.toString @ bld/docker-rockylinux-8/final/default/src/fusion/LinearConstraint.mbi:72:6-85:7
std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2961_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2961_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2961_sb->toString();
}
// End mosek.fusion.LinearConstraint.toString

// Begin mosek.fusion.LinearConstraint.domainToString
// Method mosek.fusion.LinearConstraint.domainToString @ bld/docker-rockylinux-8/final/default/src/fusion/LinearConstraint.mbi:67:6-70:7
void mosek::fusion::p_LinearConstraint::domainToString(int64_t _2962_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2963_sb)
{
}
// End mosek.fusion.LinearConstraint.domainToString

// Begin mosek.fusion.LinearConstraint.clone
// Method mosek.fusion.LinearConstraint.clone @ bld/docker-rockylinux-8/final/default/src/fusion/LinearConstraint.mbi:62:6-65:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2964_m)
{
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2964_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.LinearConstraint.clone

void mosek::fusion::p_LinearConstraint::destroy()
{
  indexnames.reset();
  nidxs.reset();
}
void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }
// } class LinearConstraint
// class ModelConstraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/ModelConstraint.mbi:19:4-79:5
mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }
mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ModelConstraint::p_ModelConstraint
  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ModelConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ModelConstraint.mbi:57:6-66:7
void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2965_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2966_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Constraint::_initialize(_2965_c,_2966_m);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = mosek::fusion::p_ModelConstraint::_get_impl(_2965_c)->conid;
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2965_c)->name;
    modelcon_nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2965_c)->modelcon_nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2965_c)->shape;
  }
}
// mosek.fusion.ModelConstraint.ctor

// mosek.fusion.ModelConstraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ModelConstraint.mbi:42:6-55:7
void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2967_model,
    const std::string &  _2968_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2969_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2970_nidxs,
    int32_t _2971_conid)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2969_shape(_2969_shape ? _2969_shape->raw() : nullptr, _2969_shape ? _2969_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2970_nidxs(_2970_nidxs ? _2970_nidxs->raw() : nullptr, _2970_nidxs ? _2970_nidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2967_model,_2969_shape,_2970_nidxs);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2968_name;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->modelcon_nativeidxs = _2970_nidxs;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2969_shape;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = _2971_conid;
  }
}
// mosek.fusion.ModelConstraint.ctor

// Begin mosek.fusion.ModelConstraint.toString
// Method mosek.fusion.ModelConstraint.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ModelConstraint.mbi:74:6-78:7
std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ModelConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2972_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2972_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2972_sb->toString();
}
// End mosek.fusion.ModelConstraint.toString

// Begin mosek.fusion.ModelConstraint.clone
// End mosek.fusion.ModelConstraint.clone

// Begin mosek.fusion.ModelConstraint.remove
// Method mosek.fusion.ModelConstraint.remove @ bld/docker-rockylinux-8/final/default/src/fusion/ModelConstraint.mbi:68:6-70:7
void mosek::fusion::ModelConstraint :: remove() { mosek::fusion::p_ModelConstraint::_get_impl(this)->remove(); }
void mosek::fusion::p_ModelConstraint::remove()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2Constraint__getModel().get())->removeConstraintBlock(conid);
}
// End mosek.fusion.ModelConstraint.remove

void mosek::fusion::p_ModelConstraint::destroy()
{
  shape.reset();
  modelcon_nativeidxs.reset();
}
void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }
// } class ModelConstraint
// class Constraint { // @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:110:4-680:5
mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Constraint::p_Constraint
  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Constraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:135:6-140:7
void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2974_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2975_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    model = _2975_m;
    shape = mosek::fusion::p_Constraint::_get_impl(_2974_c)->shape;
    con_nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2974_c)->con_nativeidxs;
  }
}
// mosek.fusion.Constraint.ctor

// mosek.fusion.Constraint.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:124:6-132:7
void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2976_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2977_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2978_con_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2977_shape(_2977_shape ? _2977_shape->raw() : nullptr, _2977_shape ? _2977_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2978_con_nativeidxs(_2978_con_nativeidxs ? _2978_con_nativeidxs->raw() : nullptr, _2978_con_nativeidxs ? _2978_con_nativeidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2976_model;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2977_shape;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->con_nativeidxs = _2978_con_nativeidxs;
  }
}
// mosek.fusion.Constraint.ctor

// Begin mosek.fusion.Constraint.toString
// Method mosek.fusion.Constraint.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:662:6-679:7
std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_Constraint::toString()
{
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
// End mosek.fusion.Constraint.toString

// Begin mosek.fusion.Constraint.toStringArray
// Method mosek.fusion.Constraint.toStringArray @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:651:6-657:7
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< int64_t,1 > > _2979_subi,int64_t _2980_dstidx,std::shared_ptr< monty::ndarray< std::string,1 > > _2981_result)
{
  _checked_ptr_1<int64_t> _ptr__2979_subi(_2979_subi ? _2979_subi->raw() : nullptr, _2979_subi ? _2979_subi->size(0) : 0);
}
// End mosek.fusion.Constraint.toStringArray

// Begin mosek.fusion.Constraint.dual_lu
// Method mosek.fusion.Constraint.dual_lu @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:642:6-644:7
void mosek::fusion::p_Constraint::dual_lu(int32_t _2982_offset,std::shared_ptr< monty::ndarray< double,1 > > _2983_target,bool _2984_islower)
{
  _checked_ptr_1<double> _ptr__2983_target(_2983_target ? _2983_target->raw() : nullptr, _2983_target ? _2983_target->size(0) : 0);
  model->getConstraintDuals(_2984_islower,con_nativeidxs,_2983_target,_2982_offset);
}
// End mosek.fusion.Constraint.dual_lu

// Begin mosek.fusion.Constraint.dual
// Method mosek.fusion.Constraint.dual @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:636:6-640:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2985_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((con_nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2985_res(_2985_res ? _2985_res->raw() : nullptr,_2985_res ? _2985_res->size(0) : 0);
  values(false,(int)0,_2985_res);
  return _2985_res;
}
// End mosek.fusion.Constraint.dual

// Begin mosek.fusion.Constraint.level
// Method mosek.fusion.Constraint.level @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:623:6-627:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2986_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((con_nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2986_res(_2986_res ? _2986_res->raw() : nullptr,_2986_res ? _2986_res->size(0) : 0);
  values(true,(int)0,_2986_res);
  return _2986_res;
}
// End mosek.fusion.Constraint.level

// Begin mosek.fusion.Constraint.values
// Method mosek.fusion.Constraint.values @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:607:6-613:7
void mosek::fusion::p_Constraint::values(bool _2987_primal,int32_t _2988_offset,std::shared_ptr< monty::ndarray< double,1 > > _2989_target)
{
  _checked_ptr_1<double> _ptr__2989_target(_2989_target ? _2989_target->raw() : nullptr, _2989_target ? _2989_target->size(0) : 0);
  model->getConstraintValues(_2987_primal,con_nativeidxs,_2989_target,_2988_offset);
}
// End mosek.fusion.Constraint.values

// Begin mosek.fusion.Constraint.remove
// Method mosek.fusion.Constraint.remove @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:601:6-603:7
void mosek::fusion::Constraint :: remove() { mosek::fusion::p_Constraint::_get_impl(this)->remove(); }
void mosek::fusion::p_Constraint::remove()
{
  throw ::mosek::fusion::DeletionError(std::string ("Only original constraints can be removed"));
}
// End mosek.fusion.Constraint.remove

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:592:6-594:7
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2990_bfix) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2990_bfix); }
void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2990_bfix)
{
  _checked_ptr_1<double> _ptr__2990_bfix(_2990_bfix ? _2990_bfix->raw() : nullptr, _2990_bfix ? _2990_bfix->size(0) : 0);
  _pubthis->update(::mosek::fusion::p_Expr::reshape(::mosek::fusion::p_Expr::constTerm(_2990_bfix),_pubthis->getShape()),(::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>(),true);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:577:6-590:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2991_expr) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2991_expr); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2991_expr)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2992_eshape = _2991_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__2992_eshape(_2992_eshape ? _2992_eshape->raw() : nullptr,_2992_eshape ? _2992_eshape->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2992_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int32_t _10566_ = (int)0;
  int32_t _10567_ = (int)((_2992_eshape)->size(0));
  for (int32_t _2993_i = _10566_; _2993_i < _10567_; ++_2993_i)
  {
    {
      if ((_ptr__2992_eshape[_2993_i] != ((*shape)(_2993_i))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _10568_ = (int)((_2992_eshape)->size(0));
  int32_t _10569_ = (int)((shape)->size(0));
  for (int32_t _2994_i = _10568_; _2994_i < _10569_; ++_2994_i)
  {
    {
      if ((((*shape)(_2994_i)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(con_nativeidxs,_2991_expr);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:517:6-574:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2995_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2996_x,bool _2997_bfixupdate) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2995_expr,_2996_x,_2997_bfixupdate); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2995_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2996_x,bool _2997_bfixupdate)
{
  int32_t _2998_nd = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2999_eshape = _2995_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__2999_eshape(_2999_eshape ? _2999_eshape->raw() : nullptr,_2999_eshape ? _2999_eshape->size(0) : 0);
  if ((_2998_nd < (int)((_2999_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int32_t _10570_ = (int)0;
  int32_t _10571_ = (int)((_2999_eshape)->size(0));
  for (int32_t _3000_i = _10570_; _3000_i < _10571_; ++_3000_i)
  {
    {
      if ((_ptr__2999_eshape[_3000_i] != ((*shape)(_3000_i))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _10572_ = (int)((_2999_eshape)->size(0));
  int32_t _10573_ = (int)((shape)->size(0));
  for (int32_t _3001_i = _10572_; _3001_i < _10573_; ++_3001_i)
  {
    {
      if ((((*shape)(_3001_i)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _3002_ni = _2996_x->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3003_varidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3002_ni)));
  _checked_ptr_1<int64_t> _ptr__3003_varidxs(_3003_varidxs ? _3003_varidxs->raw() : nullptr,_3003_varidxs ? _3003_varidxs->size(0) : 0);
  if ((_3002_ni < _2996_x->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3004_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3002_ni)));
      _checked_ptr_1<int64_t> _ptr__3004_sp(_3004_sp ? _3004_sp->raw() : nullptr,_3004_sp ? _3004_sp->size(0) : 0);
      _2996_x->inst((int)0,_3004_sp,(int)0,_3003_varidxs);
    }
  }
  else
  {
    {
      _2996_x->inst((int)0,_3003_varidxs);
    }
  }
  int32_t _10574_ = (int)0;
  int32_t _10575_ = _3002_ni;
  for (int32_t _3005_i = _10574_; _3005_i < _10575_; ++_3005_i)
  {
    {
      if ((_ptr__3003_varidxs[_3005_i] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Semidefinite terms cannot be updated"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3006_varidxs32;
  _checked_ptr_1<int32_t> _ptr__3006_varidxs32(_3006_varidxs32 ? _3006_varidxs32->raw() : nullptr,_3006_varidxs32 ? _3006_varidxs32->size(0) : 0);
  {
    bool _3007_issorted = true;
    int32_t _10576_ = (int)0;
    int32_t _10577_ = (_3002_ni - (int)1);
    for (int32_t _3008_i = _10576_; _3008_i < _10577_; ++_3008_i)
    {
      {
        _3007_issorted = (_3007_issorted && (_ptr__3003_varidxs[_3008_i] < _ptr__3003_varidxs[safe_add( _3008_i,(int)1 )]));
      }
    }
    if (_3007_issorted)
    {
      {
        if ((!_2997_bfixupdate))
        {
          {
            std::vector<int32_t> _10578_;
            for (int32_t _3009_i = (int)0, _10579_ = _3002_ni; _3009_i < _10579_ ; ++_3009_i)
            {
              _10578_.push_back((int32_t)_ptr__3003_varidxs[_3009_i]);
            }
            auto _10580_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10578_.size()),_10578_.begin(),_10578_.end()));
            _3006_varidxs32 = _10580_;
            _ptr__3006_varidxs32.update(_3006_varidxs32 ? _3006_varidxs32->raw() : nullptr, _3006_varidxs32 ? _3006_varidxs32->size(0) : 0);
          }
        }
        else
        {
          {
            _3006_varidxs32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _3002_ni,(int)1 ))));
            _ptr__3006_varidxs32.update(_3006_varidxs32 ? _3006_varidxs32->raw() : nullptr, _3006_varidxs32 ? _3006_varidxs32->size(0) : 0);
            _ptr__3006_varidxs32[(int)0] = (int)0;
            int32_t _10581_ = (int)0;
            int32_t _10582_ = _3002_ni;
            for (int32_t _3010_i = _10581_; _3010_i < _10582_; ++_3010_i)
            {
              {
                _ptr__3006_varidxs32[safe_add( (int)1,_3010_i )] = (int32_t)_ptr__3003_varidxs[_3010_i];
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::vector<int64_t> _10583_;
        for (int32_t _3012_i = (int)0, _10584_ = _3002_ni; _3012_i < _10584_ ; ++_3012_i)
        {
          _10583_.push_back(_3012_i);
        }
        auto _10585_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10583_.size()),_10583_.begin(),_10583_.end()));
        std::shared_ptr< monty::ndarray< int64_t,1 > > _3011_perm = _10585_;
        _checked_ptr_1<int64_t> _ptr__3011_perm(_3011_perm ? _3011_perm->raw() : nullptr,_3011_perm ? _3011_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_3011_perm,_3003_varidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_3002_ni));
        int32_t _3013_nunique = (int)1;
        int32_t _10586_ = (int)1;
        int32_t _10587_ = _3002_ni;
        for (int32_t _3014_i = _10586_; _3014_i < _10587_; ++_3014_i)
        {
          {
            if ((_ptr__3003_varidxs[_ptr__3011_perm[(_3014_i - (int)1)]] < _ptr__3003_varidxs[_ptr__3011_perm[_3014_i]]))
            {
              {
                ++ _3013_nunique;
              }
            }
            {}
          }
        }
        if (_2997_bfixupdate)
        {
          {
            _3013_nunique += (int)1;
          }
        }
        {}
        _3006_varidxs32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3013_nunique)));
        _ptr__3006_varidxs32.update(_3006_varidxs32 ? _3006_varidxs32->raw() : nullptr, _3006_varidxs32 ? _3006_varidxs32->size(0) : 0);
        int32_t _3015_k = (int)0;
        if (_2997_bfixupdate)
        {
          {
            _ptr__3006_varidxs32[(int)0] = (int)0;
            ++ _3015_k;
          }
        }
        {}
        _ptr__3006_varidxs32[_3015_k] = (int32_t)_ptr__3003_varidxs[_ptr__3011_perm[(int)0]];
        int32_t _10588_ = (int)1;
        int32_t _10589_ = _3002_ni;
        for (int32_t _3016_i = _10588_; _3016_i < _10589_; ++_3016_i)
        {
          {
            if ((_ptr__3003_varidxs[(_3016_i - (int)1)] < _ptr__3003_varidxs[_3016_i]))
            {
              {
                _ptr__3006_varidxs32[_3015_k] = (int32_t)_ptr__3003_varidxs[_ptr__3011_perm[_3016_i]];
                ++ _3015_k;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(con_nativeidxs,_2995_expr,_3006_varidxs32);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:513:6-515:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _3017_expr,monty::rc_ptr< ::mosek::fusion::Variable > _3018_x) { mosek::fusion::p_Constraint::_get_impl(this)->update(_3017_expr,_3018_x); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _3017_expr,monty::rc_ptr< ::mosek::fusion::Variable > _3018_x)
{
  _pubthis->update(_3017_expr,_3018_x,false);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.get_model
// Method mosek.fusion.Constraint.get_model @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:505:6-508:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model()
{
  return model;
}
// End mosek.fusion.Constraint.get_model

// Begin mosek.fusion.Constraint.get_nd
// Method mosek.fusion.Constraint.get_nd @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:498:6-501:7
int32_t mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }
int32_t mosek::fusion::p_Constraint::get_nd()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.Constraint.get_nd

// Begin mosek.fusion.Constraint.size
// Method mosek.fusion.Constraint.size @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:491:6-494:7
int64_t mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }
int64_t mosek::fusion::p_Constraint::size()
{
  int64_t _3019_sz = (int)1;
  int32_t _10590_ = (int)0;
  int32_t _10591_ = (int)((shape)->size(0));
  for (int32_t _3020_i = _10590_; _3020_i < _10591_; ++_3020_i)
  {
    {
      _3019_sz *= ((*shape)(_3020_i));
    }
  }
  return _3019_sz;
}
// End mosek.fusion.Constraint.size

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:479:6-484:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3021_clist,
    int32_t _3022_dim) { return mosek::fusion::p_Constraint::stack(_3021_clist,_3022_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3021_clist,int32_t _3022_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(_3021_clist,_3022_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:471:6-478:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _3023_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3024_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3025_v3,
    int32_t _3026_dim) { return mosek::fusion::p_Constraint::stack(_3023_v1,_3024_v2,_3025_v3,_3026_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _3023_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _3024_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _3025_v3,int32_t _3026_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_3023_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3024_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3025_v3.get())}),_3026_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:463:6-469:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _3027_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3028_v2,
    int32_t _3029_dim) { return mosek::fusion::p_Constraint::stack(_3027_v1,_3028_v2,_3029_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _3027_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _3028_v2,int32_t _3029_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_3027_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3028_v2.get())}),_3029_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:456:6-460:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3030_clist) { return mosek::fusion::p_Constraint::hstack(_3030_clist); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3030_clist)
{
  return ::mosek::fusion::p_Constraint::dstack(_3030_clist,(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:451:6-455:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3031_clist) { return mosek::fusion::p_Constraint::vstack(_3031_clist); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3031_clist)
{
  return ::mosek::fusion::p_Constraint::dstack(_3031_clist,(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:432:6-438:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _3032_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3033_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3034_v3) { return mosek::fusion::p_Constraint::hstack(_3032_v1,_3033_v2,_3034_v3); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _3032_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _3033_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _3034_v3)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_3032_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3033_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3034_v3.get())}),(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:425:6-431:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _3035_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3036_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3037_v3) { return mosek::fusion::p_Constraint::vstack(_3035_v1,_3036_v2,_3037_v3); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _3035_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _3036_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _3037_v3)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_3035_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3036_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3037_v3.get())}),(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:406:6-411:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _3038_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3039_v2) { return mosek::fusion::p_Constraint::hstack(_3038_v1,_3039_v2); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _3038_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _3039_v2)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_3038_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3039_v2.get())}),(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:399:6-404:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _3040_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _3041_v2) { return mosek::fusion::p_Constraint::vstack(_3040_v1,_3041_v2); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _3040_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _3041_v2)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_3040_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_3041_v2.get())}),(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.dstack
// Method mosek.fusion.Constraint.dstack @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:277:6-386:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3042_c,int32_t _3043_dim)
{
  monty::rc_ptr< ::mosek::fusion::Model > _3044_m0 = nullptr;
  {
    int32_t _10592_ = (int)0;
    int32_t _10593_ = (int)((_3042_c)->size(0));
    for (int32_t _3045_i = _10592_; _3045_i < _10593_; ++_3045_i)
    {
      {
        if ((NULL == _3044_m0.get()))
        {
          {
            _3044_m0 = ((*_3042_c)(_3045_i))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_3042_c)(_3045_i)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_3042_c)(_3045_i)))->model != _3044_m0)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3046_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _10594_;
            bool _10595_ = ((int)((mosek::fusion::p_Model::_get_impl(_3044_m0.get())->getName()).size()) > (int)0);
            if (_10595_)
            {
              _10594_ = mosek::fusion::p_Model::_get_impl(_3044_m0.get())->getName();
            }
            else
            {
              _10594_ = std::string ("?");
            }
            std::string _3047_m1name = _10594_;
            std::string _10596_;
            bool _10597_ = ((int)((mosek::fusion::p_Model::_get_impl(((*_3042_c)(_3045_i))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_10597_)
            {
              _10596_ = mosek::fusion::p_Model::_get_impl(((*_3042_c)(_3045_i))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _10596_ = std::string ("?");
            }
            std::string _3048_m2name = _10596_;
            _3046_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_3047_m1name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_3048_m2name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_3046_sb->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_3042_c)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_3042_c)->size(0)) == (int)1))
  {
    {
      return ((*_3042_c)((int)1));
    }
  }
  else
  {
    {
      int32_t _3049_n = (int)((_3042_c)->size(0));
      int32_t _3050_nd = (int)1;
      int32_t _10598_ = (int)0;
      int32_t _10599_ = _3049_n;
      for (int32_t _3051_i = _10598_; _3051_i < _10599_; ++_3051_i)
      {
        {
          int32_t _10600_;
          bool _10601_ = (((*_3042_c)(_3051_i))->getND() > _3050_nd);
          if (_10601_)
          {
            _10600_ = ((*_3042_c)(_3051_i))->getND();
          }
          else
          {
            _10600_ = _3050_nd;
          }
          _3050_nd = _10600_;
        }
      }
      if ((_3043_dim == _3050_nd))
      {
        {
          ++ _3050_nd;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,2 > > _3052_shape = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape(_3049_n,_3050_nd)));
      int32_t _10602_ = (int)0;
      int32_t _10603_ = _3049_n;
      for (int32_t _3053_i = _10602_; _3053_i < _10603_; ++_3053_i)
      {
        {
          int32_t _10604_ = (int)0;
          int32_t _10605_ = _3050_nd;
          for (int32_t _3054_j = _10604_; _3054_j < _10605_; ++_3054_j)
          {
            {
              ((*_3052_shape)(_3053_i,_3054_j)) = (int)1;
            }
          }
        }
      }
      std::vector<int32_t> _10606_;
      for (int32_t _3056_i = (int)0, _10607_ = _3049_n; _3056_i < _10607_ ; ++_3056_i)
      {
        _10606_.push_back(((*_3042_c)(_3056_i))->getSize());
      }
      auto _10608_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10606_.size()),_10606_.begin(),_10606_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3055_numnz = _10608_;
      _checked_ptr_1<int32_t> _ptr__3055_numnz(_3055_numnz ? _3055_numnz->raw() : nullptr,_3055_numnz ? _3055_numnz->size(0) : 0);
      int32_t _3057_totalnnz = (int)0;
      int32_t _10609_ = (int)0;
      int32_t _10610_ = _3049_n;
      for (int32_t _3058_i = _10609_; _3058_i < _10610_; ++_3058_i)
      {
        {
          _3057_totalnnz += _ptr__3055_numnz[_3058_i];
        }
      }
      int32_t _10611_ = (int)0;
      int32_t _10612_ = _3049_n;
      for (int32_t _3059_i = _10611_; _3059_i < _10612_; ++_3059_i)
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3060_shpi = ((*_3042_c)(_3059_i))->getShape();
          _checked_ptr_1<int32_t> _ptr__3060_shpi(_3060_shpi ? _3060_shpi->raw() : nullptr,_3060_shpi ? _3060_shpi->size(0) : 0);
          int32_t _10613_ = (int)0;
          int32_t _10614_ = (int)((_3060_shpi)->size(0));
          for (int32_t _3061_j = _10613_; _3061_j < _10614_; ++_3061_j)
          {
            {
              ((*_3052_shape)(_3059_i,_3061_j)) = _ptr__3060_shpi[_3061_j];
            }
          }
        }
      }
      if (((_3043_dim < (int)0) || (_3043_dim > _3050_nd)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int32_t _10615_ = (int)0;
      int32_t _10616_ = _3043_dim;
      for (int32_t _3062_i = _10615_; _3062_i < _10616_; ++_3062_i)
      {
        {
          int32_t _10617_ = (int)1;
          int32_t _10618_ = _3049_n;
          for (int32_t _3063_j = _10617_; _3063_j < _10618_; ++_3063_j)
          {
            {
              if ((((*_3052_shape)((int)0,_3062_i)) != ((*_3052_shape)(_3063_j,_3062_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int32_t _10619_ = safe_add( _3043_dim,(int)1 );
      int32_t _10620_ = _3050_nd;
      for (int32_t _3064_i = _10619_; _3064_i < _10620_; ++_3064_i)
      {
        {
          int32_t _10621_ = (int)1;
          int32_t _10622_ = _3049_n;
          for (int32_t _3065_j = _10621_; _3065_j < _10622_; ++_3065_j)
          {
            {
              if ((((*_3052_shape)((int)0,_3064_i)) != ((*_3052_shape)(_3065_j,_3064_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3066_con_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3057_totalnnz)));
      _checked_ptr_1<int32_t> _ptr__3066_con_nativeidxs(_3066_con_nativeidxs ? _3066_con_nativeidxs->raw() : nullptr,_3066_con_nativeidxs ? _3066_con_nativeidxs->size(0) : 0);
      std::vector<int32_t> _10623_;
      for (int32_t _3068_i = (int)0, _10624_ = _3050_nd; _3068_i < _10624_ ; ++_3068_i)
      {
        _10623_.push_back(((*_3052_shape)((int)0,_3068_i)));
      }
      auto _10625_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10623_.size()),_10623_.begin(),_10623_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3067_resshape = _10625_;
      _checked_ptr_1<int32_t> _ptr__3067_resshape(_3067_resshape ? _3067_resshape->raw() : nullptr,_3067_resshape ? _3067_resshape->size(0) : 0);
      int32_t _10626_ = (int)1;
      int32_t _10627_ = _3049_n;
      for (int32_t _3069_i = _10626_; _3069_i < _10627_; ++_3069_i)
      {
        {
          _ptr__3067_resshape[_3043_dim] += ((*_3052_shape)(_3069_i,_3043_dim));
        }
      }
      {
        int32_t _3070_rnd = (int)((_3067_resshape)->size(0));
        std::shared_ptr< monty::ndarray< int64_t,1 > > _3071_cumdims = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( (int)((_3042_c)->size(0)),(int)1 ))));
        _checked_ptr_1<int64_t> _ptr__3071_cumdims(_3071_cumdims ? _3071_cumdims->raw() : nullptr,_3071_cumdims ? _3071_cumdims->size(0) : 0);
        int32_t _10628_ = (int)0;
        int32_t _10629_ = (int)((_3042_c)->size(0));
        for (int32_t _3072_i = _10628_; _3072_i < _10629_; ++_3072_i)
        {
          {
            _ptr__3071_cumdims[safe_add( _3072_i,(int)1 )] = safe_add( _ptr__3071_cumdims[_3072_i],((*_3052_shape)(_3072_i,_3043_dim)) );
          }
        }
        if ((_3043_dim == (int)0))
        {
          {
            int32_t _3073_b = (int)0;
            int32_t _10630_ = (int)0;
            int32_t _10631_ = _3049_n;
            for (int32_t _3074_i = _10630_; _3074_i < _10631_; ++_3074_i)
            {
              {
                int32_t _3075_nnz = (int)((mosek::fusion::p_Constraint::_get_impl(((*_3042_c)(_3074_i)))->con_nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_3042_c)(_3074_i)))->con_nativeidxs,(int)0,_3066_con_nativeidxs,_3073_b,_3075_nnz);
                _3073_b += _3075_nnz;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _10632_;
            for (int32_t _3077_i = (int)0, _10633_ = _3049_n; _3077_i < _10633_ ; ++_3077_i)
            {
              _10632_.push_back(mosek::fusion::p_Constraint::_get_impl(((*_3042_c)(_3077_i)))->con_nativeidxs);
            }
            auto _10634_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_10632_.size()),_10632_.begin(),_10632_.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _3076_nidxlist = _10634_;
            if ((_3043_dim < _3050_nd))
            {
              {
                int32_t _3078_d0 = (int)1;
                int32_t _10635_ = (int)0;
                int32_t _10636_ = _3043_dim;
                for (int32_t _3079_i = _10635_; _3079_i < _10636_; ++_3079_i)
                {
                  {
                    _3078_d0 *= _ptr__3067_resshape[_3079_i];
                  }
                }
                int32_t _3080_d2 = (int)1;
                int32_t _10637_ = safe_add( _3043_dim,(int)1 );
                int32_t _10638_ = _3050_nd;
                for (int32_t _3081_i = _10637_; _3081_i < _10638_; ++_3081_i)
                {
                  {
                    _3080_d2 *= _ptr__3067_resshape[_3081_i];
                  }
                }
                int32_t _3082_k = (int)0;
                int32_t _10639_ = (int)0;
                int32_t _10640_ = _3078_d0;
                for (int32_t _3083_i0 = _10639_; _3083_i0 < _10640_; ++_3083_i0)
                {
                  {
                    int32_t _10641_ = (int)0;
                    int32_t _10642_ = _3049_n;
                    for (int32_t _3084_j = _10641_; _3084_j < _10642_; ++_3084_j)
                    {
                      {
                        int32_t _3085_l = (int)0;
                        int32_t _3086_d1 = ((*_3052_shape)(_3084_j,_3043_dim));
                        int32_t _10643_ = (int)0;
                        int32_t _10644_ = _3086_d1;
                        for (int32_t _3087_i1 = _10643_; _3087_i1 < _10644_; ++_3087_i1)
                        {
                          {
                            int32_t _10645_ = (int)0;
                            int32_t _10646_ = _3080_d2;
                            for (int32_t _3088_i2 = _10645_; _3088_i2 < _10646_; ++_3088_i2)
                            {
                              {
                                _ptr__3066_con_nativeidxs[_3082_k] = ((*mosek::fusion::p_Constraint::_get_impl(((*_3042_c)(_3049_n)))->con_nativeidxs)(safe_add( safe_mul( safe_mul( _3083_i0,_3080_d2 ),_3086_d1 ),_3085_l )));
                                ++ _3082_k;
                                ++ _3085_l;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int32_t _3089_prodshape = (int)1;
                int32_t _10647_ = (int)0;
                int32_t _10648_ = _3050_nd;
                for (int32_t _3090_i = _10647_; _3090_i < _10648_; ++_3090_i)
                {
                  {
                    _3089_prodshape *= _ptr__3067_resshape[_3090_i];
                  }
                }
                int32_t _3091_k = (int)0;
                int32_t _10649_ = (int)0;
                int32_t _10650_ = _3089_prodshape;
                for (int32_t _3092_i = _10649_; _3092_i < _10650_; ++_3092_i)
                {
                  {
                    int32_t _10651_ = (int)0;
                    int32_t _10652_ = _3049_n;
                    for (int32_t _3093_j = _10651_; _3093_j < _10652_; ++_3093_j)
                    {
                      {
                        _ptr__3066_con_nativeidxs[_3091_k] = ((*((*_3076_nidxlist)(_3093_j)))(_3092_i));
                        ++ _3091_k;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_3044_m0,_3067_resshape,_3066_con_nativeidxs)).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.dstack

// Begin mosek.fusion.Constraint.index
// Method mosek.fusion.Constraint.index @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:251:6-266:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _3094_idxa) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_3094_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _3094_idxa) { return __mosek_2fusion_2Constraint__index(_3094_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _3094_idxa)
{
  _checked_ptr_1<int32_t> _ptr__3094_idxa(_3094_idxa ? _3094_idxa->raw() : nullptr, _3094_idxa ? _3094_idxa->size(0) : 0);
  if (((int)((_3094_idxa)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10653_ = (int)0;
      int32_t _10654_ = (int)((shape)->size(0));
      for (int32_t _3095_i = _10653_; _3095_i < _10654_; ++_3095_i)
      {
        {
          if (((_ptr__3094_idxa[_3095_i] < (int)0) || (_ptr__3094_idxa[_3095_i] > ((*shape)(_3095_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int32_t _3096_nd = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3097_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3096_nd)));
      _checked_ptr_1<int64_t> _ptr__3097_strides(_3097_strides ? _3097_strides->raw() : nullptr,_3097_strides ? _3097_strides->size(0) : 0);
      _ptr__3097_strides[(_3096_nd - (int)1)] = (int)1;
      int32_t _10655_ = (int)1;
      int32_t _10656_ = _3096_nd;
      for (int32_t _3098_i = _10655_; _3098_i < _10656_; ++_3098_i)
      {
        {
          _ptr__3097_strides[((_3096_nd - _3098_i) - (int)1)] = safe_mul( _ptr__3097_strides[(_3096_nd - _3098_i)],((*shape)((_3096_nd - _3098_i))) );
        }
      }
      int32_t _3099_ii = (int)0;
      int32_t _10657_ = (int)0;
      int32_t _10658_ = _3096_nd;
      for (int32_t _3100_i = _10657_; _3100_i < _10658_; ++_3100_i)
      {
        {
          _3099_ii += (int32_t)safe_mul( _ptr__3097_strides[_3100_i],_ptr__3094_idxa[_3100_i] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*con_nativeidxs)(_3099_ii)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.index

// Begin mosek.fusion.Constraint.index
// Method mosek.fusion.Constraint.index @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:236:6-246:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int32_t _3101_idx) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_3101_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int32_t _3101_idx) { return __mosek_2fusion_2Constraint__index(_3101_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int32_t _3101_idx)
{
  if ((((int)((shape)->size(0)) == (int)0) && (_3101_idx == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_3101_idx < (int)0) || (_3101_idx > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*con_nativeidxs)(_3101_idx)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.index

// Begin mosek.fusion.Constraint.slice
// Method mosek.fusion.Constraint.slice @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:179:6-231:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3102_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _3103_lasta) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_3102_firsta,_3103_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3102_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _3103_lasta) { return __mosek_2fusion_2Constraint__slice(_3102_firsta,_3103_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3102_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _3103_lasta)
{
  _checked_ptr_1<int32_t> _ptr__3102_firsta(_3102_firsta ? _3102_firsta->raw() : nullptr, _3102_firsta ? _3102_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3103_lasta(_3103_lasta ? _3103_lasta->raw() : nullptr, _3103_lasta ? _3103_lasta->size(0) : 0);
  if (((int)((_3102_firsta)->size(0)) != (int)((_3103_lasta)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_3102_firsta)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10659_ = (int)0;
      int32_t _10660_ = (int)((shape)->size(0));
      for (int32_t _3104_i = _10659_; _3104_i < _10660_; ++_3104_i)
      {
        {
          if (((_ptr__3102_firsta[_3104_i] < (int)0) || (_ptr__3103_lasta[_3104_i] > ((*shape)(_3104_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__3102_firsta[_3104_i] > _ptr__3103_lasta[_3104_i]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int32_t _3105_nd = (int)((shape)->size(0));
      std::vector<int32_t> _10661_;
      for (int32_t _3107_i = (int)0, _10662_ = _3105_nd; _3107_i < _10662_ ; ++_3107_i)
      {
        _10661_.push_back((_ptr__3103_lasta[_3107_i] - _ptr__3102_firsta[_3107_i]));
      }
      auto _10663_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10661_.size()),_10661_.begin(),_10661_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3106_sliceshape = _10663_;
      _checked_ptr_1<int32_t> _ptr__3106_sliceshape(_3106_sliceshape ? _3106_sliceshape->raw() : nullptr,_3106_sliceshape ? _3106_sliceshape->size(0) : 0);
      int32_t _3108_slicesize = (int)1;
      int32_t _10664_ = (int)0;
      int32_t _10665_ = _3105_nd;
      for (int32_t _3109_i = _10664_; _3109_i < _10665_; ++_3109_i)
      {
        {
          _3108_slicesize *= (_ptr__3103_lasta[_3109_i] - _ptr__3102_firsta[_3109_i]);
        }
      }
      if ((_3108_slicesize == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_3106_sliceshape,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3110_sliceidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3108_slicesize)));
          _checked_ptr_1<int32_t> _ptr__3110_sliceidxs(_3110_sliceidxs ? _3110_sliceidxs->raw() : nullptr,_3110_sliceidxs ? _3110_sliceidxs->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int32_t,1 > > _3111_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3105_nd)));
            _checked_ptr_1<int32_t> _ptr__3111_strides(_3111_strides ? _3111_strides->raw() : nullptr,_3111_strides ? _3111_strides->size(0) : 0);
            _ptr__3111_strides[(_3105_nd - (int)1)] = (int)1;
            int32_t _10666_ = (int)1;
            int32_t _10667_ = _3105_nd;
            for (int32_t _3112_i = _10666_; _3112_i < _10667_; ++_3112_i)
            {
              {
                _ptr__3111_strides[((_3105_nd - _3112_i) - (int)1)] = safe_mul( _ptr__3111_strides[(_3105_nd - _3112_i)],((*shape)((_3105_nd - _3112_i))) );
              }
            }
            int32_t _3113_start = (int)0;
            int32_t _10668_ = (int)0;
            int32_t _10669_ = _3105_nd;
            for (int32_t _3114_i = _10668_; _3114_i < _10669_; ++_3114_i)
            {
              {
                _3113_start += safe_mul( _ptr__3102_firsta[_3114_i],_ptr__3111_strides[_3114_i] );
              }
            }
            std::vector<int32_t> _10670_;
            for (int32_t _3116_i = (int)0, _10671_ = _3105_nd; _3116_i < _10671_ ; ++_3116_i)
            {
              _10670_.push_back(_3113_start);
            }
            auto _10672_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10670_.size()),_10670_.begin(),_10670_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _3115_pp = _10672_;
            _checked_ptr_1<int32_t> _ptr__3115_pp(_3115_pp ? _3115_pp->raw() : nullptr,_3115_pp ? _3115_pp->size(0) : 0);
            std::vector<int32_t> _10673_;
            for (int32_t _3118_i = (int)0, _10674_ = _3105_nd; _3118_i < _10674_ ; ++_3118_i)
            {
              _10673_.push_back(_ptr__3102_firsta[_3118_i]);
            }
            auto _10675_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10673_.size()),_10673_.begin(),_10673_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _3117_ii = _10675_;
            _checked_ptr_1<int32_t> _ptr__3117_ii(_3117_ii ? _3117_ii->raw() : nullptr,_3117_ii ? _3117_ii->size(0) : 0);
            int32_t _10676_ = (int)0;
            int32_t _10677_ = _3108_slicesize;
            for (int32_t _3119_i = _10676_; _3119_i < _10677_; ++_3119_i)
            {
              {
                _ptr__3110_sliceidxs[_3119_i] = ((*con_nativeidxs)(_ptr__3115_pp[(_3105_nd - (int)1)]));
                _ptr__3117_ii[(_3105_nd - (int)1)] += (int)1;
                _ptr__3115_pp[(_3105_nd - (int)1)] += _ptr__3111_strides[(_3105_nd - (int)1)];
                if ((_ptr__3117_ii[(_3105_nd - (int)1)] >= _ptr__3103_lasta[(_3105_nd - (int)1)]))
                {
                  {
                    int32_t _3120_k = (_3105_nd - (int)1);
                    while ( ((_3120_k > (int)0) && (_ptr__3117_ii[_3120_k] >= _ptr__3103_lasta[_3120_k])) )
                    {
                      {
                        _ptr__3117_ii[_3120_k] = _ptr__3102_firsta[_3120_k];
                        _ptr__3117_ii[(_3120_k - (int)1)] += (int)1;
                        _ptr__3115_pp[(_3120_k - (int)1)] += _ptr__3111_strides[(_3120_k - (int)1)];
                        -- _3120_k;
                      }
                    }
                    int32_t _10678_ = safe_add( _3120_k,(int)1 );
                    int32_t _10679_ = _3105_nd;
                    for (int32_t _3121_k2 = _10678_; _3121_k2 < _10679_; ++_3121_k2)
                    {
                      {
                        _ptr__3115_pp[_3121_k2] = _ptr__3115_pp[_3120_k];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_3106_sliceshape,_3110_sliceidxs)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
// End mosek.fusion.Constraint.slice

// Begin mosek.fusion.Constraint.slice
// Method mosek.fusion.Constraint.slice @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:166:6-177:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int32_t _3122_first,int32_t _3123_last) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_3122_first,_3123_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int32_t _3122_first,int32_t _3123_last) { return __mosek_2fusion_2Constraint__slice(_3122_first,_3123_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int32_t _3122_first,int32_t _3123_last)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_3122_first == (int)0) && (_3123_last == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_3122_first < (int)0) || (_3123_last > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_3122_first > _3123_last))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int32_t> _10680_;
      for (int32_t _3124_i = _3122_first, _10681_ = _3123_last; _3124_i < _10681_ ; ++_3124_i)
      {
        _10680_.push_back(((*con_nativeidxs)(_3124_i)));
      }
      auto _10682_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10680_.size()),_10680_.begin(),_10680_.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((_3123_last - _3122_first))}),_10682_)).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.slice

// Begin mosek.fusion.Constraint.getND
// Method mosek.fusion.Constraint.getND @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:162:6-164:7
int32_t mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_Constraint::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.Constraint.getND

// Begin mosek.fusion.Constraint.getSize
// Method mosek.fusion.Constraint.getSize @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:156:6-159:7
int32_t mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }
int32_t mosek::fusion::p_Constraint::getSize()
{
  int32_t _3125_sz = (int)1;
  int32_t _10683_ = (int)0;
  int32_t _10684_ = (int)((shape)->size(0));
  for (int32_t _3126_i = _10683_; _3126_i < _10684_; ++_3126_i)
  {
    {
      _3125_sz *= ((*shape)(_3126_i));
    }
  }
  return _3125_sz;
}
// End mosek.fusion.Constraint.getSize

// Begin mosek.fusion.Constraint.getModel
// Method mosek.fusion.Constraint.getModel @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:153:6-55
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel()
{
  return model;
}
// End mosek.fusion.Constraint.getModel

// Begin mosek.fusion.Constraint.getShape
// Method mosek.fusion.Constraint.getShape @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:147:6-150:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Constraint::getShape()
{
  std::vector<int32_t> _10685_;
  for (int32_t _3127_i = (int)0, _10686_ = (int)((shape)->size(0)); _3127_i < _10686_ ; ++_3127_i)
  {
    _10685_.push_back(((*shape)(_3127_i)));
  }
  auto _10687_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10685_.size()),_10685_.begin(),_10685_.end()));
  return _10687_;
}
// End mosek.fusion.Constraint.getShape

// Begin mosek.fusion.Constraint.getNativeidxs
// Method mosek.fusion.Constraint.getNativeidxs @ bld/docker-rockylinux-8/final/default/src/fusion/Constraint.mbi:142:6-144:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Constraint::getNativeidxs()
{
  return con_nativeidxs;
}
// End mosek.fusion.Constraint.getNativeidxs

void mosek::fusion::p_Constraint::destroy()
{
  con_nativeidxs.reset();
  shape.reset();
  model.reset();
}
void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }
// } class Constraint
// class Set { // @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:34:4-207:5
mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Set::p_Set
  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Set.size
// Method mosek.fusion.Set.size @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:204:6-206:7
int64_t mosek::fusion::Set::size
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3128_shape) { return mosek::fusion::p_Set::size(_3128_shape); }
int64_t mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int32_t,1 > > _3128_shape)
{
  _checked_ptr_1<int32_t> _ptr__3128_shape(_3128_shape ? _3128_shape->raw() : nullptr, _3128_shape ? _3128_shape->size(0) : 0);
  int64_t _3129_sz = (int64_t)1;
  int32_t _10688_ = (int)0;
  int32_t _10689_ = (int)((_3128_shape)->size(0));
  for (int32_t _3130_i = _10688_; _3130_i < _10689_; ++_3130_i)
  {
    {
      _3129_sz *= _ptr__3128_shape[_3130_i];
    }
  }
  return _3129_sz;
}
// End mosek.fusion.Set.size

// Begin mosek.fusion.Set.match
// Method mosek.fusion.Set.match @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:195:6-201:7
bool mosek::fusion::Set::match
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3131_s1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3132_s2) { return mosek::fusion::p_Set::match(_3131_s1,_3132_s2); }
bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int32_t,1 > > _3131_s1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3132_s2)
{
  _checked_ptr_1<int32_t> _ptr__3131_s1(_3131_s1 ? _3131_s1->raw() : nullptr, _3131_s1 ? _3131_s1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3132_s2(_3132_s2 ? _3132_s2->raw() : nullptr, _3132_s2 ? _3132_s2->size(0) : 0);
  if (((int)((_3131_s1)->size(0)) != (int)((_3132_s2)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int32_t _10690_ = (int)0;
  int32_t _10691_ = (int)((_3131_s1)->size(0));
  for (int32_t _3133_i = _10690_; _3133_i < _10691_; ++_3133_i)
  {
    {
      if ((_ptr__3131_s1[_3133_i] != _ptr__3132_s2[_3133_i]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Set.match

// Begin mosek.fusion.Set.linearidx
// Method mosek.fusion.Set.linearidx @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:186:6-192:7
int64_t mosek::fusion::Set::linearidx
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3134_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3135_key) { return mosek::fusion::p_Set::linearidx(_3134_shape,_3135_key); }
int64_t mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int32_t,1 > > _3134_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _3135_key)
{
  _checked_ptr_1<int32_t> _ptr__3134_shape(_3134_shape ? _3134_shape->raw() : nullptr, _3134_shape ? _3134_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3135_key(_3135_key ? _3135_key->raw() : nullptr, _3135_key ? _3135_key->size(0) : 0);
  int64_t _3136_res = _ptr__3135_key[(int)0];
  int32_t _10692_ = (int)1;
  int32_t _10693_ = (int)((_3135_key)->size(0));
  for (int32_t _3137_i = _10692_; _3137_i < _10693_; ++_3137_i)
  {
    {
      _3136_res = safe_add( safe_mul( _3136_res,_ptr__3134_shape[_3137_i] ),_ptr__3135_key[_3137_i] );
    }
  }
  return _3136_res;
}
// End mosek.fusion.Set.linearidx

// Begin mosek.fusion.Set.idxtokey
// Method mosek.fusion.Set.idxtokey @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:169:6-174:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::idxtokey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3138_shape,
    int64_t _3139_idx) { return mosek::fusion::p_Set::idxtokey(_3138_shape,_3139_idx); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3138_shape,int64_t _3139_idx)
{
  _checked_ptr_1<int32_t> _ptr__3138_shape(_3138_shape ? _3138_shape->raw() : nullptr, _3138_shape ? _3138_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3140_res = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_3138_shape)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__3140_res(_3140_res ? _3140_res->raw() : nullptr,_3140_res ? _3140_res->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_3138_shape,_3139_idx,_3140_res);
  return _3140_res;
}
// End mosek.fusion.Set.idxtokey

// Begin mosek.fusion.Set.idxtokey
// Method mosek.fusion.Set.idxtokey @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:154:6-167:7
void mosek::fusion::Set::idxtokey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3141_shape,
    int64_t _3142_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3143_dest) { mosek::fusion::p_Set::idxtokey(_3141_shape,_3142_idx,_3143_dest); }
void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3141_shape,int64_t _3142_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _3143_dest)
{
  _checked_ptr_1<int32_t> _ptr__3141_shape(_3141_shape ? _3141_shape->raw() : nullptr, _3141_shape ? _3141_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3143_dest(_3143_dest ? _3143_dest->raw() : nullptr, _3143_dest ? _3143_dest->size(0) : 0);
  int32_t _3144_nd = (int)((_3141_shape)->size(0));
  if ((_3144_nd > (int)0))
  {
    {
      int64_t _3145_ix = _3142_idx;
      int32_t _10694_ = (int)0;
      int32_t _10695_ = (_3144_nd - (int)1);
      for (int32_t _3146_i = _10694_; _3146_i < _10695_; ++_3146_i)
      {
        {
          _ptr__3143_dest[((_3144_nd - _3146_i) - (int)1)] = (int32_t)(_3145_ix % _ptr__3141_shape[((_3144_nd - _3146_i) - (int)1)]);
          _3145_ix /= _ptr__3141_shape[((_3144_nd - _3146_i) - (int)1)];
        }
      }
      _ptr__3143_dest[(int)0] = (int32_t)_3145_ix;
    }
  }
  {}
}
// End mosek.fusion.Set.idxtokey

// Begin mosek.fusion.Set.indexToString
// Method mosek.fusion.Set.indexToString @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:124:6-148:7
std::string mosek::fusion::Set::indexToString
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3147_shape,
    int64_t _3148_key) { return mosek::fusion::p_Set::indexToString(_3147_shape,_3148_key); }
std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int32_t,1 > > _3147_shape,int64_t _3148_key)
{
  _checked_ptr_1<int32_t> _ptr__3147_shape(_3147_shape ? _3147_shape->raw() : nullptr, _3147_shape ? _3147_shape->size(0) : 0);
  int32_t _3149_nd = (int)((_3147_shape)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3150_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_3149_nd == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_3149_nd == (int)1))
  {
    {
      return _3150_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_3148_key)->toString();
    }
  }
  else
  {
    {
      int64_t _3151_rem = _3148_key;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3152_k = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3149_nd)));
      _checked_ptr_1<int32_t> _ptr__3152_k(_3152_k ? _3152_k->raw() : nullptr,_3152_k ? _3152_k->size(0) : 0);
      int32_t _10696_ = (int)1;
      int32_t _10697_ = _3149_nd;
      for (int32_t _3153_i = _10696_; _3153_i < _10697_; ++_3153_i)
      {
        {
          _ptr__3152_k[(_3149_nd - _3153_i)] = (int32_t)(_3151_rem % _ptr__3147_shape[(_3149_nd - _3153_i)]);
          _3151_rem /= _ptr__3147_shape[(_3149_nd - _3153_i)];
        }
      }
      _ptr__3152_k[(int)0] = (int32_t)_3151_rem;
      _3150_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3152_k[(int)0]);
      int32_t _10698_ = (int)1;
      int32_t _10699_ = _3149_nd;
      for (int32_t _3154_i = _10698_; _3154_i < _10699_; ++_3154_i)
      {
        {
          _3150_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3152_k[_3154_i]);
        }
      }
      return _3150_sb->toString();
    }
  }
}
// End mosek.fusion.Set.indexToString

// Begin mosek.fusion.Set.keyToString
// Method mosek.fusion.Set.keyToString @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:112:6-119:7
std::string mosek::fusion::Set::keyToString
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3155_key) { return mosek::fusion::p_Set::keyToString(_3155_key); }
std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int32_t,1 > > _3155_key)
{
  _checked_ptr_1<int32_t> _ptr__3155_key(_3155_key ? _3155_key->raw() : nullptr, _3155_key ? _3155_key->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3156_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _3156_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3155_key[(int)0]);
  int32_t _10700_ = (int)1;
  int32_t _10701_ = (int)((_3155_key)->size(0));
  for (int32_t _3157_i = _10700_; _3157_i < _10701_; ++_3157_i)
  {
    {
      _3156_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3155_key[_3157_i]);
    }
  }
  return _3156_sb->toString();
}
// End mosek.fusion.Set.keyToString

// Begin mosek.fusion.Set.indexToKey
// Method mosek.fusion.Set.indexToKey @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:92:6-107:7
void mosek::fusion::Set::indexToKey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3158_shape,
    int64_t _3159_key,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3160_res) { mosek::fusion::p_Set::indexToKey(_3158_shape,_3159_key,_3160_res); }
void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3158_shape,int64_t _3159_key,std::shared_ptr< monty::ndarray< int32_t,1 > > _3160_res)
{
  _checked_ptr_1<int32_t> _ptr__3158_shape(_3158_shape ? _3158_shape->raw() : nullptr, _3158_shape ? _3158_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3160_res(_3160_res ? _3160_res->raw() : nullptr, _3160_res ? _3160_res->size(0) : 0);
  int32_t _3161_nd = (int)((_3158_shape)->size(0));
  if ((_3161_nd == (int)1))
  {
    {
      _ptr__3160_res[(int)0] = (int32_t)_3159_key;
    }
  }
  else
  {
    {
      int64_t _3162_rem = _3159_key;
      int32_t _10702_ = (int)1;
      int32_t _10703_ = _3161_nd;
      for (int32_t _3163_i = _10702_; _3163_i < _10703_; ++_3163_i)
      {
        {
          _ptr__3160_res[(_3161_nd - _3163_i)] = (int32_t)(_3162_rem % _ptr__3158_shape[(_3161_nd - _3163_i)]);
          _3162_rem /= _ptr__3158_shape[(_3161_nd - _3163_i)];
        }
      }
      _ptr__3160_res[(int)0] = (int32_t)_3162_rem;
    }
  }
}
// End mosek.fusion.Set.indexToKey

// Begin mosek.fusion.Set.strides
// Method mosek.fusion.Set.strides @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:81:6-87:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::Set::strides
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3164_shape) { return mosek::fusion::p_Set::strides(_3164_shape); }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int32_t,1 > > _3164_shape)
{
  _checked_ptr_1<int32_t> _ptr__3164_shape(_3164_shape ? _3164_shape->raw() : nullptr, _3164_shape ? _3164_shape->size(0) : 0);
  int32_t _3165_nd = (int)((_3164_shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3166_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3165_nd)));
  _checked_ptr_1<int64_t> _ptr__3166_st(_3166_st ? _3166_st->raw() : nullptr,_3166_st ? _3166_st->size(0) : 0);
  _ptr__3166_st[(_3165_nd - (int)1)] = (int)1;
  int32_t _10704_ = (int)1;
  int32_t _10705_ = _3165_nd;
  for (int32_t _3167_i = _10704_; _3167_i < _10705_; ++_3167_i)
  {
    {
      _ptr__3166_st[((_3165_nd - _3167_i) - (int)1)] = safe_mul( _ptr__3166_st[(_3165_nd - _3167_i)],_ptr__3164_shape[(_3165_nd - _3167_i)] );
    }
  }
  return _3166_st;
}
// End mosek.fusion.Set.strides

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:66:6-72:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3168_set1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3169_set2) { return mosek::fusion::p_Set::make(_3168_set1,_3169_set2); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _3168_set1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3169_set2)
{
  _checked_ptr_1<int32_t> _ptr__3168_set1(_3168_set1 ? _3168_set1->raw() : nullptr, _3168_set1 ? _3168_set1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3169_set2(_3169_set2 ? _3169_set2->raw() : nullptr, _3169_set2 ? _3169_set2->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3170_r = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( (int)((_3168_set1)->size(0)),(int)((_3169_set2)->size(0)) ))));
  _checked_ptr_1<int32_t> _ptr__3170_r(_3170_r ? _3170_r->raw() : nullptr,_3170_r ? _3170_r->size(0) : 0);
  int32_t _10706_ = (int)0;
  int32_t _10707_ = (int)((_3168_set1)->size(0));
  for (int32_t _3171_i = _10706_; _3171_i < _10707_; ++_3171_i)
  {
    {
      _ptr__3170_r[_3171_i] = _ptr__3168_set1[_3171_i];
    }
  }
  int32_t _10708_ = (int)0;
  int32_t _10709_ = (int)((_3169_set2)->size(0));
  for (int32_t _3172_i = _10708_; _3172_i < _10709_; ++_3172_i)
  {
    {
      _ptr__3170_r[safe_add( (int)((_3168_set1)->size(0)),_3172_i )] = _ptr__3169_set2[_3172_i];
    }
  }
  return _3170_r;
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:61:6-64:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3173_sizes) { return mosek::fusion::p_Set::make(_3173_sizes); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _3173_sizes)
{
  _checked_ptr_1<int32_t> _ptr__3173_sizes(_3173_sizes ? _3173_sizes->raw() : nullptr, _3173_sizes ? _3173_sizes->size(0) : 0);
  std::vector<int32_t> _10710_;
  for (int32_t _3174_i = (int)0, _10711_ = (int)((_3173_sizes)->size(0)); _3174_i < _10711_ ; ++_3174_i)
  {
    _10710_.push_back(_ptr__3173_sizes[_3174_i]);
  }
  auto _10712_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10710_.size()),_10710_.begin(),_10710_.end()));
  return _10712_;
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:56:6-59:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3175_s1,
    int32_t _3176_s2,
    int32_t _3177_s3) { return mosek::fusion::p_Set::make(_3175_s1,_3176_s2,_3177_s3); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3175_s1,int32_t _3176_s2,int32_t _3177_s3)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3175_s1),(int32_t)(_3176_s2),(int32_t)(_3177_s3)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:51:6-54:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3178_s1,
    int32_t _3179_s2) { return mosek::fusion::p_Set::make(_3178_s1,_3179_s2); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3178_s1,int32_t _3179_s2)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3178_s1),(int32_t)(_3179_s2)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:46:6-49:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3180_sz) { return mosek::fusion::p_Set::make(_3180_sz); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3180_sz)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3180_sz)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.scalar
// Method mosek.fusion.Set.scalar @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:44:6-67
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::scalar
  ( ) { return mosek::fusion::p_Set::scalar(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::scalar()
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
}
// End mosek.fusion.Set.scalar

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ bld/docker-rockylinux-8/final/default/src/fusion/Set.mbi:36:6-39:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< std::string,1 > > _3181_names) { return mosek::fusion::p_Set::make(_3181_names); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _3181_names)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3181_names)->size(0)))});
}
// End mosek.fusion.Set.make

void mosek::fusion::p_Set::destroy()
{
}
void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }
// } class Set
// class ConeDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1539:4-1694:5
mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ConeDomain::p_ConeDomain
  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.ConeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1633:6-1644:7
mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain
  (mosek::fusion::QConeKey _3182_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3183_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3184_d)
{ return new mosek::fusion::ConeDomain(_3182_k,_3183_alpha,_3184_d); }
mosek::fusion::ConeDomain::ConeDomain
  (mosek::fusion::QConeKey _3182_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3183_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3184_d) : 
   ConeDomain(new mosek::fusion::p_ConeDomain(this))
{ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_3182_k,_3183_alpha,_3184_d); }
void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _3182_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3183_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3184_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3183_alpha(_3183_alpha ? _3183_alpha->raw() : nullptr, _3183_alpha ? _3183_alpha->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3184_d(_3184_d ? _3184_d->raw() : nullptr, _3184_d ? _3184_d->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _10713_;
    bool _10714_ = (NULL != _3184_d.get());
    if (_10714_)
    {
      _10713_ = ::mosek::fusion::Utils::Tools::arraycopy(_3184_d);
    }
    else
    {
      _10713_ = nullptr;
    }
    shape = _10713_;
    domsize = (int)0;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _3183_alpha;
    key = _3182_k;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    domofs = nullptr;
    indexnames = nullptr;
  }
}
// mosek.fusion.ConeDomain.ctor

// mosek.fusion.ConeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1607:6-1609:7
mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain
  (mosek::fusion::QConeKey _3185_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3186_d)
{ return new mosek::fusion::ConeDomain(_3185_k,_3186_d); }
mosek::fusion::ConeDomain::ConeDomain
  (mosek::fusion::QConeKey _3185_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3186_d) : 
   ConeDomain(new mosek::fusion::p_ConeDomain(this))
{ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_3185_k,_3186_d); }
void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _3185_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3186_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3186_d(_3186_d ? _3186_d->raw() : nullptr, _3186_d ? _3186_d->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_3185_k,nullptr,_3186_d);
  }
}
// mosek.fusion.ConeDomain.ctor

// mosek.fusion.ConeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1553:6-1563:7
mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain
  (monty::rc_ptr< ::mosek::fusion::ConeDomain > _3187_other)
{ return new mosek::fusion::ConeDomain(_3187_other); }
mosek::fusion::ConeDomain::ConeDomain
  (monty::rc_ptr< ::mosek::fusion::ConeDomain > _3187_other) : 
   ConeDomain(new mosek::fusion::p_ConeDomain(this))
{ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_3187_other); }
void mosek::fusion::p_ConeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::ConeDomain > _3187_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    key = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->key;
    axisidx = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->axisidx;
    axisset = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->axisset;
    int_flag = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->int_flag;
    shape = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->shape;
    alpha = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->alpha;
    domofs = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->domofs;
    domsize = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->domsize;
    indexnames = mosek::fusion::p_ConeDomain::_get_impl(_3187_other)->indexnames;
  }
}
// mosek.fusion.ConeDomain.ctor

// Begin mosek.fusion.ConeDomain.match_shape
// Method mosek.fusion.ConeDomain.match_shape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1689:6-1693:7
bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3188_shp)
{
  _checked_ptr_1<int32_t> _ptr__3188_shp(_3188_shp ? _3188_shp->raw() : nullptr, _3188_shp ? _3188_shp->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_3188_shp,shape));
}
// End mosek.fusion.ConeDomain.match_shape

// Begin mosek.fusion.ConeDomain.integral
// Method mosek.fusion.ConeDomain.integral @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1687:6-76
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral()
{
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.integral

// Begin mosek.fusion.ConeDomain.axisIsSet
// Method mosek.fusion.ConeDomain.axisIsSet @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1680:6-66
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }
bool mosek::fusion::p_ConeDomain::axisIsSet()
{
  return axisset;
}
// End mosek.fusion.ConeDomain.axisIsSet

// Begin mosek.fusion.ConeDomain.getAxis
// Method mosek.fusion.ConeDomain.getAxis @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1677:6-66
int32_t mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }
int32_t mosek::fusion::p_ConeDomain::getAxis()
{
  return axisidx;
}
// End mosek.fusion.ConeDomain.getAxis

// Begin mosek.fusion.ConeDomain.axis
// Method mosek.fusion.ConeDomain.axis @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1674:6-94
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int32_t _3189_a) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_3189_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int32_t _3189_a) { return __mosek_2fusion_2ConeDomain__axis(_3189_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int32_t _3189_a)
{
  axisidx = _3189_a;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.axis

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1670:6-121
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3190_dim0,int32_t _3191_dim1,int32_t _3192_dim2) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3190_dim0,_3191_dim1,_3192_dim2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3190_dim0,int32_t _3191_dim1,int32_t _3192_dim2) { return __mosek_2fusion_2ConeDomain__withShape(_3190_dim0,_3191_dim1,_3192_dim2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3190_dim0,int32_t _3191_dim1,int32_t _3192_dim2)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3190_dim0),(int32_t)(_3191_dim1),(int32_t)(_3192_dim2)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1669:6-105
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3193_dim0,int32_t _3194_dim1) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3193_dim0,_3194_dim1); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3193_dim0,int32_t _3194_dim1) { return __mosek_2fusion_2ConeDomain__withShape(_3193_dim0,_3194_dim1); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3193_dim0,int32_t _3194_dim1)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3193_dim0),(int32_t)(_3194_dim1)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1668:6-89
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3195_dim0) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3195_dim0); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3195_dim0) { return __mosek_2fusion_2ConeDomain__withShape(_3195_dim0); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3195_dim0)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3195_dim0)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1667:6-104
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3196_shp) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3196_shp); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3196_shp) { return __mosek_2fusion_2ConeDomain__withShape(_3196_shp); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3196_shp)
{
  _checked_ptr_1<int32_t> _ptr__3196_shp(_3196_shp ? _3196_shp->raw() : nullptr, _3196_shp ? _3196_shp->size(0) : 0);
  return __mosek_2fusion_2ConeDomain__withShape_(::mosek::fusion::Utils::Tools::arraycopy(_3196_shp));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape_
// Method mosek.fusion.ConeDomain.withShape_ @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1666:6-85
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > > _3197_shp)
{
  _checked_ptr_1<int32_t> _ptr__3197_shp(_3197_shp ? _3197_shp->raw() : nullptr, _3197_shp ? _3197_shp->size(0) : 0);
  shape = _3197_shp;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.withShape_

// Begin mosek.fusion.ConeDomain.withNamesOnAxis
// Method mosek.fusion.ConeDomain.withNamesOnAxis @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1646:6-1659:7
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3198_names,int32_t _3199_axis) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withNamesOnAxis(_3198_names,_3199_axis); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3198_names,int32_t _3199_axis) { return __mosek_2fusion_2ConeDomain__withNamesOnAxis(_3198_names,_3199_axis); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3198_names,int32_t _3199_axis)
{
  if ((NULL == _3198_names.get()))
  {
    {
      indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(safe_add( _3199_axis,(int)1 ))));
      std::vector<std::string> _10715_;
      for (int32_t _3200_i = (int)0, _10716_ = (int)((_3198_names)->size(0)); _3200_i < _10716_ ; ++_3200_i)
      {
        _10715_.push_back(((*_3198_names)(_3200_i)));
      }
      auto _10717_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10715_.size()),_10715_.begin(),_10715_.end()));
      ((*indexnames)(_3199_axis)) = _10717_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3199_axis,(int)1 )))
  {
    {
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3201_ixnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_3199_axis)));
      int32_t _10718_ = (int)0;
      int32_t _10719_ = (int)((indexnames)->size(0));
      for (int32_t _3202_i = _10718_; _3202_i < _10719_; ++_3202_i)
      {
        {
          ((*_3201_ixnames)(_3202_i)) = ((*indexnames)(_3202_i));
        }
      }
      indexnames = _3201_ixnames;
    }
  }
  {}
  std::vector<std::string> _10720_;
  for (int32_t _3203_i = (int)0, _10721_ = (int)((_3198_names)->size(0)); _3203_i < _10721_ ; ++_3203_i)
  {
    _10720_.push_back(((*_3198_names)(_3203_i)));
  }
  auto _10722_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10720_.size()),_10720_.begin(),_10720_.end()));
  ((*indexnames)(_3199_axis)) = _10722_;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.withNamesOnAxis

// Begin mosek.fusion.ConeDomain.finalize_and_validate_inplace
// Method mosek.fusion.ConeDomain.finalize_and_validate_inplace @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1571:6-1605:7
void mosek::fusion::p_ConeDomain::finalize_and_validate_inplace(std::shared_ptr< monty::ndarray< int32_t,1 > > _3204_shp)
{
  _checked_ptr_1<int32_t> _ptr__3204_shp(_3204_shp ? _3204_shp->raw() : nullptr, _3204_shp ? _3204_shp->size(0) : 0);
  domsize = (int)1;
  if ((NULL == shape.get()))
  {
    {
      if ((NULL != _3204_shp.get()))
      {
        {
          shape = _3204_shp;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Missing domain shape"));
        }
      }
    }
  }
  else if((NULL != _3204_shp.get()))
  {
    {
      if (((int)((_3204_shp)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
        }
      }
      {}
      int32_t _10723_ = (int)0;
      int32_t _10724_ = (int)((_3204_shp)->size(0));
      for (int32_t _3205_i = _10723_; _3205_i < _10724_; ++_3205_i)
      {
        {
          if ((_ptr__3204_shp[_3205_i] != ((*shape)(_3205_i))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  int32_t _10725_ = (int)0;
  int32_t _10726_ = (int)((shape)->size(0));
  for (int32_t _3206_i = _10725_; _3206_i < _10726_; ++_3206_i)
  {
    {
      domsize *= ((*shape)(_3206_i));
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10727_ = (int)0;
      int32_t _10728_ = (int)((shape)->size(0));
      for (int32_t _3207_i = _10727_; _3207_i < _10728_; ++_3207_i)
      {
        {
          if (((NULL != ((*indexnames)(_3207_i)).get()) && ((int)((((*indexnames)(_3207_i)))->size(0)) != ((*shape)(_3207_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  if ((!axisset))
  {
    {
      axisset = true;
      axisidx = ((int)((shape)->size(0)) - (int)1);
    }
  }
  else if(((axisidx < (int)0) || (axisidx >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cone axis is invalid"));
    }
  }
  {}
  if (((NULL != domofs.get()) && ((int)((domofs)->size(0)) != domsize)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Domain offset does not match shape"));
    }
  }
  {}
}
// End mosek.fusion.ConeDomain.finalize_and_validate_inplace

// Begin mosek.fusion.ConeDomain.finalize_and_validate
// Method mosek.fusion.ConeDomain.finalize_and_validate @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1566:6-1570:7
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3208_shp)
{
  _checked_ptr_1<int32_t> _ptr__3208_shp(_3208_shp ? _3208_shp->raw() : nullptr, _3208_shp ? _3208_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::ConeDomain > _3209_res = ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::ConeDomain::t(_pubthis));
  mosek::fusion::p_ConeDomain::_get_impl(_3209_res.get())->finalize_and_validate_inplace(_3208_shp);
  return _3209_res;
}
// End mosek.fusion.ConeDomain.finalize_and_validate

void mosek::fusion::p_ConeDomain::destroy()
{
  indexnames.reset();
  domofs.reset();
  alpha.reset();
  shape.reset();
}
void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }
// } class ConeDomain
// class PSDDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1337:4-1493:5
mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_PSDDomain::p_PSDDomain
  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.PSDDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1410:6-1427:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3210_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3211_shp,
    int32_t _3212_conedim1,
    int32_t _3213_conedim2)
{ return new mosek::fusion::PSDDomain(_3210_k,_3211_shp,_3212_conedim1,_3213_conedim2); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3210_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3211_shp,
    int32_t _3212_conedim1,
    int32_t _3213_conedim2) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3210_k,_3211_shp,_3212_conedim1,_3213_conedim2); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3210_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3211_shp,
    int32_t _3212_conedim1,
    int32_t _3213_conedim2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3211_shp(_3211_shp ? _3211_shp->raw() : nullptr, _3211_shp ? _3211_shp->size(0) : 0);
    axisIsSet = true;
    shape = _3211_shp;
    key = _3210_k;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _3212_conedim1;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _3213_conedim2;
    indexnames = nullptr;
    int32_t _3214_nd = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _3212_conedim1) && (((int)((shape)->size(0)) > _3213_conedim2) && ((_3212_conedim1 >= (int)0) && ((_3213_conedim2 >= (int)0) && (_3212_conedim1 != _3213_conedim2)))))) && (((*shape)(_3212_conedim1)) == ((*shape)(_3213_conedim2)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.PSDDomain.ctor

// mosek.fusion.PSDDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1406:6-1408:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3215_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3216_shp)
{ return new mosek::fusion::PSDDomain(_3215_k,_3216_shp); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3215_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3216_shp) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3215_k,_3216_shp); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3215_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3216_shp)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3216_shp(_3216_shp ? _3216_shp->raw() : nullptr, _3216_shp ? _3216_shp->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_3215_k,_3216_shp,((int)((_3216_shp)->size(0)) - (int)2),((int)((_3216_shp)->size(0)) - (int)1));
  }
}
// mosek.fusion.PSDDomain.ctor

// mosek.fusion.PSDDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1398:6-1405:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3217_k)
{ return new mosek::fusion::PSDDomain(_3217_k); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3217_k) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3217_k); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3217_k)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    shape = nullptr;
    key = _3217_k;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
    indexnames = nullptr;
  }
}
// mosek.fusion.PSDDomain.ctor

// mosek.fusion.PSDDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1345:6-1352:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (monty::rc_ptr< ::mosek::fusion::PSDDomain > _3218_other)
{ return new mosek::fusion::PSDDomain(_3218_other); }
mosek::fusion::PSDDomain::PSDDomain
  (monty::rc_ptr< ::mosek::fusion::PSDDomain > _3218_other) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3218_other); }
void mosek::fusion::p_PSDDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDDomain > _3218_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    shape = mosek::fusion::p_PSDDomain::_get_impl(_3218_other)->shape;
    key = mosek::fusion::p_PSDDomain::_get_impl(_3218_other)->key;
    conedim1 = mosek::fusion::p_PSDDomain::_get_impl(_3218_other)->conedim1;
    conedim2 = mosek::fusion::p_PSDDomain::_get_impl(_3218_other)->conedim2;
    axisIsSet = mosek::fusion::p_PSDDomain::_get_impl(_3218_other)->axisIsSet;
    indexnames = mosek::fusion::p_PSDDomain::_get_impl(_3218_other)->indexnames;
  }
}
// mosek.fusion.PSDDomain.ctor

// Begin mosek.fusion.PSDDomain.axis
// Method mosek.fusion.PSDDomain.axis @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1455:6-1474:7
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int32_t _3219_conedim1,int32_t _3220_conedim2) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_3219_conedim1,_3220_conedim2); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int32_t _3219_conedim1,int32_t _3220_conedim2) { return __mosek_2fusion_2PSDDomain__axis(_3219_conedim1,_3220_conedim2); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int32_t _3219_conedim1,int32_t _3220_conedim2)
{
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _3219_conedim1;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _3220_conedim2;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_3219_conedim1 >= (int)0) && ((_3220_conedim2 >= (int)0) && (_3219_conedim1 != _3220_conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _3219_conedim1) && (((int)((shape)->size(0)) > _3220_conedim2) && ((_3219_conedim1 >= (int)0) && ((_3220_conedim2 >= (int)0) && (_3219_conedim1 != _3220_conedim2)))))) && (((*shape)(_3219_conedim1)) == ((*shape)(_3220_conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
// End mosek.fusion.PSDDomain.axis

// Begin mosek.fusion.PSDDomain.withNamesOnAxis
// Method mosek.fusion.PSDDomain.withNamesOnAxis @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1431:6-1444:7
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3221_names,int32_t _3222_axis) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__withNamesOnAxis(_3221_names,_3222_axis); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3221_names,int32_t _3222_axis) { return __mosek_2fusion_2PSDDomain__withNamesOnAxis(_3221_names,_3222_axis); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3221_names,int32_t _3222_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10729_;
      for (int32_t _3223_i = (int)0, _10730_ = safe_add( _3222_axis,(int)1 ); _3223_i < _10730_ ; ++_3223_i)
      {
        _10729_.push_back(nullptr);
      }
      auto _10731_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10729_.size()),_10729_.begin(),_10729_.end()));
      indexnames = _10731_;
      std::vector<std::string> _10732_;
      for (int32_t _3224_i = (int)0, _10733_ = (int)((_3221_names)->size(0)); _3224_i < _10733_ ; ++_3224_i)
      {
        _10732_.push_back(((*_3221_names)(_3224_i)));
      }
      auto _10734_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10732_.size()),_10732_.begin(),_10732_.end()));
      ((*indexnames)(_3222_axis)) = _10734_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3222_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10735_;
      for (int32_t _3226_i = (int)0, _10736_ = safe_add( _3222_axis,(int)1 ); _3226_i < _10736_ ; ++_3226_i)
      {
        _10735_.push_back(nullptr);
      }
      auto _10737_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10735_.size()),_10735_.begin(),_10735_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3225_ixnames = _10737_;
      int32_t _10738_ = (int)0;
      int32_t _10739_ = (int)((indexnames)->size(0));
      for (int32_t _3227_i = _10738_; _3227_i < _10739_; ++_3227_i)
      {
        {
          ((*_3225_ixnames)(_3227_i)) = ((*indexnames)(_3227_i));
        }
      }
      indexnames = _3225_ixnames;
    }
  }
  {}
  std::vector<std::string> _10740_;
  for (int32_t _3228_i = (int)0, _10741_ = (int)((_3221_names)->size(0)); _3228_i < _10741_ ; ++_3228_i)
  {
    _10740_.push_back(((*_3221_names)(_3228_i)));
  }
  auto _10742_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10740_.size()),_10740_.begin(),_10740_.end()));
  ((*indexnames)(_3222_axis)) = _10742_;
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
// End mosek.fusion.PSDDomain.withNamesOnAxis

// Begin mosek.fusion.PSDDomain.finalize_and_validate_inplace
// Method mosek.fusion.PSDDomain.finalize_and_validate_inplace @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1359:6-1395:7
void mosek::fusion::p_PSDDomain::finalize_and_validate_inplace(std::shared_ptr< monty::ndarray< int32_t,1 > > _3229_shp)
{
  _checked_ptr_1<int32_t> _ptr__3229_shp(_3229_shp ? _3229_shp->raw() : nullptr, _3229_shp ? _3229_shp->size(0) : 0);
  if ((NULL != _3229_shp.get()))
  {
    {
      if ((NULL == shape.get()))
      {
        {
          shape = _3229_shp;
        }
      }
      else
      {
        {
          if (((int)((_3229_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10743_ = (int)0;
          int32_t _10744_ = (int)((_3229_shp)->size(0));
          for (int32_t _3230_i = _10743_; _3230_i < _10744_; ++_3230_i)
          {
            {
              if ((_ptr__3229_shp[_3230_i] != ((*shape)(_3230_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  if (((int)((shape)->size(0)) < (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Positive semidefinite domain must have at least two dimensions"));
    }
  }
  {}
  if ((!axisIsSet))
  {
    {
      conedim1 = ((int)((shape)->size(0)) - (int)2);
      conedim2 = ((int)((shape)->size(0)) - (int)1);
    }
  }
  {}
  if (((conedim1 < (int)0) || ((conedim1 >= (int)((shape)->size(0))) || ((conedim2 < (int)0) || ((conedim2 >= (int)((shape)->size(0))) || (conedim1 == conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension specification"));
    }
  }
  {}
  if ((((*shape)(conedim1)) != ((*shape)(conedim2))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cone dimensions must have same size"));
    }
  }
  {}
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match the domain shape"));
        }
      }
      else
      {
        {
          int32_t _10745_ = (int)0;
          int32_t _10746_ = (int)((shape)->size(0));
          for (int32_t _3231_i = _10745_; _3231_i < _10746_; ++_3231_i)
          {
            {
              if (((NULL != ((*indexnames)(_3231_i)).get()) && ((int)((((*indexnames)(_3231_i)))->size(0)) != ((*shape)(_3231_i)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Index names do not match the domain shape"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
}
// End mosek.fusion.PSDDomain.finalize_and_validate_inplace

// Begin mosek.fusion.PSDDomain.finalize_and_validate
// Method mosek.fusion.PSDDomain.finalize_and_validate @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1354:6-1358:7
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3232_shp)
{
  _checked_ptr_1<int32_t> _ptr__3232_shp(_3232_shp ? _3232_shp->raw() : nullptr, _3232_shp ? _3232_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::PSDDomain > _3233_res = ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDDomain::t(_pubthis));
  mosek::fusion::p_PSDDomain::_get_impl(_3233_res.get())->finalize_and_validate_inplace(_3232_shp);
  return _3233_res;
}
// End mosek.fusion.PSDDomain.finalize_and_validate

void mosek::fusion::p_PSDDomain::destroy()
{
  indexnames.reset();
  shape.reset();
}
void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }
// } class PSDDomain
// class RangeDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1034:4-1309:5
mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_RangeDomain::p_RangeDomain
  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.RangeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1205:6-1212:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3234_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3235_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3236_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3237_dims)
{ return new mosek::fusion::RangeDomain(_3234_scalable,_3235_lb,_3236_ub,_3237_dims); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3234_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3235_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3236_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3237_dims) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3234_scalable,_3235_lb,_3236_ub,_3237_dims); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3234_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3235_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3236_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3237_dims)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3235_lb(_3235_lb ? _3235_lb->raw() : nullptr, _3235_lb ? _3235_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3236_ub(_3236_ub ? _3236_ub->raw() : nullptr, _3236_ub ? _3236_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3237_dims(_3237_dims ? _3237_dims->raw() : nullptr, _3237_dims ? _3237_dims->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_3234_scalable,_3235_lb,_3236_ub,_3237_dims,nullptr,(int)1);
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1185:6-1203:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3238_scalable,
    double _3239_lb,
    double _3240_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3241_dims)
{ return new mosek::fusion::RangeDomain(_3238_scalable,_3239_lb,_3240_ub,_3241_dims); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3238_scalable,
    double _3239_lb,
    double _3240_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3241_dims) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3238_scalable,_3239_lb,_3240_ub,_3241_dims); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3238_scalable,
    double _3239_lb,
    double _3240_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3241_dims)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3241_dims(_3241_dims ? _3241_dims->raw() : nullptr, _3241_dims ? _3241_dims->size(0) : 0);
    cardinal_flag = false;
    shape = _3241_dims;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _3238_scalable;
    int32_t _3242_totalsize = (int)1;
    int32_t _10747_ = (int)0;
    int32_t _10748_ = (int)((_3241_dims)->size(0));
    for (int32_t _3243_i = _10747_; _3243_i < _10748_; ++_3243_i)
    {
      {
        _3242_totalsize *= _ptr__3241_dims[_3243_i];
      }
    }
    std::vector<double> _10749_;
    for (int32_t _3244_i = (int)0, _10750_ = _3242_totalsize; _3244_i < _10750_ ; ++_3244_i)
    {
      _10749_.push_back(_3240_ub);
    }
    auto _10751_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10749_.size()),_10749_.begin(),_10749_.end()));
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _10751_;
    std::vector<double> _10752_;
    for (int32_t _3245_i = (int)0, _10753_ = _3242_totalsize; _3245_i < _10753_ ; ++_3245_i)
    {
      _10752_.push_back(_3239_lb);
    }
    auto _10754_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10752_.size()),_10752_.begin(),_10752_.end()));
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _10754_;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->indexnames = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->domsize = (int)0;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->nelements = (int)0;
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1175:6-1183:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3246_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3247_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3248_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3249_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3250_sp)
{ return new mosek::fusion::RangeDomain(_3246_scalable,_3247_lb,_3248_ub,_3249_dims,_3250_sp); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3246_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3247_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3248_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3249_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3250_sp) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3246_scalable,_3247_lb,_3248_ub,_3249_dims,_3250_sp); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3246_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3247_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3248_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3249_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3250_sp)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3247_lb(_3247_lb ? _3247_lb->raw() : nullptr, _3247_lb ? _3247_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3248_ub(_3248_ub ? _3248_ub->raw() : nullptr, _3248_ub ? _3248_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3249_dims(_3249_dims ? _3249_dims->raw() : nullptr, _3249_dims ? _3249_dims->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_3246_scalable,_3247_lb,_3248_ub,_3249_dims,_3250_sp,(int)1);
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1154:6-1173:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3251_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3252_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3253_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3254_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3255_sp,
    int32_t _3256_steal)
{ return new mosek::fusion::RangeDomain(_3251_scalable,_3252_lb,_3253_ub,_3254_dims,_3255_sp,_3256_steal); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3251_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3252_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3253_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3254_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3255_sp,
    int32_t _3256_steal) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3251_scalable,_3252_lb,_3253_ub,_3254_dims,_3255_sp,_3256_steal); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3251_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3252_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3253_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3254_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3255_sp,
    int32_t _3256_steal)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3252_lb(_3252_lb ? _3252_lb->raw() : nullptr, _3252_lb ? _3252_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3253_ub(_3253_ub ? _3253_ub->raw() : nullptr, _3253_ub ? _3253_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3254_dims(_3254_dims ? _3254_dims->raw() : nullptr, _3254_dims ? _3254_dims->size(0) : 0);
    cardinal_flag = false;
    shape = _3254_dims;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _3251_scalable;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _3253_ub;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _3252_lb;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _3255_sp;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->indexnames = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->domsize = (int)0;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->nelements = (int)0;
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1139:6-1152:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3257_other)
{ return new mosek::fusion::RangeDomain(_3257_other); }
mosek::fusion::RangeDomain::RangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3257_other) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3257_other); }
void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3257_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->lb;
    domsize = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->domsize;
    nelements = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->nelements;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->empty;
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _10755_;
    bool _10756_ = (NULL != mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->indexnames.get());
    if (_10756_)
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10757_;
      for (int32_t _3258_i = (int)0, _10758_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->indexnames)->size(0)); _3258_i < _10758_ ; ++_3258_i)
      {
        _10757_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_3257_other)->indexnames)(_3258_i)));
      }
      auto _10759_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10757_.size()),_10757_.begin(),_10757_.end()));
      _10755_ = _10759_;
    }
    else
    {
      _10755_ = nullptr;
    }
    indexnames = _10755_;
  }
}
// mosek.fusion.RangeDomain.ctor

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1301:6-1308:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3259_sparsity) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_3259_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3259_sparsity) { return __mosek_2fusion_2RangeDomain__sparse(_3259_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3259_sparsity)
{
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3259_sparsity)->size(0)),(int)((_3259_sparsity)->size(1)))));
  {
    int32_t _3260_i = (int)0;
    for(;(_3260_i < (int)((_3259_sparsity)->size(0)));++ _3260_i)
    {
      {
        {
          int32_t _3261_j = (int)0;
          for(;(_3261_j < (int)((_3259_sparsity)->size(1)));++ _3261_j)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_3260_i,_3261_j)) = ((*_3259_sparsity)(_3260_i,_3261_j));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1287:6-1293:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3262_sparsity) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_3262_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3262_sparsity) { return __mosek_2fusion_2RangeDomain__sparse(_3262_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3262_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3262_sparsity(_3262_sparsity ? _3262_sparsity->raw() : nullptr, _3262_sparsity ? _3262_sparsity->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3262_sparsity)->size(0)),(int)1)));
  int32_t _10760_ = (int)0;
  int32_t _10761_ = (int)((_3262_sparsity)->size(0));
  for (int32_t _3263_i = _10760_; _3263_i < _10761_; ++_3263_i)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_3263_i,(int)0)) = _ptr__3262_sparsity[_3263_i];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1275:6-1280:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse()
{
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.integral
// Method mosek.fusion.RangeDomain.integral @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1267:6-83
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral()
{
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.integral

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1254:6-124
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3264_dim0,int32_t _3265_dim1,int32_t _3266_dim2) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3264_dim0,_3265_dim1,_3266_dim2); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3264_dim0,int32_t _3265_dim1,int32_t _3266_dim2) { return __mosek_2fusion_2RangeDomain__withShape(_3264_dim0,_3265_dim1,_3266_dim2); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3264_dim0,int32_t _3265_dim1,int32_t _3266_dim2)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3264_dim0),(int32_t)(_3265_dim1),(int32_t)(_3266_dim2)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1253:6-108
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3267_dim0,int32_t _3268_dim1) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3267_dim0,_3268_dim1); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3267_dim0,int32_t _3268_dim1) { return __mosek_2fusion_2RangeDomain__withShape(_3267_dim0,_3268_dim1); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3267_dim0,int32_t _3268_dim1)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3267_dim0),(int32_t)(_3268_dim1)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1252:6-92
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3269_dim0) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3269_dim0); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3269_dim0) { return __mosek_2fusion_2RangeDomain__withShape(_3269_dim0); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3269_dim0)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3269_dim0)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1251:6-83
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3270_shp) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3270_shp); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3270_shp) { return __mosek_2fusion_2RangeDomain__withShape(_3270_shp); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3270_shp)
{
  _checked_ptr_1<int32_t> _ptr__3270_shp(_3270_shp ? _3270_shp->raw() : nullptr, _3270_shp ? _3270_shp->size(0) : 0);
  shape = _3270_shp;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withNamesOnAxis
// Method mosek.fusion.RangeDomain.withNamesOnAxis @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1227:6-1240:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3271_names,int32_t _3272_axis) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withNamesOnAxis(_3271_names,_3272_axis); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3271_names,int32_t _3272_axis) { return __mosek_2fusion_2RangeDomain__withNamesOnAxis(_3271_names,_3272_axis); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3271_names,int32_t _3272_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10762_;
      for (int32_t _3273_i = (int)0, _10763_ = safe_add( _3272_axis,(int)1 ); _3273_i < _10763_ ; ++_3273_i)
      {
        _10762_.push_back(nullptr);
      }
      auto _10764_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10762_.size()),_10762_.begin(),_10762_.end()));
      indexnames = _10764_;
      std::vector<std::string> _10765_;
      for (int32_t _3274_i = (int)0, _10766_ = (int)((_3271_names)->size(0)); _3274_i < _10766_ ; ++_3274_i)
      {
        _10765_.push_back(((*_3271_names)(_3274_i)));
      }
      auto _10767_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10765_.size()),_10765_.begin(),_10765_.end()));
      ((*indexnames)(_3272_axis)) = _10767_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3272_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10768_;
      for (int32_t _3276_i = (int)0, _10769_ = safe_add( _3272_axis,(int)1 ); _3276_i < _10769_ ; ++_3276_i)
      {
        _10768_.push_back(nullptr);
      }
      auto _10770_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10768_.size()),_10768_.begin(),_10768_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3275_ixnames = _10770_;
      int32_t _10771_ = (int)0;
      int32_t _10772_ = (int)((indexnames)->size(0));
      for (int32_t _3277_i = _10771_; _3277_i < _10772_; ++_3277_i)
      {
        {
          ((*_3275_ixnames)(_3277_i)) = ((*indexnames)(_3277_i));
        }
      }
      indexnames = _3275_ixnames;
    }
  }
  {}
  std::vector<std::string> _10773_;
  for (int32_t _3278_i = (int)0, _10774_ = (int)((_3271_names)->size(0)); _3278_i < _10774_ ; ++_3278_i)
  {
    _10773_.push_back(((*_3271_names)(_3278_i)));
  }
  auto _10775_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10773_.size()),_10773_.begin(),_10773_.end()));
  ((*indexnames)(_3272_axis)) = _10775_;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withNamesOnAxis

// Begin mosek.fusion.RangeDomain.match_shape
// Method mosek.fusion.RangeDomain.match_shape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1214:6-1225:7
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3279_shp)
{
  _checked_ptr_1<int32_t> _ptr__3279_shp(_3279_shp ? _3279_shp->raw() : nullptr, _3279_shp ? _3279_shp->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_3279_shp)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int32_t _10776_ = (int)0;
      int32_t _10777_ = (int)((shape)->size(0));
      for (int32_t _3280_i = _10776_; _3280_i < _10777_; ++_3280_i)
      {
        {
          if ((((*shape)(_3280_i)) != _ptr__3279_shp[_3280_i]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
// End mosek.fusion.RangeDomain.match_shape

// Begin mosek.fusion.RangeDomain.finalize_and_validate_inplace
// Method mosek.fusion.RangeDomain.finalize_and_validate_inplace @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1071:6-1137:7
void mosek::fusion::p_RangeDomain::finalize_and_validate_inplace(std::shared_ptr< monty::ndarray< int32_t,1 > > _3281_shp)
{
  _checked_ptr_1<int32_t> _ptr__3281_shp(_3281_shp ? _3281_shp->raw() : nullptr, _3281_shp ? _3281_shp->size(0) : 0);
  domsize = (int)1;
  if (scalable)
  {
    {
      if ((NULL != _3281_shp.get()))
      {
        {
          shape = _3281_shp;
        }
      }
      else
      {
        {
          shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        }
      }
      int32_t _10778_ = (int)0;
      int32_t _10779_ = (int)((shape)->size(0));
      for (int32_t _3282_i = _10778_; _3282_i < _10779_; ++_3282_i)
      {
        {
          domsize *= ((*shape)(_3282_i));
        }
      }
    }
  }
  else
  {
    {
      if ((NULL != _3281_shp.get()))
      {
        {
          if (((int)((_3281_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10780_ = (int)0;
          int32_t _10781_ = (int)((_3281_shp)->size(0));
          for (int32_t _3283_i = _10780_; _3283_i < _10781_; ++_3283_i)
          {
            {
              if ((_ptr__3281_shp[_3283_i] != ((*shape)(_3283_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
        }
      }
      {}
      int32_t _10782_ = (int)0;
      int32_t _10783_ = (int)((shape)->size(0));
      for (int32_t _3284_i = _10782_; _3284_i < _10783_; ++_3284_i)
      {
        {
          domsize *= ((*shape)(_3284_i));
        }
      }
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10784_ = (int)0;
      int32_t _10785_ = (int)((shape)->size(0));
      for (int32_t _3285_i = _10784_; _3285_i < _10785_; ++_3285_i)
      {
        {
          if (((NULL != ((*indexnames)(_3285_i)).get()) && ((int)((((*indexnames)(_3285_i)))->size(0)) != ((*shape)(_3285_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  if ((NULL != sparsity.get()))
  {
    {
      nelements = (int)((sparsity)->size(0));
      if (((int)((shape)->size(0)) != (int)((sparsity)->size(1))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and sparsity pattern"));
        }
      }
      {}
      int32_t _10786_ = (int)0;
      int64_t _10787_ = nelements;
      for (int64_t _3286_i = _10786_; _3286_i < _10787_; ++_3286_i)
      {
        {
          int32_t _10788_ = (int)0;
          int32_t _10789_ = (int)((sparsity)->size(1));
          for (int32_t _3287_j = _10788_; _3287_j < _10789_; ++_3287_j)
          {
            {
              if (((((*sparsity)(_3286_i,_3287_j)) < (int)0) || (((*sparsity)(_3286_i,_3287_j)) >= ((*shape)(_3287_j)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern entry is out of bounds"));
                }
              }
              {}
            }
          }
        }
      }
      if (((!scalable) && ((NULL != lb.get()) && ((int)((lb)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
      if (((!scalable) && ((NULL != ub.get()) && ((int)((ub)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
    }
  }
  else
  {
    {
      nelements = domsize;
      if (((NULL != lb.get()) && (!scalable)))
      {
        {
          if (((int)((lb)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
      if (((NULL != ub.get()) && (!scalable)))
      {
        {
          if (((int)((ub)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
    }
  }
}
// End mosek.fusion.RangeDomain.finalize_and_validate_inplace

// Begin mosek.fusion.RangeDomain.finalize_and_validate
// Method mosek.fusion.RangeDomain.finalize_and_validate @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:1065:6-1069:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3288_shp)
{
  _checked_ptr_1<int32_t> _ptr__3288_shp(_3288_shp ? _3288_shp->raw() : nullptr, _3288_shp ? _3288_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::RangeDomain > _3289_res = ::mosek::fusion::p_RangeDomain::_new_RangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
  mosek::fusion::p_RangeDomain::_get_impl(_3289_res.get())->finalize_and_validate_inplace(_3288_shp);
  return _3289_res;
}
// End mosek.fusion.RangeDomain.finalize_and_validate

void mosek::fusion::p_RangeDomain::destroy()
{
  indexnames.reset();
  ub.reset();
  lb.reset();
  sparsity.reset();
  shape.reset();
}
void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }
// } class RangeDomain
// class LinearDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:761:4-1008:5
mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinearDomain::p_LinearDomain
  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinearDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:905:6-911:6
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (mosek::fusion::RelationKey _3290_k,
    bool _3291_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3292_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3293_dims)
{ return new mosek::fusion::LinearDomain(_3290_k,_3291_scalable,_3292_rhs,_3293_dims); }
mosek::fusion::LinearDomain::LinearDomain
  (mosek::fusion::RelationKey _3290_k,
    bool _3291_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3292_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3293_dims) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3290_k,_3291_scalable,_3292_rhs,_3293_dims); }
void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _3290_k,
    bool _3291_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3292_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3293_dims)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3292_rhs(_3292_rhs ? _3292_rhs->raw() : nullptr, _3292_rhs ? _3292_rhs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3293_dims(_3293_dims ? _3293_dims->raw() : nullptr, _3293_dims ? _3293_dims->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_3290_k,_3291_scalable,_3292_rhs,_3293_dims,nullptr,(int)1);
  }
}
// mosek.fusion.LinearDomain.ctor

// mosek.fusion.LinearDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:886:6-903:7
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (mosek::fusion::RelationKey _3294_k,
    bool _3295_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3296_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3297_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3298_sp,
    int32_t _3299_steal)
{ return new mosek::fusion::LinearDomain(_3294_k,_3295_scalable,_3296_rhs,_3297_dims,_3298_sp,_3299_steal); }
mosek::fusion::LinearDomain::LinearDomain
  (mosek::fusion::RelationKey _3294_k,
    bool _3295_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3296_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3297_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3298_sp,
    int32_t _3299_steal) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3294_k,_3295_scalable,_3296_rhs,_3297_dims,_3298_sp,_3299_steal); }
void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _3294_k,
    bool _3295_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3296_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3297_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3298_sp,
    int32_t _3299_steal)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3296_rhs(_3296_rhs ? _3296_rhs->raw() : nullptr, _3296_rhs ? _3296_rhs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3297_dims(_3297_dims ? _3297_dims->raw() : nullptr, _3297_dims ? _3297_dims->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _3295_scalable;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _3297_dims;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _3294_k;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _3296_rhs;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _3298_sp;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
    indexnames = nullptr;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->domsize = (int)0;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->nelements = (int)0;
  }
}
// mosek.fusion.LinearDomain.ctor

// mosek.fusion.LinearDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:871:6-884:7
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3300_other)
{ return new mosek::fusion::LinearDomain(_3300_other); }
mosek::fusion::LinearDomain::LinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3300_other) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3300_other); }
void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3300_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->scalable;
    nelements = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->nelements;
    domsize = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->domsize;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->empty;
    indexnames = mosek::fusion::p_LinearDomain::_get_impl(_3300_other)->indexnames;
  }
}
// mosek.fusion.LinearDomain.ctor

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:999:6-1007:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3301_sparsity) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_3301_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3301_sparsity) { return __mosek_2fusion_2LinearDomain__sparse(_3301_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3301_sparsity)
{
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3301_sparsity)->size(0)),(int)((_3301_sparsity)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int32_t _3302_i = (int)0;
    for(;(_3302_i < (int)((_3301_sparsity)->size(0)));++ _3302_i)
    {
      {
        {
          int32_t _3303_j = (int)0;
          for(;(_3303_j < (int)((_3301_sparsity)->size(1)));++ _3303_j)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_3302_i,_3303_j)) = ((*_3301_sparsity)(_3302_i,_3303_j));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:984:6-991:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3304_sparsity) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_3304_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3304_sparsity) { return __mosek_2fusion_2LinearDomain__sparse(_3304_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3304_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3304_sparsity(_3304_sparsity ? _3304_sparsity->raw() : nullptr, _3304_sparsity ? _3304_sparsity->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3304_sparsity)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int32_t _10790_ = (int)0;
  int32_t _10791_ = (int)((_3304_sparsity)->size(0));
  for (int32_t _3305_i = _10790_; _3305_i < _10791_; ++_3305_i)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_3305_i,(int)0)) = _ptr__3304_sparsity[_3305_i];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:972:6-977:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse()
{
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.integral
// Method mosek.fusion.LinearDomain.integral @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:962:6-83
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral()
{
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.integral

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:954:6-125
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3306_dim0,int32_t _3307_dim1,int32_t _3308_dim2) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3306_dim0,_3307_dim1,_3308_dim2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3306_dim0,int32_t _3307_dim1,int32_t _3308_dim2) { return __mosek_2fusion_2LinearDomain__withShape(_3306_dim0,_3307_dim1,_3308_dim2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3306_dim0,int32_t _3307_dim1,int32_t _3308_dim2)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3306_dim0),(int32_t)(_3307_dim1),(int32_t)(_3308_dim2)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:953:6-109
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3309_dim0,int32_t _3310_dim1) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3309_dim0,_3310_dim1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3309_dim0,int32_t _3310_dim1) { return __mosek_2fusion_2LinearDomain__withShape(_3309_dim0,_3310_dim1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3309_dim0,int32_t _3310_dim1)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3309_dim0),(int32_t)(_3310_dim1)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:952:6-93
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3311_dim0) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3311_dim0); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3311_dim0) { return __mosek_2fusion_2LinearDomain__withShape(_3311_dim0); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3311_dim0)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3311_dim0)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:951:6-85
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3312_shp) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3312_shp); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3312_shp) { return __mosek_2fusion_2LinearDomain__withShape(_3312_shp); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3312_shp)
{
  _checked_ptr_1<int32_t> _ptr__3312_shp(_3312_shp ? _3312_shp->raw() : nullptr, _3312_shp ? _3312_shp->size(0) : 0);
  shape = _3312_shp;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withNamesOnAxis
// Method mosek.fusion.LinearDomain.withNamesOnAxis @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:925:6-938:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3313_names,int32_t _3314_axis) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withNamesOnAxis(_3313_names,_3314_axis); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3313_names,int32_t _3314_axis) { return __mosek_2fusion_2LinearDomain__withNamesOnAxis(_3313_names,_3314_axis); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3313_names,int32_t _3314_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10792_;
      for (int32_t _3315_i = (int)0, _10793_ = safe_add( _3314_axis,(int)1 ); _3315_i < _10793_ ; ++_3315_i)
      {
        _10792_.push_back(nullptr);
      }
      auto _10794_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10792_.size()),_10792_.begin(),_10792_.end()));
      indexnames = _10794_;
      std::vector<std::string> _10795_;
      for (int32_t _3316_i = (int)0, _10796_ = (int)((_3313_names)->size(0)); _3316_i < _10796_ ; ++_3316_i)
      {
        _10795_.push_back(((*_3313_names)(_3316_i)));
      }
      auto _10797_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10795_.size()),_10795_.begin(),_10795_.end()));
      ((*indexnames)(_3314_axis)) = _10797_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3314_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10798_;
      for (int32_t _3318_i = (int)0, _10799_ = safe_add( _3314_axis,(int)1 ); _3318_i < _10799_ ; ++_3318_i)
      {
        _10798_.push_back(nullptr);
      }
      auto _10800_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10798_.size()),_10798_.begin(),_10798_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3317_ixnames = _10800_;
      int32_t _10801_ = (int)0;
      int32_t _10802_ = (int)((indexnames)->size(0));
      for (int32_t _3319_i = _10801_; _3319_i < _10802_; ++_3319_i)
      {
        {
          ((*_3317_ixnames)(_3319_i)) = ((*indexnames)(_3319_i));
        }
      }
      indexnames = _3317_ixnames;
    }
  }
  {}
  std::vector<std::string> _10803_;
  for (int32_t _3320_i = (int)0, _10804_ = (int)((_3313_names)->size(0)); _3320_i < _10804_ ; ++_3320_i)
  {
    _10803_.push_back(((*_3313_names)(_3320_i)));
  }
  auto _10805_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10803_.size()),_10803_.begin(),_10803_.end()));
  ((*indexnames)(_3314_axis)) = _10805_;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withNamesOnAxis

// Begin mosek.fusion.LinearDomain.match_shape
// Method mosek.fusion.LinearDomain.match_shape @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:913:6-921:7
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3321_shp)
{
  _checked_ptr_1<int32_t> _ptr__3321_shp(_3321_shp ? _3321_shp->raw() : nullptr, _3321_shp ? _3321_shp->size(0) : 0);
  if ((!scalable))
  {
    {
      int32_t _10806_ = (int)0;
      int32_t _10807_ = (int)((_3321_shp)->size(0));
      for (int32_t _3322_i = _10806_; _3322_i < _10807_; ++_3322_i)
      {
        {
          if ((_ptr__3321_shp[_3322_i] == ((*shape)(_3322_i))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
// End mosek.fusion.LinearDomain.match_shape

// Begin mosek.fusion.LinearDomain.finalize_and_validate_inplace
// Method mosek.fusion.LinearDomain.finalize_and_validate_inplace @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:800:6-868:7
void mosek::fusion::p_LinearDomain::finalize_and_validate_inplace(std::shared_ptr< monty::ndarray< int32_t,1 > > _3323_shp)
{
  _checked_ptr_1<int32_t> _ptr__3323_shp(_3323_shp ? _3323_shp->raw() : nullptr, _3323_shp ? _3323_shp->size(0) : 0);
  if (scalable)
  {
    {
      if ((NULL == shape.get()))
      {
        {
          if (((NULL != sparsity.get()) && (NULL == _3323_shp.get())))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Sparse domain requires a fixed shape"));
            }
          }
          {}
          if ((NULL != _3323_shp.get()))
          {
            {
              shape = _3323_shp;
            }
          }
          else
          {
            {
              shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((NULL != _3323_shp.get()))
      {
        {
          if (((int)((_3323_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10808_ = (int)0;
          int32_t _10809_ = (int)((_3323_shp)->size(0));
          for (int32_t _3324_i = _10808_; _3324_i < _10809_; ++_3324_i)
          {
            {
              if ((_ptr__3323_shp[_3324_i] != ((*shape)(_3324_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
        }
      }
      {}
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) > (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10810_ = (int)0;
      int32_t _10811_ = (int)((indexnames)->size(0));
      for (int32_t _3325_i = _10810_; _3325_i < _10811_; ++_3325_i)
      {
        {
          if (((NULL != ((*indexnames)(_3325_i)).get()) && ((int)((((*indexnames)(_3325_i)))->size(0)) != ((*shape)(_3325_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
      if (((int)((indexnames)->size(0)) < (int)((shape)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3326_tmpindexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((int)((shape)->size(0)))));
          int32_t _10812_ = (int)0;
          int32_t _10813_ = (int)((indexnames)->size(0));
          for (int32_t _3327_i = _10812_; _3327_i < _10813_; ++_3327_i)
          {
            {
              ((*_3326_tmpindexnames)(_3327_i)) = ((*indexnames)(_3327_i));
            }
          }
          indexnames = _3326_tmpindexnames;
        }
      }
      {}
    }
  }
  {}
  domsize = (int)1;
  int32_t _10814_ = (int)0;
  int32_t _10815_ = (int)((shape)->size(0));
  for (int32_t _3328_i = _10814_; _3328_i < _10815_; ++_3328_i)
  {
    {
      domsize *= ((*shape)(_3328_i));
    }
  }
  if ((NULL != sparsity.get()))
  {
    {
      nelements = (int)((sparsity)->size(0));
      if (((int)((shape)->size(0)) != (int)((sparsity)->size(1))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and sparsity pattern"));
        }
      }
      {}
      int32_t _10816_ = (int)0;
      int64_t _10817_ = nelements;
      for (int64_t _3329_i = _10816_; _3329_i < _10817_; ++_3329_i)
      {
        {
          int32_t _10818_ = (int)0;
          int32_t _10819_ = (int)((sparsity)->size(1));
          for (int32_t _3330_j = _10818_; _3330_j < _10819_; ++_3330_j)
          {
            {
              if (((((*sparsity)(_3329_i,_3330_j)) < (int)0) || (((*sparsity)(_3329_i,_3330_j)) >= ((*shape)(_3330_j)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern entry is out of bounds"));
                }
              }
              {}
            }
          }
        }
      }
      if (((!scalable) && ((NULL != bnd.get()) && ((int)((bnd)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
    }
  }
  else
  {
    {
      nelements = domsize;
      if (((NULL != bnd.get()) && (!scalable)))
      {
        {
          if (((int)((bnd)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
    }
  }
}
// End mosek.fusion.LinearDomain.finalize_and_validate_inplace

// Begin mosek.fusion.LinearDomain.finalize_and_validate
// Method mosek.fusion.LinearDomain.finalize_and_validate @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:795:6-799:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3331_shp)
{
  _checked_ptr_1<int32_t> _ptr__3331_shp(_3331_shp ? _3331_shp->raw() : nullptr, _3331_shp ? _3331_shp->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::LinearDomain > _3332_res = ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
  mosek::fusion::p_LinearDomain::_get_impl(_3332_res.get())->finalize_and_validate_inplace(_3331_shp);
  return _3332_res;
}
// End mosek.fusion.LinearDomain.finalize_and_validate

void mosek::fusion::p_LinearDomain::destroy()
{
  indexnames.reset();
  sparsity.reset();
  bnd.reset();
  shape.reset();
}
void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }
// } class LinearDomain
// class Domain { // @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:402:4-740:5
mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Domain::p_Domain
  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Domain.dimsize
// Method mosek.fusion.Domain.dimsize @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:739:6-126
int64_t mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int32_t,1 > > _3333_dims)
{
  _checked_ptr_1<int32_t> _ptr__3333_dims(_3333_dims ? _3333_dims->raw() : nullptr, _3333_dims ? _3333_dims->size(0) : 0);
  int64_t _3334_sz = (int64_t)1;
  int32_t _10820_ = (int)0;
  int32_t _10821_ = (int)((_3333_dims)->size(0));
  for (int32_t _3335_i = _10820_; _3335_i < _10821_; ++_3335_i)
  {
    {
      _3334_sz *= _ptr__3333_dims[_3335_i];
    }
  }
  return _3334_sz;
}
// End mosek.fusion.Domain.dimsize

// Begin mosek.fusion.Domain.mkRangedDomain
// Method mosek.fusion.Domain.mkRangedDomain @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:620:6-737:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _3336_lb,monty::rc_ptr< ::mosek::fusion::Matrix > _3337_ub)
{
  if (((mosek::fusion::p_Matrix::_get_impl(_3336_lb)->dimi != mosek::fusion::p_Matrix::_get_impl(_3337_ub)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_3336_lb)->dimj != mosek::fusion::p_Matrix::_get_impl(_3337_ub)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_3336_lb->isSparse() && _3337_ub->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3338_lsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3336_lb->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3338_lsubi(_3338_lsubi ? _3338_lsubi->raw() : nullptr,_3338_lsubi ? _3338_lsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3339_lsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3336_lb->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3339_lsubj(_3339_lsubj ? _3339_lsubj->raw() : nullptr,_3339_lsubj ? _3339_lsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3340_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3336_lb->numNonzeros())));
      _checked_ptr_1<double> _ptr__3340_lval(_3340_lval ? _3340_lval->raw() : nullptr,_3340_lval ? _3340_lval->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3341_usubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3337_ub->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3341_usubi(_3341_usubi ? _3341_usubi->raw() : nullptr,_3341_usubi ? _3341_usubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3342_usubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3337_ub->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3342_usubj(_3342_usubj ? _3342_usubj->raw() : nullptr,_3342_usubj ? _3342_usubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3343_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3337_ub->numNonzeros())));
      _checked_ptr_1<double> _ptr__3343_uval(_3343_uval ? _3343_uval->raw() : nullptr,_3343_uval ? _3343_uval->size(0) : 0);
      _3336_lb->getDataAsTriplets(_3338_lsubi,_3339_lsubj,_3340_lval);
      _3337_ub->getDataAsTriplets(_3341_usubi,_3342_usubj,_3343_uval);
      int64_t _3344_n = (int)0;
      {
        int32_t _3345_ui = (int)0;
        int32_t _3346_li = (int)0;
        while ( ((_3346_li < (int)((_3338_lsubi)->size(0))) && (_3345_ui < (int)((_3341_usubi)->size(0)))) )
        {
          {
            if (((_ptr__3338_lsubi[_3346_li] < _ptr__3341_usubi[_3345_ui]) || ((_ptr__3338_lsubi[_3346_li] == _ptr__3341_usubi[_3345_ui]) && (_ptr__3339_lsubj[_3346_li] < _ptr__3342_usubj[_3345_ui]))))
            {
              {
                ++ _3344_n;
                ++ _3346_li;
              }
            }
            else
            {
              {
                if (((_ptr__3338_lsubi[_3346_li] > _ptr__3341_usubi[_3345_ui]) || ((_ptr__3338_lsubi[_3346_li] == _ptr__3341_usubi[_3345_ui]) && (_ptr__3339_lsubj[_3346_li] > _ptr__3342_usubj[_3345_ui]))))
                {
                  {
                    ++ _3344_n;
                    ++ _3345_ui;
                  }
                }
                else
                {
                  {
                    ++ _3344_n;
                    ++ _3346_li;
                    ++ _3345_ui;
                  }
                }
              }
            }
          }
        }
        _3344_n += ((int)((_3338_lsubi)->size(0)) - _3346_li);
        _3344_n += ((int)((_3341_usubi)->size(0)) - _3345_ui);
      }
      std::shared_ptr< monty::ndarray< int32_t,2 > > _3347_inst = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape(_3344_n,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _3348_lbv = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3344_n)));
      _checked_ptr_1<double> _ptr__3348_lbv(_3348_lbv ? _3348_lbv->raw() : nullptr,_3348_lbv ? _3348_lbv->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3349_ubv = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3344_n)));
      _checked_ptr_1<double> _ptr__3349_ubv(_3349_ubv ? _3349_ubv->raw() : nullptr,_3349_ubv ? _3349_ubv->size(0) : 0);
      {
        int32_t _3350_k = (int)0;
        int32_t _3351_ui = (int)0;
        int32_t _3352_li = (int)0;
        while ( ((_3352_li < (int)((_3338_lsubi)->size(0))) && (_3351_ui < (int)((_3341_usubi)->size(0)))) )
        {
          {
            if (((_ptr__3338_lsubi[_3352_li] < _ptr__3341_usubi[_3351_ui]) || ((_ptr__3338_lsubi[_3352_li] == _ptr__3341_usubi[_3351_ui]) && (_ptr__3339_lsubj[_3352_li] < _ptr__3342_usubj[_3351_ui]))))
            {
              {
                ((*_3347_inst)(_3350_k,(int)0)) = _ptr__3338_lsubi[_3352_li];
                ((*_3347_inst)(_3350_k,(int)1)) = _ptr__3339_lsubj[_3352_li];
                _ptr__3348_lbv[_3350_k] = _ptr__3340_lval[_3352_li];
                _ptr__3349_ubv[_3350_k] = 0.0;
                ++ _3350_k;
                ++ _3352_li;
              }
            }
            else
            {
              {
                if (((_ptr__3338_lsubi[_3352_li] > _ptr__3341_usubi[_3351_ui]) || ((_ptr__3338_lsubi[_3352_li] == _ptr__3341_usubi[_3351_ui]) && (_ptr__3339_lsubj[_3352_li] > _ptr__3342_usubj[_3351_ui]))))
                {
                  {
                    ((*_3347_inst)(_3350_k,(int)0)) = _ptr__3341_usubi[_3351_ui];
                    ((*_3347_inst)(_3350_k,(int)1)) = _ptr__3342_usubj[_3351_ui];
                    _ptr__3348_lbv[_3350_k] = 0.0;
                    _ptr__3349_ubv[_3350_k] = _ptr__3343_uval[_3351_ui];
                    ++ _3350_k;
                    ++ _3351_ui;
                  }
                }
                else
                {
                  {
                    ((*_3347_inst)(_3350_k,(int)0)) = _ptr__3341_usubi[_3351_ui];
                    ((*_3347_inst)(_3350_k,(int)1)) = _ptr__3342_usubj[_3351_ui];
                    _ptr__3348_lbv[_3350_k] = _ptr__3340_lval[_3351_ui];
                    _ptr__3349_ubv[_3350_k] = _ptr__3343_uval[_3351_ui];
                    ++ _3350_k;
                    ++ _3352_li;
                    ++ _3351_ui;
                  }
                }
              }
            }
          }
        }
        while ( (_3352_li < (int)((_3338_lsubi)->size(0))) )
        {
          {
            ((*_3347_inst)(_3350_k,(int)0)) = _ptr__3338_lsubi[_3352_li];
            ((*_3347_inst)(_3350_k,(int)1)) = _ptr__3339_lsubj[_3352_li];
            _ptr__3348_lbv[_3350_k] = _ptr__3340_lval[_3352_li];
            _ptr__3349_ubv[_3350_k] = 0.0;
            ++ _3350_k;
            ++ _3352_li;
          }
        }
        while ( (_3351_ui < (int)((_3341_usubi)->size(0))) )
        {
          {
            ((*_3347_inst)(_3350_k,(int)0)) = _ptr__3341_usubi[_3351_ui];
            ((*_3347_inst)(_3350_k,(int)1)) = _ptr__3342_usubj[_3351_ui];
            _ptr__3348_lbv[_3350_k] = 0.0;
            _ptr__3349_ubv[_3350_k] = _ptr__3343_uval[_3351_ui];
            ++ _3350_k;
            ++ _3351_ui;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3348_lbv,_3349_ubv,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3336_lb)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3336_lb)->dimj)}),_3347_inst,(int)1);
    }
  }
  else
  {
    {
      int32_t _3353_dimj = mosek::fusion::p_Matrix::_get_impl(_3336_lb)->dimj;
      int32_t _3354_dimi = mosek::fusion::p_Matrix::_get_impl(_3336_lb)->dimi;
      int32_t _3355_n = safe_mul( _3354_dimi,_3353_dimj );
      std::shared_ptr< monty::ndarray< double,1 > > _3356_lval;
      _checked_ptr_1<double> _ptr__3356_lval(_3356_lval ? _3356_lval->raw() : nullptr,_3356_lval ? _3356_lval->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3357_uval;
      _checked_ptr_1<double> _ptr__3357_uval(_3357_uval ? _3357_uval->raw() : nullptr,_3357_uval ? _3357_uval->size(0) : 0);
      if (_3336_lb->isSparse())
      {
        {
          _3356_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3355_n)));
          _ptr__3356_lval.update(_3356_lval ? _3356_lval->raw() : nullptr, _3356_lval ? _3356_lval->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3358_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3336_lb->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3358_subi(_3358_subi ? _3358_subi->raw() : nullptr,_3358_subi ? _3358_subi->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3359_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3336_lb->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3359_subj(_3359_subj ? _3359_subj->raw() : nullptr,_3359_subj ? _3359_subj->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3360_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3336_lb->numNonzeros())));
          _checked_ptr_1<double> _ptr__3360_v(_3360_v ? _3360_v->raw() : nullptr,_3360_v ? _3360_v->size(0) : 0);
          _3336_lb->getDataAsTriplets(_3358_subi,_3359_subj,_3360_v);
          int32_t _10822_ = (int)0;
          int32_t _10823_ = (int)((_3358_subi)->size(0));
          for (int32_t _3361_i = _10822_; _3361_i < _10823_; ++_3361_i)
          {
            {
              _ptr__3356_lval[safe_add( safe_mul( _ptr__3358_subi[_3361_i],_3353_dimj ),_ptr__3359_subj[_3361_i] )] = _ptr__3360_v[_3361_i];
            }
          }
        }
      }
      else
      {
        {
          _3356_lval = _3336_lb->getDataAsArray();
          _ptr__3356_lval.update(_3356_lval ? _3356_lval->raw() : nullptr, _3356_lval ? _3356_lval->size(0) : 0);
        }
      }
      if (_3337_ub->isSparse())
      {
        {
          _3357_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3355_n)));
          _ptr__3357_uval.update(_3357_uval ? _3357_uval->raw() : nullptr, _3357_uval ? _3357_uval->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3362_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3337_ub->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3362_subi(_3362_subi ? _3362_subi->raw() : nullptr,_3362_subi ? _3362_subi->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3363_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3337_ub->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3363_subj(_3363_subj ? _3363_subj->raw() : nullptr,_3363_subj ? _3363_subj->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3364_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3337_ub->numNonzeros())));
          _checked_ptr_1<double> _ptr__3364_v(_3364_v ? _3364_v->raw() : nullptr,_3364_v ? _3364_v->size(0) : 0);
          _3337_ub->getDataAsTriplets(_3362_subi,_3363_subj,_3364_v);
          int32_t _10824_ = (int)0;
          int32_t _10825_ = (int)((_3362_subi)->size(0));
          for (int32_t _3365_i = _10824_; _3365_i < _10825_; ++_3365_i)
          {
            {
              _ptr__3357_uval[safe_add( safe_mul( _ptr__3362_subi[_3365_i],_3353_dimj ),_ptr__3363_subj[_3365_i] )] = _ptr__3364_v[_3365_i];
            }
          }
        }
      }
      else
      {
        {
          _3357_uval = _3337_ub->getDataAsArray();
          _ptr__3357_uval.update(_3357_uval ? _3357_uval->raw() : nullptr, _3357_uval ? _3357_uval->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3356_lval,_3357_uval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3336_lb)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3336_lb)->dimj)}),nullptr,(int)1);
    }
  }
}
// End mosek.fusion.Domain.mkRangedDomain

// Begin mosek.fusion.Domain.mkRangedDomain
// Method mosek.fusion.Domain.mkRangedDomain @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:599:6-618:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _3366_lb,std::shared_ptr< monty::ndarray< double,2 > > _3367_ub)
{
  if ((((int)((_3366_lb)->size(0)) != (int)((_3367_ub)->size(0))) || ((int)((_3366_lb)->size(1)) != (int)((_3367_ub)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int32_t _3368_dimj = (int)((_3366_lb)->size(1));
  int32_t _3369_dimi = (int)((_3366_lb)->size(0));
  int32_t _3370_n = safe_mul( _3369_dimi,_3368_dimj );
  std::shared_ptr< monty::ndarray< double,1 > > _3371_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3370_n)));
  _checked_ptr_1<double> _ptr__3371_lval(_3371_lval ? _3371_lval->raw() : nullptr,_3371_lval ? _3371_lval->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3372_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3370_n)));
  _checked_ptr_1<double> _ptr__3372_uval(_3372_uval ? _3372_uval->raw() : nullptr,_3372_uval ? _3372_uval->size(0) : 0);
  int32_t _3373_k = (int)0;
  int32_t _10826_ = (int)0;
  int32_t _10827_ = _3369_dimi;
  for (int32_t _3374_i = _10826_; _3374_i < _10827_; ++_3374_i)
  {
    {
      int32_t _10828_ = (int)0;
      int32_t _10829_ = _3368_dimj;
      for (int32_t _3375_j = _10828_; _3375_j < _10829_; ++_3375_j)
      {
        {
          _ptr__3371_lval[_3373_k] = ((*_3366_lb)(_3374_i,_3375_j));
          _ptr__3372_uval[_3373_k] = ((*_3367_ub)(_3374_i,_3375_j));
          ++ _3373_k;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3371_lval,_3372_uval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3369_dimi),(int32_t)(_3368_dimj)}),nullptr,(int)1);
}
// End mosek.fusion.Domain.mkRangedDomain

// Begin mosek.fusion.Domain.mkLinearDomain
// Method mosek.fusion.Domain.mkLinearDomain @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:579:6-597:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _3376_k,monty::rc_ptr< ::mosek::fusion::Matrix > _3377_mx)
{
  if (_3377_mx->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3378_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3377_mx->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3378_msubi(_3378_msubi ? _3378_msubi->raw() : nullptr,_3378_msubi ? _3378_msubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3379_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3377_mx->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3379_msubj(_3379_msubj ? _3379_msubj->raw() : nullptr,_3379_msubj ? _3379_msubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3380_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3377_mx->numNonzeros())));
      _checked_ptr_1<double> _ptr__3380_mval(_3380_mval ? _3380_mval->raw() : nullptr,_3380_mval ? _3380_mval->size(0) : 0);
      _3377_mx->getDataAsTriplets(_3378_msubi,_3379_msubj,_3380_mval);
      std::shared_ptr< monty::ndarray< int32_t,2 > > _3381_inst = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3378_msubi)->size(0)),(int)2)));
      int32_t _10830_ = (int)0;
      int32_t _10831_ = (int)((_3378_msubi)->size(0));
      for (int32_t _3382_i = _10830_; _3382_i < _10831_; ++_3382_i)
      {
        {
          ((*_3381_inst)(_3382_i,(int)0)) = _ptr__3378_msubi[_3382_i];
          ((*_3381_inst)(_3382_i,(int)1)) = _ptr__3379_msubj[_3382_i];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3376_k,false,_3380_mval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3377_mx)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3377_mx)->dimj)}),_3381_inst,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3376_k,false,_3377_mx->getDataAsArray(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3377_mx)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3377_mx)->dimj)}),nullptr,(int)1);
    }
  }
}
// End mosek.fusion.Domain.mkLinearDomain

// Begin mosek.fusion.Domain.prod
// Method mosek.fusion.Domain.prod @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:577:6-121
int64_t mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int32_t,1 > > _3383_dim)
{
  _checked_ptr_1<int32_t> _ptr__3383_dim(_3383_dim ? _3383_dim->raw() : nullptr, _3383_dim ? _3383_dim->size(0) : 0);
  int64_t _3384_r = (int)1;
  int32_t _10832_ = (int)0;
  int32_t _10833_ = (int)((_3383_dim)->size(0));
  for (int32_t _3385_i = _10832_; _3385_i < _10833_; ++_3385_i)
  {
    {
      _3384_r *= _ptr__3383_dim[_3385_i];
    }
  }
  return _3384_r;
}
// End mosek.fusion.Domain.prod

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:560:6-575:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _3386_scalable,std::shared_ptr< monty::ndarray< double,1 > > _3387_lb,std::shared_ptr< monty::ndarray< double,1 > > _3388_ub,std::shared_ptr< monty::ndarray< int32_t,2 > > _3389_sp,std::shared_ptr< monty::ndarray< int32_t,1 > > _3390_dims)
{
  _checked_ptr_1<double> _ptr__3387_lb(_3387_lb ? _3387_lb->raw() : nullptr, _3387_lb ? _3387_lb->size(0) : 0);
  _checked_ptr_1<double> _ptr__3388_ub(_3388_ub ? _3388_ub->raw() : nullptr, _3388_ub ? _3388_ub->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3390_dims(_3390_dims ? _3390_dims->raw() : nullptr, _3390_dims ? _3390_dims->size(0) : 0);
  if (((!_3386_scalable) && ((int)((_3387_lb)->size(0)) != (int)((_3388_ub)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _3389_sp.get()) && ((int)((_3389_sp)->size(0)) != (int)((_3387_lb)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int32_t _10834_ = (int)0;
  int32_t _10835_ = (int)((_3388_ub)->size(0));
  for (int32_t _3391_i = _10834_; _3391_i < _10835_; ++_3391_i)
  {
    {
      if ((_ptr__3387_lb[_3391_i] > _ptr__3388_ub[_3391_i]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _3390_dims.get()) && (::mosek::fusion::p_Domain::dimsize(_3390_dims) != (int)((_3387_lb)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_3386_scalable,_3387_lb,_3388_ub,_3390_dims)->__mosek_2fusion_2RangeDomain__sparse(_3389_sp);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:557:6-118
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3392_rd,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3393_sparsity) { return mosek::fusion::p_Domain::sparse(_3392_rd,_3393_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3392_rd,std::shared_ptr< monty::ndarray< int32_t,2 > > _3393_sparsity)
{
  return _3392_rd->__mosek_2fusion_2RangeDomain__sparse(_3393_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:556:6-118
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3394_rd,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3395_sparsity) { return mosek::fusion::p_Domain::sparse(_3394_rd,_3395_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3394_rd,std::shared_ptr< monty::ndarray< int32_t,1 > > _3395_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3395_sparsity(_3395_sparsity ? _3395_sparsity->raw() : nullptr, _3395_sparsity ? _3395_sparsity->size(0) : 0);
  return _3394_rd->__mosek_2fusion_2RangeDomain__sparse(_3395_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:555:6-118
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3396_ld,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3397_sparsity) { return mosek::fusion::p_Domain::sparse(_3396_ld,_3397_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3396_ld,std::shared_ptr< monty::ndarray< int32_t,2 > > _3397_sparsity)
{
  return _3396_ld->__mosek_2fusion_2LinearDomain__sparse(_3397_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:554:6-118
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3398_ld,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3399_sparsity) { return mosek::fusion::p_Domain::sparse(_3398_ld,_3399_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3398_ld,std::shared_ptr< monty::ndarray< int32_t,1 > > _3399_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3399_sparsity(_3399_sparsity ? _3399_sparsity->raw() : nullptr, _3399_sparsity ? _3399_sparsity->size(0) : 0);
  return _3398_ld->__mosek_2fusion_2LinearDomain__sparse(_3399_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:552:6-92
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3400_rd) { return mosek::fusion::p_Domain::integral(_3400_rd); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3400_rd)
{
  return _3400_rd->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:551:6-92
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3401_ld) { return mosek::fusion::p_Domain::integral(_3401_ld); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3401_ld)
{
  return _3401_ld->__mosek_2fusion_2LinearDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:550:6-88
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3402_c) { return mosek::fusion::p_Domain::integral(_3402_c); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3402_c)
{
  return _3402_c->__mosek_2fusion_2ConeDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.axis
// Method mosek.fusion.Domain.axis @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:548:6-93
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis
  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3403_c,
    int32_t _3404_a) { return mosek::fusion::p_Domain::axis(_3403_c,_3404_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3403_c,int32_t _3404_a)
{
  return _3403_c->__mosek_2fusion_2ConeDomain__axis(_3404_a);
}
// End mosek.fusion.Domain.axis

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:545:6-178
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3405_alphas,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3406_dims) { return mosek::fusion::p_Domain::inDPowerCone(_3405_alphas,_3406_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3405_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > > _3406_dims)
{
  _checked_ptr_1<double> _ptr__3405_alphas(_3405_alphas ? _3405_alphas->raw() : nullptr, _3405_alphas ? _3405_alphas->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3406_dims(_3406_dims ? _3406_dims->raw() : nullptr, _3406_dims ? _3406_dims->size(0) : 0);
  std::vector<int32_t> _10836_;
  for (int32_t _3407_i = (int)0, _10837_ = (int)((_3406_dims)->size(0)); _3407_i < _10837_ ; ++_3407_i)
  {
    _10836_.push_back(_ptr__3406_dims[_3407_i]);
  }
  auto _10838_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10836_.size()),_10836_.begin(),_10836_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3405_alphas,_10838_);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:544:6-153
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3408_alphas,
    int32_t _3409_m) { return mosek::fusion::p_Domain::inDPowerCone(_3408_alphas,_3409_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3408_alphas,int32_t _3409_m)
{
  _checked_ptr_1<double> _ptr__3408_alphas(_3408_alphas ? _3408_alphas->raw() : nullptr, _3408_alphas ? _3408_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3408_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3409_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:543:6-147
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3410_alphas) { return mosek::fusion::p_Domain::inDPowerCone(_3410_alphas); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3410_alphas)
{
  _checked_ptr_1<double> _ptr__3410_alphas(_3410_alphas ? _3410_alphas->raw() : nullptr, _3410_alphas ? _3410_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3410_alphas,nullptr);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:541:6-191
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3411_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3412_dims) { return mosek::fusion::p_Domain::inDPowerCone(_3411_alpha,_3412_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3411_alpha,std::shared_ptr< monty::ndarray< int32_t,1 > > _3412_dims)
{
  _checked_ptr_1<int32_t> _ptr__3412_dims(_3412_dims ? _3412_dims->raw() : nullptr, _3412_dims ? _3412_dims->size(0) : 0);
  std::vector<int32_t> _10839_;
  for (int32_t _3413_i = (int)0, _10840_ = (int)((_3412_dims)->size(0)); _3413_i < _10840_ ; ++_3413_i)
  {
    _10839_.push_back(_ptr__3412_dims[_3413_i]);
  }
  auto _10841_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10839_.size()),_10839_.begin(),_10839_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3411_alpha),(double)((1.0 - _3411_alpha))}),_10841_);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:540:6-166
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3414_alpha,
    int32_t _3415_m) { return mosek::fusion::p_Domain::inDPowerCone(_3414_alpha,_3415_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3414_alpha,int32_t _3415_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3414_alpha),(double)((1.0 - _3414_alpha))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3415_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:539:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3416_alpha) { return mosek::fusion::p_Domain::inDPowerCone(_3416_alpha); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3416_alpha)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3416_alpha),(double)((1.0 - _3416_alpha))}),nullptr);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:536:6-178
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3417_alphas,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3418_dims) { return mosek::fusion::p_Domain::inPPowerCone(_3417_alphas,_3418_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3417_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > > _3418_dims)
{
  _checked_ptr_1<double> _ptr__3417_alphas(_3417_alphas ? _3417_alphas->raw() : nullptr, _3417_alphas ? _3417_alphas->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3418_dims(_3418_dims ? _3418_dims->raw() : nullptr, _3418_dims ? _3418_dims->size(0) : 0);
  std::vector<int32_t> _10842_;
  for (int32_t _3419_i = (int)0, _10843_ = (int)((_3418_dims)->size(0)); _3419_i < _10843_ ; ++_3419_i)
  {
    _10842_.push_back(_ptr__3418_dims[_3419_i]);
  }
  auto _10844_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10842_.size()),_10842_.begin(),_10842_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3417_alphas,_10844_);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:535:6-153
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3420_alphas,
    int32_t _3421_m) { return mosek::fusion::p_Domain::inPPowerCone(_3420_alphas,_3421_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3420_alphas,int32_t _3421_m)
{
  _checked_ptr_1<double> _ptr__3420_alphas(_3420_alphas ? _3420_alphas->raw() : nullptr, _3420_alphas ? _3420_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3420_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3421_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:534:6-147
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3422_alphas) { return mosek::fusion::p_Domain::inPPowerCone(_3422_alphas); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3422_alphas)
{
  _checked_ptr_1<double> _ptr__3422_alphas(_3422_alphas ? _3422_alphas->raw() : nullptr, _3422_alphas ? _3422_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3422_alphas,nullptr);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:532:6-191
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3423_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3424_dims) { return mosek::fusion::p_Domain::inPPowerCone(_3423_alpha,_3424_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3423_alpha,std::shared_ptr< monty::ndarray< int32_t,1 > > _3424_dims)
{
  _checked_ptr_1<int32_t> _ptr__3424_dims(_3424_dims ? _3424_dims->raw() : nullptr, _3424_dims ? _3424_dims->size(0) : 0);
  std::vector<int32_t> _10845_;
  for (int32_t _3425_i = (int)0, _10846_ = (int)((_3424_dims)->size(0)); _3425_i < _10846_ ; ++_3425_i)
  {
    _10845_.push_back(_ptr__3424_dims[_3425_i]);
  }
  auto _10847_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10845_.size()),_10845_.begin(),_10845_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3423_alpha),(double)((1.0 - _3423_alpha))}),_10847_);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:531:6-166
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3426_alpha,
    int32_t _3427_m) { return mosek::fusion::p_Domain::inPPowerCone(_3426_alpha,_3427_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3426_alpha,int32_t _3427_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3426_alpha),(double)((1.0 - _3426_alpha))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3427_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:530:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3428_alpha) { return mosek::fusion::p_Domain::inPPowerCone(_3428_alpha); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3428_alpha)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3428_alpha),(double)((1.0 - _3428_alpha))}),nullptr);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:527:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3429_dims) { return mosek::fusion::p_Domain::inDExpCone(_3429_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3429_dims)
{
  _checked_ptr_1<int32_t> _ptr__3429_dims(_3429_dims ? _3429_dims->raw() : nullptr, _3429_dims ? _3429_dims->size(0) : 0);
  std::vector<int32_t> _10848_;
  for (int32_t _3430_i = (int)0, _10849_ = (int)((_3429_dims)->size(0)); _3430_i < _10849_ ; ++_3430_i)
  {
    _10848_.push_back(_ptr__3429_dims[_3430_i]);
  }
  auto _10850_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10848_.size()),_10848_.begin(),_10848_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_10850_);
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:526:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( int32_t _3431_m) { return mosek::fusion::p_Domain::inDExpCone(_3431_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int32_t _3431_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3431_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:525:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:522:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3432_dims) { return mosek::fusion::p_Domain::inPExpCone(_3432_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3432_dims)
{
  _checked_ptr_1<int32_t> _ptr__3432_dims(_3432_dims ? _3432_dims->raw() : nullptr, _3432_dims ? _3432_dims->size(0) : 0);
  std::vector<int32_t> _10851_;
  for (int32_t _3433_i = (int)0, _10852_ = (int)((_3432_dims)->size(0)); _3433_i < _10852_ ; ++_3433_i)
  {
    _10851_.push_back(_ptr__3432_dims[_3433_i]);
  }
  auto _10853_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10851_.size()),_10851_.begin(),_10851_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_10853_);
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:521:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( int32_t _3434_m) { return mosek::fusion::p_Domain::inPExpCone(_3434_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int32_t _3434_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3434_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:520:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:516:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3435_dims) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3435_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3435_dims)
{
  _checked_ptr_1<int32_t> _ptr__3435_dims(_3435_dims ? _3435_dims->raw() : nullptr, _3435_dims ? _3435_dims->size(0) : 0);
  std::vector<int32_t> _10854_;
  for (int32_t _3436_i = (int)0, _10855_ = (int)((_3435_dims)->size(0)); _3436_i < _10855_ ; ++_3436_i)
  {
    _10854_.push_back(_ptr__3435_dims[_3436_i]);
  }
  auto _10856_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10854_.size()),_10854_.begin(),_10854_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,_10856_);
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:515:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( int32_t _3437_m,
    int32_t _3438_n) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3437_m,_3438_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(int32_t _3437_m,int32_t _3438_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3437_m),(int32_t)(_3438_n)}));
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:514:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( int32_t _3439_n) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3439_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(int32_t _3439_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3439_n)}));
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:513:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( ) { return mosek::fusion::p_Domain::inDGeoMeanCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,nullptr);
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:511:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3440_dims) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3440_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3440_dims)
{
  _checked_ptr_1<int32_t> _ptr__3440_dims(_3440_dims ? _3440_dims->raw() : nullptr, _3440_dims ? _3440_dims->size(0) : 0);
  std::vector<int32_t> _10857_;
  for (int32_t _3441_i = (int)0, _10858_ = (int)((_3440_dims)->size(0)); _3441_i < _10858_ ; ++_3441_i)
  {
    _10857_.push_back(_ptr__3440_dims[_3441_i]);
  }
  auto _10859_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10857_.size()),_10857_.begin(),_10857_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,_10859_);
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:510:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( int32_t _3442_m,
    int32_t _3443_n) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3442_m,_3443_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(int32_t _3442_m,int32_t _3443_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3442_m),(int32_t)(_3443_n)}));
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:509:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( int32_t _3444_n) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3444_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(int32_t _3444_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3444_n)}));
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:508:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( ) { return mosek::fusion::p_Domain::inPGeoMeanCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,nullptr);
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:493:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3445_dims) { return mosek::fusion::p_Domain::inRotatedQCone(_3445_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3445_dims)
{
  _checked_ptr_1<int32_t> _ptr__3445_dims(_3445_dims ? _3445_dims->raw() : nullptr, _3445_dims ? _3445_dims->size(0) : 0);
  std::vector<int32_t> _10860_;
  for (int32_t _3446_i = (int)0, _10861_ = (int)((_3445_dims)->size(0)); _3446_i < _10861_ ; ++_3446_i)
  {
    _10860_.push_back(_ptr__3445_dims[_3446_i]);
  }
  auto _10862_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10860_.size()),_10860_.begin(),_10860_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,_10862_);
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:492:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( int32_t _3447_m,
    int32_t _3448_n) { return mosek::fusion::p_Domain::inRotatedQCone(_3447_m,_3448_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int32_t _3447_m,int32_t _3448_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3447_m),(int32_t)(_3448_n)}));
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:491:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( int32_t _3449_n) { return mosek::fusion::p_Domain::inRotatedQCone(_3449_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int32_t _3449_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3449_n)}));
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:490:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,nullptr);
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:488:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3450_dims) { return mosek::fusion::p_Domain::inQCone(_3450_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3450_dims)
{
  _checked_ptr_1<int32_t> _ptr__3450_dims(_3450_dims ? _3450_dims->raw() : nullptr, _3450_dims ? _3450_dims->size(0) : 0);
  std::vector<int32_t> _10863_;
  for (int32_t _3451_i = (int)0, _10864_ = (int)((_3450_dims)->size(0)); _3451_i < _10864_ ; ++_3451_i)
  {
    _10863_.push_back(_ptr__3450_dims[_3451_i]);
  }
  auto _10865_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10863_.size()),_10863_.begin(),_10863_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,_10865_);
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:487:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( int32_t _3452_m,
    int32_t _3453_n) { return mosek::fusion::p_Domain::inQCone(_3452_m,_3453_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int32_t _3452_m,int32_t _3453_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3452_m),(int32_t)(_3453_n)}));
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:486:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( int32_t _3454_n) { return mosek::fusion::p_Domain::inQCone(_3454_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int32_t _3454_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3454_n)}));
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:485:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( ) { return mosek::fusion::p_Domain::inQCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,nullptr);
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:482:6-128
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3455_dims) { return mosek::fusion::p_Domain::inSVecPSDCone(_3455_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3455_dims)
{
  _checked_ptr_1<int32_t> _ptr__3455_dims(_3455_dims ? _3455_dims->raw() : nullptr, _3455_dims ? _3455_dims->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,_3455_dims);
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:481:6-136
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( int32_t _3456_d1,
    int32_t _3457_d2) { return mosek::fusion::p_Domain::inSVecPSDCone(_3456_d1,_3457_d2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(int32_t _3456_d1,int32_t _3457_d2)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3456_d1),(int32_t)(_3457_d2)}));
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:480:6-132
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( int32_t _3458_n) { return mosek::fusion::p_Domain::inSVecPSDCone(_3458_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(int32_t _3458_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3458_n)}));
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:479:6-128
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( ) { return mosek::fusion::p_Domain::inSVecPSDCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,nullptr);
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:469:6-130
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( int32_t _3459_n,
    int32_t _3460_m) { return mosek::fusion::p_Domain::isTrilPSD(_3459_n,_3460_m); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int32_t _3459_n,int32_t _3460_m)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3460_m),(int32_t)(_3459_n),(int32_t)(_3459_n)}),(int)1,(int)2);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:468:6-128
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( int32_t _3461_n) { return mosek::fusion::p_Domain::isTrilPSD(_3461_n); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int32_t _3461_n)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3461_n),(int32_t)(_3461_n)}),(int)0,(int)1);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:467:6-112
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD()
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:465:6-126
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( int32_t _3462_n,
    int32_t _3463_m) { return mosek::fusion::p_Domain::inPSDCone(_3462_n,_3463_m); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int32_t _3462_n,int32_t _3463_m)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3463_m),(int32_t)(_3462_n),(int32_t)(_3462_n)}));
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:464:6-124
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( int32_t _3464_n) { return mosek::fusion::p_Domain::inPSDCone(_3464_n); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int32_t _3464_n)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3464_n),(int32_t)(_3464_n)}));
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:463:6-111
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone()
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:460:6-123
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( ) { return mosek::fusion::p_Domain::binary(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary()
{
  return ::mosek::fusion::p_Domain::inRange(0.0,1.0)->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:459:6-128
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3465_dims) { return mosek::fusion::p_Domain::binary(_3465_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int32_t,1 > > _3465_dims)
{
  _checked_ptr_1<int32_t> _ptr__3465_dims(_3465_dims ? _3465_dims->raw() : nullptr, _3465_dims ? _3465_dims->size(0) : 0);
  return ::mosek::fusion::p_Domain::inRange(0.0,1.0,_3465_dims)->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:458:6-134
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( int32_t _3466_m,
    int32_t _3467_n) { return mosek::fusion::p_Domain::binary(_3466_m,_3467_n); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int32_t _3466_m,int32_t _3467_n)
{
  return ::mosek::fusion::p_Domain::inRange(0.0,1.0,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3466_m),(int32_t)(_3467_n)}))->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:457:6-132
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( int32_t _3468_n) { return mosek::fusion::p_Domain::binary(_3468_n); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int32_t _3468_n)
{
  return ::mosek::fusion::p_Domain::inRange(0.0,1.0,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3468_n)}))->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:451:6-120
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3469_lbm,
    monty::rc_ptr< ::mosek::fusion::Matrix > _3470_ubm) { return mosek::fusion::p_Domain::inRange(_3469_lbm,_3470_ubm); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _3469_lbm,monty::rc_ptr< ::mosek::fusion::Matrix > _3470_ubm)
{
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3469_lbm,_3470_ubm);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:450:6-120
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,2 > > _3471_lba,
    std::shared_ptr< monty::ndarray< double,2 > > _3472_uba) { return mosek::fusion::p_Domain::inRange(_3471_lba,_3472_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _3471_lba,std::shared_ptr< monty::ndarray< double,2 > > _3472_uba)
{
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3471_lba,_3472_uba);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:448:6-147
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3473_lba,
    std::shared_ptr< monty::ndarray< double,1 > > _3474_uba,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3475_dims) { return mosek::fusion::p_Domain::inRange(_3473_lba,_3474_uba,_3475_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3473_lba,std::shared_ptr< monty::ndarray< double,1 > > _3474_uba,std::shared_ptr< monty::ndarray< int32_t,1 > > _3475_dims)
{
  _checked_ptr_1<double> _ptr__3473_lba(_3473_lba ? _3473_lba->raw() : nullptr, _3473_lba ? _3473_lba->size(0) : 0);
  _checked_ptr_1<double> _ptr__3474_uba(_3474_uba ? _3474_uba->raw() : nullptr, _3474_uba ? _3474_uba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3475_dims(_3475_dims ? _3475_dims->raw() : nullptr, _3475_dims ? _3475_dims->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3473_lba,_3474_uba,_3475_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:447:6-174
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3476_lba,
    double _3477_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3478_dims) { return mosek::fusion::p_Domain::inRange(_3476_lba,_3477_ub,_3478_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3476_lba,double _3477_ub,std::shared_ptr< monty::ndarray< int32_t,1 > > _3478_dims)
{
  _checked_ptr_1<double> _ptr__3476_lba(_3476_lba ? _3476_lba->raw() : nullptr, _3476_lba ? _3476_lba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3478_dims(_3478_dims ? _3478_dims->raw() : nullptr, _3478_dims ? _3478_dims->size(0) : 0);
  std::vector<double> _10866_;
  for (int32_t _3479_i = (int)0, _10867_ = (int)((_3476_lba)->size(0)); _3479_i < _10867_ ; ++_3479_i)
  {
    _10866_.push_back(_3477_ub);
  }
  auto _10868_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10866_.size()),_10866_.begin(),_10866_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3476_lba,_10868_,_3478_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:446:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3480_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3481_uba,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3482_dims) { return mosek::fusion::p_Domain::inRange(_3480_lb,_3481_uba,_3482_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3480_lb,std::shared_ptr< monty::ndarray< double,1 > > _3481_uba,std::shared_ptr< monty::ndarray< int32_t,1 > > _3482_dims)
{
  _checked_ptr_1<double> _ptr__3481_uba(_3481_uba ? _3481_uba->raw() : nullptr, _3481_uba ? _3481_uba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3482_dims(_3482_dims ? _3482_dims->raw() : nullptr, _3482_dims ? _3482_dims->size(0) : 0);
  std::vector<double> _10869_;
  for (int32_t _3483_i = (int)0, _10870_ = (int)((_3481_uba)->size(0)); _3483_i < _10870_ ; ++_3483_i)
  {
    _10869_.push_back(_3480_lb);
  }
  auto _10871_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10869_.size()),_10869_.begin(),_10869_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10871_,_3481_uba,_3482_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:445:6-145
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3484_lb,
    double _3485_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3486_dims) { return mosek::fusion::p_Domain::inRange(_3484_lb,_3485_ub,_3486_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3484_lb,double _3485_ub,std::shared_ptr< monty::ndarray< int32_t,1 > > _3486_dims)
{
  _checked_ptr_1<int32_t> _ptr__3486_dims(_3486_dims ? _3486_dims->raw() : nullptr, _3486_dims ? _3486_dims->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3484_lb,_3485_ub,_3486_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:443:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3487_lba,
    std::shared_ptr< monty::ndarray< double,1 > > _3488_uba) { return mosek::fusion::p_Domain::inRange(_3487_lba,_3488_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3487_lba,std::shared_ptr< monty::ndarray< double,1 > > _3488_uba)
{
  _checked_ptr_1<double> _ptr__3487_lba(_3487_lba ? _3487_lba->raw() : nullptr, _3487_lba ? _3487_lba->size(0) : 0);
  _checked_ptr_1<double> _ptr__3488_uba(_3488_uba ? _3488_uba->raw() : nullptr, _3488_uba ? _3488_uba->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3487_lba,_3488_uba,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3487_lba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:442:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3489_lba,
    double _3490_ub) { return mosek::fusion::p_Domain::inRange(_3489_lba,_3490_ub); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3489_lba,double _3490_ub)
{
  _checked_ptr_1<double> _ptr__3489_lba(_3489_lba ? _3489_lba->raw() : nullptr, _3489_lba ? _3489_lba->size(0) : 0);
  std::vector<double> _10872_;
  for (int32_t _3491_i = (int)0, _10873_ = (int)((_3489_lba)->size(0)); _3491_i < _10873_ ; ++_3491_i)
  {
    _10872_.push_back(_3490_ub);
  }
  auto _10874_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10872_.size()),_10872_.begin(),_10872_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3489_lba,_10874_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3489_lba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:441:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3492_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3493_uba) { return mosek::fusion::p_Domain::inRange(_3492_lb,_3493_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3492_lb,std::shared_ptr< monty::ndarray< double,1 > > _3493_uba)
{
  _checked_ptr_1<double> _ptr__3493_uba(_3493_uba ? _3493_uba->raw() : nullptr, _3493_uba ? _3493_uba->size(0) : 0);
  std::vector<double> _10875_;
  for (int32_t _3494_i = (int)0, _10876_ = (int)((_3493_uba)->size(0)); _3494_i < _10876_ ; ++_3494_i)
  {
    _10875_.push_back(_3492_lb);
  }
  auto _10877_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10875_.size()),_10875_.begin(),_10875_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10877_,_3493_uba,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3493_uba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:440:6-187
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3495_lb,
    double _3496_ub) { return mosek::fusion::p_Domain::inRange(_3495_lb,_3496_ub); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3495_lb,double _3496_ub)
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3495_lb)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3496_ub)}),nullptr);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:437:6-138
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3497_mx) { return mosek::fusion::p_Domain::greaterThan(_3497_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3497_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_3497_mx);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:436:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3498_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3499_dims) { return mosek::fusion::p_Domain::greaterThan(_3498_a1,_3499_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3498_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3499_dims)
{
  _checked_ptr_1<double> _ptr__3498_a1(_3498_a1 ? _3498_a1->raw() : nullptr, _3498_a1 ? _3498_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3499_dims(_3499_dims ? _3499_dims->raw() : nullptr, _3499_dims ? _3499_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3498_a1),_3499_dims);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:435:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,2 > > _3500_a2) { return mosek::fusion::p_Domain::greaterThan(_3500_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _3500_a2)
{
  std::vector<double> _10878_;
  for (int32_t _3501_i = (int)0, _10879_ = (int)((_3500_a2)->size(0)); _3501_i < _10879_ ; ++_3501_i)
  {
    for (int32_t _3502_j = (int)0, _10880_ = (int)((_3500_a2)->size(1)); _3502_j < _10880_ ; ++_3502_j)
    {
      _10878_.push_back(((*_3500_a2)(_3501_i,_3502_j)));
    }
  }
  auto _10881_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10878_.size()),_10878_.begin(),_10878_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10881_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3500_a2)->size(0))),(int32_t)((int)((_3500_a2)->size(1)))}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:434:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3503_a1) { return mosek::fusion::p_Domain::greaterThan(_3503_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3503_a1)
{
  _checked_ptr_1<double> _ptr__3503_a1(_3503_a1 ? _3503_a1->raw() : nullptr, _3503_a1 ? _3503_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3503_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3503_a1)->size(0)))}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:433:6-184
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3504_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3505_dims) { return mosek::fusion::p_Domain::greaterThan(_3504_b,_3505_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3504_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3505_dims)
{
  _checked_ptr_1<int32_t> _ptr__3505_dims(_3505_dims ? _3505_dims->raw() : nullptr, _3505_dims ? _3505_dims->size(0) : 0);
  std::vector<double> _10882_;
  for (int64_t _3506_i = (int)0, _10883_ = ::mosek::fusion::p_Domain::prod(_3505_dims); _3506_i < _10883_ ; ++_3506_i)
  {
    _10882_.push_back(_3504_b);
  }
  auto _10884_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10882_.size()),_10882_.begin(),_10882_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10884_,_3505_dims);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:432:6-183
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3507_b,
    int32_t _3508_m,
    int32_t _3509_n) { return mosek::fusion::p_Domain::greaterThan(_3507_b,_3508_m,_3509_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3507_b,int32_t _3508_m,int32_t _3509_n)
{
  std::vector<double> _10885_;
  for (int32_t _3510_i = (int)0, _10886_ = safe_mul( _3509_n,_3508_m ); _3510_i < _10886_ ; ++_3510_i)
  {
    _10885_.push_back(_3507_b);
  }
  auto _10887_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10885_.size()),_10885_.begin(),_10885_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10887_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3508_m),(int32_t)(_3509_n)}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:431:6-179
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3511_b,
    int32_t _3512_n) { return mosek::fusion::p_Domain::greaterThan(_3511_b,_3512_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3511_b,int32_t _3512_n)
{
  std::vector<double> _10888_;
  for (int32_t _3513_i = (int)0, _10889_ = _3512_n; _3513_i < _10889_ ; ++_3513_i)
  {
    _10888_.push_back(_3511_b);
  }
  auto _10890_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10888_.size()),_10888_.begin(),_10888_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10890_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3512_n)}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:430:6-161
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3514_b) { return mosek::fusion::p_Domain::greaterThan(_3514_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3514_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3514_b)}),nullptr);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:428:6-135
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3515_mx) { return mosek::fusion::p_Domain::lessThan(_3515_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3515_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_3515_mx);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:427:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3516_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3517_dims) { return mosek::fusion::p_Domain::lessThan(_3516_a1,_3517_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3516_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3517_dims)
{
  _checked_ptr_1<double> _ptr__3516_a1(_3516_a1 ? _3516_a1->raw() : nullptr, _3516_a1 ? _3516_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3517_dims(_3517_dims ? _3517_dims->raw() : nullptr, _3517_dims ? _3517_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3516_a1),_3517_dims);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:426:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,2 > > _3518_a2) { return mosek::fusion::p_Domain::lessThan(_3518_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _3518_a2)
{
  std::vector<double> _10891_;
  for (int32_t _3519_i = (int)0, _10892_ = (int)((_3518_a2)->size(0)); _3519_i < _10892_ ; ++_3519_i)
  {
    for (int32_t _3520_j = (int)0, _10893_ = (int)((_3518_a2)->size(1)); _3520_j < _10893_ ; ++_3520_j)
    {
      _10891_.push_back(((*_3518_a2)(_3519_i,_3520_j)));
    }
  }
  auto _10894_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10891_.size()),_10891_.begin(),_10891_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_10894_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3518_a2)->size(0))),(int32_t)((int)((_3518_a2)->size(1)))}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:425:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3521_a1) { return mosek::fusion::p_Domain::lessThan(_3521_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3521_a1)
{
  _checked_ptr_1<double> _ptr__3521_a1(_3521_a1 ? _3521_a1->raw() : nullptr, _3521_a1 ? _3521_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3521_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3521_a1)->size(0)))}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:424:6-160
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3522_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3523_dims) { return mosek::fusion::p_Domain::lessThan(_3522_b,_3523_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3522_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3523_dims)
{
  _checked_ptr_1<int32_t> _ptr__3523_dims(_3523_dims ? _3523_dims->raw() : nullptr, _3523_dims ? _3523_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3522_b)}),_3523_dims);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:423:6-166
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3524_b,
    int32_t _3525_m,
    int32_t _3526_n) { return mosek::fusion::p_Domain::lessThan(_3524_b,_3525_m,_3526_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3524_b,int32_t _3525_m,int32_t _3526_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3524_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3525_m),(int32_t)(_3526_n)}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:422:6-164
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3527_b,
    int32_t _3528_n) { return mosek::fusion::p_Domain::lessThan(_3527_b,_3528_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3527_b,int32_t _3528_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3527_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3528_n)}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:421:6-159
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3529_b) { return mosek::fusion::p_Domain::lessThan(_3529_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3529_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3529_b)}),nullptr);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:418:6-137
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3530_mx) { return mosek::fusion::p_Domain::equalsTo(_3530_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _3530_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_3530_mx);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:417:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,1 > > _3531_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3532_dims) { return mosek::fusion::p_Domain::equalsTo(_3531_a1,_3532_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3531_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3532_dims)
{
  _checked_ptr_1<double> _ptr__3531_a1(_3531_a1 ? _3531_a1->raw() : nullptr, _3531_a1 ? _3531_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3532_dims(_3532_dims ? _3532_dims->raw() : nullptr, _3532_dims ? _3532_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3531_a1),_3532_dims);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:416:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,2 > > _3533_a2) { return mosek::fusion::p_Domain::equalsTo(_3533_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _3533_a2)
{
  std::vector<double> _10895_;
  for (int32_t _3534_i = (int)0, _10896_ = (int)((_3533_a2)->size(0)); _3534_i < _10896_ ; ++_3534_i)
  {
    for (int32_t _3535_j = (int)0, _10897_ = (int)((_3533_a2)->size(1)); _3535_j < _10897_ ; ++_3535_j)
    {
      _10895_.push_back(((*_3533_a2)(_3534_i,_3535_j)));
    }
  }
  auto _10898_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10895_.size()),_10895_.begin(),_10895_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_10898_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3533_a2)->size(0))),(int32_t)((int)((_3533_a2)->size(1)))}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:415:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,1 > > _3536_a1) { return mosek::fusion::p_Domain::equalsTo(_3536_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3536_a1)
{
  _checked_ptr_1<double> _ptr__3536_a1(_3536_a1 ? _3536_a1->raw() : nullptr, _3536_a1 ? _3536_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3536_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3536_a1)->size(0)))}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:414:6-160
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3537_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3538_dims) { return mosek::fusion::p_Domain::equalsTo(_3537_b,_3538_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3537_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3538_dims)
{
  _checked_ptr_1<int32_t> _ptr__3538_dims(_3538_dims ? _3538_dims->raw() : nullptr, _3538_dims ? _3538_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3537_b)}),_3538_dims);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:413:6-166
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3539_b,
    int32_t _3540_m,
    int32_t _3541_n) { return mosek::fusion::p_Domain::equalsTo(_3539_b,_3540_m,_3541_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3539_b,int32_t _3540_m,int32_t _3541_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3539_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3540_m),(int32_t)(_3541_n)}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:412:6-164
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3542_b,
    int32_t _3543_n) { return mosek::fusion::p_Domain::equalsTo(_3542_b,_3543_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3542_b,int32_t _3543_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3542_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3543_n)}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:411:6-159
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3544_b) { return mosek::fusion::p_Domain::equalsTo(_3544_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3544_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3544_b)}),nullptr);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:408:6-188
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3545_dims) { return mosek::fusion::p_Domain::unbounded(_3545_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int32_t,1 > > _3545_dims)
{
  _checked_ptr_1<int32_t> _ptr__3545_dims(_3545_dims ? _3545_dims->raw() : nullptr, _3545_dims ? _3545_dims->size(0) : 0);
  std::vector<int32_t> _10899_;
  for (int32_t _3546_i = (int)0, _10900_ = (int)((_3545_dims)->size(0)); _3546_i < _10900_ ; ++_3546_i)
  {
    _10899_.push_back(_ptr__3545_dims[_3546_i]);
  }
  auto _10901_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10899_.size()),_10899_.begin(),_10899_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_10901_);
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:407:6-163
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( int32_t _3547_m,
    int32_t _3548_n) { return mosek::fusion::p_Domain::unbounded(_3547_m,_3548_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int32_t _3547_m,int32_t _3548_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3547_m),(int32_t)(_3548_n)}));
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:406:6-161
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( int32_t _3549_n) { return mosek::fusion::p_Domain::unbounded(_3549_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int32_t _3549_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3549_n)}));
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ bld/docker-rockylinux-8/final/default/src/fusion/domain.mbi:405:6-156
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( ) { return mosek::fusion::p_Domain::unbounded(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded()
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
// End mosek.fusion.Domain.unbounded

void mosek::fusion::p_Domain::destroy()
{
}
void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }
// } class Domain
// class ExprParameter { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3537:4-3554:5
mosek::fusion::ExprParameter::ExprParameter(mosek::fusion::p_ExprParameter *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprParameter()" << this << std::endl; */ }
mosek::fusion::ExprParameter::~ExprParameter() {  /* std::cout << "~ExprParameter()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprParameter::p_ExprParameter
  (::mosek::fusion::ExprParameter * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprParameter.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3541:6-3544:7
mosek::fusion::ExprParameter::t mosek::fusion::p_ExprParameter::_new_ExprParameter
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3550_p)
{ return new mosek::fusion::ExprParameter(_3550_p); }
mosek::fusion::ExprParameter::ExprParameter
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3550_p) : 
   ExprParameter(new mosek::fusion::p_ExprParameter(this))
{ mosek::fusion::p_ExprParameter::_get_impl(this)->_initialize(_3550_p); }
void mosek::fusion::p_ExprParameter::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3550_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3550_p->__mosek_2fusion_2Expression__getModel(),_3550_p->getShape());
    mosek::fusion::p_ExprParameter::_get_impl(::mosek::fusion::ExprParameter::t(_pubthis))->p = _3550_p;
  }
}
// mosek.fusion.ExprParameter.ctor

// Begin mosek.fusion.ExprParameter.eval
// Method mosek.fusion.ExprParameter.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3551:6-3553:7
void mosek::fusion::ExprParameter :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3551_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3552_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3553_xs) { mosek::fusion::p_ExprParameter::_get_impl(this)->eval(_3551_rs,_3552_ws,_3553_xs); }
void mosek::fusion::p_ExprParameter::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3551_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3552_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3553_xs)
{
  p->eval(_3551_rs,_3552_ws,_3553_xs);
}
// End mosek.fusion.ExprParameter.eval

// Begin mosek.fusion.ExprParameter.slice
// Method mosek.fusion.ExprParameter.slice @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3549:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3554_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3555_stop) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3554_start,_3555_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3554_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3555_stop) { return __mosek_2fusion_2ExprParameter__slice(_3554_start,_3555_stop); }
/* override: mosek.fusion.BaseExpression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3554_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3555_stop) { return __mosek_2fusion_2ExprParameter__slice(_3554_start,_3555_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3554_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3555_stop)
{
  _checked_ptr_1<int32_t> _ptr__3554_start(_3554_start ? _3554_start->raw() : nullptr, _3554_start ? _3554_start->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3555_stop(_3555_stop ? _3555_stop->raw() : nullptr, _3555_stop ? _3555_stop->size(0) : 0);
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3554_start,_3555_stop))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ExprParameter.slice

// Begin mosek.fusion.ExprParameter.slice
// Method mosek.fusion.ExprParameter.slice @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3548:6-112
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(int32_t _3556_start,int32_t _3557_stop) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3556_start,_3557_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(int32_t _3556_start,int32_t _3557_stop) { return __mosek_2fusion_2ExprParameter__slice(_3556_start,_3557_stop); }
/* override: mosek.fusion.BaseExpression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(int32_t _3556_start,int32_t _3557_stop) { return __mosek_2fusion_2ExprParameter__slice(_3556_start,_3557_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(int32_t _3556_start,int32_t _3557_stop)
{
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3556_start,_3557_stop))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ExprParameter.slice

// Begin mosek.fusion.ExprParameter.toString
// Method mosek.fusion.ExprParameter.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3546:6-128
std::string mosek::fusion::ExprParameter :: toString() { return mosek::fusion::p_ExprParameter::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprParameter::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprParameter("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprParameter.toString

void mosek::fusion::p_ExprParameter::destroy()
{
  p.reset();
}
void mosek::fusion::ExprParameter::destroy() { mosek::fusion::p_ExprParameter::_get_impl(this)->destroy(); }
// } class ExprParameter
// class Param { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3411:4-3534:5
mosek::fusion::Param::Param(mosek::fusion::p_Param *_impl) : _impl(_impl) { /*std::cout << "Param() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Param::~Param() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Param::p_Param
  (::mosek::fusion::Param * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Param.repeat
// Method mosek.fusion.Param.repeat @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3533:6-122
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::repeat
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3558_p,
    int32_t _3559_n,
    int32_t _3560_dim) { return mosek::fusion::p_Param::repeat(_3558_p,_3559_n,_3560_dim); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::repeat(monty::rc_ptr< ::mosek::fusion::Parameter > _3558_p,int32_t _3559_n,int32_t _3560_dim)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10902_;
  for (int32_t _3561_i = (int)0, _10903_ = _3559_n; _3561_i < _10903_ ; ++_3561_i)
  {
    _10902_.push_back(_3558_p);
  }
  auto _10904_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10902_.size()),_10902_.begin(),_10902_.end()));
  return ::mosek::fusion::p_Param::stack(_3560_dim,_10904_);
}
// End mosek.fusion.Param.repeat

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3532:6-136
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3562_dim,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3563_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3564_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3565_p3) { return mosek::fusion::p_Param::stack(_3562_dim,_3563_p1,_3564_p2,_3565_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3562_dim,monty::rc_ptr< ::mosek::fusion::Parameter > _3563_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3564_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3565_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3563_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3564_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3565_p3.get())}),_3562_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3531:6-119
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3566_dim,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3567_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3568_p2) { return mosek::fusion::p_Param::stack(_3566_dim,_3567_p1,_3568_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3566_dim,monty::rc_ptr< ::mosek::fusion::Parameter > _3567_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3568_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3567_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3568_p2.get())}),_3566_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3530:6-95
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3569_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3570_p) { return mosek::fusion::p_Param::stack(_3569_dim,_3570_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3569_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3570_p)
{
  return ::mosek::fusion::p_Param::dstack(_3570_p,_3569_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3529:6-119
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3571_p) { return mosek::fusion::p_Param::stack(_3571_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3571_p)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10905_;
  for (int32_t _3572_i = (int)0, _10906_ = (int)((_3571_p)->size(0)); _3572_i < _10906_ ; ++_3572_i)
  {
    _10905_.push_back(::mosek::fusion::p_Param::hstack(((*_3571_p)(_3572_i))));
  }
  auto _10907_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10905_.size()),_10905_.begin(),_10905_.end()));
  return ::mosek::fusion::p_Param::vstack(_10907_);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3528:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3573_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3574_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3575_p3) { return mosek::fusion::p_Param::hstack(_3573_p1,_3574_p2,_3575_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3573_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3574_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3575_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3573_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3574_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3575_p3.get())}),(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3527:6-107
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3576_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3577_p2) { return mosek::fusion::p_Param::hstack(_3576_p1,_3577_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3576_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3577_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3576_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3577_p2.get())}),(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3526:6-83
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3578_p) { return mosek::fusion::p_Param::hstack(_3578_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3578_p)
{
  return ::mosek::fusion::p_Param::dstack(_3578_p,(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3525:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3579_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3580_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3581_p3) { return mosek::fusion::p_Param::vstack(_3579_p1,_3580_p2,_3581_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3579_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3580_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3581_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3579_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3580_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3581_p3.get())}),(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3524:6-107
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3582_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3583_p2) { return mosek::fusion::p_Param::vstack(_3582_p1,_3583_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3582_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3583_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3582_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3583_p2.get())}),(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3523:6-83
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3584_p) { return mosek::fusion::p_Param::vstack(_3584_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3584_p)
{
  return ::mosek::fusion::p_Param::dstack(_3584_p,(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.dstack
// Method mosek.fusion.Param.dstack @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3412:6-3521:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3585_p,int32_t _3586_dim)
{
  if ((_3586_dim < (int)0))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3587_dimsizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_3585_p)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__3587_dimsizes(_3587_dimsizes ? _3587_dimsizes->raw() : nullptr,_3587_dimsizes ? _3587_dimsizes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3588_itemsizes = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_3585_p)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__3588_itemsizes(_3588_itemsizes ? _3588_itemsizes->raw() : nullptr,_3588_itemsizes ? _3588_itemsizes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3589_rshape;
  _checked_ptr_1<int32_t> _ptr__3589_rshape(_3589_rshape ? _3589_rshape->raw() : nullptr,_3589_rshape ? _3589_rshape->size(0) : 0);
  int32_t _3590_rnd = ((*_3585_p)((int)0))->getND();
  int32_t _10908_ = (int)1;
  int32_t _10909_ = (int)((_3585_p)->size(0));
  for (int32_t _3591_i = _10908_; _3591_i < _10909_; ++_3591_i)
  {
    {
      if ((_3590_rnd < ((*_3585_p)(_3591_i))->getND()))
      {
        {
          _3590_rnd = ((*_3585_p)(_3591_i))->getND();
        }
      }
      {}
    }
  }
  if ((_3586_dim < _3590_rnd))
  {
    {
      int32_t _3592_i = (int)0;
      while ( ((_3592_i < (int)((_3585_p)->size(0))) && (_3590_rnd != ((*_3585_p)(_3592_i))->getND())) )
      {
        {
          ++ _3592_i;
        }
      }
      _3589_rshape = ((*_3585_p)(_3592_i))->getShape();
      _ptr__3589_rshape.update(_3589_rshape ? _3589_rshape->raw() : nullptr, _3589_rshape ? _3589_rshape->size(0) : 0);
      {
        int32_t _3593_i = (int)0;
        while ( ((_3593_i < (int)((_3585_p)->size(0))) && (_3590_rnd != ((*_3585_p)(_3593_i))->getND())) )
        {
          {
            ++ _3593_i;
          }
        }
        _3589_rshape = ((*_3585_p)(_3593_i))->getShape();
        _ptr__3589_rshape.update(_3589_rshape ? _3589_rshape->raw() : nullptr, _3589_rshape ? _3589_rshape->size(0) : 0);
      }
    }
  }
  else
  {
    {
      std::vector<int32_t> _10910_;
      for (int32_t _3594_i = (int)0, _10911_ = safe_add( _3586_dim,(int)1 ); _3594_i < _10911_ ; ++_3594_i)
      {
        _10910_.push_back((int)1);
      }
      auto _10912_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10910_.size()),_10910_.begin(),_10910_.end()));
      _3589_rshape = _10912_;
      _ptr__3589_rshape.update(_3589_rshape ? _3589_rshape->raw() : nullptr, _3589_rshape ? _3589_rshape->size(0) : 0);
      {
        int32_t _3595_i = (int)0;
        while ( ((_3595_i < (int)((_3585_p)->size(0))) && (_3590_rnd != ((*_3585_p)(_3595_i))->getND())) )
        {
          {
            ++ _3595_i;
          }
        }
        int32_t _3596_ndi = ((*_3585_p)(_3595_i))->getND();
        std::shared_ptr< monty::ndarray< int32_t,1 > > _3597_shapei = ((*_3585_p)(_3595_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__3597_shapei(_3597_shapei ? _3597_shapei->raw() : nullptr,_3597_shapei ? _3597_shapei->size(0) : 0);
        int32_t _10913_ = (int)0;
        int32_t _10914_ = _3596_ndi;
        for (int32_t _3598_j = _10913_; _3598_j < _10914_; ++_3598_j)
        {
          {
            _ptr__3589_rshape[_3598_j] = _ptr__3597_shapei[_3598_j];
          }
        }
      }
    }
  }
  _3590_rnd = (int)((_3589_rshape)->size(0));
  int32_t _3599_dimsize = (int)0;
  {
    bool _3600_dimerr = false;
    int32_t _10915_ = (int)0;
    int32_t _10916_ = (int)((_3585_p)->size(0));
    for (int32_t _3601_i = _10915_; _3601_i < _10916_; ++_3601_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _3602_shapei = ((*_3585_p)(_3601_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__3602_shapei(_3602_shapei ? _3602_shapei->raw() : nullptr,_3602_shapei ? _3602_shapei->size(0) : 0);
        _ptr__3588_itemsizes[_3601_i] = ::mosek::fusion::p_Set::size(_3602_shapei);
        int32_t _10917_ = (int)0;
        int32_t _10918_ = (int)((_3602_shapei)->size(0));
        for (int32_t _3603_j = _10917_; _3603_j < _10918_; ++_3603_j)
        {
          {
            _3600_dimerr = (_3600_dimerr && ((_3603_j == _3586_dim) || (_ptr__3602_shapei[_3603_j] == _ptr__3589_rshape[_3603_j])));
          }
        }
        if ((_3586_dim < (int)((_3602_shapei)->size(0))))
        {
          {
            _ptr__3587_dimsizes[_3601_i] = _ptr__3602_shapei[_3586_dim];
            _3599_dimsize += _ptr__3602_shapei[_3586_dim];
            int32_t _10919_ = (int)((_3602_shapei)->size(0));
            int32_t _10920_ = _3590_rnd;
            for (int32_t _3604_j = _10919_; _3604_j < _10920_; ++_3604_j)
            {
              {
                _3600_dimerr = (_3600_dimerr && ((_3604_j == _3586_dim) || (_ptr__3589_rshape[_3604_j] == (int)1)));
              }
            }
          }
        }
        else
        {
          {
            _3599_dimsize += (int)1;
            _ptr__3587_dimsizes[_3601_i] = (int)1;
          }
        }
      }
    }
    if (_3600_dimerr)
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for stacking"));
      }
    }
    {}
  }
  _ptr__3589_rshape[_3586_dim] = _3599_dimsize;
  std::vector<int32_t> _10921_;
  for (int32_t _3606_i = (int)0, _10922_ = (int)((_3585_p)->size(0)); _3606_i < _10922_ ; ++_3606_i)
  {
    _10921_.push_back(((*_3585_p)(_3606_i))->getNumNonzero());
  }
  auto _10923_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10921_.size()),_10921_.begin(),_10921_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3605_nnzs = _10923_;
  _checked_ptr_1<int32_t> _ptr__3605_nnzs(_3605_nnzs ? _3605_nnzs->raw() : nullptr,_3605_nnzs ? _3605_nnzs->size(0) : 0);
  int32_t _3607_rnnz = (int)0;
  int32_t _10924_ = (int)0;
  int32_t _10925_ = (int)((_3605_nnzs)->size(0));
  for (int32_t _3608_i = _10924_; _3608_i < _10925_; ++_3608_i)
  {
    {
      _3607_rnnz += _ptr__3605_nnzs[_3608_i];
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3609_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3607_rnnz)));
  _checked_ptr_1<int64_t> _ptr__3609_sp(_3609_sp ? _3609_sp->raw() : nullptr,_3609_sp ? _3609_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3610_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3607_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3610_idx(_3610_idx ? _3610_idx->raw() : nullptr,_3610_idx ? _3610_idx->size(0) : 0);
  int64_t _3611_dim0 = (int)1;
  int32_t _10926_ = (int)0;
  int32_t _10927_ = _3586_dim;
  for (int32_t _3612_i = _10926_; _3612_i < _10927_; ++_3612_i)
  {
    {
      _3611_dim0 *= _ptr__3589_rshape[_3612_i];
    }
  }
  int64_t _3613_dim1 = _3599_dimsize;
  int64_t _3614_dim2 = (int)1;
  int32_t _10928_ = safe_add( _3586_dim,(int)1 );
  int32_t _10929_ = _3590_rnd;
  for (int32_t _3615_i = _10928_; _3615_i < _10929_; ++_3615_i)
  {
    {
      _3614_dim2 *= _ptr__3589_rshape[_3615_i];
    }
  }
  {
    int32_t _3616_ofs = (int)0;
    int64_t _3617_ofsdim = (int)0;
    int32_t _10930_ = (int)0;
    int32_t _10931_ = (int)((_3585_p)->size(0));
    for (int32_t _3618_i = _10930_; _3618_i < _10931_; ++_3618_i)
    {
      {
        int32_t _3619_ni = ((*_3585_p)(_3618_i))->getNumNonzero();
        ((*_3585_p)(_3618_i))->getSp(_3609_sp,_3616_ofs);
        ((*_3585_p)(_3618_i))->getAllIndexes(_3610_idx,_3616_ofs);
        if ((_3586_dim == (int)0))
        {
          {
            int32_t _10932_ = _3616_ofs;
            int32_t _10933_ = safe_add( _3616_ofs,_3619_ni );
            for (int32_t _3620_j = _10932_; _3620_j < _10933_; ++_3620_j)
            {
              {
                _ptr__3609_sp[_3620_j] += _3617_ofsdim;
              }
            }
            _3617_ofsdim += _ptr__3588_itemsizes[_3618_i];
          }
        }
        else
        {
          {
            int32_t _10934_ = _3616_ofs;
            int32_t _10935_ = safe_add( _3616_ofs,_3619_ni );
            for (int32_t _3621_j = _10934_; _3621_j < _10935_; ++_3621_j)
            {
              {
                int64_t _3622_i0 = (_ptr__3609_sp[_3621_j] / safe_mul( _ptr__3587_dimsizes[_3618_i],_3614_dim2 ));
                int64_t _3623_i1 = ((_ptr__3609_sp[_3621_j] / _3614_dim2) % _ptr__3587_dimsizes[_3618_i]);
                int64_t _3624_i2 = (_ptr__3609_sp[_3621_j] % _3614_dim2);
                _ptr__3609_sp[_3621_j] = safe_add( safe_add( safe_mul( _3622_i0,safe_mul( _3599_dimsize,_3614_dim2 ) ),safe_mul( safe_add( _3623_i1,_3617_ofsdim ),_3614_dim2 ) ),_3624_i2 );
              }
            }
            _3617_ofsdim += _ptr__3587_dimsizes[_3618_i];
          }
        }
        _3616_ofs += _3619_ni;
      }
    }
  }
  int32_t _3625_maxdim = _ptr__3589_rshape[(int)0];
  int32_t _10936_ = (int)1;
  int32_t _10937_ = _3590_rnd;
  for (int32_t _3626_i = _10936_; _3626_i < _10937_; ++_3626_i)
  {
    {
      if ((_3625_maxdim < _ptr__3589_rshape[_3626_i]))
      {
        {
          _3625_maxdim = _ptr__3589_rshape[_3626_i];
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3627_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _3625_maxdim,(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__3627_ptr(_3627_ptr ? _3627_ptr->raw() : nullptr,_3627_ptr ? _3627_ptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3628_perm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3607_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3628_perm(_3628_perm ? _3628_perm->raw() : nullptr,_3628_perm ? _3628_perm->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3629_perm2 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3607_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3629_perm2(_3629_perm2 ? _3629_perm2->raw() : nullptr,_3629_perm2 ? _3629_perm2->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3630_rstrides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3590_rnd)));
  _checked_ptr_1<int64_t> _ptr__3630_rstrides(_3630_rstrides ? _3630_rstrides->raw() : nullptr,_3630_rstrides ? _3630_rstrides->size(0) : 0);
  _ptr__3630_rstrides[(_3590_rnd - (int)1)] = (int)1;
  int32_t _10938_ = (int)1;
  int32_t _10939_ = _3590_rnd;
  for (int32_t _3631_i = _10938_; _3631_i < _10939_; ++_3631_i)
  {
    {
      _ptr__3630_rstrides[((_3590_rnd - _3631_i) - (int)1)] = safe_mul( _ptr__3630_rstrides[(_3590_rnd - _3631_i)],_ptr__3589_rshape[(_3590_rnd - _3631_i)] );
    }
  }
  int32_t _10940_ = (int)0;
  int32_t _10941_ = _3607_rnnz;
  for (int32_t _3632_i = _10940_; _3632_i < _10941_; ++_3632_i)
  {
    {
      _ptr__3628_perm[_3632_i] = _3632_i;
    }
  }
  int32_t _10942_ = (int)0;
  int32_t _10943_ = _3590_rnd;
  for (int32_t _3633_d_ = _10942_; _3633_d_ < _10943_; ++_3633_d_)
  {
    {
      int32_t _3634_d = ((_3590_rnd - _3633_d_) - (int)1);
      int32_t _10944_ = (int)0;
      int32_t _10945_ = safe_add( _3625_maxdim,(int)1 );
      for (int32_t _3635_i = _10944_; _3635_i < _10945_; ++_3635_i)
      {
        {
          _ptr__3627_ptr[_3635_i] = (int)0;
        }
      }
      int32_t _10946_ = (int)0;
      int32_t _10947_ = _3607_rnnz;
      for (int32_t _3636_i = _10946_; _3636_i < _10947_; ++_3636_i)
      {
        {
          ++ _ptr__3627_ptr[safe_add( (int)1,((_ptr__3609_sp[_3636_i] / _ptr__3630_rstrides[_3634_d]) % _ptr__3589_rshape[_3634_d]) )];
        }
      }
      int32_t _10948_ = (int)0;
      int32_t _10949_ = _3625_maxdim;
      for (int32_t _3637_i = _10948_; _3637_i < _10949_; ++_3637_i)
      {
        {
          _ptr__3627_ptr[safe_add( _3637_i,(int)1 )] += _ptr__3627_ptr[_3637_i];
        }
      }
      int32_t _10950_ = (int)0;
      int32_t _10951_ = _3607_rnnz;
      for (int32_t _3638_i = _10950_; _3638_i < _10951_; ++_3638_i)
      {
        {
          int64_t _3639_idx = ((_ptr__3609_sp[_ptr__3628_perm[_3638_i]] / _ptr__3630_rstrides[_3634_d]) % _ptr__3589_rshape[_3634_d]);
          _ptr__3629_perm2[_ptr__3627_ptr[_3639_idx]] = _ptr__3628_perm[_3638_i];
          ++ _ptr__3627_ptr[_3639_idx];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3640_tmp = _3629_perm2;
      _checked_ptr_1<int32_t> _ptr__3640_tmp(_3640_tmp ? _3640_tmp->raw() : nullptr,_3640_tmp ? _3640_tmp->size(0) : 0);
      _3629_perm2 = _3628_perm;
      _ptr__3629_perm2.update(_3629_perm2 ? _3629_perm2->raw() : nullptr, _3629_perm2 ? _3629_perm2->size(0) : 0);
      _3628_perm = _3640_tmp;
      _ptr__3628_perm.update(_3628_perm ? _3628_perm->raw() : nullptr, _3628_perm ? _3628_perm->size(0) : 0);
    }
  }
  std::vector<int64_t> _10952_;
  for (int32_t _3642_i = (int)0, _10953_ = _3607_rnnz; _3642_i < _10953_ ; ++_3642_i)
  {
    _10952_.push_back(_ptr__3609_sp[_ptr__3628_perm[_3642_i]]);
  }
  auto _10954_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10952_.size()),_10952_.begin(),_10952_.end()));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3641_rsp = _10954_;
  _checked_ptr_1<int64_t> _ptr__3641_rsp(_3641_rsp ? _3641_rsp->raw() : nullptr,_3641_rsp ? _3641_rsp->size(0) : 0);
  std::vector<int32_t> _10955_;
  for (int32_t _3644_i = (int)0, _10956_ = _3607_rnnz; _3644_i < _10956_ ; ++_3644_i)
  {
    _10955_.push_back(_ptr__3610_idx[_ptr__3628_perm[_3644_i]]);
  }
  auto _10957_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10955_.size()),_10955_.begin(),_10955_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3643_ridx = _10957_;
  _checked_ptr_1<int32_t> _ptr__3643_ridx(_3643_ridx ? _3643_ridx->raw() : nullptr,_3643_ridx ? _3643_ridx->size(0) : 0);
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(((*_3585_p)((int)0))->__mosek_2fusion_2Expression__getModel(),_3589_rshape,_3641_rsp,_3643_ridx)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.Param.dstack

void mosek::fusion::p_Param::destroy()
{
}
void mosek::fusion::Param::destroy() { mosek::fusion::p_Param::_get_impl(this)->destroy(); }
// } class Param
// class ExprMulParamScalarExpr { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3179:4-3324:5
mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr(mosek::fusion::p_ExprMulParamScalarExpr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalarExpr()" << this << std::endl; */ }
mosek::fusion::ExprMulParamScalarExpr::~ExprMulParamScalarExpr() {  /* std::cout << "~ExprMulParamScalarExpr()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamScalarExpr::p_ExprMulParamScalarExpr
  (::mosek::fusion::ExprMulParamScalarExpr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamScalarExpr.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3183:6-3189:7
mosek::fusion::ExprMulParamScalarExpr::t mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3645_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3646_e)
{ return new mosek::fusion::ExprMulParamScalarExpr(_3645_p,_3646_e); }
mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3645_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3646_e) : 
   ExprMulParamScalarExpr(new mosek::fusion::p_ExprMulParamScalarExpr(this))
{ mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->_initialize(_3645_p,_3646_e); }
void mosek::fusion::p_ExprMulParamScalarExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3645_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3646_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_3645_p->__mosek_2fusion_2Expression__getModel(),_3646_e),_3645_p->getShape());
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->p = _3645_p;
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->e = _3646_e;
    if ((_3646_e->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamScalarExpr.ctor

// Begin mosek.fusion.ExprMulParamScalarExpr.eval
// Method mosek.fusion.ExprMulParamScalarExpr.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3193:6-3323:7
void mosek::fusion::ExprMulParamScalarExpr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3647_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3648_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3649_xs) { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->eval(_3647_rs,_3648_ws,_3649_xs); }
void mosek::fusion::p_ExprMulParamScalarExpr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3647_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3648_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3649_xs)
{
  e->eval(_3648_ws,_3647_rs,_3649_xs);
  _3648_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3650_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3650_wi32(_3650_wi32 ? _3650_wi32->raw() : nullptr,_3650_wi32 ? _3650_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3651_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3651_wi64(_3651_wi64 ? _3651_wi64->raw() : nullptr,_3651_wi64 ? _3651_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3652_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->f64;
  _checked_ptr_1<double> _ptr__3652_wf64(_3652_wf64 ? _3652_wf64->raw() : nullptr,_3652_wf64 ? _3652_wf64->size(0) : 0);
  int32_t _3653_nd = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->nd;
  if ((_3653_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _3654_nelem = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->nelem;
  int32_t _3655_nnz = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->nnz;
  bool _3656_hassp = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->hassp;
  int32_t _3657_ptr = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->ptr_base;
  int32_t _3658_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->ncodeatom;
  int32_t _3659_sp = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->sp_base;
  int32_t _3660_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->nidxs_base;
  int32_t _3661_cof = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->cof_base;
  int32_t _3662_cconst = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->cconst_base;
  int32_t _3663_ptrcode = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->codeptr_base;
  int32_t _3664_code = mosek::fusion::p_WorkStack::_get_impl(_3648_ws)->code_base;
  int32_t _3665_rnd = p->getND();
  int32_t _3666_rnelem = p->getNumNonzero();
  int32_t _3667_rnnz = safe_mul( _3655_nnz,p->getNumNonzero() );
  bool _3668_rhassp = (p->getNumNonzero() < p->getSize());
  int32_t _10958_;
  bool _10959_ = (_3658_ncodeatom > (int)0);
  if (_10959_)
  {
    _10958_ = safe_add( safe_mul( _3658_ncodeatom,_3666_rnelem ),safe_mul( _3667_rnnz,(int)4 ) );
  }
  else
  {
    _10958_ = safe_mul( _3667_rnnz,(int)3 );
  }
  int32_t _3669_rncodeatom = _10958_;
  int32_t _3670_pidxs = _3649_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3671_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3649_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3671_xi32(_3671_xi32 ? _3671_xi32->raw() : nullptr,_3671_xi32 ? _3671_xi32->size(0) : 0);
  p->getAllIndexes(_3671_xi32,_3670_pidxs);
  _3647_rs->alloc_expr(_3665_rnd,_3666_rnelem,_3667_rnnz,_3668_rhassp,_3669_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3672_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__3672_ri64(_3672_ri64 ? _3672_ri64->raw() : nullptr,_3672_ri64 ? _3672_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3673_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->f64;
  _checked_ptr_1<double> _ptr__3673_rf64(_3673_rf64 ? _3673_rf64->raw() : nullptr,_3673_rf64 ? _3673_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3674_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__3674_ri32(_3674_ri32 ? _3674_ri32->raw() : nullptr,_3674_ri32 ? _3674_ri32->size(0) : 0);
  int32_t _3675_rptr = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->ptr_base;
  int32_t _3676_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->nidxs_base;
  int32_t _3677_rsp = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->sp_base;
  int32_t _3678_rcof = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->cof_base;
  bool _3679_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->hassp;
  int32_t _3680_rshape = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->shape_base;
  int32_t _3681_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->codeptr_base;
  int32_t _3682_rcode = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->code_base;
  int32_t _3683_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3647_rs)->cconst_base;
  {
    int32_t _10960_ = (int)0;
    int32_t _10961_ = _3667_rnnz;
    for (int32_t _3684_i = _10960_; _3684_i < _10961_; ++_3684_i)
    {
      {
        _ptr__3673_rf64[safe_add( _3678_rcof,_3684_i )] = 0.0;
      }
    }
    int32_t _10962_ = (int)0;
    int32_t _10963_ = safe_add( _3666_rnelem,(int)1 );
    for (int32_t _3685_i = _10962_; _3685_i < _10963_; ++_3685_i)
    {
      {
        _ptr__3674_ri32[safe_add( _3675_rptr,_3685_i )] = safe_mul( _3685_i,_3655_nnz );
      }
    }
    int32_t _10964_ = (int)0;
    int32_t _10965_ = _3665_rnd;
    for (int32_t _3686_i = _10964_; _3686_i < _10965_; ++_3686_i)
    {
      {
        _ptr__3674_ri32[safe_add( _3680_rshape,_3686_i )] = p->getDim(_3686_i);
      }
    }
    if (_3679_rhassp)
    {
      {
        p->getSp(_3672_ri64,_3677_rsp);
      }
    }
    {}
    int32_t _10966_ = (int)0;
    int32_t _10967_ = _3667_rnnz;
    for (int32_t _3687_i = _10966_; _3687_i < _10967_; ++_3687_i)
    {
      {
        _ptr__3672_ri64[safe_add( _3676_rnidxs,_3687_i )] = (-(int)999);
      }
    }
    {
      int32_t _3688_k = (int)0;
      int32_t _10968_ = (int)0;
      int32_t _10969_ = _3666_rnelem;
      for (int32_t _3689_i = _10968_; _3689_i < _10969_; ++_3689_i)
      {
        {
          int32_t _10970_ = (int)0;
          int32_t _10971_ = _3655_nnz;
          for (int32_t _3690_j = _10970_; _3690_j < _10971_; ++_3690_j)
          {
            {
              _ptr__3672_ri64[safe_add( _3676_rnidxs,_3688_k )] = _ptr__3651_wi64[safe_add( _3660_nidxs,_3690_j )];
              ++ _3688_k;
            }
          }
        }
      }
    }
    if ((_3669_rncodeatom > (int)0))
    {
      {
        _ptr__3674_ri32[_3681_rcodeptr] = (int)0;
      }
    }
    {}
    {
      if ((_3658_ncodeatom == (int)0))
      {
        {
          int32_t _3691_nzi = (int)0;
          int32_t _3692_codei = (int)0;
          int32_t _10972_ = (int)0;
          int32_t _10973_ = _3666_rnelem;
          for (int32_t _3693_i = _10972_; _3693_i < _10973_; ++_3693_i)
          {
            {
              int32_t _10974_ = (int)0;
              int32_t _10975_ = _3655_nnz;
              for (int32_t _3694_k = _10974_; _3694_k < _10975_; ++_3694_k)
              {
                {
                  _ptr__3674_ri32[safe_add( _3682_rcode,_3692_codei )] = 2;
                  _ptr__3673_rf64[safe_add( _3683_rcconst,_3692_codei )] = _ptr__3652_wf64[safe_add( _3661_cof,_3694_k )];
                  ++ _3692_codei;
                  _ptr__3674_ri32[safe_add( _3682_rcode,_3692_codei )] = 1;
                  _ptr__3673_rf64[safe_add( _3683_rcconst,_3692_codei )] = _ptr__3671_xi32[safe_add( _3670_pidxs,_3693_i )];
                  ++ _3692_codei;
                  _ptr__3674_ri32[safe_add( _3682_rcode,_3692_codei )] = 5;
                  ++ _3692_codei;
                  _ptr__3674_ri32[safe_add( safe_add( _3681_rcodeptr,_3691_nzi ),(int)1 )] = _3692_codei;
                  ++ _3691_nzi;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _3695_codei = (int)0;
          int32_t _3696_nzi = (int)0;
          int32_t _10976_ = (int)0;
          int32_t _10977_ = _3666_rnelem;
          for (int32_t _3697_i = _10976_; _3697_i < _10977_; ++_3697_i)
          {
            {
              int32_t _10978_ = (int)0;
              int32_t _10979_ = _3655_nnz;
              for (int32_t _3698_k = _10978_; _3698_k < _10979_; ++_3698_k)
              {
                {
                  _ptr__3674_ri32[safe_add( _3682_rcode,_3695_codei )] = 2;
                  _ptr__3673_rf64[safe_add( _3683_rcconst,_3695_codei )] = _ptr__3652_wf64[safe_add( _3661_cof,_3698_k )];
                  ++ _3695_codei;
                  int32_t _10980_ = _ptr__3650_wi32[safe_add( _3663_ptrcode,_3698_k )];
                  int32_t _10981_ = _ptr__3650_wi32[safe_add( safe_add( _3663_ptrcode,_3698_k ),(int)1 )];
                  for (int32_t _3699_l = _10980_; _3699_l < _10981_; ++_3699_l)
                  {
                    {
                      _ptr__3674_ri32[safe_add( _3682_rcode,_3695_codei )] = _ptr__3650_wi32[safe_add( _3664_code,_3699_l )];
                      _ptr__3673_rf64[safe_add( _3683_rcconst,_3695_codei )] = _ptr__3652_wf64[safe_add( _3662_cconst,_3699_l )];
                      ++ _3695_codei;
                    }
                  }
                  _ptr__3674_ri32[safe_add( _3682_rcode,_3695_codei )] = 3;
                  ++ _3695_codei;
                  _ptr__3674_ri32[safe_add( _3682_rcode,_3695_codei )] = 1;
                  _ptr__3673_rf64[safe_add( _3683_rcconst,_3695_codei )] = _ptr__3671_xi32[safe_add( _3670_pidxs,_3697_i )];
                  ++ _3695_codei;
                  _ptr__3674_ri32[safe_add( _3682_rcode,_3695_codei )] = 5;
                  ++ _3695_codei;
                  _ptr__3674_ri32[safe_add( safe_add( _3681_rcodeptr,_3696_nzi ),(int)1 )] = _3695_codei;
                  ++ _3696_nzi;
                }
              }
            }
          }
        }
      }
    }
  }
  _3649_xs->clear();
}
// End mosek.fusion.ExprMulParamScalarExpr.eval

// Begin mosek.fusion.ExprMulParamScalarExpr.toString
// Method mosek.fusion.ExprMulParamScalarExpr.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3191:6-160
std::string mosek::fusion::ExprMulParamScalarExpr :: toString() { return mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamScalarExpr::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalarExpr("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamScalarExpr.toString

void mosek::fusion::p_ExprMulParamScalarExpr::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamScalarExpr::destroy() { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->destroy(); }
// } class ExprMulParamScalarExpr
// class ExprMulParamScalar { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3071:4-3176:5
mosek::fusion::ExprMulParamScalar::ExprMulParamScalar(mosek::fusion::p_ExprMulParamScalar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalar()" << this << std::endl; */ }
mosek::fusion::ExprMulParamScalar::~ExprMulParamScalar() {  /* std::cout << "~ExprMulParamScalar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamScalar::p_ExprMulParamScalar
  (::mosek::fusion::ExprMulParamScalar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamScalar.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3075:6-3082:7
mosek::fusion::ExprMulParamScalar::t mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3700_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3701_e)
{ return new mosek::fusion::ExprMulParamScalar(_3700_p,_3701_e); }
mosek::fusion::ExprMulParamScalar::ExprMulParamScalar
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3700_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3701_e) : 
   ExprMulParamScalar(new mosek::fusion::p_ExprMulParamScalar(this))
{ mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->_initialize(_3700_p,_3701_e); }
void mosek::fusion::p_ExprMulParamScalar::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3700_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3701_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_3700_p->__mosek_2fusion_2Expression__getModel(),_3701_e),_3701_e->getShape());
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->p = _3700_p;
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->e = _3701_e;
    if ((_3700_p->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamScalar.ctor

// Begin mosek.fusion.ExprMulParamScalar.eval
// Method mosek.fusion.ExprMulParamScalar.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3086:6-3175:7
void mosek::fusion::ExprMulParamScalar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3702_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3703_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3704_xs) { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->eval(_3702_rs,_3703_ws,_3704_xs); }
void mosek::fusion::p_ExprMulParamScalar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3702_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3703_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3704_xs)
{
  e->eval(_3703_ws,_3702_rs,_3704_xs);
  _3703_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3705_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3705_wi32(_3705_wi32 ? _3705_wi32->raw() : nullptr,_3705_wi32 ? _3705_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3706_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3706_wi64(_3706_wi64 ? _3706_wi64->raw() : nullptr,_3706_wi64 ? _3706_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3707_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->f64;
  _checked_ptr_1<double> _ptr__3707_wf64(_3707_wf64 ? _3707_wf64->raw() : nullptr,_3707_wf64 ? _3707_wf64->size(0) : 0);
  int32_t _3708_nd = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->nd;
  int32_t _3709_nelem = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->nelem;
  int32_t _3710_nnz = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->nnz;
  bool _3711_hassp = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->hassp;
  int32_t _3712_ptr = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->ptr_base;
  int32_t _3713_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->ncodeatom;
  int32_t _3714_shape = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->shape_base;
  int32_t _3715_sp = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->sp_base;
  int32_t _3716_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->nidxs_base;
  int32_t _3717_cof = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->cof_base;
  int32_t _3718_cconst = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->cconst_base;
  int32_t _3719_ptrcode = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->codeptr_base;
  int32_t _3720_code = mosek::fusion::p_WorkStack::_get_impl(_3703_ws)->code_base;
  int32_t _3721_rnd = _3708_nd;
  int32_t _3722_rnelem = _3709_nelem;
  int32_t _3723_rnnz = _3710_nnz;
  bool _3724_rhassp = _3711_hassp;
  int32_t _10982_;
  bool _10983_ = (_3713_ncodeatom == (int)0);
  if (_10983_)
  {
    _10982_ = safe_mul( _3710_nnz,(int)3 );
  }
  else
  {
    _10982_ = safe_add( safe_mul( _3710_nnz,(int)4 ),_3713_ncodeatom );
  }
  int32_t _3725_rncodeatom = _10982_;
  _3702_rs->alloc_expr(_3721_rnd,_3722_rnelem,_3723_rnnz,_3724_rhassp,_3725_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3726_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__3726_ri64(_3726_ri64 ? _3726_ri64->raw() : nullptr,_3726_ri64 ? _3726_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3727_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->f64;
  _checked_ptr_1<double> _ptr__3727_rf64(_3727_rf64 ? _3727_rf64->raw() : nullptr,_3727_rf64 ? _3727_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3728_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__3728_ri32(_3728_ri32 ? _3728_ri32->raw() : nullptr,_3728_ri32 ? _3728_ri32->size(0) : 0);
  int32_t _3729_rptr = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->ptr_base;
  int32_t _3730_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->nidxs_base;
  int32_t _3731_rsp = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->sp_base;
  int32_t _3732_rcof = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->cof_base;
  bool _3733_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->hassp;
  int32_t _3734_rshape = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->shape_base;
  int32_t _3735_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->codeptr_base;
  int32_t _3736_rcode = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->code_base;
  int32_t _3737_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3702_rs)->cconst_base;
  int32_t _3738_pidx0 = p->getIndex((int)0);
  {
    int32_t _10984_ = (int)0;
    int32_t _10985_ = _3723_rnnz;
    for (int32_t _3739_i = _10984_; _3739_i < _10985_; ++_3739_i)
    {
      {
        _ptr__3727_rf64[safe_add( _3732_rcof,_3739_i )] = 0.0;
      }
    }
    int32_t _10986_ = (int)0;
    int32_t _10987_ = safe_add( _3722_rnelem,(int)1 );
    for (int32_t _3740_i = _10986_; _3740_i < _10987_; ++_3740_i)
    {
      {
        _ptr__3728_ri32[safe_add( _3729_rptr,_3740_i )] = _ptr__3705_wi32[safe_add( _3712_ptr,_3740_i )];
      }
    }
    int32_t _10988_ = (int)0;
    int32_t _10989_ = _3721_rnd;
    for (int32_t _3741_i = _10988_; _3741_i < _10989_; ++_3741_i)
    {
      {
        _ptr__3728_ri32[safe_add( _3734_rshape,_3741_i )] = _ptr__3705_wi32[safe_add( _3714_shape,_3741_i )];
      }
    }
    int32_t _10990_ = (int)0;
    int32_t _10991_ = _3710_nnz;
    for (int32_t _3742_i = _10990_; _3742_i < _10991_; ++_3742_i)
    {
      {
        _ptr__3726_ri64[safe_add( _3730_rnidxs,_3742_i )] = _ptr__3706_wi64[safe_add( _3716_nidxs,_3742_i )];
      }
    }
    if (_3733_rhassp)
    {
      {
        int32_t _10992_ = (int)0;
        int32_t _10993_ = _3722_rnelem;
        for (int32_t _3743_i = _10992_; _3743_i < _10993_; ++_3743_i)
        {
          {
            _ptr__3726_ri64[safe_add( _3731_rsp,_3743_i )] = _ptr__3706_wi64[safe_add( _3715_sp,_3743_i )];
          }
        }
      }
    }
    {}
    int32_t _3744_codei = (int)0;
    if ((_3725_rncodeatom > (int)0))
    {
      {
        _ptr__3728_ri32[_3735_rcodeptr] = (int)0;
      }
    }
    {}
    int32_t _10994_ = (int)0;
    int32_t _10995_ = _3710_nnz;
    for (int32_t _3745_i = _10994_; _3745_i < _10995_; ++_3745_i)
    {
      {
        _ptr__3728_ri32[safe_add( _3736_rcode,_3744_codei )] = 2;
        _ptr__3727_rf64[safe_add( _3737_rcconst,_3744_codei )] = _ptr__3707_wf64[safe_add( _3717_cof,_3745_i )];
        ++ _3744_codei;
        if ((_3713_ncodeatom > (int)0))
        {
          {
            int32_t _10996_ = _ptr__3705_wi32[safe_add( _3719_ptrcode,_3745_i )];
            int32_t _10997_ = _ptr__3705_wi32[safe_add( safe_add( _3719_ptrcode,_3745_i ),(int)1 )];
            for (int32_t _3746_j = _10996_; _3746_j < _10997_; ++_3746_j)
            {
              {
                _ptr__3728_ri32[safe_add( _3736_rcode,_3744_codei )] = _ptr__3705_wi32[safe_add( _3720_code,_3746_j )];
                _ptr__3727_rf64[safe_add( _3737_rcconst,_3744_codei )] = _ptr__3707_wf64[safe_add( _3718_cconst,_3746_j )];
                ++ _3744_codei;
              }
            }
            _ptr__3728_ri32[safe_add( _3736_rcode,_3744_codei )] = 3;
            ++ _3744_codei;
          }
        }
        {}
        _ptr__3728_ri32[safe_add( _3736_rcode,_3744_codei )] = 1;
        _ptr__3727_rf64[safe_add( _3737_rcconst,_3744_codei )] = _3738_pidx0;
        ++ _3744_codei;
        _ptr__3728_ri32[safe_add( _3736_rcode,_3744_codei )] = 5;
        ++ _3744_codei;
        _ptr__3728_ri32[safe_add( safe_add( _3735_rcodeptr,_3745_i ),(int)1 )] = _3744_codei;
      }
    }
  }
  _3704_xs->clear();
}
// End mosek.fusion.ExprMulParamScalar.eval

// Begin mosek.fusion.ExprMulParamScalar.toString
// Method mosek.fusion.ExprMulParamScalar.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:3084:6-156
std::string mosek::fusion::ExprMulParamScalar :: toString() { return mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamScalar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalar("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamScalar.toString

void mosek::fusion::p_ExprMulParamScalar::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamScalar::destroy() { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->destroy(); }
// } class ExprMulParamScalar
// class ExprMulParamDiagLeft { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2621:4-3065:5
mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft(mosek::fusion::p_ExprMulParamDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulParamDiagLeft::~ExprMulParamDiagLeft() {  /* std::cout << "~ExprMulParamDiagLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamDiagLeft::p_ExprMulParamDiagLeft
  (::mosek::fusion::ExprMulParamDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamDiagLeft.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2625:6-2635:7
mosek::fusion::ExprMulParamDiagLeft::t mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3747_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3748_e)
{ return new mosek::fusion::ExprMulParamDiagLeft(_3747_p,_3748_e); }
mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3747_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3748_e) : 
   ExprMulParamDiagLeft(new mosek::fusion::p_ExprMulParamDiagLeft(this))
{ mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->_initialize(_3747_p,_3748_e); }
void mosek::fusion::p_ExprMulParamDiagLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3747_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3748_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_3747_p->__mosek_2fusion_2Expression__getModel(),_3748_e),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3748_e->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->p = _3747_p;
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->e = _3748_e;
    if (((_3747_p->getND() != (int)2) || (_3748_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3747_p->getDim((int)1) != _3748_e->getDim((int)0)) || (_3747_p->getDim((int)0) != _3748_e->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamDiagLeft.ctor

// Begin mosek.fusion.ExprMulParamDiagLeft.eval
// Method mosek.fusion.ExprMulParamDiagLeft.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2638:6-2947:7
void mosek::fusion::ExprMulParamDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3749_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3750_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3751_xs) { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->eval(_3749_rs,_3750_ws,_3751_xs); }
void mosek::fusion::p_ExprMulParamDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3749_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3750_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3751_xs)
{
  e->eval(_3750_ws,_3749_rs,_3751_xs);
  _3750_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3752_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3752_wi32(_3752_wi32 ? _3752_wi32->raw() : nullptr,_3752_wi32 ? _3752_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3753_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3753_wi64(_3753_wi64 ? _3753_wi64->raw() : nullptr,_3753_wi64 ? _3753_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3754_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->f64;
  _checked_ptr_1<double> _ptr__3754_wf64(_3754_wf64 ? _3754_wf64->raw() : nullptr,_3754_wf64 ? _3754_wf64->size(0) : 0);
  int32_t _3755_nd = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->nd;
  int32_t _3756_nelem = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->nelem;
  int32_t _3757_nnz = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->nnz;
  bool _3758_hassp = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->hassp;
  int32_t _3759_ptr = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->ptr_base;
  int32_t _3760_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->ncodeatom;
  int32_t _3761_shape = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->shape_base;
  int32_t _3762_sp = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->sp_base;
  int32_t _3763_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->nidxs_base;
  int32_t _3764_cof = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->cof_base;
  int32_t _3765_cconst = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->cconst_base;
  int32_t _3766_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->codeptr_base;
  int32_t _3767_code = mosek::fusion::p_WorkStack::_get_impl(_3750_ws)->code_base;
  if (((_3755_nd != (int)2) || ((_ptr__3752_wi32[_3761_shape] != p->getDim((int)1)) || (_ptr__3752_wi32[safe_add( _3761_shape,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int32_t _3768_pnnz = p->getNumNonzero();
  int32_t _3769_psp = _3751_xs->alloci64(_3768_pnnz);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3770_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3751_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3770_xi64(_3770_xi64 ? _3770_xi64->raw() : nullptr,_3770_xi64 ? _3770_xi64->size(0) : 0);
  p->getSp(_3770_xi64,_3769_psp);
  int32_t _3771_pdim0 = p->getDim((int)0);
  int32_t _3772_pdim1 = p->getDim((int)1);
  int32_t _3773_edim0 = _ptr__3752_wi32[_3761_shape];
  int32_t _3774_edim1 = _ptr__3752_wi32[safe_add( _3761_shape,(int)1 )];
  int32_t _3775_pidxs = _3751_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3776_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3751_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3776_xi32(_3776_xi32 ? _3776_xi32->raw() : nullptr,_3776_xi32 ? _3776_xi32->size(0) : 0);
  p->getAllIndexes(_3776_xi32,_3775_pidxs);
  if (_3758_hassp)
  {
    {
      int32_t _3777_eperm = _3751_xs->alloci32(_3756_nelem);
      int32_t _3778_eptr = _3751_xs->alloci32(safe_add( _3774_edim1,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3779_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3751_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__3779_xi32(_3779_xi32 ? _3779_xi32->raw() : nullptr,_3779_xi32 ? _3779_xi32->size(0) : 0);
      int32_t _10998_ = (int)0;
      int32_t _10999_ = safe_add( _3774_edim1,(int)1 );
      for (int32_t _3780_i = _10998_; _3780_i < _10999_; ++_3780_i)
      {
        {
          _ptr__3779_xi32[safe_add( _3778_eptr,_3780_i )] = (int)0;
        }
      }
      int32_t _11000_ = (int)0;
      int32_t _11001_ = _3756_nelem;
      for (int32_t _3781_i = _11000_; _3781_i < _11001_; ++_3781_i)
      {
        {
          ++ _ptr__3779_xi32[safe_add( safe_add( _3778_eptr,(_ptr__3753_wi64[safe_add( _3762_sp,_3781_i )] % _3774_edim1) ),(int)1 )];
        }
      }
      int32_t _11002_ = (int)0;
      int32_t _11003_ = _3774_edim1;
      for (int32_t _3782_i = _11002_; _3782_i < _11003_; ++_3782_i)
      {
        {
          _ptr__3779_xi32[safe_add( safe_add( _3778_eptr,_3782_i ),(int)1 )] += _ptr__3779_xi32[safe_add( _3778_eptr,_3782_i )];
        }
      }
      int32_t _11004_ = (int)0;
      int32_t _11005_ = _3756_nelem;
      for (int32_t _3783_i = _11004_; _3783_i < _11005_; ++_3783_i)
      {
        {
          int64_t _3784_colidx = (_ptr__3753_wi64[safe_add( _3762_sp,_3783_i )] % _3774_edim1);
          _ptr__3779_xi32[safe_add( _3777_eperm,_ptr__3779_xi32[safe_add( _3778_eptr,_3784_colidx )] )] = _3783_i;
          ++ _ptr__3779_xi32[safe_add( _3778_eptr,_3784_colidx )];
        }
      }
      int32_t _3785_rnelem = (int)0;
      int32_t _3786_rnnz = (int)0;
      int32_t _3787_rncodeatom = (int)0;
      {
        int32_t _3788_pe = (int)0;
        int32_t _3789_pp = (int)0;
        while ( ((_3789_pp < _3768_pnnz) && (_3788_pe < _3756_nelem)) )
        {
          {
            int32_t _3790_eidx = _ptr__3779_xi32[safe_add( _3777_eperm,_3788_pe )];
            int64_t _3791_psubi = (_ptr__3770_xi64[safe_add( _3769_psp,_3789_pp )] / _3772_pdim1);
            int64_t _3792_esubj = (_ptr__3753_wi64[safe_add( _3762_sp,_3790_eidx )] % _3774_edim1);
            if ((_3791_psubi < _3792_esubj))
            {
              {
                while ( ((_3789_pp < _3768_pnnz) && (_ptr__3770_xi64[safe_add( _3769_psp,_3789_pp )] < safe_mul( safe_add( _3791_psubi,(int)1 ),_3772_pdim1 ))) )
                {
                  {
                    ++ _3789_pp;
                  }
                }
              }
            }
            else if((_3792_esubj < _3791_psubi))
            {
              {
                while ( ((_3788_pe < _3768_pnnz) && ((_ptr__3753_wi64[safe_add( _3762_sp,_ptr__3779_xi32[safe_add( _3777_eperm,_3788_pe )] )] % _3774_edim1) == _3792_esubj)) )
                {
                  {
                    ++ _3788_pe;
                  }
                }
              }
            }
            else
            {
              {
                int32_t _3793_ie = _3788_pe;
                int32_t _3794_ip = _3789_pp;
                while ( ((_3789_pp < _3768_pnnz) && (_ptr__3770_xi64[safe_add( _3769_psp,_3789_pp )] < safe_mul( safe_add( _3791_psubi,(int)1 ),_3772_pdim1 ))) )
                {
                  {
                    ++ _3789_pp;
                  }
                }
                while ( ((_3788_pe < _3768_pnnz) && ((_ptr__3753_wi64[safe_add( _3762_sp,_ptr__3779_xi32[safe_add( _3777_eperm,_3788_pe )] )] % _3774_edim1) == _3792_esubj)) )
                {
                  {
                    ++ _3788_pe;
                  }
                }
                bool _3795_haselm = false;
                while ( ((_3794_ip < _3789_pp) && (_3793_ie < _3788_pe)) )
                {
                  {
                    int64_t _3796_psubj = (_ptr__3770_xi64[safe_add( _3769_psp,_3794_ip )] % _3772_pdim1);
                    int32_t _3797_eidx = _ptr__3779_xi32[safe_add( _3777_eperm,_3793_ie )];
                    int64_t _3798_esubi = (_ptr__3753_wi64[safe_add( _3762_sp,_3797_eidx )] / _3774_edim1);
                    if ((_3796_psubj < _3798_esubi))
                    {
                      {
                        ++ _3794_ip;
                      }
                    }
                    else if((_3796_psubj > _3798_esubi))
                    {
                      {
                        ++ _3793_ie;
                      }
                    }
                    else
                    {
                      {
                        _3786_rnnz += (_ptr__3752_wi32[safe_add( safe_add( _3759_ptr,_3797_eidx ),(int)1 )] - _ptr__3752_wi32[safe_add( _3759_ptr,_3797_eidx )]);
                        _3795_haselm = true;
                        int32_t _3799_n = (_ptr__3752_wi32[safe_add( safe_add( _3759_ptr,_3797_eidx ),(int)1 )] - _ptr__3752_wi32[safe_add( _3759_ptr,_3797_eidx )]);
                        int32_t _11006_;
                        bool _11007_ = (_3760_ncodeatom > (int)0);
                        if (_11007_)
                        {
                          _11006_ = safe_add( (_ptr__3752_wi32[safe_add( _3766_codeptr,_ptr__3752_wi32[safe_add( safe_add( _3759_ptr,_3797_eidx ),(int)1 )] )] - _ptr__3752_wi32[safe_add( _3766_codeptr,_ptr__3752_wi32[safe_add( _3759_ptr,_3797_eidx )] )]),safe_mul( (int)4,_3799_n ) );
                        }
                        else
                        {
                          _11006_ = safe_mul( (int)3,_3799_n );
                        }
                        _3787_rncodeatom += _11006_;
                        ++ _3794_ip;
                        ++ _3793_ie;
                      }
                    }
                  }
                }
                if (_3795_haselm)
                {
                  {
                    ++ _3785_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int32_t _3800_rnd = (int)1;
      bool _3801_rhassp = (_3785_rnelem < _3771_pdim0);
      _3749_rs->alloc_expr(_3800_rnd,_3785_rnelem,_3786_rnnz,_3801_rhassp,_3787_rncodeatom);
      int32_t _3802_rptr = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->ptr_base;
      int32_t _3803_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->nidxs_base;
      int32_t _11008_;
      bool _11009_ = _3801_rhassp;
      if (_11009_)
      {
        _11008_ = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->sp_base;
      }
      else
      {
        _11008_ = _3749_rs->alloci64(_3785_rnelem);
      }
      int32_t _3804_rsp = _11008_;
      int32_t _3805_rcof = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->cof_base;
      bool _3806_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->hassp;
      int32_t _3807_rshape = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->shape_base;
      int32_t _3808_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->codeptr_base;
      int32_t _3809_rcode = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->code_base;
      int32_t _3810_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3811_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3811_ri64(_3811_ri64 ? _3811_ri64->raw() : nullptr,_3811_ri64 ? _3811_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3812_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->f64;
      _checked_ptr_1<double> _ptr__3812_rf64(_3812_rf64 ? _3812_rf64->raw() : nullptr,_3812_rf64 ? _3812_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3813_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3813_ri32(_3813_ri32 ? _3813_ri32->raw() : nullptr,_3813_ri32 ? _3813_ri32->size(0) : 0);
      if ((_3785_rnelem > (int)0))
      {
        {
          _ptr__3813_ri32[_3802_rptr] = (int)0;
          if ((_3786_rnnz > (int)0))
          {
            {
              _ptr__3813_ri32[_3808_rcodeptr] = (int)0;
            }
          }
          {}
          _ptr__3813_ri32[_3807_rshape] = (int32_t)_3771_pdim0;
          int32_t _3814_codei = (int)0;
          int32_t _3815_elmi = (int)0;
          int32_t _3816_nzi = (int)0;
          int32_t _3817_pe = (int)0;
          int32_t _3818_pp = (int)0;
          while ( ((_3818_pp < _3768_pnnz) && (_3817_pe < _3756_nelem)) )
          {
            {
              int32_t _3819_eidx = _ptr__3779_xi32[safe_add( _3777_eperm,_3817_pe )];
              int64_t _3820_psubi = (_ptr__3770_xi64[safe_add( _3769_psp,_3818_pp )] / _3772_pdim1);
              int64_t _3821_esubj = (_ptr__3753_wi64[safe_add( _3762_sp,_3819_eidx )] % _3774_edim1);
              if ((_3820_psubi < _3821_esubj))
              {
                {
                  while ( ((_3818_pp < _3768_pnnz) && (_ptr__3770_xi64[safe_add( _3769_psp,_3818_pp )] < safe_mul( safe_add( _3820_psubi,(int)1 ),_3772_pdim1 ))) )
                  {
                    {
                      ++ _3818_pp;
                    }
                  }
                }
              }
              else if((_3821_esubj < _3820_psubi))
              {
                {
                  while ( ((_3817_pe < _3768_pnnz) && ((_ptr__3753_wi64[safe_add( _3762_sp,_ptr__3779_xi32[safe_add( _3777_eperm,_3817_pe )] )] % _3774_edim1) == _3821_esubj)) )
                  {
                    {
                      ++ _3817_pe;
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _3822_ie = _3817_pe;
                  int32_t _3823_ip = _3818_pp;
                  while ( ((_3818_pp < _3768_pnnz) && (_ptr__3770_xi64[safe_add( _3769_psp,_3818_pp )] < safe_mul( safe_add( _3820_psubi,(int)1 ),_3772_pdim1 ))) )
                  {
                    {
                      ++ _3818_pp;
                    }
                  }
                  while ( ((_3817_pe < _3768_pnnz) && ((_ptr__3753_wi64[safe_add( _3762_sp,_ptr__3779_xi32[safe_add( _3777_eperm,_3817_pe )] )] % _3774_edim1) == _3821_esubj)) )
                  {
                    {
                      ++ _3817_pe;
                    }
                  }
                  int32_t _3824_numelm = (int)0;
                  while ( ((_3823_ip < _3818_pp) && (_3822_ie < _3817_pe)) )
                  {
                    {
                      int64_t _3825_psubj = (_ptr__3770_xi64[safe_add( _3769_psp,_3823_ip )] % _3772_pdim1);
                      int32_t _3826_eidx = _ptr__3779_xi32[safe_add( _3777_eperm,_3822_ie )];
                      int64_t _3827_esubi = (_ptr__3753_wi64[safe_add( _3762_sp,_3826_eidx )] / _3774_edim1);
                      if ((_3825_psubj < _3827_esubi))
                      {
                        {
                          ++ _3823_ip;
                        }
                      }
                      else if((_3825_psubj > _3827_esubi))
                      {
                        {
                          ++ _3822_ie;
                        }
                      }
                      else
                      {
                        {
                          int32_t _11010_ = _ptr__3752_wi32[safe_add( _3759_ptr,_3826_eidx )];
                          int32_t _11011_ = _ptr__3752_wi32[safe_add( safe_add( _3759_ptr,_3826_eidx ),(int)1 )];
                          for (int32_t _3828_i = _11010_; _3828_i < _11011_; ++_3828_i)
                          {
                            {
                              _ptr__3812_rf64[safe_add( _3805_rcof,_3816_nzi )] = 0.0;
                              _ptr__3811_ri64[safe_add( _3803_rnidxs,_3816_nzi )] = _ptr__3753_wi64[safe_add( _3763_nidxs,_3828_i )];
                              _ptr__3813_ri32[safe_add( _3809_rcode,_3814_codei )] = 2;
                              _ptr__3812_rf64[safe_add( _3810_rcconst,_3814_codei )] = _ptr__3754_wf64[safe_add( _3764_cof,_3828_i )];
                              ++ _3814_codei;
                              if ((_3760_ncodeatom > (int)0))
                              {
                                {
                                  int32_t _11012_ = _ptr__3752_wi32[safe_add( _3766_codeptr,_3828_i )];
                                  int32_t _11013_ = _ptr__3752_wi32[safe_add( safe_add( _3766_codeptr,_3828_i ),(int)1 )];
                                  for (int32_t _3829_k = _11012_; _3829_k < _11013_; ++_3829_k)
                                  {
                                    {
                                      _ptr__3813_ri32[safe_add( _3809_rcode,_3814_codei )] = _ptr__3752_wi32[safe_add( _3767_code,_3829_k )];
                                      _ptr__3812_rf64[safe_add( _3810_rcconst,_3814_codei )] = _ptr__3754_wf64[safe_add( _3765_cconst,_3829_k )];
                                      ++ _3814_codei;
                                    }
                                  }
                                  _ptr__3813_ri32[safe_add( _3809_rcode,_3814_codei )] = 3;
                                  ++ _3814_codei;
                                }
                              }
                              {}
                              _ptr__3813_ri32[safe_add( _3809_rcode,_3814_codei )] = 1;
                              _ptr__3812_rf64[safe_add( _3810_rcconst,_3814_codei )] = _ptr__3779_xi32[safe_add( _3775_pidxs,_3823_ip )];
                              ++ _3814_codei;
                              _ptr__3813_ri32[safe_add( _3809_rcode,_3814_codei )] = 5;
                              ++ _3814_codei;
                              _ptr__3813_ri32[safe_add( safe_add( _3808_rcodeptr,_3816_nzi ),(int)1 )] = _3814_codei;
                              ++ _3816_nzi;
                            }
                          }
                          ++ _3823_ip;
                          ++ _3822_ie;
                          ++ _3824_numelm;
                        }
                      }
                    }
                  }
                  if ((_3824_numelm > (int)0))
                  {
                    {
                      _ptr__3811_ri64[safe_add( _3804_rsp,_3815_elmi )] = _3820_psubi;
                      _ptr__3813_ri32[safe_add( safe_add( _3802_rptr,_3815_elmi ),(int)1 )] = _3816_nzi;
                      ++ _3815_elmi;
                    }
                  }
                  {}
                }
              }
            }
          }
        }
      }
      {}
      if ((!_3806_rhassp))
      {
        {
          _3749_rs->popi64(_3785_rnelem);
        }
      }
      {}
      _3751_xs->clear();
    }
  }
  else
  {
    {
      int32_t _3830_rnelem = (int)0;
      int32_t _3831_rnnz = (int)0;
      int32_t _3832_rncodeatom = (int)0;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3833_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3751_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__3833_xi32(_3833_xi32 ? _3833_xi32->raw() : nullptr,_3833_xi32 ? _3833_xi32->size(0) : 0);
      {
        int32_t _3834_pi = (int)0;
        while ( (_3834_pi < _3768_pnnz) )
        {
          {
            int64_t _3835_prow = (_ptr__3770_xi64[safe_add( _3769_psp,_3834_pi )] / _3772_pdim1);
            int64_t _3836_prowend = safe_mul( safe_add( _3835_prow,(int)1 ),_3772_pdim1 );
            bool _3837_haselm = false;
            while ( ((_3834_pi < _3768_pnnz) && (_ptr__3770_xi64[safe_add( _3769_psp,_3834_pi )] < _3836_prowend)) )
            {
              {
                int64_t _3838_pcol = (_ptr__3770_xi64[safe_add( _3769_psp,_3834_pi )] % _3772_pdim1);
                int64_t _3839_eidx = safe_add( safe_mul( _3838_pcol,_3774_edim1 ),_3835_prow );
                int32_t _3840_n = (_ptr__3752_wi32[safe_add( safe_add( _3759_ptr,_3839_eidx ),(int)1 )] - _ptr__3752_wi32[safe_add( _3759_ptr,_3839_eidx )]);
                _3831_rnnz += _3840_n;
                _3837_haselm = true;
                int32_t _11014_;
                bool _11015_ = (_3760_ncodeatom > (int)0);
                if (_11015_)
                {
                  _11014_ = safe_add( (_ptr__3752_wi32[safe_add( _3766_codeptr,_ptr__3752_wi32[safe_add( safe_add( _3759_ptr,_3839_eidx ),(int)1 )] )] - _ptr__3752_wi32[safe_add( _3766_codeptr,_ptr__3752_wi32[safe_add( _3759_ptr,_3839_eidx )] )]),safe_mul( _3840_n,(int)4 ) );
                }
                else
                {
                  _11014_ = safe_mul( _3840_n,(int)3 );
                }
                _3832_rncodeatom += _11014_;
                ++ _3834_pi;
              }
            }
            if (_3837_haselm)
            {
              {
                ++ _3830_rnelem;
              }
            }
            {}
          }
        }
      }
      int32_t _3841_rnd = (int)1;
      bool _3842_rhassp = (_3830_rnelem < _3771_pdim0);
      _3749_rs->alloc_expr(_3841_rnd,_3830_rnelem,_3831_rnnz,_3842_rhassp,_3832_rncodeatom);
      int32_t _3843_rptr = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->ptr_base;
      int32_t _3844_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->nidxs_base;
      int32_t _11016_;
      bool _11017_ = _3842_rhassp;
      if (_11017_)
      {
        _11016_ = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->sp_base;
      }
      else
      {
        _11016_ = _3749_rs->alloci64(_3830_rnelem);
      }
      int32_t _3845_rsp = _11016_;
      int32_t _3846_rcof = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->cof_base;
      bool _3847_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->hassp;
      int32_t _3848_rshape = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->shape_base;
      int32_t _3849_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->codeptr_base;
      int32_t _3850_rcode = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->code_base;
      int32_t _3851_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3852_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3852_ri64(_3852_ri64 ? _3852_ri64->raw() : nullptr,_3852_ri64 ? _3852_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3853_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->f64;
      _checked_ptr_1<double> _ptr__3853_rf64(_3853_rf64 ? _3853_rf64->raw() : nullptr,_3853_rf64 ? _3853_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3854_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3749_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3854_ri32(_3854_ri32 ? _3854_ri32->raw() : nullptr,_3854_ri32 ? _3854_ri32->size(0) : 0);
      {
        _ptr__3854_ri32[_3843_rptr] = (int)0;
        if ((_3832_rncodeatom > (int)0))
        {
          {
            _ptr__3854_ri32[_3849_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__3854_ri32[_3848_rshape] = (int32_t)_3771_pdim0;
        int32_t _3855_codei = (int)0;
        int32_t _3856_elmi = (int)0;
        int32_t _3857_nzi = (int)0;
        int32_t _3858_pi = (int)0;
        while ( (_3858_pi < _3768_pnnz) )
        {
          {
            int64_t _3859_psubi = (_ptr__3770_xi64[safe_add( _3769_psp,_3858_pi )] / _3772_pdim1);
            int64_t _3860_prowend = safe_mul( safe_add( _3859_psubi,(int)1 ),_3772_pdim1 );
            int32_t _3861_numelm = (int)0;
            while ( ((_3858_pi < _3768_pnnz) && (_ptr__3770_xi64[safe_add( _3769_psp,_3858_pi )] < _3860_prowend)) )
            {
              {
                int64_t _3862_psubj = (_ptr__3770_xi64[safe_add( _3769_psp,_3858_pi )] % _3772_pdim1);
                int64_t _3863_eidx = safe_add( safe_mul( _3862_psubj,_3774_edim1 ),_3859_psubi );
                int32_t _11018_ = _ptr__3752_wi32[safe_add( _3759_ptr,_3863_eidx )];
                int32_t _11019_ = _ptr__3752_wi32[safe_add( safe_add( _3759_ptr,_3863_eidx ),(int)1 )];
                for (int32_t _3864_k = _11018_; _3864_k < _11019_; ++_3864_k)
                {
                  {
                    _ptr__3852_ri64[safe_add( _3844_rnidxs,_3857_nzi )] = _ptr__3753_wi64[safe_add( _3763_nidxs,_3864_k )];
                    _ptr__3853_rf64[safe_add( _3846_rcof,_3857_nzi )] = 0.0;
                    _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = 2;
                    _ptr__3853_rf64[safe_add( _3851_rcconst,_3855_codei )] = _ptr__3754_wf64[safe_add( _3764_cof,_3864_k )];
                    ++ _3855_codei;
                    if ((_3760_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11020_ = _ptr__3752_wi32[safe_add( _3766_codeptr,_3864_k )];
                        int32_t _11021_ = _ptr__3752_wi32[safe_add( safe_add( _3766_codeptr,_3864_k ),(int)1 )];
                        for (int32_t _3865_l = _11020_; _3865_l < _11021_; ++_3865_l)
                        {
                          {
                            _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = _ptr__3752_wi32[safe_add( _3767_code,_3865_l )];
                            _ptr__3853_rf64[safe_add( _3851_rcconst,_3855_codei )] = _ptr__3754_wf64[safe_add( _3765_cconst,_3865_l )];
                            ++ _3855_codei;
                          }
                        }
                        _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = 3;
                        ++ _3855_codei;
                      }
                    }
                    {}
                    _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = 1;
                    _ptr__3853_rf64[safe_add( _3851_rcconst,_3855_codei )] = _ptr__3833_xi32[safe_add( _3775_pidxs,_3858_pi )];
                    ++ _3855_codei;
                    _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = 5;
                    ++ _3855_codei;
                    _ptr__3854_ri32[safe_add( safe_add( _3849_rcodeptr,_3857_nzi ),(int)1 )] = _3855_codei;
                    ++ _3857_nzi;
                  }
                }
                ++ _3861_numelm;
                ++ _3858_pi;
              }
            }
            if ((_3861_numelm > (int)0))
            {
              {
                _ptr__3852_ri64[safe_add( _3845_rsp,_3856_elmi )] = _3859_psubi;
                _ptr__3854_ri32[safe_add( safe_add( _3843_rptr,_3856_elmi ),(int)1 )] = _3857_nzi;
                ++ _3856_elmi;
              }
            }
            {}
          }
        }
      }
      if ((!_3847_rhassp))
      {
        {
          _3749_rs->popi64(_3830_rnelem);
        }
      }
      {}
      _3751_xs->clear();
    }
  }
}
// End mosek.fusion.ExprMulParamDiagLeft.eval

// Begin mosek.fusion.ExprMulParamDiagLeft.toString
// Method mosek.fusion.ExprMulParamDiagLeft.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2636:6-158
std::string mosek::fusion::ExprMulParamDiagLeft :: toString() { return mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamDiagLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamDiagLeft.toString

void mosek::fusion::p_ExprMulParamDiagLeft::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamDiagLeft::destroy() { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->destroy(); }
// } class ExprMulParamDiagLeft
// class ExprMulParamDiagRight { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2182:4-2618:5
mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight(mosek::fusion::p_ExprMulParamDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagRight()" << this << std::endl; */ }
mosek::fusion::ExprMulParamDiagRight::~ExprMulParamDiagRight() {  /* std::cout << "~ExprMulParamDiagRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamDiagRight::p_ExprMulParamDiagRight
  (::mosek::fusion::ExprMulParamDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamDiagRight.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2186:6-2196:7
mosek::fusion::ExprMulParamDiagRight::t mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _3866_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3867_p)
{ return new mosek::fusion::ExprMulParamDiagRight(_3866_e,_3867_p); }
mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _3866_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3867_p) : 
   ExprMulParamDiagRight(new mosek::fusion::p_ExprMulParamDiagRight(this))
{ mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->_initialize(_3866_e,_3867_p); }
void mosek::fusion::p_ExprMulParamDiagRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3866_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3867_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_3867_p->__mosek_2fusion_2Expression__getModel(),_3866_e),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3866_e->getDim((int)0))}));
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->p = _3867_p;
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->e = _3866_e;
    if (((_3867_p->getND() != (int)2) || (_3866_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3867_p->getDim((int)1) != _3866_e->getDim((int)0)) || (_3867_p->getDim((int)0) != _3866_e->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamDiagRight.ctor

// Begin mosek.fusion.ExprMulParamDiagRight.eval
// Method mosek.fusion.ExprMulParamDiagRight.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2200:6-2500:7
void mosek::fusion::ExprMulParamDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3868_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3869_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3870_xs) { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->eval(_3868_rs,_3869_ws,_3870_xs); }
void mosek::fusion::p_ExprMulParamDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3868_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3869_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3870_xs)
{
  e->eval(_3869_ws,_3868_rs,_3870_xs);
  _3869_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3871_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3871_wi32(_3871_wi32 ? _3871_wi32->raw() : nullptr,_3871_wi32 ? _3871_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3872_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3872_wi64(_3872_wi64 ? _3872_wi64->raw() : nullptr,_3872_wi64 ? _3872_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3873_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->f64;
  _checked_ptr_1<double> _ptr__3873_wf64(_3873_wf64 ? _3873_wf64->raw() : nullptr,_3873_wf64 ? _3873_wf64->size(0) : 0);
  int32_t _3874_nd = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->nd;
  int32_t _3875_nelem = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->nelem;
  int32_t _3876_nnz = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->nnz;
  bool _3877_hassp = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->hassp;
  int32_t _3878_ptr = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->ptr_base;
  int32_t _3879_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->ncodeatom;
  int32_t _3880_shape = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->shape_base;
  int32_t _3881_sp = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->sp_base;
  int32_t _3882_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->nidxs_base;
  int32_t _3883_cof = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->cof_base;
  int32_t _3884_cconst = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->cconst_base;
  int32_t _3885_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->codeptr_base;
  int32_t _3886_code = mosek::fusion::p_WorkStack::_get_impl(_3869_ws)->code_base;
  if (((_3874_nd != (int)2) || ((_ptr__3871_wi32[_3880_shape] != p->getDim((int)1)) || (_ptr__3871_wi32[safe_add( _3880_shape,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int32_t _3887_pnnz = p->getNumNonzero();
  int32_t _3888_psp = _3870_xs->alloci64(_3887_pnnz);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3889_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3870_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3889_xi64(_3889_xi64 ? _3889_xi64->raw() : nullptr,_3889_xi64 ? _3889_xi64->size(0) : 0);
  int32_t _3890_pidxs = _3870_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3891_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3870_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3891_xi32(_3891_xi32 ? _3891_xi32->raw() : nullptr,_3891_xi32 ? _3891_xi32->size(0) : 0);
  p->getAllIndexes(_3891_xi32,_3890_pidxs);
  p->getSp(_3889_xi64,_3888_psp);
  int32_t _3892_pdim0 = p->getDim((int)0);
  int32_t _3893_pdim1 = p->getDim((int)1);
  int32_t _3894_edim0 = _ptr__3871_wi32[_3880_shape];
  int32_t _3895_edim1 = _ptr__3871_wi32[safe_add( _3880_shape,(int)1 )];
  int32_t _3896_pperm = _3870_xs->alloci32(_3887_pnnz);
  int32_t _3897_pptr = _3870_xs->alloci32(safe_add( _3893_pdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3898_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3870_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3898_xi32(_3898_xi32 ? _3898_xi32->raw() : nullptr,_3898_xi32 ? _3898_xi32->size(0) : 0);
  int32_t _11022_ = (int)0;
  int32_t _11023_ = safe_add( _3893_pdim1,(int)1 );
  for (int32_t _3899_i = _11022_; _3899_i < _11023_; ++_3899_i)
  {
    {
      _ptr__3898_xi32[safe_add( _3897_pptr,_3899_i )] = (int)0;
    }
  }
  int32_t _11024_ = (int)0;
  int32_t _11025_ = _3887_pnnz;
  for (int32_t _3900_i = _11024_; _3900_i < _11025_; ++_3900_i)
  {
    {
      ++ _ptr__3898_xi32[safe_add( safe_add( _3897_pptr,(_ptr__3889_xi64[safe_add( _3888_psp,_3900_i )] % _3893_pdim1) ),(int)1 )];
    }
  }
  int32_t _11026_ = (int)1;
  int32_t _11027_ = _3893_pdim1;
  for (int32_t _3901_i = _11026_; _3901_i < _11027_; ++_3901_i)
  {
    {
      _ptr__3898_xi32[safe_add( _3897_pptr,_3901_i )] += _ptr__3898_xi32[(safe_add( _3897_pptr,_3901_i ) - (int)1)];
    }
  }
  int32_t _11028_ = (int)0;
  int32_t _11029_ = _3887_pnnz;
  for (int32_t _3902_i = _11028_; _3902_i < _11029_; ++_3902_i)
  {
    {
      int64_t _3903_colidx = (_ptr__3889_xi64[safe_add( _3888_psp,_3902_i )] % _3893_pdim1);
      _ptr__3898_xi32[safe_add( _3896_pperm,_ptr__3898_xi32[safe_add( _3897_pptr,_3903_colidx )] )] = _3902_i;
      ++ _ptr__3898_xi32[safe_add( _3897_pptr,_3903_colidx )];
    }
  }
  if (_3877_hassp)
  {
    {
      int32_t _3904_rncodeatom = (int)0;
      int32_t _3905_rnelem = (int)0;
      int32_t _3906_rnnz = (int)0;
      int32_t _3907_i1 = (int)0;
      int32_t _3908_i0 = (int)0;
      while ( ((_3908_i0 < _3875_nelem) && (_3907_i1 < _3887_pnnz)) )
      {
        {
          int64_t _3909_esubi = (_ptr__3872_wi64[safe_add( _3881_sp,_3908_i0 )] / _3895_edim1);
          int64_t _3910_psubj = (_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3907_i1 )] )] % _3893_pdim1);
          if ((_3909_esubi < _3910_psubj))
          {
            {
              ++ _3908_i0;
            }
          }
          else if((_3909_esubi > _3910_psubj))
          {
            {
              ++ _3907_i1;
            }
          }
          else
          {
            {
              int32_t _3911_b0 = _3908_i0;
              ++ _3908_i0;
              int32_t _3912_b1 = _3907_i1;
              ++ _3907_i1;
              while ( ((_3908_i0 < _3875_nelem) && ((_ptr__3872_wi64[safe_add( _3881_sp,_3908_i0 )] / _3895_edim1) == _3909_esubi)) )
              {
                {
                  ++ _3908_i0;
                }
              }
              while ( ((_3907_i1 < _3887_pnnz) && ((_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3907_i1 )] )] % _3893_pdim1) == _3910_psubj)) )
              {
                {
                  ++ _3907_i1;
                }
              }
              int32_t _3913_p1 = _3912_b1;
              int32_t _3914_p0 = _3911_b0;
              bool _3915_haselm = false;
              while ( ((_3914_p0 < _3908_i0) && (_3913_p1 < _3907_i1)) )
              {
                {
                  int64_t _3916_esubj = (_ptr__3872_wi64[safe_add( _3881_sp,_3914_p0 )] % _3895_edim1);
                  int64_t _3917_psubi = (_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3913_p1 )] )] / _3893_pdim1);
                  if ((_3916_esubj < _3917_psubi))
                  {
                    {
                      ++ _3914_p0;
                    }
                  }
                  else if((_3916_esubj > _3917_psubi))
                  {
                    {
                      ++ _3913_p1;
                    }
                  }
                  else
                  {
                    {
                      _3915_haselm = true;
                      int32_t _3918_n = (_ptr__3871_wi32[safe_add( safe_add( _3878_ptr,_3914_p0 ),(int)1 )] - _ptr__3871_wi32[safe_add( _3878_ptr,_3914_p0 )]);
                      _3906_rnnz += _3918_n;
                      int32_t _11030_;
                      bool _11031_ = (_3879_ncodeatom > (int)0);
                      if (_11031_)
                      {
                        _11030_ = safe_add( (_ptr__3871_wi32[safe_add( _3885_codeptr,_ptr__3871_wi32[safe_add( safe_add( _3878_ptr,_3914_p0 ),(int)1 )] )] - _ptr__3871_wi32[safe_add( _3885_codeptr,_ptr__3871_wi32[safe_add( _3878_ptr,_3914_p0 )] )]),safe_mul( _3918_n,(int)4 ) );
                      }
                      else
                      {
                        _11030_ = safe_mul( _3918_n,(int)3 );
                      }
                      _3904_rncodeatom += _11030_;
                      ++ _3914_p0;
                      ++ _3913_p1;
                    }
                  }
                }
              }
              if (_3915_haselm)
              {
                {
                  ++ _3905_rnelem;
                }
              }
              {}
            }
          }
        }
      }
      int32_t _3919_rnd = (int)1;
      bool _3920_rhassp = (_3905_rnelem < _3894_edim0);
      _3868_rs->alloc_expr(_3919_rnd,_3905_rnelem,_3906_rnnz,_3920_rhassp,_3904_rncodeatom);
      int32_t _3921_rptr = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->ptr_base;
      int32_t _3922_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->nidxs_base;
      int32_t _11032_;
      bool _11033_ = _3920_rhassp;
      if (_11033_)
      {
        _11032_ = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->sp_base;
      }
      else
      {
        _11032_ = _3868_rs->alloci64(_3905_rnelem);
      }
      int32_t _3923_rsp = _11032_;
      int32_t _3924_rcof = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->cof_base;
      bool _3925_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->hassp;
      int32_t _3926_rshape = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->shape_base;
      int32_t _3927_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->codeptr_base;
      int32_t _3928_rcode = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->code_base;
      int32_t _3929_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3930_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3930_ri64(_3930_ri64 ? _3930_ri64->raw() : nullptr,_3930_ri64 ? _3930_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3931_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->f64;
      _checked_ptr_1<double> _ptr__3931_rf64(_3931_rf64 ? _3931_rf64->raw() : nullptr,_3931_rf64 ? _3931_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3932_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3932_ri32(_3932_ri32 ? _3932_ri32->raw() : nullptr,_3932_ri32 ? _3932_ri32->size(0) : 0);
      if ((_3905_rnelem > (int)0))
      {
        {
          _ptr__3932_ri32[_3921_rptr] = (int)0;
          if ((_3904_rncodeatom > (int)0))
          {
            {
              _ptr__3932_ri32[_3927_rcodeptr] = (int)0;
            }
          }
          {}
          _ptr__3932_ri32[_3926_rshape] = (int32_t)_3894_edim0;
          int32_t _3933_codei = (int)0;
          int32_t _3934_elmi = (int)0;
          int32_t _3935_nzi = (int)0;
          int32_t _3936_i1 = (int)0;
          int32_t _3937_i0 = (int)0;
          while ( ((_3937_i0 < _3875_nelem) && (_3936_i1 < _3887_pnnz)) )
          {
            {
              int64_t _3938_esubi = (_ptr__3872_wi64[safe_add( _3881_sp,_3937_i0 )] / _3895_edim1);
              int64_t _3939_psubj = (_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3936_i1 )] )] % _3893_pdim1);
              if ((_3938_esubi < _3939_psubj))
              {
                {
                  while ( ((_3937_i0 < _3875_nelem) && ((_ptr__3872_wi64[safe_add( _3881_sp,_3937_i0 )] / _3895_edim1) == _3938_esubi)) )
                  {
                    {
                      ++ _3937_i0;
                    }
                  }
                }
              }
              else if((_3938_esubi > _3939_psubj))
              {
                {
                  while ( ((_3936_i1 < _3887_pnnz) && ((_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3936_i1 )] )] % _3893_pdim1) == _3939_psubj)) )
                  {
                    {
                      ++ _3936_i1;
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _3940_b0 = _3937_i0;
                  ++ _3937_i0;
                  int32_t _3941_b1 = _3936_i1;
                  ++ _3936_i1;
                  while ( ((_3937_i0 < _3875_nelem) && ((_ptr__3872_wi64[safe_add( _3881_sp,_3937_i0 )] / _3895_edim1) == _3938_esubi)) )
                  {
                    {
                      ++ _3937_i0;
                    }
                  }
                  while ( ((_3936_i1 < _3887_pnnz) && ((_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3936_i1 )] )] % _3893_pdim1) == _3939_psubj)) )
                  {
                    {
                      ++ _3936_i1;
                    }
                  }
                  int32_t _3942_p1 = _3941_b1;
                  int32_t _3943_p0 = _3940_b0;
                  int32_t _3944_numelm = (int)0;
                  while ( ((_3943_p0 < _3937_i0) && (_3942_p1 < _3936_i1)) )
                  {
                    {
                      int64_t _3945_esubj = (_ptr__3872_wi64[safe_add( _3881_sp,_3943_p0 )] % _3895_edim1);
                      int64_t _3946_psubi = (_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3942_p1 )] )] / _3893_pdim1);
                      if ((_3945_esubj < _3946_psubi))
                      {
                        {
                          ++ _3943_p0;
                        }
                      }
                      else if((_3945_esubj > _3946_psubi))
                      {
                        {
                          ++ _3942_p1;
                        }
                      }
                      else
                      {
                        {
                          int32_t _11034_ = _ptr__3871_wi32[safe_add( _3878_ptr,_3943_p0 )];
                          int32_t _11035_ = _ptr__3871_wi32[safe_add( safe_add( _3878_ptr,_3943_p0 ),(int)1 )];
                          for (int32_t _3947_j = _11034_; _3947_j < _11035_; ++_3947_j)
                          {
                            {
                              _ptr__3930_ri64[safe_add( _3922_rnidxs,_3935_nzi )] = _ptr__3872_wi64[safe_add( _3882_nidxs,_3947_j )];
                              _ptr__3931_rf64[safe_add( _3924_rcof,_3935_nzi )] = 0.0;
                              _ptr__3932_ri32[safe_add( _3928_rcode,_3933_codei )] = 2;
                              _ptr__3931_rf64[safe_add( _3929_rcconst,_3933_codei )] = _ptr__3873_wf64[safe_add( _3883_cof,_3947_j )];
                              ++ _3933_codei;
                              if ((_3879_ncodeatom > (int)0))
                              {
                                {
                                  int32_t _11036_ = _ptr__3871_wi32[safe_add( _3885_codeptr,_3947_j )];
                                  int32_t _11037_ = _ptr__3871_wi32[safe_add( safe_add( _3885_codeptr,_3947_j ),(int)1 )];
                                  for (int32_t _3948_k = _11036_; _3948_k < _11037_; ++_3948_k)
                                  {
                                    {
                                      _ptr__3932_ri32[safe_add( _3928_rcode,_3933_codei )] = _ptr__3871_wi32[safe_add( _3886_code,_3948_k )];
                                      _ptr__3931_rf64[safe_add( _3929_rcconst,_3933_codei )] = _ptr__3873_wf64[safe_add( _3884_cconst,_3948_k )];
                                      ++ _3933_codei;
                                    }
                                  }
                                  _ptr__3932_ri32[safe_add( _3928_rcode,_3933_codei )] = 3;
                                  ++ _3933_codei;
                                }
                              }
                              {}
                              _ptr__3932_ri32[safe_add( _3928_rcode,_3933_codei )] = 1;
                              _ptr__3931_rf64[safe_add( _3929_rcconst,_3933_codei )] = _ptr__3898_xi32[safe_add( _3890_pidxs,_ptr__3898_xi32[safe_add( _3896_pperm,_3942_p1 )] )];
                              ++ _3933_codei;
                              _ptr__3932_ri32[safe_add( _3928_rcode,_3933_codei )] = 5;
                              ++ _3933_codei;
                              _ptr__3932_ri32[safe_add( safe_add( _3927_rcodeptr,_3935_nzi ),(int)1 )] = _3933_codei;
                              ++ _3935_nzi;
                            }
                          }
                          ++ _3944_numelm;
                          ++ _3943_p0;
                          ++ _3942_p1;
                        }
                      }
                    }
                  }
                  if ((_3944_numelm > (int)0))
                  {
                    {
                      _ptr__3930_ri64[safe_add( _3923_rsp,_3934_elmi )] = _3938_esubi;
                      _ptr__3932_ri32[safe_add( safe_add( _3921_rptr,_3934_elmi ),(int)1 )] = _3935_nzi;
                      ++ _3934_elmi;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((_3905_rnelem > _ptr__3932_ri32[_3926_rshape]))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
            }
          }
          {}
          if ((_3934_elmi != _3905_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_3935_nzi != _3906_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
        }
      }
      {}
      if ((!_3925_rhassp))
      {
        {
          _3868_rs->popi64(_3905_rnelem);
        }
      }
      {}
      _3870_xs->clear();
    }
  }
  else
  {
    {
      int32_t _3949_rncodeatom = (int)0;
      int32_t _3950_rnelem = (int)0;
      int32_t _3951_rnnz = (int)0;
      int32_t _3952_i1 = (int)0;
      while ( (_3952_i1 < _3887_pnnz) )
      {
        {
          int64_t _3953_psubj = (_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3952_i1 )] )] % _3893_pdim1);
          int32_t _3954_b1 = _3952_i1;
          ++ _3952_i1;
          while ( ((_3952_i1 < _3887_pnnz) && ((_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3952_i1 )] )] % _3893_pdim1) == _3953_psubj)) )
          {
            {
              ++ _3952_i1;
            }
          }
          int32_t _11038_ = _3954_b1;
          int32_t _11039_ = _3952_i1;
          for (int32_t _3955_k1 = _11038_; _3955_k1 < _11039_; ++_3955_k1)
          {
            {
              int64_t _3956_psubi = (_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3952_i1 )] )] / _3893_pdim1);
              int64_t _3957_eidx = safe_add( safe_mul( _3953_psubj,_3895_edim1 ),_3956_psubi );
              int32_t _3958_n = (_ptr__3871_wi32[safe_add( safe_add( _3878_ptr,_3957_eidx ),(int)1 )] - _ptr__3871_wi32[safe_add( _3878_ptr,_3957_eidx )]);
              _3951_rnnz += _3958_n;
              int32_t _11040_;
              bool _11041_ = (_3879_ncodeatom > (int)0);
              if (_11041_)
              {
                _11040_ = safe_add( (_ptr__3871_wi32[safe_add( _3885_codeptr,_ptr__3871_wi32[safe_add( safe_add( _3878_ptr,_3957_eidx ),(int)1 )] )] - _ptr__3871_wi32[safe_add( _3885_codeptr,_ptr__3871_wi32[safe_add( _3878_ptr,_3957_eidx )] )]),safe_mul( _3958_n,(int)4 ) );
              }
              else
              {
                _11040_ = safe_mul( _3958_n,(int)3 );
              }
              _3949_rncodeatom += _11040_;
            }
          }
          ++ _3950_rnelem;
        }
      }
      int32_t _3959_rnd = (int)1;
      bool _3960_rhassp = (_3950_rnelem < _3894_edim0);
      _3868_rs->alloc_expr(_3959_rnd,_3950_rnelem,_3951_rnnz,_3960_rhassp,_3949_rncodeatom);
      int32_t _3961_rptr = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->ptr_base;
      int32_t _3962_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->nidxs_base;
      int32_t _11042_;
      bool _11043_ = _3960_rhassp;
      if (_11043_)
      {
        _11042_ = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->sp_base;
      }
      else
      {
        _11042_ = _3868_rs->alloci64(_3950_rnelem);
      }
      int32_t _3963_rsp = _11042_;
      int32_t _3964_rcof = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->cof_base;
      bool _3965_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->hassp;
      int32_t _3966_rshape = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->shape_base;
      int32_t _3967_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->codeptr_base;
      int32_t _3968_rcode = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->code_base;
      int32_t _3969_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3970_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3970_ri64(_3970_ri64 ? _3970_ri64->raw() : nullptr,_3970_ri64 ? _3970_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3971_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->f64;
      _checked_ptr_1<double> _ptr__3971_rf64(_3971_rf64 ? _3971_rf64->raw() : nullptr,_3971_rf64 ? _3971_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3972_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3868_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3972_ri32(_3972_ri32 ? _3972_ri32->raw() : nullptr,_3972_ri32 ? _3972_ri32->size(0) : 0);
      {
        _ptr__3972_ri32[_3961_rptr] = (int)0;
        if ((_3949_rncodeatom > (int)0))
        {
          {
            _ptr__3972_ri32[_3967_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__3972_ri32[_3966_rshape] = (int32_t)_3894_edim0;
        int32_t _3973_codei = (int)0;
        int32_t _3974_elmi = (int)0;
        int32_t _3975_nzi = (int)0;
        int32_t _3976_i1 = (int)0;
        while ( (_3976_i1 < _3887_pnnz) )
        {
          {
            int64_t _3977_psubj = (_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3976_i1 )] )] % _3893_pdim1);
            int32_t _3978_b1 = _3976_i1;
            ++ _3976_i1;
            while ( ((_3976_i1 < _3887_pnnz) && ((_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3976_i1 )] )] % _3893_pdim1) == _3977_psubj)) )
            {
              {
                ++ _3976_i1;
              }
            }
            int32_t _11044_ = _3978_b1;
            int32_t _11045_ = _3976_i1;
            for (int32_t _3979_k1 = _11044_; _3979_k1 < _11045_; ++_3979_k1)
            {
              {
                int64_t _3980_psubi = (_ptr__3889_xi64[safe_add( _3888_psp,_ptr__3898_xi32[safe_add( _3896_pperm,_3979_k1 )] )] / _3893_pdim1);
                int64_t _3981_eidx = safe_add( safe_mul( _3977_psubj,_3895_edim1 ),_3980_psubi );
                int32_t _11046_ = _ptr__3871_wi32[safe_add( _3878_ptr,_3981_eidx )];
                int32_t _11047_ = _ptr__3871_wi32[safe_add( safe_add( _3878_ptr,_3981_eidx ),(int)1 )];
                for (int32_t _3982_i = _11046_; _3982_i < _11047_; ++_3982_i)
                {
                  {
                    _ptr__3970_ri64[safe_add( _3962_rnidxs,_3975_nzi )] = _ptr__3872_wi64[safe_add( _3882_nidxs,_3982_i )];
                    _ptr__3971_rf64[safe_add( _3964_rcof,_3975_nzi )] = 0.0;
                    _ptr__3972_ri32[safe_add( _3968_rcode,_3973_codei )] = 2;
                    _ptr__3971_rf64[safe_add( _3969_rcconst,_3973_codei )] = _ptr__3873_wf64[safe_add( _3883_cof,_3982_i )];
                    ++ _3973_codei;
                    if ((_3879_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11048_ = _ptr__3871_wi32[safe_add( _3885_codeptr,_3982_i )];
                        int32_t _11049_ = _ptr__3871_wi32[safe_add( safe_add( _3885_codeptr,_3982_i ),(int)1 )];
                        for (int32_t _3983_k = _11048_; _3983_k < _11049_; ++_3983_k)
                        {
                          {
                            _ptr__3972_ri32[safe_add( _3968_rcode,_3973_codei )] = _ptr__3871_wi32[safe_add( _3886_code,_3983_k )];
                            _ptr__3971_rf64[safe_add( _3969_rcconst,_3973_codei )] = _ptr__3873_wf64[safe_add( _3884_cconst,_3983_k )];
                            ++ _3973_codei;
                          }
                        }
                        _ptr__3972_ri32[safe_add( _3968_rcode,_3973_codei )] = 3;
                        ++ _3973_codei;
                      }
                    }
                    {}
                    _ptr__3972_ri32[safe_add( _3968_rcode,_3973_codei )] = 1;
                    _ptr__3971_rf64[safe_add( _3969_rcconst,_3973_codei )] = _ptr__3898_xi32[safe_add( _3890_pidxs,_ptr__3898_xi32[safe_add( _3896_pperm,_3979_k1 )] )];
                    ++ _3973_codei;
                    _ptr__3972_ri32[safe_add( _3968_rcode,_3973_codei )] = 5;
                    ++ _3973_codei;
                    _ptr__3972_ri32[safe_add( safe_add( _3967_rcodeptr,_3975_nzi ),(int)1 )] = _3973_codei;
                    ++ _3975_nzi;
                  }
                }
              }
            }
            _ptr__3970_ri64[safe_add( _3963_rsp,_3974_elmi )] = _3977_psubj;
            _ptr__3972_ri32[safe_add( safe_add( _3961_rptr,_3974_elmi ),(int)1 )] = _3975_nzi;
            ++ _3974_elmi;
          }
        }
        if ((_3950_rnelem > _ptr__3972_ri32[_3966_rshape]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
          }
        }
        {}
        if ((_3974_elmi != _3950_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
          }
        }
        {}
        if ((_3975_nzi != _3951_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
          }
        }
        {}
      }
      if ((!_3965_rhassp))
      {
        {
          _3868_rs->popi64(_3950_rnelem);
        }
      }
      {}
      _3870_xs->clear();
    }
  }
}
// End mosek.fusion.ExprMulParamDiagRight.eval

// Begin mosek.fusion.ExprMulParamDiagRight.toString
// Method mosek.fusion.ExprMulParamDiagRight.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2198:6-159
std::string mosek::fusion::ExprMulParamDiagRight :: toString() { return mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamDiagRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamDiagRight.toString

void mosek::fusion::p_ExprMulParamDiagRight::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamDiagRight::destroy() { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->destroy(); }
// } class ExprMulParamDiagRight
// class ExprDotParam { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1987:4-2177:5
mosek::fusion::ExprDotParam::ExprDotParam(mosek::fusion::p_ExprDotParam *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDotParam()" << this << std::endl; */ }
mosek::fusion::ExprDotParam::~ExprDotParam() {  /* std::cout << "~ExprDotParam()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDotParam::p_ExprDotParam
  (::mosek::fusion::ExprDotParam * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDotParam.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1991:6-2001:7
mosek::fusion::ExprDotParam::t mosek::fusion::p_ExprDotParam::_new_ExprDotParam
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3984_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3985_e)
{ return new mosek::fusion::ExprDotParam(_3984_p,_3985_e); }
mosek::fusion::ExprDotParam::ExprDotParam
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3984_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3985_e) : 
   ExprDotParam(new mosek::fusion::p_ExprDotParam(this))
{ mosek::fusion::p_ExprDotParam::_get_impl(this)->_initialize(_3984_p,_3985_e); }
void mosek::fusion::p_ExprDotParam::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3984_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3985_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_3984_p->__mosek_2fusion_2Expression__getModel(),_3985_e),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->p = _3984_p;
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->e = _3985_e;
    if ((_3984_p->getND() != _3985_e->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int32_t _11050_ = (int)0;
    int32_t _11051_ = _3984_p->getND();
    for (int32_t _3986_i = _11050_; _3986_i < _11051_; ++_3986_i)
    {
      {
        if ((_3984_p->getDim(_3986_i) != _3985_e->getDim(_3986_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprDotParam.ctor

// Begin mosek.fusion.ExprDotParam.eval
// Method mosek.fusion.ExprDotParam.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2005:6-2176:7
void mosek::fusion::ExprDotParam :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3987_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3988_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3989_xs) { mosek::fusion::p_ExprDotParam::_get_impl(this)->eval(_3987_rs,_3988_ws,_3989_xs); }
void mosek::fusion::p_ExprDotParam::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3987_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3988_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3989_xs)
{
  e->eval(_3988_ws,_3987_rs,_3989_xs);
  _3988_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3990_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3990_wi32(_3990_wi32 ? _3990_wi32->raw() : nullptr,_3990_wi32 ? _3990_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3991_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3991_wi64(_3991_wi64 ? _3991_wi64->raw() : nullptr,_3991_wi64 ? _3991_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3992_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->f64;
  _checked_ptr_1<double> _ptr__3992_wf64(_3992_wf64 ? _3992_wf64->raw() : nullptr,_3992_wf64 ? _3992_wf64->size(0) : 0);
  int32_t _3993_nd = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->nd;
  int32_t _3994_nelem = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->nelem;
  int32_t _3995_nnz = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->nnz;
  bool _3996_hassp = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->hassp;
  int32_t _3997_ptr = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->ptr_base;
  int32_t _3998_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->ncodeatom;
  int32_t _3999_shape = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->shape_base;
  int32_t _4000_sp = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->sp_base;
  int32_t _4001_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->nidxs_base;
  int32_t _4002_cof = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->cof_base;
  int32_t _4003_cconst = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->cconst_base;
  int32_t _4004_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->codeptr_base;
  int32_t _4005_code = mosek::fusion::p_WorkStack::_get_impl(_3988_ws)->code_base;
  int32_t _4006_pnnz = p->getNumNonzero();
  int32_t _4007_psp = _3989_xs->alloci64(_4006_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3989_xs)->i64,_4007_psp);
  int32_t _4008_pidxs = _3989_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4009_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3989_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4009_xi32(_4009_xi32 ? _4009_xi32->raw() : nullptr,_4009_xi32 ? _4009_xi32->size(0) : 0);
  p->getAllIndexes(_4009_xi32,_4008_pidxs);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4010_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3989_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__4010_xi64(_4010_xi64 ? _4010_xi64->raw() : nullptr,_4010_xi64 ? _4010_xi64->size(0) : 0);
  int32_t _4011_rnnz = (int)0;
  int32_t _4012_rnelem = (int)1;
  int32_t _4013_rncodeatom = (int)0;
  if (_3996_hassp)
  {
    {
      int32_t _4014_ei = (int)0;
      int32_t _4015_pi = (int)0;
      while ( ((_4014_ei < _3994_nelem) && (_4015_pi < _4006_pnnz)) )
      {
        {
          if ((_ptr__3991_wi64[safe_add( _4000_sp,_4014_ei )] < _ptr__4010_xi64[safe_add( _4007_psp,_4015_pi )]))
          {
            {
              ++ _4014_ei;
            }
          }
          else if((_ptr__3991_wi64[safe_add( _4000_sp,_4014_ei )] > _ptr__4010_xi64[safe_add( _4007_psp,_4015_pi )]))
          {
            {
              ++ _4015_pi;
            }
          }
          else
          {
            {
              int32_t _4016_n = (_ptr__3990_wi32[safe_add( safe_add( _3997_ptr,_4014_ei ),(int)1 )] - _ptr__3990_wi32[safe_add( _3997_ptr,_4014_ei )]);
              _4011_rnnz += _4016_n;
              int32_t _11052_;
              bool _11053_ = (_3998_ncodeatom > (int)0);
              if (_11053_)
              {
                _11052_ = safe_add( (_ptr__3990_wi32[safe_add( _4004_codeptr,_ptr__3990_wi32[safe_add( safe_add( _3997_ptr,_4014_ei ),(int)1 )] )] - _ptr__3990_wi32[safe_add( _4004_codeptr,_ptr__3990_wi32[safe_add( _3997_ptr,_4014_ei )] )]),safe_mul( (int)4,_4016_n ) );
              }
              else
              {
                _11052_ = safe_mul( (int)3,_4016_n );
              }
              _4013_rncodeatom += _11052_;
              ++ _4014_ei;
              ++ _4015_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _11054_ = (int)0;
      int32_t _11055_ = _4006_pnnz;
      for (int32_t _4017_i = _11054_; _4017_i < _11055_; ++_4017_i)
      {
        {
          _4011_rnnz += (_ptr__3990_wi32[safe_add( safe_add( _3997_ptr,_ptr__4010_xi64[safe_add( _4007_psp,_4017_i )] ),(int)1 )] - _ptr__3990_wi32[safe_add( _3997_ptr,_ptr__4010_xi64[safe_add( _4007_psp,_4017_i )] )]);
        }
      }
      if ((_3998_ncodeatom > (int)0))
      {
        {
          int32_t _11056_ = (int)0;
          int32_t _11057_ = _4006_pnnz;
          for (int32_t _4018_i = _11056_; _4018_i < _11057_; ++_4018_i)
          {
            {
              _4013_rncodeatom += safe_add( (_ptr__3990_wi32[safe_add( _4004_codeptr,_ptr__3990_wi32[safe_add( safe_add( _3997_ptr,_ptr__4010_xi64[safe_add( _4007_psp,_4018_i )] ),(int)1 )] )] - _ptr__3990_wi32[safe_add( _4004_codeptr,_ptr__3990_wi32[safe_add( _3997_ptr,_ptr__4010_xi64[safe_add( _4007_psp,_4018_i )] )] )]),safe_mul( (int)4,(_ptr__3990_wi32[safe_add( safe_add( _3997_ptr,_ptr__4010_xi64[safe_add( _4007_psp,_4018_i )] ),(int)1 )] - _ptr__3990_wi32[safe_add( _3997_ptr,_ptr__4010_xi64[safe_add( _4007_psp,_4018_i )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int32_t _11058_ = (int)0;
          int32_t _11059_ = _4006_pnnz;
          for (int32_t _4019_i = _11058_; _4019_i < _11059_; ++_4019_i)
          {
            {
              _4013_rncodeatom += safe_mul( (int)3,(_ptr__3990_wi32[safe_add( safe_add( _3997_ptr,_ptr__4010_xi64[safe_add( _4007_psp,_4019_i )] ),(int)1 )] - _ptr__3990_wi32[safe_add( _3997_ptr,_ptr__4010_xi64[safe_add( _4007_psp,_4019_i )] )]) );
            }
          }
        }
      }
    }
  }
  int64_t _4020_rsz = (int)1;
  int32_t _11060_ = (int)0;
  int32_t _11061_ = _3993_nd;
  for (int32_t _4021_i = _11060_; _4021_i < _11061_; ++_4021_i)
  {
    {
      _4020_rsz *= _ptr__3990_wi32[safe_add( _3999_shape,_4021_i )];
    }
  }
  _3987_rs->alloc_expr((int)0,_4012_rnelem,_4011_rnnz,false,_4013_rncodeatom);
  int32_t _4022_rptr = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->ptr_base;
  int32_t _4023_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->nidxs_base;
  int32_t _4024_rcof = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->cof_base;
  bool _4025_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->hassp;
  int32_t _4026_rshape = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->shape_base;
  int32_t _4027_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->codeptr_base;
  int32_t _4028_rcode = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->code_base;
  int32_t _4029_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4030_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4030_ri64(_4030_ri64 ? _4030_ri64->raw() : nullptr,_4030_ri64 ? _4030_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4031_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->f64;
  _checked_ptr_1<double> _ptr__4031_rf64(_4031_rf64 ? _4031_rf64->raw() : nullptr,_4031_rf64 ? _4031_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4032_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3987_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4032_ri32(_4032_ri32 ? _4032_ri32->raw() : nullptr,_4032_ri32 ? _4032_ri32->size(0) : 0);
  _ptr__4032_ri32[_4022_rptr] = (int)0;
  _ptr__4032_ri32[safe_add( _4022_rptr,(int)1 )] = _4011_rnnz;
  if ((_4013_rncodeatom > (int)0))
  {
    {
      _ptr__4032_ri32[_4027_rcodeptr] = (int)0;
    }
  }
  {}
  if (_3996_hassp)
  {
    {
      int32_t _4033_codei = (int)0;
      int32_t _4034_nzi = (int)0;
      int32_t _4035_elmi = (int)0;
      int32_t _4036_ei = (int)0;
      int32_t _4037_pi = (int)0;
      while ( ((_4036_ei < _3994_nelem) && (_4037_pi < _4006_pnnz)) )
      {
        {
          if ((_ptr__3991_wi64[safe_add( _4000_sp,_4036_ei )] < _ptr__4010_xi64[safe_add( _4007_psp,_4037_pi )]))
          {
            {
              ++ _4036_ei;
            }
          }
          else if((_ptr__3991_wi64[safe_add( _4000_sp,_4036_ei )] > _ptr__4010_xi64[safe_add( _4007_psp,_4037_pi )]))
          {
            {
              ++ _4037_pi;
            }
          }
          else
          {
            {
              int32_t _11062_ = _ptr__3990_wi32[safe_add( _3997_ptr,_4036_ei )];
              int32_t _11063_ = _ptr__3990_wi32[safe_add( safe_add( _3997_ptr,_4036_ei ),(int)1 )];
              for (int32_t _4038_i = _11062_; _4038_i < _11063_; ++_4038_i)
              {
                {
                  _ptr__4030_ri64[safe_add( _4023_rnidxs,_4034_nzi )] = _ptr__3991_wi64[safe_add( _4001_nidxs,_4038_i )];
                  _ptr__4031_rf64[safe_add( _4024_rcof,_4034_nzi )] = 0.0;
                  _ptr__4032_ri32[safe_add( _4028_rcode,_4033_codei )] = 2;
                  _ptr__4031_rf64[safe_add( _4029_rcconst,_4033_codei )] = _ptr__3992_wf64[safe_add( _4002_cof,_4038_i )];
                  ++ _4033_codei;
                  if ((_3998_ncodeatom > (int)0))
                  {
                    {
                      int32_t _11064_ = _ptr__3990_wi32[safe_add( _4004_codeptr,_4038_i )];
                      int32_t _11065_ = _ptr__3990_wi32[safe_add( safe_add( _4004_codeptr,_4038_i ),(int)1 )];
                      for (int32_t _4039_k = _11064_; _4039_k < _11065_; ++_4039_k)
                      {
                        {
                          _ptr__4032_ri32[safe_add( _4028_rcode,_4033_codei )] = _ptr__3990_wi32[safe_add( _4005_code,_4039_k )];
                          _ptr__4031_rf64[safe_add( _4029_rcconst,_4033_codei )] = _ptr__3992_wf64[safe_add( _4003_cconst,_4039_k )];
                          ++ _4033_codei;
                        }
                      }
                      _ptr__4032_ri32[safe_add( _4028_rcode,_4033_codei )] = 3;
                      ++ _4033_codei;
                    }
                  }
                  {}
                  _ptr__4032_ri32[safe_add( _4028_rcode,_4033_codei )] = 1;
                  _ptr__4031_rf64[safe_add( _4029_rcconst,_4033_codei )] = _ptr__4009_xi32[safe_add( _4008_pidxs,_4037_pi )];
                  ++ _4033_codei;
                  _ptr__4032_ri32[safe_add( _4028_rcode,_4033_codei )] = 5;
                  ++ _4033_codei;
                  _ptr__4032_ri32[safe_add( safe_add( _4027_rcodeptr,_4034_nzi ),(int)1 )] = _4033_codei;
                  ++ _4034_nzi;
                }
              }
              ++ _4036_ei;
              ++ _4037_pi;
            }
          }
        }
      }
      if ((_4035_elmi != _4012_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_4034_nzi != _4011_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_4033_codei != _4013_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4040_codei = (int)0;
      int32_t _4041_nzi = (int)0;
      int32_t _11066_ = (int)0;
      int32_t _11067_ = _4006_pnnz;
      for (int32_t _4042_pi = _11066_; _4042_pi < _11067_; ++_4042_pi)
      {
        {
          int32_t _4043_elmi = _4042_pi;
          int64_t _4044_ei = _ptr__4010_xi64[safe_add( _4007_psp,_4042_pi )];
          int32_t _11068_ = _ptr__3990_wi32[safe_add( _3997_ptr,_4044_ei )];
          int32_t _11069_ = _ptr__3990_wi32[safe_add( safe_add( _3997_ptr,_4044_ei ),(int)1 )];
          for (int32_t _4045_i = _11068_; _4045_i < _11069_; ++_4045_i)
          {
            {
              _ptr__4030_ri64[safe_add( _4023_rnidxs,_4041_nzi )] = _ptr__3991_wi64[safe_add( _4001_nidxs,_4045_i )];
              _ptr__4031_rf64[safe_add( _4024_rcof,_4041_nzi )] = 0.0;
              _ptr__4032_ri32[safe_add( _4028_rcode,_4040_codei )] = 2;
              _ptr__4031_rf64[safe_add( _4029_rcconst,_4040_codei )] = _ptr__3992_wf64[safe_add( _4002_cof,_4045_i )];
              ++ _4040_codei;
              if ((_3998_ncodeatom > (int)0))
              {
                {
                  int32_t _11070_ = _ptr__3990_wi32[safe_add( _4004_codeptr,_4045_i )];
                  int32_t _11071_ = _ptr__3990_wi32[safe_add( safe_add( _4004_codeptr,_4045_i ),(int)1 )];
                  for (int32_t _4046_k = _11070_; _4046_k < _11071_; ++_4046_k)
                  {
                    {
                      _ptr__4032_ri32[safe_add( _4028_rcode,_4040_codei )] = _ptr__3990_wi32[safe_add( _4005_code,_4046_k )];
                      _ptr__4031_rf64[safe_add( _4029_rcconst,_4040_codei )] = _ptr__3992_wf64[safe_add( _4003_cconst,_4046_k )];
                      ++ _4040_codei;
                    }
                  }
                  _ptr__4032_ri32[safe_add( _4028_rcode,_4040_codei )] = 3;
                  ++ _4040_codei;
                }
              }
              {}
              _ptr__4032_ri32[safe_add( _4028_rcode,_4040_codei )] = 1;
              _ptr__4031_rf64[safe_add( _4029_rcconst,_4040_codei )] = _ptr__4009_xi32[safe_add( _4008_pidxs,_4042_pi )];
              ++ _4040_codei;
              _ptr__4032_ri32[safe_add( _4028_rcode,_4040_codei )] = 5;
              ++ _4040_codei;
              _ptr__4032_ri32[safe_add( safe_add( _4027_rcodeptr,_4041_nzi ),(int)1 )] = _4040_codei;
              ++ _4041_nzi;
            }
          }
        }
      }
      if ((_4041_nzi != _4011_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nzi"));
        }
      }
      {}
      if ((_4040_codei != _4013_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
        }
      }
      {}
    }
  }
  _3989_xs->clear();
}
// End mosek.fusion.ExprDotParam.eval

// Begin mosek.fusion.ExprDotParam.toString
// Method mosek.fusion.ExprDotParam.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:2003:6-150
std::string mosek::fusion::ExprDotParam :: toString() { return mosek::fusion::p_ExprDotParam::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDotParam::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDotParam("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDotParam.toString

void mosek::fusion::p_ExprDotParam::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprDotParam::destroy() { mosek::fusion::p_ExprDotParam::_get_impl(this)->destroy(); }
// } class ExprDotParam
// class ExprMulParamElem { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1655:4-1984:5
mosek::fusion::ExprMulParamElem::ExprMulParamElem(mosek::fusion::p_ExprMulParamElem *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamElem()" << this << std::endl; */ }
mosek::fusion::ExprMulParamElem::~ExprMulParamElem() {  /* std::cout << "~ExprMulParamElem()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamElem::p_ExprMulParamElem
  (::mosek::fusion::ExprMulParamElem * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamElem.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1659:6-1669:7
mosek::fusion::ExprMulParamElem::t mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem
  (monty::rc_ptr< ::mosek::fusion::Parameter > _4047_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4048_e)
{ return new mosek::fusion::ExprMulParamElem(_4047_p,_4048_e); }
mosek::fusion::ExprMulParamElem::ExprMulParamElem
  (monty::rc_ptr< ::mosek::fusion::Parameter > _4047_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4048_e) : 
   ExprMulParamElem(new mosek::fusion::p_ExprMulParamElem(this))
{ mosek::fusion::p_ExprMulParamElem::_get_impl(this)->_initialize(_4047_p,_4048_e); }
void mosek::fusion::p_ExprMulParamElem::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _4047_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4048_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_4047_p->__mosek_2fusion_2Expression__getModel(),_4048_e),_4048_e->getShape());
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->p = _4047_p;
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->e = _4048_e;
    if ((_4047_p->getND() != _4048_e->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int32_t _11072_ = (int)0;
    int32_t _11073_ = _4047_p->getND();
    for (int32_t _4049_i = _11072_; _4049_i < _11073_; ++_4049_i)
    {
      {
        if ((_4047_p->getDim(_4049_i) != _4048_e->getDim(_4049_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprMulParamElem.ctor

// Begin mosek.fusion.ExprMulParamElem.eval
// Method mosek.fusion.ExprMulParamElem.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1673:6-1867:7
void mosek::fusion::ExprMulParamElem :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4050_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4051_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052_xs) { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->eval(_4050_rs,_4051_ws,_4052_xs); }
void mosek::fusion::p_ExprMulParamElem::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4050_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4051_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052_xs)
{
  e->eval(_4051_ws,_4050_rs,_4052_xs);
  _4051_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4053_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4053_wi32(_4053_wi32 ? _4053_wi32->raw() : nullptr,_4053_wi32 ? _4053_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4054_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4054_wi64(_4054_wi64 ? _4054_wi64->raw() : nullptr,_4054_wi64 ? _4054_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4055_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->f64;
  _checked_ptr_1<double> _ptr__4055_wf64(_4055_wf64 ? _4055_wf64->raw() : nullptr,_4055_wf64 ? _4055_wf64->size(0) : 0);
  int32_t _4056_nd = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->nd;
  int32_t _4057_nelem = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->nelem;
  int32_t _4058_nnz = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->nnz;
  bool _4059_hassp = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->hassp;
  int32_t _4060_ptr = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->ptr_base;
  int32_t _4061_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->ncodeatom;
  int32_t _4062_shape = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->shape_base;
  int32_t _4063_sp = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->sp_base;
  int32_t _4064_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->nidxs_base;
  int32_t _4065_cof = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->cof_base;
  int32_t _4066_cconst = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->cconst_base;
  int32_t _4067_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->codeptr_base;
  int32_t _4068_code = mosek::fusion::p_WorkStack::_get_impl(_4051_ws)->code_base;
  int32_t _4069_pnnz = p->getNumNonzero();
  int32_t _4070_psp = _4052_xs->alloci64(_4069_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_4052_xs)->i64,_4070_psp);
  int32_t _4071_pidxs = _4052_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4072_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4052_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4072_xi32(_4072_xi32 ? _4072_xi32->raw() : nullptr,_4072_xi32 ? _4072_xi32->size(0) : 0);
  p->getAllIndexes(_4072_xi32,_4071_pidxs);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4073_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4052_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__4073_xi64(_4073_xi64 ? _4073_xi64->raw() : nullptr,_4073_xi64 ? _4073_xi64->size(0) : 0);
  int32_t _4074_rnd = _4056_nd;
  int32_t _4075_rnnz = (int)0;
  int32_t _4076_rnelem = (int)0;
  int32_t _4077_rncodeatom = (int)0;
  if (_4059_hassp)
  {
    {
      int32_t _4078_ei = (int)0;
      int32_t _4079_pi = (int)0;
      while ( ((_4078_ei < _4057_nelem) && (_4079_pi < _4069_pnnz)) )
      {
        {
          if ((_ptr__4054_wi64[safe_add( _4063_sp,_4078_ei )] < _ptr__4073_xi64[safe_add( _4070_psp,_4079_pi )]))
          {
            {
              ++ _4078_ei;
            }
          }
          else if((_ptr__4054_wi64[safe_add( _4063_sp,_4078_ei )] > _ptr__4073_xi64[safe_add( _4070_psp,_4079_pi )]))
          {
            {
              ++ _4079_pi;
            }
          }
          else
          {
            {
              int32_t _4080_n = (_ptr__4053_wi32[safe_add( safe_add( _4060_ptr,_4078_ei ),(int)1 )] - _ptr__4053_wi32[safe_add( _4060_ptr,_4078_ei )]);
              _4075_rnnz += _4080_n;
              int32_t _11074_;
              bool _11075_ = (_4061_ncodeatom > (int)0);
              if (_11075_)
              {
                _11074_ = safe_add( (_ptr__4053_wi32[safe_add( _4067_codeptr,_ptr__4053_wi32[safe_add( safe_add( _4060_ptr,_4078_ei ),(int)1 )] )] - _ptr__4053_wi32[safe_add( _4067_codeptr,_ptr__4053_wi32[safe_add( _4060_ptr,_4078_ei )] )]),safe_mul( (int)4,_4080_n ) );
              }
              else
              {
                _11074_ = safe_mul( (int)3,_4080_n );
              }
              _4077_rncodeatom += _11074_;
              _4076_rnelem += (int)1;
              ++ _4078_ei;
              ++ _4079_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _4076_rnelem = _4069_pnnz;
      int32_t _11076_ = (int)0;
      int32_t _11077_ = _4069_pnnz;
      for (int32_t _4081_i = _11076_; _4081_i < _11077_; ++_4081_i)
      {
        {
          _4075_rnnz += (_ptr__4053_wi32[safe_add( safe_add( _4060_ptr,_ptr__4073_xi64[safe_add( _4070_psp,_4081_i )] ),(int)1 )] - _ptr__4053_wi32[safe_add( _4060_ptr,_ptr__4073_xi64[safe_add( _4070_psp,_4081_i )] )]);
        }
      }
      if ((_4061_ncodeatom > (int)0))
      {
        {
          int32_t _11078_ = (int)0;
          int32_t _11079_ = _4069_pnnz;
          for (int32_t _4082_i = _11078_; _4082_i < _11079_; ++_4082_i)
          {
            {
              _4077_rncodeatom += safe_add( (_ptr__4053_wi32[safe_add( _4067_codeptr,_ptr__4053_wi32[safe_add( safe_add( _4060_ptr,_ptr__4073_xi64[safe_add( _4070_psp,_4082_i )] ),(int)1 )] )] - _ptr__4053_wi32[safe_add( _4067_codeptr,_ptr__4053_wi32[safe_add( _4060_ptr,_ptr__4073_xi64[safe_add( _4070_psp,_4082_i )] )] )]),safe_mul( (int)4,(_ptr__4053_wi32[safe_add( safe_add( _4060_ptr,_ptr__4073_xi64[safe_add( _4070_psp,_4082_i )] ),(int)1 )] - _ptr__4053_wi32[safe_add( _4060_ptr,_ptr__4073_xi64[safe_add( _4070_psp,_4082_i )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int32_t _11080_ = (int)0;
          int32_t _11081_ = _4069_pnnz;
          for (int32_t _4083_i = _11080_; _4083_i < _11081_; ++_4083_i)
          {
            {
              _4077_rncodeatom += safe_mul( (int)3,(_ptr__4053_wi32[safe_add( safe_add( _4060_ptr,_ptr__4073_xi64[safe_add( _4070_psp,_4083_i )] ),(int)1 )] - _ptr__4053_wi32[safe_add( _4060_ptr,_ptr__4073_xi64[safe_add( _4070_psp,_4083_i )] )]) );
            }
          }
        }
      }
    }
  }
  int64_t _4084_rsz = (int)1;
  int32_t _11082_ = (int)0;
  int32_t _11083_ = _4056_nd;
  for (int32_t _4085_i = _11082_; _4085_i < _11083_; ++_4085_i)
  {
    {
      _4084_rsz *= _ptr__4053_wi32[safe_add( _4062_shape,_4085_i )];
    }
  }
  bool _4086_rhassp = (_4076_rnelem < _4084_rsz);
  _4050_rs->alloc_expr(_4074_rnd,_4076_rnelem,_4075_rnnz,_4086_rhassp,_4077_rncodeatom);
  int32_t _4087_rptr = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->ptr_base;
  int32_t _4088_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->nidxs_base;
  int32_t _11084_;
  bool _11085_ = _4086_rhassp;
  if (_11085_)
  {
    _11084_ = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->sp_base;
  }
  else
  {
    _11084_ = _4050_rs->alloci64(_4076_rnelem);
  }
  int32_t _4089_rsp = _11084_;
  int32_t _4090_rcof = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->cof_base;
  bool _4091_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->hassp;
  int32_t _4092_rshape = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->shape_base;
  int32_t _4093_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->codeptr_base;
  int32_t _4094_rcode = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->code_base;
  int32_t _4095_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4096_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4096_ri64(_4096_ri64 ? _4096_ri64->raw() : nullptr,_4096_ri64 ? _4096_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4097_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->f64;
  _checked_ptr_1<double> _ptr__4097_rf64(_4097_rf64 ? _4097_rf64->raw() : nullptr,_4097_rf64 ? _4097_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4098_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4050_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4098_ri32(_4098_ri32 ? _4098_ri32->raw() : nullptr,_4098_ri32 ? _4098_ri32->size(0) : 0);
  int32_t _11086_ = (int)0;
  int32_t _11087_ = _4056_nd;
  for (int32_t _4099_i = _11086_; _4099_i < _11087_; ++_4099_i)
  {
    {
      _ptr__4098_ri32[safe_add( _4092_rshape,_4099_i )] = _ptr__4053_wi32[safe_add( _4062_shape,_4099_i )];
    }
  }
  _ptr__4098_ri32[_4087_rptr] = (int)0;
  if ((_4077_rncodeatom > (int)0))
  {
    {
      _ptr__4098_ri32[_4093_rcodeptr] = (int)0;
    }
  }
  {}
  if (_4059_hassp)
  {
    {
      int32_t _4100_codei = (int)0;
      int32_t _4101_nzi = (int)0;
      int32_t _4102_elmi = (int)0;
      int32_t _4103_ei = (int)0;
      int32_t _4104_pi = (int)0;
      while ( ((_4103_ei < _4057_nelem) && (_4104_pi < _4069_pnnz)) )
      {
        {
          if ((_ptr__4054_wi64[safe_add( _4063_sp,_4103_ei )] < _ptr__4073_xi64[safe_add( _4070_psp,_4104_pi )]))
          {
            {
              ++ _4103_ei;
            }
          }
          else if((_ptr__4054_wi64[safe_add( _4063_sp,_4103_ei )] > _ptr__4073_xi64[safe_add( _4070_psp,_4104_pi )]))
          {
            {
              ++ _4104_pi;
            }
          }
          else
          {
            {
              int32_t _11088_ = _ptr__4053_wi32[safe_add( _4060_ptr,_4103_ei )];
              int32_t _11089_ = _ptr__4053_wi32[safe_add( safe_add( _4060_ptr,_4103_ei ),(int)1 )];
              for (int32_t _4105_i = _11088_; _4105_i < _11089_; ++_4105_i)
              {
                {
                  _ptr__4096_ri64[safe_add( _4088_rnidxs,_4101_nzi )] = _ptr__4054_wi64[safe_add( _4064_nidxs,_4105_i )];
                  _ptr__4097_rf64[safe_add( _4090_rcof,_4101_nzi )] = 0.0;
                  _ptr__4098_ri32[safe_add( _4094_rcode,_4100_codei )] = 2;
                  _ptr__4097_rf64[safe_add( _4095_rcconst,_4100_codei )] = _ptr__4055_wf64[safe_add( _4065_cof,_4105_i )];
                  ++ _4100_codei;
                  if ((_4061_ncodeatom > (int)0))
                  {
                    {
                      int32_t _11090_ = _ptr__4053_wi32[safe_add( _4067_codeptr,_4105_i )];
                      int32_t _11091_ = _ptr__4053_wi32[safe_add( safe_add( _4067_codeptr,_4105_i ),(int)1 )];
                      for (int32_t _4106_k = _11090_; _4106_k < _11091_; ++_4106_k)
                      {
                        {
                          _ptr__4098_ri32[safe_add( _4094_rcode,_4100_codei )] = _ptr__4053_wi32[safe_add( _4068_code,_4106_k )];
                          _ptr__4097_rf64[safe_add( _4095_rcconst,_4100_codei )] = _ptr__4055_wf64[safe_add( _4066_cconst,_4106_k )];
                          ++ _4100_codei;
                        }
                      }
                      _ptr__4098_ri32[safe_add( _4094_rcode,_4100_codei )] = 3;
                      ++ _4100_codei;
                    }
                  }
                  {}
                  _ptr__4098_ri32[safe_add( _4094_rcode,_4100_codei )] = 1;
                  _ptr__4097_rf64[safe_add( _4095_rcconst,_4100_codei )] = _ptr__4072_xi32[safe_add( _4071_pidxs,_4104_pi )];
                  ++ _4100_codei;
                  _ptr__4098_ri32[safe_add( _4094_rcode,_4100_codei )] = 5;
                  ++ _4100_codei;
                  _ptr__4098_ri32[safe_add( safe_add( _4093_rcodeptr,_4101_nzi ),(int)1 )] = _4100_codei;
                  ++ _4101_nzi;
                }
              }
              _ptr__4096_ri64[safe_add( _4089_rsp,_4102_elmi )] = _ptr__4054_wi64[safe_add( _4063_sp,_4103_ei )];
              _ptr__4098_ri32[safe_add( safe_add( _4087_rptr,_4102_elmi ),(int)1 )] = _4101_nzi;
              ++ _4102_elmi;
              ++ _4103_ei;
              ++ _4104_pi;
            }
          }
        }
      }
      if ((_4102_elmi != _4076_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_4101_nzi != _4075_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_4100_codei != _4077_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4107_codei = (int)0;
      int32_t _4108_nzi = (int)0;
      int32_t _11092_ = (int)0;
      int32_t _11093_ = _4069_pnnz;
      for (int32_t _4109_pi = _11092_; _4109_pi < _11093_; ++_4109_pi)
      {
        {
          int32_t _4110_elmi = _4109_pi;
          int64_t _4111_ei = _ptr__4073_xi64[safe_add( _4070_psp,_4109_pi )];
          int32_t _11094_ = _ptr__4053_wi32[safe_add( _4060_ptr,_4111_ei )];
          int32_t _11095_ = _ptr__4053_wi32[safe_add( safe_add( _4060_ptr,_4111_ei ),(int)1 )];
          for (int32_t _4112_i = _11094_; _4112_i < _11095_; ++_4112_i)
          {
            {
              _ptr__4096_ri64[safe_add( _4088_rnidxs,_4108_nzi )] = _ptr__4054_wi64[safe_add( _4064_nidxs,_4112_i )];
              _ptr__4097_rf64[safe_add( _4090_rcof,_4108_nzi )] = 0.0;
              _ptr__4098_ri32[safe_add( _4094_rcode,_4107_codei )] = 2;
              _ptr__4097_rf64[safe_add( _4095_rcconst,_4107_codei )] = _ptr__4055_wf64[safe_add( _4065_cof,_4112_i )];
              ++ _4107_codei;
              if ((_4061_ncodeatom > (int)0))
              {
                {
                  int32_t _11096_ = _ptr__4053_wi32[safe_add( _4067_codeptr,_4112_i )];
                  int32_t _11097_ = _ptr__4053_wi32[safe_add( safe_add( _4067_codeptr,_4112_i ),(int)1 )];
                  for (int32_t _4113_k = _11096_; _4113_k < _11097_; ++_4113_k)
                  {
                    {
                      _ptr__4098_ri32[safe_add( _4094_rcode,_4107_codei )] = _ptr__4053_wi32[safe_add( _4068_code,_4113_k )];
                      _ptr__4097_rf64[safe_add( _4095_rcconst,_4107_codei )] = _ptr__4055_wf64[safe_add( _4066_cconst,_4113_k )];
                      ++ _4107_codei;
                    }
                  }
                  _ptr__4098_ri32[safe_add( _4094_rcode,_4107_codei )] = 3;
                  ++ _4107_codei;
                }
              }
              {}
              _ptr__4098_ri32[safe_add( _4094_rcode,_4107_codei )] = 1;
              _ptr__4097_rf64[safe_add( _4095_rcconst,_4107_codei )] = _ptr__4072_xi32[safe_add( _4071_pidxs,_4109_pi )];
              ++ _4107_codei;
              _ptr__4098_ri32[safe_add( _4094_rcode,_4107_codei )] = 5;
              ++ _4107_codei;
              _ptr__4098_ri32[safe_add( safe_add( _4093_rcodeptr,_4108_nzi ),(int)1 )] = _4107_codei;
              ++ _4108_nzi;
            }
          }
          _ptr__4096_ri64[safe_add( _4089_rsp,_4110_elmi )] = _4111_ei;
          _ptr__4098_ri32[safe_add( safe_add( _4087_rptr,_4110_elmi ),(int)1 )] = _4108_nzi;
        }
      }
      if ((_4077_rncodeatom != _4107_codei))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Invalid code list result"));
        }
      }
      {}
    }
  }
  if ((!_4091_rhassp))
  {
    {
      _4050_rs->popi64(_4076_rnelem);
    }
  }
  {}
  _4052_xs->clear();
}
// End mosek.fusion.ExprMulParamElem.eval

// Begin mosek.fusion.ExprMulParamElem.toString
// Method mosek.fusion.ExprMulParamElem.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1671:6-154
std::string mosek::fusion::ExprMulParamElem :: toString() { return mosek::fusion::p_ExprMulParamElem::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamElem::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamElem("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamElem.toString

void mosek::fusion::p_ExprMulParamElem::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamElem::destroy() { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->destroy(); }
// } class ExprMulParamElem
// class ExprMulParamRight { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1206:4-1651:5
mosek::fusion::ExprMulParamRight::ExprMulParamRight(mosek::fusion::p_ExprMulParamRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamRight()" << this << std::endl; */ }
mosek::fusion::ExprMulParamRight::~ExprMulParamRight() {  /* std::cout << "~ExprMulParamRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamRight::p_ExprMulParamRight
  (::mosek::fusion::ExprMulParamRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamRight.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1210:6-1219:7
mosek::fusion::ExprMulParamRight::t mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _4114_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4115_p)
{ return new mosek::fusion::ExprMulParamRight(_4114_e,_4115_p); }
mosek::fusion::ExprMulParamRight::ExprMulParamRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _4114_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4115_p) : 
   ExprMulParamRight(new mosek::fusion::p_ExprMulParamRight(this))
{ mosek::fusion::p_ExprMulParamRight::_get_impl(this)->_initialize(_4114_e,_4115_p); }
void mosek::fusion::p_ExprMulParamRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4114_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4115_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4115_p->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_4114_e->getDim((int)0)),(int32_t)(_4115_p->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->p = _4115_p;
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->e = _4114_e;
    if (((_4115_p->getND() != (int)2) || (_4114_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_4115_p->getDim((int)0) != _4114_e->getDim((int)1)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamRight.ctor

// Begin mosek.fusion.ExprMulParamRight.eval
// Method mosek.fusion.ExprMulParamRight.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1223:6-1519:7
void mosek::fusion::ExprMulParamRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4116_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4117_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4118_xs) { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->eval(_4116_rs,_4117_ws,_4118_xs); }
void mosek::fusion::p_ExprMulParamRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4116_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4117_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4118_xs)
{
  e->eval(_4117_ws,_4116_rs,_4118_xs);
  _4117_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4119_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4119_wi32(_4119_wi32 ? _4119_wi32->raw() : nullptr,_4119_wi32 ? _4119_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4120_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4120_wi64(_4120_wi64 ? _4120_wi64->raw() : nullptr,_4120_wi64 ? _4120_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4121_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->f64;
  _checked_ptr_1<double> _ptr__4121_wf64(_4121_wf64 ? _4121_wf64->raw() : nullptr,_4121_wf64 ? _4121_wf64->size(0) : 0);
  int32_t _4122_nd = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->nd;
  int32_t _4123_nelem = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->nelem;
  int32_t _4124_nnz = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->nnz;
  bool _4125_hassp = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->hassp;
  int32_t _4126_ptr = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->ptr_base;
  int32_t _4127_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->ncodeatom;
  int32_t _4128_shape = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->shape_base;
  int32_t _4129_sp = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->sp_base;
  int32_t _4130_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->nidxs_base;
  int32_t _4131_cof = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->cof_base;
  int32_t _4132_cconst = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->cconst_base;
  int32_t _4133_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->codeptr_base;
  int32_t _4134_code = mosek::fusion::p_WorkStack::_get_impl(_4117_ws)->code_base;
  if (((_4122_nd != (int)2) || (p->getDim((int)0) != _ptr__4119_wi32[safe_add( _4128_shape,(int)1 )])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int32_t _4135_edim0 = _ptr__4119_wi32[_4128_shape];
  int32_t _4136_edim1 = _ptr__4119_wi32[safe_add( _4128_shape,(int)1 )];
  int32_t _4137_pdim0 = p->getDim((int)0);
  int32_t _4138_pdim1 = p->getDim((int)1);
  int32_t _4139_pnnz = p->getNumNonzero();
  int32_t _4140_pidxs = _4118_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4141_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4118_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4141_xi32(_4141_xi32 ? _4141_xi32->raw() : nullptr,_4141_xi32 ? _4141_xi32->size(0) : 0);
  p->getAllIndexes(_4141_xi32,_4140_pidxs);
  int32_t _4142_pperm = _4118_xs->alloci32(_4139_pnnz);
  int32_t _4143_psp = _4118_xs->alloci64(_4139_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_4118_xs)->i64,_4143_psp);
  {
    int32_t _4144_pptr = _4118_xs->alloci32(safe_add( _4138_pdim1,(int)1 ));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4145_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4118_xs)->i32;
    _checked_ptr_1<int32_t> _ptr__4145_xi32(_4145_xi32 ? _4145_xi32->raw() : nullptr,_4145_xi32 ? _4145_xi32->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4146_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4118_xs)->i64;
    _checked_ptr_1<int64_t> _ptr__4146_xi64(_4146_xi64 ? _4146_xi64->raw() : nullptr,_4146_xi64 ? _4146_xi64->size(0) : 0);
    int32_t _11098_ = (int)0;
    int32_t _11099_ = safe_add( _4138_pdim1,(int)1 );
    for (int32_t _4147_i = _11098_; _4147_i < _11099_; ++_4147_i)
    {
      {
        _ptr__4145_xi32[safe_add( _4144_pptr,_4147_i )] = (int)0;
      }
    }
    int32_t _11100_ = (int)0;
    int32_t _11101_ = _4139_pnnz;
    for (int32_t _4148_i = _11100_; _4148_i < _11101_; ++_4148_i)
    {
      {
        ++ _ptr__4145_xi32[safe_add( safe_add( _4144_pptr,(_ptr__4146_xi64[safe_add( _4143_psp,_4148_i )] % _4138_pdim1) ),(int)1 )];
      }
    }
    int32_t _11102_ = (int)0;
    int32_t _11103_ = _4138_pdim1;
    for (int32_t _4149_i = _11102_; _4149_i < _11103_; ++_4149_i)
    {
      {
        _ptr__4145_xi32[safe_add( safe_add( _4144_pptr,_4149_i ),(int)1 )] += _ptr__4145_xi32[safe_add( _4144_pptr,_4149_i )];
      }
    }
    int32_t _11104_ = (int)0;
    int32_t _11105_ = _4139_pnnz;
    for (int32_t _4150_i = _11104_; _4150_i < _11105_; ++_4150_i)
    {
      {
        _ptr__4145_xi32[safe_add( _4142_pperm,_ptr__4145_xi32[safe_add( _4144_pptr,(_ptr__4146_xi64[safe_add( _4143_psp,_4150_i )] % _4138_pdim1) )] )] = _4150_i;
        ++ _ptr__4145_xi32[safe_add( _4144_pptr,(_ptr__4146_xi64[safe_add( _4143_psp,_4150_i )] % _4138_pdim1) )];
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4151_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4118_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4151_xi32(_4151_xi32 ? _4151_xi32->raw() : nullptr,_4151_xi32 ? _4151_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4152_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4118_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__4152_xi64(_4152_xi64 ? _4152_xi64->raw() : nullptr,_4152_xi64 ? _4152_xi64->size(0) : 0);
  int32_t _4153_rncodeatom = (int)0;
  int32_t _4154_rnelem = (int)0;
  int32_t _4155_rnnz = (int)0;
  if (((!p->isSparse()) && (!_4125_hassp)))
  {
    {
      _4155_rnnz = safe_mul( _4124_nnz,_4138_pdim1 );
      _4154_rnelem = safe_mul( _4135_edim0,_4138_pdim1 );
      int32_t _11106_;
      bool _11107_ = (_4127_ncodeatom > (int)0);
      if (_11107_)
      {
        _11106_ = safe_mul( safe_add( _4127_ncodeatom,safe_mul( _4124_nnz,(int)4 ) ),_4138_pdim1 );
      }
      else
      {
        _11106_ = safe_mul( safe_mul( _4124_nnz,_4138_pdim1 ),(int)3 );
      }
      _4153_rncodeatom = _11106_;
    }
  }
  else if((!_4125_hassp))
  {
    {
      int32_t _4156_i1 = (int)0;
      while ( (_4156_i1 < _4139_pnnz) )
      {
        {
          int64_t _4157_psubj = (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4156_i1 )] )] % _4138_pdim1);
          int32_t _4158_b1 = _4156_i1;
          while ( ((_4156_i1 < _4139_pnnz) && ((_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4156_i1 )] )] % _4138_pdim1) == _4157_psubj)) )
          {
            {
              int64_t _4159_psubi = (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4156_i1 )] )] / _4138_pdim1);
              int32_t _11108_ = (int)0;
              int32_t _11109_ = _4135_edim0;
              for (int32_t _4160_i0 = _11108_; _4160_i0 < _11109_; ++_4160_i0)
              {
                {
                  int64_t _4161_eidx = safe_add( safe_mul( _4160_i0,_4136_edim1 ),_4159_psubi );
                  int32_t _4162_n = (_ptr__4119_wi32[safe_add( safe_add( _4126_ptr,_4161_eidx ),(int)1 )] - _ptr__4119_wi32[safe_add( _4126_ptr,_4161_eidx )]);
                  _4155_rnnz += _4162_n;
                  int32_t _11110_;
                  bool _11111_ = (_4127_ncodeatom > (int)0);
                  if (_11111_)
                  {
                    _11110_ = safe_add( (_ptr__4119_wi32[safe_add( _4133_codeptr,_ptr__4119_wi32[safe_add( safe_add( _4126_ptr,_4161_eidx ),(int)1 )] )] - _ptr__4119_wi32[safe_add( _4133_codeptr,_ptr__4119_wi32[safe_add( _4126_ptr,_4161_eidx )] )]),safe_mul( _4162_n,(int)4 ) );
                  }
                  else
                  {
                    _11110_ = safe_mul( _4162_n,(int)3 );
                  }
                  _4153_rncodeatom += _11110_;
                }
              }
              ++ _4156_i1;
            }
          }
          _4154_rnelem += _4135_edim0;
        }
      }
    }
  }
  else
  {
    {
      int32_t _4163_i0 = (int)0;
      while ( (_4163_i0 < _4123_nelem) )
      {
        {
          int64_t _4164_erow = (_ptr__4120_wi64[safe_add( _4129_sp,_4163_i0 )] / _4136_edim1);
          int32_t _4165_b0 = _4163_i0;
          int64_t _4166_rowend = safe_mul( safe_add( _4164_erow,(int)1 ),_4136_edim1 );
          while ( ((_4163_i0 < _4123_nelem) && (_ptr__4120_wi64[safe_add( _4129_sp,_4163_i0 )] < _4166_rowend)) )
          {
            {
              ++ _4163_i0;
            }
          }
          int32_t _4167_i1 = (int)0;
          while ( (_4167_i1 < _4139_pnnz) )
          {
            {
              int64_t _4168_pcol = (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4167_i1 )] )] % _4138_pdim1);
              int32_t _4169_b1 = _4167_i1;
              while ( ((_4167_i1 < _4139_pnnz) && (_4168_pcol == (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4167_i1 )] )] % _4138_pdim1))) )
              {
                {
                  ++ _4167_i1;
                }
              }
              int32_t _4170_nentryelm = (int)0;
              int32_t _4171_ii1 = _4169_b1;
              int32_t _4172_ii0 = _4165_b0;
              while ( ((_4172_ii0 < _4163_i0) && (_4171_ii1 < _4167_i1)) )
              {
                {
                  int64_t _4173_ecol = (_ptr__4120_wi64[safe_add( _4129_sp,_4172_ii0 )] % _4136_edim1);
                  int64_t _4174_prow = (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4171_ii1 )] )] / _4138_pdim1);
                  if ((_4173_ecol < _4174_prow))
                  {
                    {
                      ++ _4172_ii0;
                    }
                  }
                  else if((_4173_ecol > _4174_prow))
                  {
                    {
                      ++ _4171_ii1;
                    }
                  }
                  else
                  {
                    {
                      int32_t _4175_n = (_ptr__4119_wi32[safe_add( safe_add( _4126_ptr,_4172_ii0 ),(int)1 )] - _ptr__4119_wi32[safe_add( _4126_ptr,_4172_ii0 )]);
                      _4155_rnnz += _4175_n;
                      int32_t _11112_;
                      bool _11113_ = (_4127_ncodeatom > (int)0);
                      if (_11113_)
                      {
                        _11112_ = safe_add( (_ptr__4119_wi32[safe_add( _4133_codeptr,_ptr__4119_wi32[safe_add( safe_add( _4126_ptr,_4172_ii0 ),(int)1 )] )] - _ptr__4119_wi32[safe_add( _4133_codeptr,_ptr__4119_wi32[safe_add( _4126_ptr,_4172_ii0 )] )]),safe_mul( _4175_n,(int)4 ) );
                      }
                      else
                      {
                        _11112_ = safe_mul( _4175_n,(int)3 );
                      }
                      _4153_rncodeatom += _11112_;
                      ++ _4172_ii0;
                      ++ _4171_ii1;
                      ++ _4170_nentryelm;
                    }
                  }
                }
              }
              if ((_4170_nentryelm > (int)0))
              {
                {
                  ++ _4154_rnelem;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  int32_t _4176_rnd = (int)2;
  bool _4177_rhassp = (_4154_rnelem < safe_mul( _4138_pdim1,_4135_edim0 ));
  _4116_rs->alloc_expr(_4176_rnd,_4154_rnelem,_4155_rnnz,_4177_rhassp,_4153_rncodeatom);
  int32_t _4178_rptr = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->ptr_base;
  int32_t _4179_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->nidxs_base;
  int32_t _11114_;
  bool _11115_ = _4177_rhassp;
  if (_11115_)
  {
    _11114_ = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->sp_base;
  }
  else
  {
    _11114_ = _4116_rs->alloci64(_4154_rnelem);
  }
  int32_t _4180_rsp = _11114_;
  int32_t _4181_rcof = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->cof_base;
  bool _4182_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->hassp;
  int32_t _4183_rshape = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->shape_base;
  int32_t _4184_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->codeptr_base;
  int32_t _4185_rcode = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->code_base;
  int32_t _4186_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4187_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4187_ri64(_4187_ri64 ? _4187_ri64->raw() : nullptr,_4187_ri64 ? _4187_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4188_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->f64;
  _checked_ptr_1<double> _ptr__4188_rf64(_4188_rf64 ? _4188_rf64->raw() : nullptr,_4188_rf64 ? _4188_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4189_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4116_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4189_ri32(_4189_ri32 ? _4189_ri32->raw() : nullptr,_4189_ri32 ? _4189_ri32->size(0) : 0);
  _ptr__4189_ri32[_4178_rptr] = (int)0;
  if ((_4153_rncodeatom > (int)0))
  {
    {
      _ptr__4189_ri32[_4184_rcodeptr] = (int)0;
    }
  }
  {}
  _ptr__4189_ri32[_4183_rshape] = _4135_edim0;
  _ptr__4189_ri32[safe_add( _4183_rshape,(int)1 )] = _4138_pdim1;
  int32_t _4190_codei = (int)0;
  int32_t _4191_elmi = (int)0;
  int32_t _4192_nzi = (int)0;
  if ((!_4125_hassp))
  {
    {
      int32_t _11116_ = (int)0;
      int32_t _11117_ = _4135_edim0;
      for (int32_t _4193_i = _11116_; _4193_i < _11117_; ++_4193_i)
      {
        {
          int32_t _4194_i1 = (int)0;
          while ( (_4194_i1 < _4139_pnnz) )
          {
            {
              int32_t _4195_b1 = _4194_i1;
              int64_t _4196_psubj = (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4194_i1 )] )] % _4138_pdim1);
              while ( ((_4194_i1 < _4139_pnnz) && (_4196_psubj == (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4194_i1 )] )] % _4138_pdim1))) )
              {
                {
                  ++ _4194_i1;
                }
              }
              int32_t _4197_ii1 = _4195_b1;
              while ( (_4197_ii1 < _4194_i1) )
              {
                {
                  int64_t _4198_psubi = (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4197_ii1 )] )] / _4138_pdim1);
                  int64_t _4199_eidx = safe_add( safe_mul( _4193_i,_4136_edim1 ),_4198_psubi );
                  int32_t _4200_pidx = _ptr__4151_xi32[safe_add( _4140_pidxs,_ptr__4151_xi32[safe_add( _4142_pperm,_4197_ii1 )] )];
                  int32_t _11118_ = _ptr__4119_wi32[safe_add( _4126_ptr,_4199_eidx )];
                  int32_t _11119_ = _ptr__4119_wi32[safe_add( safe_add( _4126_ptr,_4199_eidx ),(int)1 )];
                  for (int32_t _4201_k = _11118_; _4201_k < _11119_; ++_4201_k)
                  {
                    {
                      _ptr__4187_ri64[safe_add( _4179_rnidxs,_4192_nzi )] = _ptr__4120_wi64[safe_add( _4130_nidxs,_4201_k )];
                      _ptr__4188_rf64[safe_add( _4181_rcof,_4192_nzi )] = (int)0;
                      _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = 2;
                      _ptr__4188_rf64[safe_add( _4186_rcconst,_4190_codei )] = _ptr__4121_wf64[safe_add( _4131_cof,_4201_k )];
                      ++ _4190_codei;
                      if ((_4127_ncodeatom > (int)0))
                      {
                        {
                          int32_t _11120_ = _ptr__4119_wi32[safe_add( _4133_codeptr,_4201_k )];
                          int32_t _11121_ = _ptr__4119_wi32[safe_add( safe_add( _4133_codeptr,_4201_k ),(int)1 )];
                          for (int32_t _4202_l = _11120_; _4202_l < _11121_; ++_4202_l)
                          {
                            {
                              _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = _ptr__4119_wi32[safe_add( _4134_code,_4202_l )];
                              _ptr__4188_rf64[safe_add( _4186_rcconst,_4190_codei )] = _ptr__4121_wf64[safe_add( _4132_cconst,_4202_l )];
                              ++ _4190_codei;
                            }
                          }
                          _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = 3;
                          ++ _4190_codei;
                        }
                      }
                      {}
                      _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = 1;
                      _ptr__4188_rf64[safe_add( _4186_rcconst,_4190_codei )] = _4200_pidx;
                      ++ _4190_codei;
                      _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = 5;
                      ++ _4190_codei;
                      _ptr__4189_ri32[safe_add( safe_add( _4184_rcodeptr,_4192_nzi ),(int)1 )] = _4190_codei;
                      ++ _4192_nzi;
                    }
                  }
                  ++ _4197_ii1;
                }
              }
              _ptr__4189_ri32[safe_add( safe_add( _4178_rptr,_4191_elmi ),(int)1 )] = _4192_nzi;
              _ptr__4187_ri64[safe_add( _4180_rsp,_4191_elmi )] = safe_add( safe_mul( _4193_i,_4138_pdim1 ),_4196_psubj );
              ++ _4191_elmi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _4203_i0 = (int)0;
      while ( (_4203_i0 < _4123_nelem) )
      {
        {
          int64_t _4204_erow = (_ptr__4120_wi64[safe_add( _4129_sp,_4203_i0 )] / _4136_edim1);
          int32_t _4205_b0 = _4203_i0;
          int64_t _4206_rowend = safe_mul( safe_add( _4204_erow,(int)1 ),_4136_edim1 );
          while ( ((_4203_i0 < _4123_nelem) && (_ptr__4120_wi64[safe_add( _4129_sp,_4203_i0 )] < _4206_rowend)) )
          {
            {
              ++ _4203_i0;
            }
          }
          int32_t _4207_i1 = (int)0;
          while ( (_4207_i1 < _4139_pnnz) )
          {
            {
              int64_t _4208_pcol = (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4207_i1 )] )] % _4138_pdim1);
              int32_t _4209_b1 = _4207_i1;
              while ( ((_4207_i1 < _4139_pnnz) && (_4208_pcol == (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4207_i1 )] )] % _4138_pdim1))) )
              {
                {
                  ++ _4207_i1;
                }
              }
              int32_t _4210_nentryelm = (int)0;
              int32_t _4211_ii1 = _4209_b1;
              int32_t _4212_ii0 = _4205_b0;
              while ( ((_4212_ii0 < _4203_i0) && (_4211_ii1 < _4207_i1)) )
              {
                {
                  int64_t _4213_ecol = (_ptr__4120_wi64[safe_add( _4129_sp,_4212_ii0 )] % _4136_edim1);
                  int64_t _4214_prow = (_ptr__4152_xi64[safe_add( _4143_psp,_ptr__4151_xi32[safe_add( _4142_pperm,_4211_ii1 )] )] / _4138_pdim1);
                  if ((_4213_ecol < _4214_prow))
                  {
                    {
                      ++ _4212_ii0;
                    }
                  }
                  else if((_4213_ecol > _4214_prow))
                  {
                    {
                      ++ _4211_ii1;
                    }
                  }
                  else
                  {
                    {
                      int32_t _4215_pidx = _ptr__4151_xi32[safe_add( _4140_pidxs,_ptr__4151_xi32[safe_add( _4142_pperm,_4211_ii1 )] )];
                      int32_t _11122_ = _ptr__4119_wi32[safe_add( _4126_ptr,_4212_ii0 )];
                      int32_t _11123_ = _ptr__4119_wi32[safe_add( safe_add( _4126_ptr,_4212_ii0 ),(int)1 )];
                      for (int32_t _4216_k = _11122_; _4216_k < _11123_; ++_4216_k)
                      {
                        {
                          _ptr__4187_ri64[safe_add( _4179_rnidxs,_4192_nzi )] = _ptr__4120_wi64[safe_add( _4130_nidxs,_4216_k )];
                          _ptr__4188_rf64[safe_add( _4181_rcof,_4192_nzi )] = (int)0;
                          _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = 2;
                          _ptr__4188_rf64[safe_add( _4186_rcconst,_4190_codei )] = _ptr__4121_wf64[safe_add( _4131_cof,_4216_k )];
                          ++ _4190_codei;
                          if ((_4127_ncodeatom > (int)0))
                          {
                            {
                              int32_t _11124_ = _ptr__4119_wi32[safe_add( _4133_codeptr,_4216_k )];
                              int32_t _11125_ = _ptr__4119_wi32[safe_add( safe_add( _4133_codeptr,_4216_k ),(int)1 )];
                              for (int32_t _4217_l = _11124_; _4217_l < _11125_; ++_4217_l)
                              {
                                {
                                  _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = _ptr__4119_wi32[safe_add( _4134_code,_4217_l )];
                                  _ptr__4188_rf64[safe_add( _4186_rcconst,_4190_codei )] = _ptr__4121_wf64[safe_add( _4132_cconst,_4217_l )];
                                  ++ _4190_codei;
                                }
                              }
                              _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = 3;
                              ++ _4190_codei;
                            }
                          }
                          {}
                          _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = 1;
                          _ptr__4188_rf64[safe_add( _4186_rcconst,_4190_codei )] = _4215_pidx;
                          ++ _4190_codei;
                          _ptr__4189_ri32[safe_add( _4185_rcode,_4190_codei )] = 5;
                          ++ _4190_codei;
                          _ptr__4189_ri32[safe_add( safe_add( _4184_rcodeptr,_4192_nzi ),(int)1 )] = _4190_codei;
                          ++ _4192_nzi;
                        }
                      }
                      ++ _4212_ii0;
                      ++ _4211_ii1;
                      ++ _4210_nentryelm;
                    }
                  }
                }
              }
              if ((_4210_nentryelm > (int)0))
              {
                {
                  _ptr__4189_ri32[safe_add( safe_add( _4178_rptr,_4191_elmi ),(int)1 )] = _4192_nzi;
                  _ptr__4187_ri64[safe_add( _4180_rsp,_4191_elmi )] = safe_add( safe_mul( _4204_erow,_4138_pdim1 ),_4208_pcol );
                  ++ _4191_elmi;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((!_4182_rhassp))
  {
    {
      _4116_rs->popi64(_4154_rnelem);
    }
  }
  {}
  if ((_4191_elmi != _4154_rnelem))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken elmi"));
    }
  }
  {}
  if ((_4192_nzi != _4155_rnnz))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken nzi"));
    }
  }
  {}
  if ((_4190_codei != _4153_rncodeatom))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken codei"));
    }
  }
  {}
  _4118_xs->clear();
}
// End mosek.fusion.ExprMulParamRight.eval

// Begin mosek.fusion.ExprMulParamRight.toString
// Method mosek.fusion.ExprMulParamRight.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:1221:6-155
std::string mosek::fusion::ExprMulParamRight :: toString() { return mosek::fusion::p_ExprMulParamRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamRight.toString

void mosek::fusion::p_ExprMulParamRight::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamRight::destroy() { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->destroy(); }
// } class ExprMulParamRight
// class ExprMulParamLeft { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:625:4-1201:5
mosek::fusion::ExprMulParamLeft::ExprMulParamLeft(mosek::fusion::p_ExprMulParamLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulParamLeft::~ExprMulParamLeft() {  /* std::cout << "~ExprMulParamLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamLeft::p_ExprMulParamLeft
  (::mosek::fusion::ExprMulParamLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamLeft.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:629:6-638:7
mosek::fusion::ExprMulParamLeft::t mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _4218_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4219_e)
{ return new mosek::fusion::ExprMulParamLeft(_4218_p,_4219_e); }
mosek::fusion::ExprMulParamLeft::ExprMulParamLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _4218_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4219_e) : 
   ExprMulParamLeft(new mosek::fusion::p_ExprMulParamLeft(this))
{ mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->_initialize(_4218_p,_4219_e); }
void mosek::fusion::p_ExprMulParamLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _4218_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4219_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4218_p->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_4218_p->getDim((int)0)),(int32_t)(_4219_e->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->p = _4218_p;
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->e = _4219_e;
    if (((_4218_p->getND() != (int)2) || (_4219_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_4218_p->getDim((int)1) != _4219_e->getDim((int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamLeft.ctor

// Begin mosek.fusion.ExprMulParamLeft.eval
// Method mosek.fusion.ExprMulParamLeft.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:642:6-1077:7
void mosek::fusion::ExprMulParamLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4220_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4222_xs) { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->eval(_4220_rs,_4221_ws,_4222_xs); }
void mosek::fusion::p_ExprMulParamLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4220_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4222_xs)
{
  e->eval(_4221_ws,_4220_rs,_4222_xs);
  _4221_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4223_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4223_wi32(_4223_wi32 ? _4223_wi32->raw() : nullptr,_4223_wi32 ? _4223_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4224_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4224_wi64(_4224_wi64 ? _4224_wi64->raw() : nullptr,_4224_wi64 ? _4224_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4225_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->f64;
  _checked_ptr_1<double> _ptr__4225_wf64(_4225_wf64 ? _4225_wf64->raw() : nullptr,_4225_wf64 ? _4225_wf64->size(0) : 0);
  int32_t _4226_nd = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->nd;
  int32_t _4227_nelem = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->nelem;
  int32_t _4228_nnz = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->nnz;
  bool _4229_hassp = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->hassp;
  int32_t _4230_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->ncodeatom;
  int32_t _4231_ptr = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->ptr_base;
  int32_t _4232_code = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->code_base;
  int32_t _4233_cconst = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->cconst_base;
  int32_t _4234_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->codeptr_base;
  int32_t _4235_shape = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->shape_base;
  int32_t _4236_sp = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->sp_base;
  int32_t _4237_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->nidxs_base;
  int32_t _4238_cof = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->cof_base;
  int32_t _4239_consts = mosek::fusion::p_WorkStack::_get_impl(_4221_ws)->cconst_base;
  if (((_4226_nd != (int)2) || (_ptr__4223_wi32[_4235_shape] != p->getDim((int)1))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int32_t _4240_pdim0 = p->getDim((int)0);
  int32_t _4241_pdim1 = p->getDim((int)1);
  int32_t _4242_edim0 = _ptr__4223_wi32[_4235_shape];
  int32_t _4243_edim1 = _ptr__4223_wi32[safe_add( _4235_shape,(int)1 )];
  int32_t _4244_pnnz = p->getNumNonzero();
  int32_t _4245_pidxs = _4222_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4246_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4222_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4246_xi32(_4246_xi32 ? _4246_xi32->raw() : nullptr,_4246_xi32 ? _4246_xi32->size(0) : 0);
  p->getAllIndexes(_4246_xi32,_4245_pidxs);
  if (((!_4229_hassp) && (!p->isSparse())))
  {
    {
      int32_t _4247_rnd = (int)2;
      int32_t _4248_rnelem = safe_mul( _4243_edim1,p->getDim((int)0) );
      int32_t _4249_rnnz = safe_mul( _4228_nnz,p->getDim((int)0) );
      int32_t _11126_;
      bool _11127_ = (_4230_ncodeatom > (int)0);
      if (_11127_)
      {
        _11126_ = safe_add( safe_mul( p->getDim((int)0),_4230_ncodeatom ),safe_mul( (int)4,_4249_rnnz ) );
      }
      else
      {
        _11126_ = safe_mul( (int)3,_4249_rnnz );
      }
      int32_t _4250_rncodeatom = _11126_;
      bool _4251_rhassp = false;
      _4220_rs->alloc_expr(_4247_rnd,_4248_rnelem,_4249_rnnz,_4251_rhassp,_4250_rncodeatom);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4252_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4252_ri64(_4252_ri64 ? _4252_ri64->raw() : nullptr,_4252_ri64 ? _4252_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4253_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->f64;
      _checked_ptr_1<double> _ptr__4253_rf64(_4253_rf64 ? _4253_rf64->raw() : nullptr,_4253_rf64 ? _4253_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4254_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4254_ri32(_4254_ri32 ? _4254_ri32->raw() : nullptr,_4254_ri32 ? _4254_ri32->size(0) : 0);
      int32_t _4255_rptr = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->ptr_base;
      int32_t _4256_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->nidxs_base;
      int32_t _4257_rcof = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->cof_base;
      int32_t _4258_rcode = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->code_base;
      int32_t _4259_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->codeptr_base;
      int32_t _4260_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->cconst_base;
      bool _4261_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->hassp;
      int32_t _4262_rshape = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->shape_base;
      _ptr__4254_ri32[_4262_rshape] = _4240_pdim0;
      _ptr__4254_ri32[safe_add( _4262_rshape,(int)1 )] = _4243_edim1;
      {
        _ptr__4254_ri32[_4255_rptr] = (int)0;
        _ptr__4254_ri32[_4259_rcodeptr] = (int)0;
        int32_t _4263_nzi = (int)0;
        int32_t _4264_elmi = (int)0;
        int32_t _4265_codei = (int)0;
        int32_t _11128_ = (int)0;
        int32_t _11129_ = p->getDim((int)0);
        for (int32_t _4266_i = _11128_; _4266_i < _11129_; ++_4266_i)
        {
          {
            int32_t _11130_ = (int)0;
            int32_t _11131_ = e->getDim((int)1);
            for (int32_t _4267_j = _11130_; _4267_j < _11131_; ++_4267_j)
            {
              {
                int32_t _11132_ = (int)0;
                int32_t _11133_ = p->getDim((int)1);
                for (int32_t _4268_k = _11132_; _4268_k < _11133_; ++_4268_k)
                {
                  {
                    int32_t _11134_ = _ptr__4223_wi32[safe_add( safe_add( _4231_ptr,safe_mul( _4268_k,_4243_edim1 ) ),_4267_j )];
                    int32_t _11135_ = _ptr__4223_wi32[safe_add( safe_add( safe_add( _4231_ptr,safe_mul( _4268_k,_4243_edim1 ) ),_4267_j ),(int)1 )];
                    for (int32_t _4269_l = _11134_; _4269_l < _11135_; ++_4269_l)
                    {
                      {
                        _ptr__4252_ri64[safe_add( _4256_rnidxs,_4263_nzi )] = _ptr__4224_wi64[safe_add( _4237_nidxs,_4269_l )];
                        _ptr__4253_rf64[safe_add( _4257_rcof,_4263_nzi )] = 0.0;
                        _ptr__4254_ri32[safe_add( _4258_rcode,_4265_codei )] = 2;
                        _ptr__4253_rf64[safe_add( _4260_rcconst,_4265_codei )] = _ptr__4225_wf64[safe_add( _4238_cof,_4269_l )];
                        ++ _4265_codei;
                        if ((_4230_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11136_ = _ptr__4223_wi32[safe_add( _4234_codeptr,_4269_l )];
                            int32_t _11137_ = _ptr__4223_wi32[safe_add( safe_add( _4234_codeptr,_4269_l ),(int)1 )];
                            for (int32_t _4270_m = _11136_; _4270_m < _11137_; ++_4270_m)
                            {
                              {
                                _ptr__4254_ri32[safe_add( _4258_rcode,_4265_codei )] = _ptr__4223_wi32[safe_add( _4232_code,_4270_m )];
                                _ptr__4253_rf64[safe_add( _4260_rcconst,_4265_codei )] = _ptr__4225_wf64[safe_add( _4233_cconst,_4270_m )];
                                ++ _4265_codei;
                              }
                            }
                            _ptr__4254_ri32[safe_add( _4258_rcode,_4265_codei )] = 3;
                            ++ _4265_codei;
                          }
                        }
                        {}
                        _ptr__4254_ri32[safe_add( _4258_rcode,_4265_codei )] = 1;
                        _ptr__4253_rf64[safe_add( _4260_rcconst,_4265_codei )] = _ptr__4246_xi32[safe_add( safe_add( _4245_pidxs,safe_mul( _4266_i,_4241_pdim1 ) ),_4268_k )];
                        ++ _4265_codei;
                        _ptr__4254_ri32[safe_add( _4258_rcode,_4265_codei )] = 5;
                        ++ _4265_codei;
                        _ptr__4254_ri32[safe_add( safe_add( _4259_rcodeptr,_4263_nzi ),(int)1 )] = _4265_codei;
                        ++ _4263_nzi;
                      }
                    }
                  }
                }
                _ptr__4254_ri32[safe_add( safe_add( _4255_rptr,_4264_elmi ),(int)1 )] = _4263_nzi;
                ++ _4264_elmi;
              }
            }
          }
        }
        if ((_4265_codei != _4250_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4263_nzi != _4249_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4264_elmi != _4248_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        int32_t _11138_ = (int)0;
        int32_t _11139_ = _4248_rnelem;
        for (int32_t _4271_i = _11138_; _4271_i < _11139_; ++_4271_i)
        {
          {
            if ((_ptr__4254_ri32[safe_add( _4255_rptr,_4271_i )] > _ptr__4254_ri32[safe_add( safe_add( _4255_rptr,_4271_i ),(int)1 )]))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr indexes"));
              }
            }
            {}
          }
        }
      }
    }
  }
  else if((!_4229_hassp))
  {
    {
      int32_t _4272_numpnz = _4227_nelem;
      int32_t _4273_pnelem = _4244_pnnz;
      int32_t _4274_xpsp = _4222_xs->alloci64(_4273_pnelem);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4275_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4222_xs)->i64;
      _checked_ptr_1<int64_t> _ptr__4275_xi64(_4275_xi64 ? _4275_xi64->raw() : nullptr,_4275_xi64 ? _4275_xi64->size(0) : 0);
      p->getSp(_4275_xi64,_4274_xpsp);
      int32_t _4276_rnelem = (int)0;
      int32_t _4277_rnnz = (int)0;
      int32_t _4278_rncodeatom = (int)0;
      {
        int32_t _4279_i0 = (int)0;
        while ( (_4279_i0 < _4244_pnnz) )
        {
          {
            int32_t _4280_ii = (int32_t)(_ptr__4275_xi64[safe_add( _4274_xpsp,_4279_i0 )] / _4241_pdim1);
            int32_t _4281_prowb = _4279_i0;
            ++ _4279_i0;
            while ( ((_4279_i0 < _4244_pnnz) && (_ptr__4275_xi64[safe_add( _4274_xpsp,_4279_i0 )] < safe_mul( safe_add( _4280_ii,(int)1 ),_4241_pdim1 ))) )
            {
              {
                ++ _4279_i0;
              }
            }
            int32_t _4282_prowe = _4279_i0;
            int32_t _11140_ = (int)0;
            int32_t _11141_ = _4243_edim1;
            for (int32_t _4283_jj = _11140_; _4283_jj < _11141_; ++_4283_jj)
            {
              {
                int32_t _11142_ = _4281_prowb;
                int32_t _11143_ = _4282_prowe;
                for (int32_t _4284_i = _11142_; _4284_i < _11143_; ++_4284_i)
                {
                  {
                    int64_t _4285_eidx = safe_add( safe_mul( (_ptr__4275_xi64[safe_add( _4274_xpsp,_4284_i )] % _4241_pdim1),_4243_edim1 ),_4283_jj );
                    int32_t _4286_n = (_ptr__4223_wi32[safe_add( safe_add( _4231_ptr,_4285_eidx ),(int)1 )] - _ptr__4223_wi32[safe_add( _4231_ptr,_4285_eidx )]);
                    _4277_rnnz += _4286_n;
                    if ((_4230_ncodeatom > (int)0))
                    {
                      {
                        _4278_rncodeatom += safe_add( (_ptr__4223_wi32[safe_add( _4234_codeptr,_ptr__4223_wi32[safe_add( safe_add( _4231_ptr,_4285_eidx ),(int)1 )] )] - _ptr__4223_wi32[safe_add( _4234_codeptr,_ptr__4223_wi32[safe_add( _4231_ptr,_4285_eidx )] )]),safe_mul( (int)4,_4286_n ) );
                      }
                    }
                    else
                    {
                      {
                        _4278_rncodeatom += safe_mul( (int)3,_4286_n );
                      }
                    }
                  }
                }
                ++ _4276_rnelem;
              }
            }
          }
        }
      }
      bool _4287_rhassp = (_4276_rnelem < safe_mul( _4240_pdim0,_4243_edim1 ));
      int32_t _4288_rnd = (int)2;
      _4220_rs->alloc_expr(_4288_rnd,_4276_rnelem,_4277_rnnz,_4287_rhassp,_4278_rncodeatom);
      int32_t _4289_rptr = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->ptr_base;
      int32_t _4290_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->nidxs_base;
      int32_t _11144_;
      bool _11145_ = _4287_rhassp;
      if (_11145_)
      {
        _11144_ = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->sp_base;
      }
      else
      {
        _11144_ = _4220_rs->alloci64(_4276_rnelem);
      }
      int32_t _4291_rsp = _11144_;
      int32_t _4292_rcof = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->cof_base;
      bool _4293_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->hassp;
      int32_t _4294_rshape = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->shape_base;
      int32_t _4295_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->codeptr_base;
      int32_t _4296_rcode = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->code_base;
      int32_t _4297_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4298_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4298_ri64(_4298_ri64 ? _4298_ri64->raw() : nullptr,_4298_ri64 ? _4298_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4299_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->f64;
      _checked_ptr_1<double> _ptr__4299_rf64(_4299_rf64 ? _4299_rf64->raw() : nullptr,_4299_rf64 ? _4299_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4300_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4300_ri32(_4300_ri32 ? _4300_ri32->raw() : nullptr,_4300_ri32 ? _4300_ri32->size(0) : 0);
      _ptr__4300_ri32[_4294_rshape] = _4240_pdim0;
      _ptr__4300_ri32[safe_add( _4294_rshape,(int)1 )] = _4243_edim1;
      {
        int32_t _4301_nzi = (int)0;
        int32_t _4302_elmi = (int)0;
        int32_t _4303_codei = (int)0;
        if ((_4278_rncodeatom > (int)0))
        {
          {
            _ptr__4300_ri32[_4295_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__4300_ri32[_4289_rptr] = (int)0;
        int32_t _11146_ = (int)0;
        int32_t _11147_ = _4277_rnnz;
        for (int32_t _4304_i = _11146_; _4304_i < _11147_; ++_4304_i)
        {
          {
            _ptr__4299_rf64[safe_add( _4292_rcof,_4304_i )] = 0.0;
          }
        }
        int32_t _4305_i0 = (int)0;
        while ( (_4305_i0 < _4244_pnnz) )
        {
          {
            int32_t _4306_ii = (int32_t)(_ptr__4275_xi64[safe_add( _4274_xpsp,_4305_i0 )] / _4241_pdim1);
            int32_t _4307_prowb = _4305_i0;
            ++ _4305_i0;
            while ( ((_4305_i0 < _4244_pnnz) && (_ptr__4275_xi64[safe_add( _4274_xpsp,_4305_i0 )] < safe_mul( safe_add( _4306_ii,(int)1 ),_4241_pdim1 ))) )
            {
              {
                ++ _4305_i0;
              }
            }
            int32_t _4308_prowe = _4305_i0;
            int32_t _11148_ = (int)0;
            int32_t _11149_ = _4243_edim1;
            for (int32_t _4309_jj = _11148_; _4309_jj < _11149_; ++_4309_jj)
            {
              {
                int32_t _11150_ = _4307_prowb;
                int32_t _11151_ = _4308_prowe;
                for (int32_t _4310_i = _11150_; _4310_i < _11151_; ++_4310_i)
                {
                  {
                    int64_t _4311_eidx = safe_add( safe_mul( (_ptr__4275_xi64[safe_add( _4274_xpsp,_4310_i )] % _4241_pdim1),_4243_edim1 ),_4309_jj );
                    int32_t _11152_ = _ptr__4223_wi32[safe_add( _4231_ptr,_4311_eidx )];
                    int32_t _11153_ = _ptr__4223_wi32[safe_add( safe_add( _4231_ptr,_4311_eidx ),(int)1 )];
                    for (int32_t _4312_k = _11152_; _4312_k < _11153_; ++_4312_k)
                    {
                      {
                        _ptr__4298_ri64[safe_add( _4290_rnidxs,_4301_nzi )] = _ptr__4224_wi64[safe_add( _4237_nidxs,_4312_k )];
                        _ptr__4300_ri32[safe_add( _4296_rcode,_4303_codei )] = 2;
                        _ptr__4299_rf64[safe_add( _4297_rcconst,_4303_codei )] = _ptr__4225_wf64[safe_add( _4238_cof,_4312_k )];
                        ++ _4303_codei;
                        if ((_4230_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11154_ = _ptr__4223_wi32[safe_add( _4234_codeptr,_4312_k )];
                            int32_t _11155_ = _ptr__4223_wi32[safe_add( safe_add( _4234_codeptr,_4312_k ),(int)1 )];
                            for (int32_t _4313_l = _11154_; _4313_l < _11155_; ++_4313_l)
                            {
                              {
                                _ptr__4300_ri32[safe_add( _4296_rcode,_4303_codei )] = _ptr__4223_wi32[safe_add( _4232_code,_4313_l )];
                                _ptr__4299_rf64[safe_add( _4297_rcconst,_4303_codei )] = _ptr__4225_wf64[safe_add( _4233_cconst,_4313_l )];
                                ++ _4303_codei;
                              }
                            }
                            _ptr__4300_ri32[safe_add( _4296_rcode,_4303_codei )] = 3;
                            ++ _4303_codei;
                          }
                        }
                        {}
                        _ptr__4300_ri32[safe_add( _4296_rcode,_4303_codei )] = 1;
                        _ptr__4299_rf64[safe_add( _4297_rcconst,_4303_codei )] = _ptr__4246_xi32[safe_add( _4245_pidxs,_4310_i )];
                        ++ _4303_codei;
                        _ptr__4300_ri32[safe_add( _4296_rcode,_4303_codei )] = 5;
                        ++ _4303_codei;
                        _ptr__4300_ri32[safe_add( safe_add( _4295_rcodeptr,_4301_nzi ),(int)1 )] = _4303_codei;
                        ++ _4301_nzi;
                      }
                    }
                  }
                }
                _ptr__4300_ri32[safe_add( safe_add( _4289_rptr,_4302_elmi ),(int)1 )] = _4301_nzi;
                _ptr__4298_ri64[safe_add( _4291_rsp,_4302_elmi )] = safe_add( safe_mul( (int64_t)_4306_ii,_4243_edim1 ),_4309_jj );
                ++ _4302_elmi;
              }
            }
          }
        }
        if ((_4303_codei != _4278_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect code list"));
          }
        }
        {}
        if ((_4301_nzi != _4277_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4302_elmi != _4276_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4300_ri32[safe_add( _4289_rptr,_4276_rnelem )] != _4277_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4293_rhassp))
      {
        {
          _4220_rs->popi64(_4276_rnelem);
        }
      }
      {}
      _4222_xs->clear();
    }
  }
  else
  {
    {
      int32_t _4314_numpnz = _4227_nelem;
      int32_t _4315_xperm = _4222_xs->alloci32(_4314_numpnz);
      int32_t _4316_pnelem = p->getNumNonzero();
      int32_t _4317_xpsp = _4222_xs->alloci64(_4316_pnelem);
      int32_t _4318_xptr = _4222_xs->alloci32(safe_add( _ptr__4223_wi32[safe_add( _4235_shape,(int)1 )],(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4319_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4222_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4319_xi32(_4319_xi32 ? _4319_xi32->raw() : nullptr,_4319_xi32 ? _4319_xi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4320_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4222_xs)->i64;
      _checked_ptr_1<int64_t> _ptr__4320_xi64(_4320_xi64 ? _4320_xi64->raw() : nullptr,_4320_xi64 ? _4320_xi64->size(0) : 0);
      p->getSp(_4320_xi64,_4317_xpsp);
      {
        int32_t _4321_d1 = _ptr__4223_wi32[safe_add( _4235_shape,(int)1 )];
        int32_t _11156_ = (int)0;
        int32_t _11157_ = safe_add( _ptr__4223_wi32[safe_add( _4235_shape,(int)1 )],(int)1 );
        for (int32_t _4322_i = _11156_; _4322_i < _11157_; ++_4322_i)
        {
          {
            _ptr__4319_xi32[safe_add( _4318_xptr,_4322_i )] = (int)0;
          }
        }
        int32_t _11158_ = (int)0;
        int32_t _11159_ = _4227_nelem;
        for (int32_t _4323_i = _11158_; _4323_i < _11159_; ++_4323_i)
        {
          {
            ++ _ptr__4319_xi32[safe_add( safe_add( _4318_xptr,(_ptr__4224_wi64[safe_add( _4236_sp,_4323_i )] % _4321_d1) ),(int)1 )];
          }
        }
        int32_t _11160_ = (int)0;
        int32_t _11161_ = _4321_d1;
        for (int32_t _4324_i = _11160_; _4324_i < _11161_; ++_4324_i)
        {
          {
            _ptr__4319_xi32[safe_add( safe_add( _4318_xptr,_4324_i ),(int)1 )] += _ptr__4319_xi32[safe_add( _4318_xptr,_4324_i )];
          }
        }
        int32_t _11162_ = (int)0;
        int32_t _11163_ = _4227_nelem;
        for (int32_t _4325_i = _11162_; _4325_i < _11163_; ++_4325_i)
        {
          {
            _ptr__4319_xi32[safe_add( _4315_xperm,_ptr__4319_xi32[safe_add( _4318_xptr,(_ptr__4224_wi64[safe_add( _4236_sp,_4325_i )] % _4321_d1) )] )] = _4325_i;
            ++ _ptr__4319_xi32[safe_add( _4318_xptr,(_ptr__4224_wi64[safe_add( _4236_sp,_4325_i )] % _4321_d1) )];
          }
        }
      }
      int32_t _4326_rnelem = (int)0;
      int32_t _4327_rnnz = (int)0;
      int32_t _4328_rncodeatom = (int)0;
      int32_t _4329_edim1 = _ptr__4223_wi32[safe_add( _4235_shape,(int)1 )];
      int32_t _4330_edim0 = _ptr__4223_wi32[_4235_shape];
      int32_t _4331_pdim1 = p->getDim((int)1);
      int32_t _4332_pdim0 = p->getDim((int)0);
      {
        int32_t _4333_prowp = (int)0;
        while ( (_4333_prowp < _4316_pnelem) )
        {
          {
            int32_t _4334_prowb = _4333_prowp;
            int64_t _4335_ri = (_ptr__4320_xi64[safe_add( _4317_xpsp,_4333_prowp )] / _4331_pdim1);
            while ( ((_4333_prowp < _4316_pnelem) && (_ptr__4320_xi64[safe_add( _4317_xpsp,_4333_prowp )] < safe_mul( safe_add( _4335_ri,(int)1 ),_4331_pdim1 ))) )
            {
              {
                ++ _4333_prowp;
              }
            }
            int32_t _4336_ecolp = (int)0;
            while ( (_4336_ecolp < _4227_nelem) )
            {
              {
                int32_t _4337_ecolb = _4336_ecolp;
                int64_t _4338_rj = (_ptr__4224_wi64[safe_add( _4236_sp,_ptr__4319_xi32[safe_add( _4315_xperm,_4336_ecolp )] )] % _4329_edim1);
                ++ _4336_ecolp;
                while ( ((_4336_ecolp < _4227_nelem) && ((_ptr__4224_wi64[safe_add( _4236_sp,_ptr__4319_xi32[safe_add( _4315_xperm,_4336_ecolp )] )] % _4329_edim1) == _4338_rj)) )
                {
                  {
                    ++ _4336_ecolp;
                  }
                }
                int32_t _4339_ep = _4337_ecolb;
                int32_t _4340_pp = _4334_prowb;
                bool _4341_exist = false;
                int32_t _4342_rownnz = (int)0;
                while ( ((_4340_pp < _4333_prowp) && (_4339_ep < _4336_ecolp)) )
                {
                  {
                    int32_t _4343_eidx = _ptr__4319_xi32[safe_add( _4315_xperm,_4339_ep )];
                    if (((_ptr__4320_xi64[safe_add( _4317_xpsp,_4340_pp )] % _4331_pdim1) < (_ptr__4224_wi64[safe_add( _4236_sp,_4343_eidx )] / _4329_edim1)))
                    {
                      {
                        ++ _4340_pp;
                      }
                    }
                    else if(((_ptr__4320_xi64[safe_add( _4317_xpsp,_4340_pp )] % _4331_pdim1) > (_ptr__4224_wi64[safe_add( _4236_sp,_4343_eidx )] / _4329_edim1)))
                    {
                      {
                        ++ _4339_ep;
                      }
                    }
                    else
                    {
                      {
                        int32_t _4344_n = (_ptr__4223_wi32[safe_add( safe_add( _4231_ptr,_4343_eidx ),(int)1 )] - _ptr__4223_wi32[safe_add( _4231_ptr,_4343_eidx )]);
                        _4327_rnnz += _4344_n;
                        int32_t _11164_;
                        bool _11165_ = (_4230_ncodeatom > (int)0);
                        if (_11165_)
                        {
                          _11164_ = safe_add( (_ptr__4223_wi32[safe_add( _4234_codeptr,_ptr__4223_wi32[safe_add( safe_add( _4231_ptr,_4343_eidx ),(int)1 )] )] - _ptr__4223_wi32[safe_add( _4234_codeptr,_ptr__4223_wi32[safe_add( _4231_ptr,_4343_eidx )] )]),safe_mul( (int)4,_4344_n ) );
                        }
                        else
                        {
                          _11164_ = safe_mul( (int)3,_4344_n );
                        }
                        _4328_rncodeatom += _11164_;
                        ++ _4339_ep;
                        ++ _4340_pp;
                        ++ _4342_rownnz;
                      }
                    }
                  }
                }
                if ((_4342_rownnz > (int)0))
                {
                  {
                    ++ _4326_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int32_t _4345_rnd = (int)2;
      bool _4346_rhassp = (_4326_rnelem < safe_mul( _4332_pdim0,_4329_edim1 ));
      _4220_rs->alloc_expr(_4345_rnd,_4326_rnelem,_4327_rnnz,_4346_rhassp,_4328_rncodeatom);
      int32_t _4347_rptr = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->ptr_base;
      int32_t _4348_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->nidxs_base;
      int32_t _11166_;
      bool _11167_ = _4346_rhassp;
      if (_11167_)
      {
        _11166_ = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->sp_base;
      }
      else
      {
        _11166_ = _4220_rs->alloci64(_4326_rnelem);
      }
      int32_t _4349_rsp = _11166_;
      int32_t _4350_rcof = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->cof_base;
      int32_t _4351_rshape = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->shape_base;
      int32_t _4352_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->codeptr_base;
      int32_t _4353_rcode = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->code_base;
      int32_t _4354_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4355_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4355_ri64(_4355_ri64 ? _4355_ri64->raw() : nullptr,_4355_ri64 ? _4355_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4356_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->f64;
      _checked_ptr_1<double> _ptr__4356_rf64(_4356_rf64 ? _4356_rf64->raw() : nullptr,_4356_rf64 ? _4356_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4357_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4220_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4357_ri32(_4357_ri32 ? _4357_ri32->raw() : nullptr,_4357_ri32 ? _4357_ri32->size(0) : 0);
      int32_t _11168_ = (int)0;
      int32_t _11169_ = safe_add( _4326_rnelem,(int)1 );
      for (int32_t _4358_i = _11168_; _4358_i < _11169_; ++_4358_i)
      {
        {
          _ptr__4357_ri32[safe_add( _4347_rptr,_4358_i )] = (-(int)9999);
        }
      }
      {
        _ptr__4357_ri32[_4347_rptr] = (int)0;
        if ((_4328_rncodeatom > (int)0))
        {
          {
            _ptr__4357_ri32[_4352_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__4357_ri32[_4351_rshape] = _4332_pdim0;
        _ptr__4357_ri32[safe_add( _4351_rshape,(int)1 )] = _4329_edim1;
        int32_t _4359_nzi = (int)0;
        int32_t _4360_elmi = (int)0;
        int32_t _4361_codei = (int)0;
        int32_t _11170_ = (int)0;
        int32_t _11171_ = _4327_rnnz;
        for (int32_t _4362_i = _11170_; _4362_i < _11171_; ++_4362_i)
        {
          {
            _ptr__4356_rf64[safe_add( _4350_rcof,_4362_i )] = 0.0;
          }
        }
        int32_t _4363_prowp = (int)0;
        while ( (_4363_prowp < _4316_pnelem) )
        {
          {
            int32_t _4364_prowb = _4363_prowp;
            int64_t _4365_ri = (_ptr__4320_xi64[safe_add( _4317_xpsp,_4363_prowp )] / _4331_pdim1);
            while ( ((_4363_prowp < _4316_pnelem) && (_ptr__4320_xi64[safe_add( _4317_xpsp,_4363_prowp )] < safe_mul( safe_add( _4365_ri,(int)1 ),_4331_pdim1 ))) )
            {
              {
                ++ _4363_prowp;
              }
            }
            int32_t _4366_ecolp = (int)0;
            while ( (_4366_ecolp < _4227_nelem) )
            {
              {
                int32_t _4367_ecolb = _4366_ecolp;
                int64_t _4368_rj = (_ptr__4224_wi64[safe_add( _4236_sp,_ptr__4319_xi32[safe_add( _4315_xperm,_4366_ecolp )] )] % _4329_edim1);
                ++ _4366_ecolp;
                while ( ((_4366_ecolp < _4227_nelem) && ((_ptr__4224_wi64[safe_add( _4236_sp,_ptr__4319_xi32[safe_add( _4315_xperm,_4366_ecolp )] )] % _4329_edim1) == _4368_rj)) )
                {
                  {
                    ++ _4366_ecolp;
                  }
                }
                int32_t _4369_ep = _4367_ecolb;
                int32_t _4370_pp = _4364_prowb;
                int32_t _4371_nsumelm = (int)0;
                while ( ((_4370_pp < _4363_prowp) && (_4369_ep < _4366_ecolp)) )
                {
                  {
                    int32_t _4372_eidx = _ptr__4319_xi32[safe_add( _4315_xperm,_4369_ep )];
                    if (((_ptr__4320_xi64[safe_add( _4317_xpsp,_4370_pp )] % _4331_pdim1) < (_ptr__4224_wi64[safe_add( _4236_sp,_4372_eidx )] / _4329_edim1)))
                    {
                      {
                        ++ _4370_pp;
                      }
                    }
                    else if(((_ptr__4320_xi64[safe_add( _4317_xpsp,_4370_pp )] % _4331_pdim1) > (_ptr__4224_wi64[safe_add( _4236_sp,_4372_eidx )] / _4329_edim1)))
                    {
                      {
                        ++ _4369_ep;
                      }
                    }
                    else
                    {
                      {
                        int32_t _11172_ = _ptr__4223_wi32[safe_add( _4231_ptr,_4372_eidx )];
                        int32_t _11173_ = _ptr__4223_wi32[safe_add( safe_add( _4231_ptr,_4372_eidx ),(int)1 )];
                        for (int32_t _4373_i = _11172_; _4373_i < _11173_; ++_4373_i)
                        {
                          {
                            _ptr__4355_ri64[safe_add( _4348_rnidxs,_4359_nzi )] = _ptr__4224_wi64[safe_add( _4237_nidxs,_4373_i )];
                            _ptr__4357_ri32[safe_add( _4353_rcode,_4361_codei )] = 2;
                            _ptr__4356_rf64[safe_add( _4354_rcconst,_4361_codei )] = _ptr__4225_wf64[safe_add( _4238_cof,_4373_i )];
                            ++ _4361_codei;
                            if ((_4230_ncodeatom > (int)0))
                            {
                              {
                                int32_t _11174_ = _ptr__4223_wi32[safe_add( _4234_codeptr,_4373_i )];
                                int32_t _11175_ = _ptr__4223_wi32[safe_add( safe_add( _4234_codeptr,_4373_i ),(int)1 )];
                                for (int32_t _4374_k = _11174_; _4374_k < _11175_; ++_4374_k)
                                {
                                  {
                                    _ptr__4357_ri32[safe_add( _4353_rcode,_4361_codei )] = _ptr__4223_wi32[safe_add( _4232_code,_4374_k )];
                                    _ptr__4356_rf64[safe_add( _4354_rcconst,_4361_codei )] = _ptr__4225_wf64[safe_add( _4233_cconst,_4374_k )];
                                    ++ _4361_codei;
                                  }
                                }
                                _ptr__4357_ri32[safe_add( _4353_rcode,_4361_codei )] = 3;
                                ++ _4361_codei;
                              }
                            }
                            {}
                            _ptr__4357_ri32[safe_add( _4353_rcode,_4361_codei )] = 1;
                            _ptr__4356_rf64[safe_add( _4354_rcconst,_4361_codei )] = _ptr__4319_xi32[safe_add( _4245_pidxs,_4370_pp )];
                            ++ _4361_codei;
                            _ptr__4357_ri32[safe_add( _4353_rcode,_4361_codei )] = 5;
                            ++ _4361_codei;
                            _ptr__4357_ri32[safe_add( safe_add( _4352_rcodeptr,_4359_nzi ),(int)1 )] = _4361_codei;
                            ++ _4359_nzi;
                          }
                        }
                        ++ _4371_nsumelm;
                        ++ _4370_pp;
                        ++ _4369_ep;
                      }
                    }
                  }
                }
                if ((_4371_nsumelm > (int)0))
                {
                  {
                    _ptr__4355_ri64[safe_add( _4349_rsp,_4360_elmi )] = safe_add( safe_mul( _4365_ri,_4329_edim1 ),_4368_rj );
                    _ptr__4357_ri32[safe_add( safe_add( _4347_rptr,_4360_elmi ),(int)1 )] = _4359_nzi;
                    ++ _4360_elmi;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_4361_codei != _4328_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4359_nzi != _4327_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4360_elmi != _4326_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4357_ri32[safe_add( _4347_rptr,_4360_elmi )] != _4327_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4346_rhassp))
      {
        {
          _4220_rs->popi64(_4326_rnelem);
        }
      }
      {}
    }
  }
  _4222_xs->clear();
}
// End mosek.fusion.ExprMulParamLeft.eval

// Begin mosek.fusion.ExprMulParamLeft.toString
// Method mosek.fusion.ExprMulParamLeft.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:640:6-154
std::string mosek::fusion::ExprMulParamLeft :: toString() { return mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamLeft.toString

void mosek::fusion::p_ExprMulParamLeft::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamLeft::destroy() { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->destroy(); }
// } class ExprMulParamLeft
// class ParameterImpl { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:113:4-606:5
mosek::fusion::ParameterImpl::ParameterImpl(mosek::fusion::p_ParameterImpl *_impl) : _impl(_impl) { /*std::cout << "ParameterImpl() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ParameterImpl::~ParameterImpl() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ParameterImpl::p_ParameterImpl
  (::mosek::fusion::ParameterImpl * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.ParameterImpl.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:131:6-137:7
mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4375_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4376_model)
{ return new mosek::fusion::ParameterImpl(_4375_other,_4376_model); }
mosek::fusion::ParameterImpl::ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4375_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4376_model) : 
   ParameterImpl(new mosek::fusion::p_ParameterImpl(this))
{ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4375_other,_4376_model); }
void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4375_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4376_model)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4376_model;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = mosek::fusion::p_ParameterImpl::_get_impl(_4375_other)->shape;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = mosek::fusion::p_ParameterImpl::_get_impl(_4375_other)->sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = mosek::fusion::p_ParameterImpl::_get_impl(_4375_other)->size;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = mosek::fusion::p_ParameterImpl::_get_impl(_4375_other)->nidxs;
  }
}
// mosek.fusion.ParameterImpl.ctor

// mosek.fusion.ParameterImpl.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:120:6-129:7
mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::Model > _4377_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4378_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4379_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4380_nidxs)
{ return new mosek::fusion::ParameterImpl(_4377_model,_4378_shape,_4379_sp,_4380_nidxs); }
mosek::fusion::ParameterImpl::ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::Model > _4377_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4378_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4379_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4380_nidxs) : 
   ParameterImpl(new mosek::fusion::p_ParameterImpl(this))
{ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4377_model,_4378_shape,_4379_sp,_4380_nidxs); }
void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _4377_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4378_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4379_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4380_nidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4378_shape(_4378_shape ? _4378_shape->raw() : nullptr, _4378_shape ? _4378_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4379_sp(_4379_sp ? _4379_sp->raw() : nullptr, _4379_sp ? _4379_sp->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__4380_nidxs(_4380_nidxs ? _4380_nidxs->raw() : nullptr, _4380_nidxs ? _4380_nidxs->size(0) : 0);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4377_model;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = ::mosek::fusion::Utils::Tools::arraycopy(_4378_shape);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = _4379_sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = ::mosek::fusion::p_Set::size(_4378_shape);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = ::mosek::fusion::Utils::Tools::arraycopy(_4380_nidxs);
  }
}
// mosek.fusion.ParameterImpl.ctor

// Begin mosek.fusion.ParameterImpl.clone
// Method mosek.fusion.ParameterImpl.clone @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:553:6-555:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4381_m) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__clone(_4381_m); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::clone(monty::rc_ptr< ::mosek::fusion::Model > _4381_m) { return __mosek_2fusion_2ParameterImpl__clone(_4381_m); }
/* override: mosek.fusion.Parameter.clone*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__clone(monty::rc_ptr< ::mosek::fusion::Model > _4381_m) { return __mosek_2fusion_2ParameterImpl__clone(_4381_m); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4381_m)
{
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::ParameterImpl::t(_pubthis),_4381_m)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.ParameterImpl.clone

// Begin mosek.fusion.ParameterImpl.toString
// Method mosek.fusion.ParameterImpl.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:538:6-550:7
std::string mosek::fusion::ParameterImpl :: toString() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ParameterImpl::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4382_r = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Parameter(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _4382_r->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _11176_ = (int)1;
      int32_t _11177_ = (int)((shape)->size(0));
      for (int32_t _4383_i = _11176_; _4383_i < _11177_; ++_4383_i)
      {
        {
          _4382_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_4383_i)));
        }
      }
    }
  }
  {}
  _4382_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sp.get()))
  {
    {
      _4382_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _4382_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4382_r->toString();
}
// End mosek.fusion.ParameterImpl.toString

// Begin mosek.fusion.ParameterImpl.pick
// Method mosek.fusion.ParameterImpl.pick @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:477:6-535:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4384_midxs) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4384_midxs); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4384_midxs) { return __mosek_2fusion_2ParameterImpl__pick(_4384_midxs); }
/* override: mosek.fusion.Parameter.pick*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4384_midxs) { return __mosek_2fusion_2ParameterImpl__pick(_4384_midxs); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4384_midxs)
{
  if (((int)((shape)->size(0)) != (int)((_4384_midxs)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _4385_invalidindex = false;
  int32_t _11178_ = (int)0;
  int32_t _11179_ = (int)((_4384_midxs)->size(0));
  for (int32_t _4386_i = _11178_; _4386_i < _11179_; ++_4386_i)
  {
    {
      int32_t _11180_ = (int)0;
      int32_t _11181_ = (int)((_4384_midxs)->size(1));
      for (int32_t _4387_j = _11180_; _4387_j < _11181_; ++_4387_j)
      {
        {
          if (((((*_4384_midxs)(_4386_i,_4387_j)) < (int)0) || (((*_4384_midxs)(_4386_i,_4387_j)) >= ((*shape)(_4387_j)))))
          {
            {
              _4385_invalidindex = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_4385_invalidindex)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int32_t _4388_nd = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4389_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4388_nd)));
  _checked_ptr_1<int64_t> _ptr__4389_strides(_4389_strides ? _4389_strides->raw() : nullptr,_4389_strides ? _4389_strides->size(0) : 0);
  _ptr__4389_strides[(_4388_nd - (int)1)] = (int)1;
  int32_t _11182_ = (int)1;
  int32_t _11183_ = _4388_nd;
  for (int32_t _4390_i = _11182_; _4390_i < _11183_; ++_4390_i)
  {
    {
      _ptr__4389_strides[((_4388_nd - _4390_i) - (int)1)] = safe_mul( _ptr__4389_strides[(_4388_nd - _4390_i)],((*shape)((_4388_nd - _4390_i))) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4391_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_4384_midxs)->size(0)))});
  _checked_ptr_1<int32_t> _ptr__4391_rshape(_4391_rshape ? _4391_rshape->raw() : nullptr,_4391_rshape ? _4391_rshape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4392_idxs;
  _checked_ptr_1<int32_t> _ptr__4392_idxs(_4392_idxs ? _4392_idxs->raw() : nullptr,_4392_idxs ? _4392_idxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4393_rsp = nullptr;
  _checked_ptr_1<int64_t> _ptr__4393_rsp(_4393_rsp ? _4393_rsp->raw() : nullptr,_4393_rsp ? _4393_rsp->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      _4392_idxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_4384_midxs)->size(0)))));
      _ptr__4392_idxs.update(_4392_idxs ? _4392_idxs->raw() : nullptr, _4392_idxs ? _4392_idxs->size(0) : 0);
      {
        int32_t _11184_ = (int)0;
        int32_t _11185_ = (int)((_4384_midxs)->size(0));
        for (int32_t _4394_i = _11184_; _4394_i < _11185_; ++_4394_i)
        {
          {
            int64_t _4395_ii = (int64_t)0;
            int32_t _11186_ = (int)0;
            int32_t _11187_ = _4388_nd;
            for (int32_t _4396_j = _11186_; _4396_j < _11187_; ++_4396_j)
            {
              {
                _4395_ii += safe_mul( _ptr__4389_strides[_4396_j],((*_4384_midxs)(_4394_i,_4396_j)) );
              }
            }
            _ptr__4392_idxs[_4394_i] = ((*nidxs)(_4395_ii));
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _4397_nnz = (int)0;
      int32_t _11188_ = (int)0;
      int32_t _11189_ = (int)((_4384_midxs)->size(0));
      for (int32_t _4398_i = _11188_; _4398_i < _11189_; ++_4398_i)
      {
        {
          int64_t _4399_ii = (int64_t)0;
          int32_t _11190_ = (int)0;
          int32_t _11191_ = _4388_nd;
          for (int32_t _4400_j = _11190_; _4400_j < _11191_; ++_4400_j)
          {
            {
              _4399_ii += safe_mul( _ptr__4389_strides[_4400_j],((*_4384_midxs)(_4398_i,_4400_j)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sp,_4399_ii) >= (int)0))
          {
            {
              ++ _4397_nnz;
            }
          }
          {}
        }
      }
      _4392_idxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4397_nnz)));
      _ptr__4392_idxs.update(_4392_idxs ? _4392_idxs->raw() : nullptr, _4392_idxs ? _4392_idxs->size(0) : 0);
      _4393_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4397_nnz)));
      _ptr__4393_rsp.update(_4393_rsp ? _4393_rsp->raw() : nullptr, _4393_rsp ? _4393_rsp->size(0) : 0);
      {
        int32_t _4401_k = (int)0;
        int32_t _11192_ = (int)0;
        int32_t _11193_ = (int)((_4384_midxs)->size(0));
        for (int32_t _4402_i = _11192_; _4402_i < _11193_; ++_4402_i)
        {
          {
            int64_t _4403_ii = (int64_t)0;
            int32_t _11194_ = (int)0;
            int32_t _11195_ = _4388_nd;
            for (int32_t _4404_j = _11194_; _4404_j < _11195_; ++_4404_j)
            {
              {
                _4403_ii += safe_mul( _ptr__4389_strides[_4404_j],((*_4384_midxs)(_4402_i,_4404_j)) );
              }
            }
            int32_t _4405_iidx = ::mosek::fusion::p_CommonTools::binarySearch(sp,_4403_ii);
            if ((_4405_iidx >= (int)0))
            {
              {
                _ptr__4392_idxs[_4401_k] = ((*nidxs)(_4405_iidx));
                _ptr__4393_rsp[_4401_k] = _4402_i;
                ++ _4401_k;
              }
            }
            {}
          }
        }
      }
      if ((_4397_nnz == (int)((_4384_midxs)->size(0))))
      {
        {
          _4393_rsp = nullptr;
          _ptr__4393_rsp.update(_4393_rsp ? _4393_rsp->raw() : nullptr, _4393_rsp ? _4393_rsp->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4391_rshape,_4393_rsp,_4392_idxs)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.ParameterImpl.pick

// Begin mosek.fusion.ParameterImpl.pick
// Method mosek.fusion.ParameterImpl.pick @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:436:6-475:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4406_idxs) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4406_idxs); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4406_idxs) { return __mosek_2fusion_2ParameterImpl__pick(_4406_idxs); }
/* override: mosek.fusion.Parameter.pick*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4406_idxs) { return __mosek_2fusion_2ParameterImpl__pick(_4406_idxs); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4406_idxs)
{
  _checked_ptr_1<int32_t> _ptr__4406_idxs(_4406_idxs ? _4406_idxs->raw() : nullptr, _4406_idxs ? _4406_idxs->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _4407_invalidindex = false;
  int32_t _11196_ = (int)0;
  int32_t _11197_ = (int)((_4406_idxs)->size(0));
  for (int32_t _4408_i = _11196_; _4408_i < _11197_; ++_4408_i)
  {
    {
      if (((_ptr__4406_idxs[_4408_i] < (int)0) || (_ptr__4406_idxs[_4408_i] >= ((*shape)((int)0)))))
      {
        {
          _4407_invalidindex = true;
        }
      }
      {}
    }
  }
  if (_4407_invalidindex)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4409_rnidxs;
  _checked_ptr_1<int32_t> _ptr__4409_rnidxs(_4409_rnidxs ? _4409_rnidxs->raw() : nullptr,_4409_rnidxs ? _4409_rnidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4410_rsp = nullptr;
  _checked_ptr_1<int64_t> _ptr__4410_rsp(_4410_rsp ? _4410_rsp->raw() : nullptr,_4410_rsp ? _4410_rsp->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      std::vector<int32_t> _11198_;
      for (int32_t _4411_i = (int)0, _11199_ = (int)((_4406_idxs)->size(0)); _4411_i < _11199_ ; ++_4411_i)
      {
        _11198_.push_back(((*nidxs)(_ptr__4406_idxs[_4411_i])));
      }
      auto _11200_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11198_.size()),_11198_.begin(),_11198_.end()));
      _4409_rnidxs = _11200_;
      _ptr__4409_rnidxs.update(_4409_rnidxs ? _4409_rnidxs->raw() : nullptr, _4409_rnidxs ? _4409_rnidxs->size(0) : 0);
    }
  }
  else
  {
    {
      int32_t _4412_nnz = (int)0;
      int32_t _11201_ = (int)0;
      int32_t _11202_ = (int)((_4406_idxs)->size(0));
      for (int32_t _4413_i = _11201_; _4413_i < _11202_; ++_4413_i)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sp,(int64_t)(_ptr__4406_idxs[_4413_i])) >= (int)0))
          {
            {
              ++ _4412_nnz;
            }
          }
          {}
        }
      }
      _4409_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4412_nnz)));
      _ptr__4409_rnidxs.update(_4409_rnidxs ? _4409_rnidxs->raw() : nullptr, _4409_rnidxs ? _4409_rnidxs->size(0) : 0);
      _4410_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4412_nnz)));
      _ptr__4410_rsp.update(_4410_rsp ? _4410_rsp->raw() : nullptr, _4410_rsp ? _4410_rsp->size(0) : 0);
      int32_t _4414_k = (int)0;
      int32_t _11203_ = (int)0;
      int32_t _11204_ = (int)((_4406_idxs)->size(0));
      for (int32_t _4415_i = _11203_; _4415_i < _11204_; ++_4415_i)
      {
        {
          int32_t _4416_j = ::mosek::fusion::p_CommonTools::binarySearch(sp,(int64_t)(_ptr__4406_idxs[_4415_i]));
          if ((_4416_j >= (int)0))
          {
            {
              _ptr__4410_rsp[_4414_k] = _4415_i;
              _ptr__4409_rnidxs[_4414_k] = ((*nidxs)(_4416_j));
              ++ _4414_k;
            }
          }
          {}
        }
      }
      if ((_4412_nnz == (int)((_4406_idxs)->size(0))))
      {
        {
          _4410_rsp = nullptr;
          _ptr__4410_rsp.update(_4410_rsp ? _4410_rsp->raw() : nullptr, _4410_rsp ? _4410_rsp->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_4406_idxs)->size(0)))}),_4410_rsp,_4409_rnidxs)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.ParameterImpl.pick

// Begin mosek.fusion.ParameterImpl.index
// Method mosek.fusion.ParameterImpl.index @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:408:6-434:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4417_indexes) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4417_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4417_indexes) { return __mosek_2fusion_2ParameterImpl__index(_4417_indexes); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4417_indexes) { return __mosek_2fusion_2ParameterImpl__index(_4417_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4417_indexes)
{
  _checked_ptr_1<int32_t> _ptr__4417_indexes(_4417_indexes ? _4417_indexes->raw() : nullptr, _4417_indexes ? _4417_indexes->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)((_4417_indexes)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else
  {
    {
      int32_t _11205_ = (int)0;
      int32_t _11206_ = (int)((_4417_indexes)->size(0));
      for (int32_t _4418_i = _11205_; _4418_i < _11206_; ++_4418_i)
      {
        {
          if (((_ptr__4417_indexes[_4418_i] < (int)0) || (_ptr__4417_indexes[_4418_i] >= ((*shape)(_4418_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
            }
          }
          {}
        }
      }
    }
  }
  if ((NULL == sp.get()))
  {
    {
      int32_t _4419_nd = (int)((_4417_indexes)->size(0));
      int64_t _4420_ix = _ptr__4417_indexes[(_4419_nd - (int)1)];
      int32_t _11207_ = (int)1;
      int32_t _11208_ = _4419_nd;
      for (int32_t _4421_i = _11207_; _4421_i < _11208_; ++_4421_i)
      {
        {
          _4420_ix = safe_add( safe_mul( _4420_ix,((*shape)((_4419_nd - _4421_i))) ),_ptr__4417_indexes[((_4419_nd - _4421_i) - (int)1)] );
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4420_ix)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _4422_nd = (int)((_4417_indexes)->size(0));
      int64_t _4423_ix = _ptr__4417_indexes[(_4422_nd - (int)1)];
      int32_t _11209_ = (int)1;
      int32_t _11210_ = _4422_nd;
      for (int32_t _4424_i = _11209_; _4424_i < _11210_; ++_4424_i)
      {
        {
          _4423_ix = safe_add( safe_mul( _4423_ix,((*shape)((_4422_nd - _4424_i))) ),_ptr__4417_indexes[((_4422_nd - _4424_i) - (int)1)] );
        }
      }
      int32_t _4425_j = (int)0;
      while ( ((_4425_j < (int)((sp)->size(0))) && (((*sp)(_4425_j)) < _4423_ix)) )
      {
        {
          ++ _4425_j;
        }
      }
      if (((_4425_j < (int)((sp)->size(0))) && (((*sp)(_4425_j)) == _4423_ix)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4425_j)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.index

// Begin mosek.fusion.ParameterImpl.index
// Method mosek.fusion.ParameterImpl.index @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:390:6-406:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(int32_t _4426_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4426_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(int32_t _4426_i) { return __mosek_2fusion_2ParameterImpl__index(_4426_i); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(int32_t _4426_i) { return __mosek_2fusion_2ParameterImpl__index(_4426_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(int32_t _4426_i)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else if(((_4426_i < (int)0) || (_4426_i >= ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4426_i)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _4427_j = (int)0;
      while ( ((_4427_j < (int)((sp)->size(0))) && (((*sp)(_4427_j)) < _4426_i)) )
      {
        {
          ++ _4427_j;
        }
      }
      if (((_4427_j < (int)((sp)->size(0))) && (((*sp)(_4427_j)) == _4426_i)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4427_j)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.index

// Begin mosek.fusion.ParameterImpl.eval
// Method mosek.fusion.ParameterImpl.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:349:6-387:7
void mosek::fusion::ParameterImpl :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4428_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4429_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4430_xs) { mosek::fusion::p_ParameterImpl::_get_impl(this)->eval(_4428_rs,_4429_ws,_4430_xs); }
void mosek::fusion::p_ParameterImpl::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4428_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4429_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4430_xs)
{
  int32_t _4431_nd = (int)((shape)->size(0));
  int32_t _4432_nelem = (int)((nidxs)->size(0));
  bool _4433_hassp = (NULL != sp.get());
  _4428_rs->alloc_expr(_4431_nd,_4432_nelem,(int)((nidxs)->size(0)),_4433_hassp,(int)((nidxs)->size(0)));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4434_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4434_ri32(_4434_ri32 ? _4434_ri32->raw() : nullptr,_4434_ri32 ? _4434_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4435_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4435_ri64(_4435_ri64 ? _4435_ri64->raw() : nullptr,_4435_ri64 ? _4435_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4436_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->f64;
  _checked_ptr_1<double> _ptr__4436_rf64(_4436_rf64 ? _4436_rf64->raw() : nullptr,_4436_rf64 ? _4436_rf64->size(0) : 0);
  int32_t _4437_rptr = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->ptr_base;
  int32_t _4438_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->nidxs_base;
  int32_t _4439_rcof = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->cof_base;
  int32_t _4440_rshape = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->shape_base;
  int32_t _4441_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->codeptr_base;
  int32_t _4442_rcode = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->code_base;
  int32_t _4443_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->cconst_base;
  int32_t _4444_rsp = mosek::fusion::p_WorkStack::_get_impl(_4428_rs)->sp_base;
  {
    _ptr__4434_ri32[_4437_rptr] = (int)0;
    int32_t _11211_ = (int)0;
    int32_t _11212_ = _4431_nd;
    for (int32_t _4445_i = _11211_; _4445_i < _11212_; ++_4445_i)
    {
      {
        _ptr__4434_ri32[safe_add( _4440_rshape,_4445_i )] = ((*shape)(_4445_i));
      }
    }
    int32_t _11213_ = (int)0;
    int32_t _11214_ = _4432_nelem;
    for (int32_t _4446_i = _11213_; _4446_i < _11214_; ++_4446_i)
    {
      {
        _ptr__4435_ri64[safe_add( _4438_rnidxs,_4446_i )] = (int)0;
      }
    }
    int32_t _11215_ = (int)0;
    int32_t _11216_ = _4432_nelem;
    for (int32_t _4447_i = _11215_; _4447_i < _11216_; ++_4447_i)
    {
      {
        _ptr__4436_rf64[safe_add( _4439_rcof,_4447_i )] = 0.0;
      }
    }
    int32_t _11217_ = (int)0;
    int32_t _11218_ = safe_add( _4432_nelem,(int)1 );
    for (int32_t _4448_i = _11217_; _4448_i < _11218_; ++_4448_i)
    {
      {
        _ptr__4434_ri32[safe_add( _4437_rptr,_4448_i )] = _4448_i;
      }
    }
    if ((_4432_nelem > (int)0))
    {
      {
        int32_t _11219_ = (int)0;
        int32_t _11220_ = safe_add( _4432_nelem,(int)1 );
        for (int32_t _4449_i = _11219_; _4449_i < _11220_; ++_4449_i)
        {
          {
            _ptr__4434_ri32[safe_add( _4441_rcodeptr,_4449_i )] = _4449_i;
          }
        }
      }
    }
    {}
    if (_4433_hassp)
    {
      {
        int32_t _11221_ = (int)0;
        int32_t _11222_ = _4432_nelem;
        for (int32_t _4450_i = _11221_; _4450_i < _11222_; ++_4450_i)
        {
          {
            _ptr__4435_ri64[safe_add( _4444_rsp,_4450_i )] = ((*sp)(_4450_i));
          }
        }
      }
    }
    {}
    int32_t _11223_ = (int)0;
    int32_t _11224_ = _4432_nelem;
    for (int32_t _4451_i = _11223_; _4451_i < _11224_; ++_4451_i)
    {
      {
        _ptr__4434_ri32[safe_add( _4442_rcode,_4451_i )] = (int)1;
        _ptr__4436_rf64[safe_add( _4443_rcconst,_4451_i )] = ((*nidxs)(_4451_i));
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.eval

// Begin mosek.fusion.ParameterImpl.getSp
// Method mosek.fusion.ParameterImpl.getSp @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:339:6-346:7
void mosek::fusion::ParameterImpl :: getSp(std::shared_ptr< monty::ndarray< int64_t,1 > > _4452_dest,int32_t _4453_offset) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getSp(_4452_dest,_4453_offset); }
void mosek::fusion::p_ParameterImpl::getSp(std::shared_ptr< monty::ndarray< int64_t,1 > > _4452_dest,int32_t _4453_offset)
{
  _checked_ptr_1<int64_t> _ptr__4452_dest(_4452_dest ? _4452_dest->raw() : nullptr, _4452_dest ? _4452_dest->size(0) : 0);
  if ((NULL != sp.get()))
  {
    {
      int32_t _11225_ = (int)0;
      int32_t _11226_ = (int)((sp)->size(0));
      for (int32_t _4454_i = _11225_; _4454_i < _11226_; ++_4454_i)
      {
        {
          _ptr__4452_dest[safe_add( _4454_i,_4453_offset )] = ((*sp)(_4454_i));
        }
      }
    }
  }
  else
  {
    {
      int32_t _11227_ = (int)0;
      int32_t _11228_ = (int)((nidxs)->size(0));
      for (int32_t _4455_i = _11227_; _4455_i < _11228_; ++_4455_i)
      {
        {
          _ptr__4452_dest[safe_add( _4455_i,_4453_offset )] = _4455_i;
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.getSp

// Begin mosek.fusion.ParameterImpl.isSparse
// Method mosek.fusion.ParameterImpl.isSparse @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:337:6-58
bool mosek::fusion::ParameterImpl :: isSparse() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_ParameterImpl::isSparse()
{
  return (NULL != sp.get());
}
// End mosek.fusion.ParameterImpl.isSparse

// Begin mosek.fusion.ParameterImpl.slice
// Method mosek.fusion.ParameterImpl.slice @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:279:6-335:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4456_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4457_astop) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4456_astart,_4457_astop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4456_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4457_astop) { return __mosek_2fusion_2ParameterImpl__slice(_4456_astart,_4457_astop); }
/* override: mosek.fusion.Parameter.slice*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4456_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4457_astop) { return __mosek_2fusion_2ParameterImpl__slice(_4456_astart,_4457_astop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4456_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4457_astop)
{
  _checked_ptr_1<int32_t> _ptr__4456_astart(_4456_astart ? _4456_astart->raw() : nullptr, _4456_astart ? _4456_astart->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4457_astop(_4457_astop ? _4457_astop->raw() : nullptr, _4457_astop ? _4457_astop->size(0) : 0);
  if ((((int)((_4456_astart)->size(0)) != (int)((_4457_astop)->size(0))) || ((int)((_4456_astart)->size(0)) != (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  int32_t _4458_nd = (int)((_4456_astart)->size(0));
  int32_t _11229_ = (int)0;
  int32_t _11230_ = _4458_nd;
  for (int32_t _4459_i = _11229_; _4459_i < _11230_; ++_4459_i)
  {
    {
      if (((_ptr__4456_astart[_4459_i] < (int)0) || ((_ptr__4456_astart[_4459_i] >= _ptr__4457_astop[_4459_i]) || (_ptr__4457_astop[_4459_i] > ((*shape)(_4459_i))))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4460_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4458_nd)));
  _checked_ptr_1<int64_t> _ptr__4460_stride(_4460_stride ? _4460_stride->raw() : nullptr,_4460_stride ? _4460_stride->size(0) : 0);
  _ptr__4460_stride[(_4458_nd - (int)1)] = (int)1;
  int32_t _11231_ = (int)1;
  int32_t _11232_ = _4458_nd;
  for (int32_t _4461_i = _11231_; _4461_i < _11232_; ++_4461_i)
  {
    {
      _ptr__4460_stride[((_4458_nd - _4461_i) - (int)1)] = safe_mul( _ptr__4460_stride[(_4458_nd - _4461_i)],((*shape)(_4461_i)) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4462_index = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4458_nd)));
  _checked_ptr_1<int32_t> _ptr__4462_index(_4462_index ? _4462_index->raw() : nullptr,_4462_index ? _4462_index->size(0) : 0);
  std::vector<int32_t> _11233_;
  for (int32_t _4464_i = (int)0, _11234_ = _4458_nd; _4464_i < _11234_ ; ++_4464_i)
  {
    _11233_.push_back((_ptr__4457_astop[_4464_i] - _ptr__4456_astart[_4464_i]));
  }
  auto _11235_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11233_.size()),_11233_.begin(),_11233_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4463_rshape = _11235_;
  _checked_ptr_1<int32_t> _ptr__4463_rshape(_4463_rshape ? _4463_rshape->raw() : nullptr,_4463_rshape ? _4463_rshape->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      int32_t _4465_count = (int)1;
      int32_t _11236_ = (int)0;
      int32_t _11237_ = _4458_nd;
      for (int32_t _4466_i = _11236_; _4466_i < _11237_; ++_4466_i)
      {
        {
          _4465_count *= _ptr__4463_rshape[_4466_i];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4467_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4465_count)));
      _checked_ptr_1<int32_t> _ptr__4467_rnidxs(_4467_rnidxs ? _4467_rnidxs->raw() : nullptr,_4467_rnidxs ? _4467_rnidxs->size(0) : 0);
      int32_t _4468_k = (int)0;
      int32_t _11238_ = (int)0;
      int32_t _11239_ = (int)((nidxs)->size(0));
      for (int32_t _4469_i = _11238_; _4469_i < _11239_; ++_4469_i)
      {
        {
          int32_t _11240_ = (int)0;
          int32_t _11241_ = _4458_nd;
          for (int32_t _4470_j = _11240_; _4470_j < _11241_; ++_4470_j)
          {
            {
              _ptr__4462_index[_4470_j] = (int32_t)((_4469_i / _ptr__4460_stride[_4470_j]) % ((*shape)(_4470_j)));
            }
          }
          bool _4471_inslice = true;
          int32_t _11242_ = (int)0;
          int32_t _11243_ = _4458_nd;
          for (int32_t _4472_j = _11242_; _4472_j < _11243_; ++_4472_j)
          {
            {
              _4471_inslice = (_4471_inslice && ((_ptr__4456_astart[_4472_j] <= _ptr__4462_index[_4472_j]) && (_ptr__4462_index[_4472_j] < _ptr__4457_astop[_4472_j])));
            }
          }
          if (_4471_inslice)
          {
            {
              _ptr__4467_rnidxs[_4468_k] = ((*nidxs)(_4469_i));
              ++ _4468_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4463_rshape,nullptr,_4467_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int32_t _4473_count = (int)0;
      int32_t _11244_ = (int)0;
      int32_t _11245_ = (int)((nidxs)->size(0));
      for (int32_t _4474_i = _11244_; _4474_i < _11245_; ++_4474_i)
      {
        {
          int32_t _11246_ = (int)0;
          int32_t _11247_ = _4458_nd;
          for (int32_t _4475_j = _11246_; _4475_j < _11247_; ++_4475_j)
          {
            {
              _ptr__4462_index[_4475_j] = (int32_t)((((*sp)(_4474_i)) / _ptr__4460_stride[_4475_j]) % ((*shape)(_4475_j)));
            }
          }
          bool _4476_inslice = true;
          int32_t _11248_ = (int)0;
          int32_t _11249_ = _4458_nd;
          for (int32_t _4477_j = _11248_; _4477_j < _11249_; ++_4477_j)
          {
            {
              _4476_inslice = (_4476_inslice && ((_ptr__4456_astart[_4477_j] <= _ptr__4462_index[_4477_j]) && (_ptr__4462_index[_4477_j] < _ptr__4457_astop[_4477_j])));
            }
          }
          if (_4476_inslice)
          {
            {
              ++ _4473_count;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4478_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4473_count)));
      _checked_ptr_1<int32_t> _ptr__4478_rnidxs(_4478_rnidxs ? _4478_rnidxs->raw() : nullptr,_4478_rnidxs ? _4478_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4479_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4473_count)));
      _checked_ptr_1<int64_t> _ptr__4479_rsp(_4479_rsp ? _4479_rsp->raw() : nullptr,_4479_rsp ? _4479_rsp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4480_rstride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4458_nd)));
      _checked_ptr_1<int64_t> _ptr__4480_rstride(_4480_rstride ? _4480_rstride->raw() : nullptr,_4480_rstride ? _4480_rstride->size(0) : 0);
      _ptr__4480_rstride[(_4458_nd - (int)1)] = (int)1;
      int32_t _11250_ = (int)1;
      int32_t _11251_ = _4458_nd;
      for (int32_t _4481_i = _11250_; _4481_i < _11251_; ++_4481_i)
      {
        {
          _ptr__4480_rstride[((_4458_nd - _4481_i) - (int)1)] = safe_mul( _ptr__4480_rstride[(_4458_nd - _4481_i)],_ptr__4463_rshape[_4481_i] );
        }
      }
      int32_t _4482_k = (int)0;
      int32_t _11252_ = (int)0;
      int32_t _11253_ = (int)((nidxs)->size(0));
      for (int32_t _4483_i = _11252_; _4483_i < _11253_; ++_4483_i)
      {
        {
          int32_t _11254_ = (int)0;
          int32_t _11255_ = _4458_nd;
          for (int32_t _4484_j = _11254_; _4484_j < _11255_; ++_4484_j)
          {
            {
              _ptr__4462_index[_4483_i] = (int32_t)((((*sp)(_4483_i)) / _ptr__4460_stride[_4484_j]) % ((*shape)(_4484_j)));
            }
          }
          bool _4485_inslice = true;
          int32_t _11256_ = (int)0;
          int32_t _11257_ = _4458_nd;
          for (int32_t _4486_j = _11256_; _4486_j < _11257_; ++_4486_j)
          {
            {
              _4485_inslice = (_4485_inslice && ((_ptr__4456_astart[_4486_j] <= _ptr__4462_index[_4486_j]) && (_ptr__4462_index[_4486_j] < _ptr__4457_astop[_4486_j])));
            }
          }
          if (_4485_inslice)
          {
            {
              int64_t _4487_ri = (int64_t)0;
              int32_t _11258_ = (int)0;
              int32_t _11259_ = _4458_nd;
              for (int32_t _4488_j = _11258_; _4488_j < _11259_; ++_4488_j)
              {
                {
                  _4487_ri += safe_mul( (_ptr__4462_index[_4488_j] - _ptr__4456_astart[_4488_j]),_ptr__4480_rstride[_4488_j] );
                }
              }
              _ptr__4479_rsp[_4482_k] = _4487_ri;
              _ptr__4478_rnidxs[_4482_k] = ((*nidxs)(_4483_i));
              ++ _4482_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4463_rshape,_4479_rsp,_4478_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
}
// End mosek.fusion.ParameterImpl.slice

// Begin mosek.fusion.ParameterImpl.transpose
// Method mosek.fusion.ParameterImpl.transpose @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:244:6-277:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__transpose() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__transpose(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::transpose() { return __mosek_2fusion_2ParameterImpl__transpose(); }
/* override: mosek.fusion.Parameter.transpose*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__transpose() { return __mosek_2fusion_2ParameterImpl__transpose(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__transpose()
{
  if (((int)((shape)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::ParameterImpl::t(_pubthis)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      if (((int)((shape)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(((*shape)((int)0)))}),sp,nidxs)).as<::mosek::fusion::Parameter>();
        }
      }
      else
      {
        {
          if (((int)((shape)->size(0)) == (int)2))
          {
            {
              int32_t _4489_d0 = ((*shape)((int)0));
              int32_t _4490_d1 = ((*shape)((int)1));
              std::shared_ptr< monty::ndarray< int32_t,1 > > _4491_tshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_4490_d1),(int32_t)(_4489_d0)});
              _checked_ptr_1<int32_t> _ptr__4491_tshape(_4491_tshape ? _4491_tshape->raw() : nullptr,_4491_tshape ? _4491_tshape->size(0) : 0);
              if ((NULL != sp.get()))
              {
                {
                  std::shared_ptr< monty::ndarray< int32_t,1 > > _4492_tnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((nidxs)->size(0)))));
                  _checked_ptr_1<int32_t> _ptr__4492_tnidxs(_4492_tnidxs ? _4492_tnidxs->raw() : nullptr,_4492_tnidxs ? _4492_tnidxs->size(0) : 0);
                  std::shared_ptr< monty::ndarray< int64_t,1 > > _4493_tsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((sp)->size(0)))));
                  _checked_ptr_1<int64_t> _ptr__4493_tsp(_4493_tsp ? _4493_tsp->raw() : nullptr,_4493_tsp ? _4493_tsp->size(0) : 0);
                  std::shared_ptr< monty::ndarray< int32_t,1 > > _4494_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _4490_d1,(int)1 ))));
                  _checked_ptr_1<int32_t> _ptr__4494_ptr(_4494_ptr ? _4494_ptr->raw() : nullptr,_4494_ptr ? _4494_ptr->size(0) : 0);
                  int32_t _11260_ = (int)0;
                  int32_t _11261_ = (int)((sp)->size(0));
                  for (int32_t _4495_k = _11260_; _4495_k < _11261_; ++_4495_k)
                  {
                    {
                      _ptr__4494_ptr[safe_add( (int)1,(((*sp)(_4495_k)) % _4490_d1) )] += (int)1;
                    }
                  }
                  int32_t _11262_ = (int)0;
                  int32_t _11263_ = _4490_d1;
                  for (int32_t _4496_k = _11262_; _4496_k < _11263_; ++_4496_k)
                  {
                    {
                      _ptr__4494_ptr[safe_add( _4496_k,(int)1 )] += _ptr__4494_ptr[_4496_k];
                    }
                  }
                  int32_t _11264_ = (int)0;
                  int32_t _11265_ = (int)((sp)->size(0));
                  for (int32_t _4497_k = _11264_; _4497_k < _11265_; ++_4497_k)
                  {
                    {
                      int64_t _4498_i0 = (((*sp)(_4497_k)) / _4490_d1);
                      int64_t _4499_i1 = (((*sp)(_4497_k)) % _4490_d1);
                      _ptr__4492_tnidxs[_ptr__4494_ptr[_4499_i1]] = ((*nidxs)(_4497_k));
                      _ptr__4493_tsp[_ptr__4494_ptr[_4499_i1]] = safe_add( safe_mul( _4499_i1,_4489_d0 ),_4498_i0 );
                      _ptr__4494_ptr[_4499_i1] += (int)1;
                    }
                  }
                  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4491_tshape,_4493_tsp,_4492_tnidxs)).as<::mosek::fusion::Parameter>();
                }
              }
              else
              {
                {
                  std::vector<int32_t> _11266_;
                  for (int32_t _4501_j = (int)0, _11267_ = _4490_d1; _4501_j < _11267_ ; ++_4501_j)
                  {
                    for (int32_t _4502_i = (int)0, _11268_ = _4490_d1; _4502_i < _11268_ ; ++_4502_i)
                    {
                      _11266_.push_back(((*nidxs)(safe_add( safe_mul( _4502_i,_4490_d1 ),_4501_j ))));
                    }
                  }
                  auto _11269_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11266_.size()),_11266_.begin(),_11266_.end()));
                  std::shared_ptr< monty::ndarray< int32_t,1 > > _4500_tnidxs = _11269_;
                  _checked_ptr_1<int32_t> _ptr__4500_tnidxs(_4500_tnidxs ? _4500_tnidxs->raw() : nullptr,_4500_tnidxs ? _4500_tnidxs->size(0) : 0);
                  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4491_tshape,nullptr,_4500_tnidxs)).as<::mosek::fusion::Parameter>();
                }
              }
            }
          }
          else
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for transpose"));
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.transpose

// Begin mosek.fusion.ParameterImpl.slice
// Method mosek.fusion.ParameterImpl.slice @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:217:6-242:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(int32_t _4503_start,int32_t _4504_stop) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4503_start,_4504_stop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(int32_t _4503_start,int32_t _4504_stop) { return __mosek_2fusion_2ParameterImpl__slice(_4503_start,_4504_stop); }
/* override: mosek.fusion.Parameter.slice*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(int32_t _4503_start,int32_t _4504_stop) { return __mosek_2fusion_2ParameterImpl__slice(_4503_start,_4504_stop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(int32_t _4503_start,int32_t _4504_stop)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  if (((_4503_start < (int)0) || ((_4503_start >= _4504_stop) || (_4504_stop > size))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<int32_t> _11270_;
      for (int32_t _4505_i = _4503_start, _11271_ = _4504_stop; _4505_i < _11271_ ; ++_4505_i)
      {
        _11270_.push_back(((*nidxs)(_4505_i)));
      }
      auto _11272_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11270_.size()),_11270_.begin(),_11270_.end()));
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((_4504_stop - _4503_start))}),nullptr,_11272_)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int32_t _4506_count = (int)0;
      int32_t _11273_ = (int)0;
      int32_t _11274_ = (int)((sp)->size(0));
      for (int32_t _4507_i = _11273_; _4507_i < _11274_; ++_4507_i)
      {
        {
          if (((_4503_start <= ((*sp)(_4507_i))) && (((*sp)(_4507_i)) < _4504_stop)))
          {
            {
              ++ _4506_count;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4508_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4506_count)));
      _checked_ptr_1<int32_t> _ptr__4508_rnidxs(_4508_rnidxs ? _4508_rnidxs->raw() : nullptr,_4508_rnidxs ? _4508_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4509_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4506_count)));
      _checked_ptr_1<int64_t> _ptr__4509_rsp(_4509_rsp ? _4509_rsp->raw() : nullptr,_4509_rsp ? _4509_rsp->size(0) : 0);
      int32_t _4510_k = (int)0;
      int32_t _11275_ = (int)0;
      int32_t _11276_ = (int)((sp)->size(0));
      for (int32_t _4511_i = _11275_; _4511_i < _11276_; ++_4511_i)
      {
        {
          if (((_4503_start <= ((*sp)(_4511_i))) && (((*sp)(_4511_i)) < _4504_stop)))
          {
            {
              _ptr__4508_rnidxs[_4510_k] = ((*nidxs)(_4511_i));
              _ptr__4509_rsp[_4510_k] = (((*sp)(_4510_k)) - _4503_start);
              ++ _4510_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((_4504_stop - _4503_start))}),_4509_rsp,_4508_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
}
// End mosek.fusion.ParameterImpl.slice

// Begin mosek.fusion.ParameterImpl.reshape
// Method mosek.fusion.ParameterImpl.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:211:6-215:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4512_dims) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__reshape(_4512_dims); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4512_dims) { return __mosek_2fusion_2ParameterImpl__reshape(_4512_dims); }
/* override: mosek.fusion.Parameter.reshape*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4512_dims) { return __mosek_2fusion_2ParameterImpl__reshape(_4512_dims); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4512_dims)
{
  _checked_ptr_1<int32_t> _ptr__4512_dims(_4512_dims ? _4512_dims->raw() : nullptr, _4512_dims ? _4512_dims->size(0) : 0);
  if ((::mosek::fusion::p_Set::size(_4512_dims) != ::mosek::fusion::p_Set::size(shape)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incompatible shape for resize"));
    }
  }
  {}
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4512_dims,sp,nidxs)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.ParameterImpl.reshape

// Begin mosek.fusion.ParameterImpl.asExpr
// Method mosek.fusion.ParameterImpl.asExpr @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:209:6-75
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__asExpr() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
/* override: mosek.fusion.Parameter.asExpr*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__asExpr()
{
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter((::mosek::fusion::ParameterImpl::t(_pubthis)).as<::mosek::fusion::Parameter>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ParameterImpl.asExpr

// Begin mosek.fusion.ParameterImpl.getSize
// Method mosek.fusion.ParameterImpl.getSize @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:207:6-69
int64_t mosek::fusion::ParameterImpl :: getSize() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_ParameterImpl::getSize()
{
  return ::mosek::fusion::p_Set::size(shape);
}
// End mosek.fusion.ParameterImpl.getSize

// Begin mosek.fusion.ParameterImpl.getNumNonzero
// Method mosek.fusion.ParameterImpl.getNumNonzero @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:206:6-64
int32_t mosek::fusion::ParameterImpl :: getNumNonzero() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getNumNonzero(); }
int32_t mosek::fusion::p_ParameterImpl::getNumNonzero()
{
  return (int)((nidxs)->size(0));
}
// End mosek.fusion.ParameterImpl.getNumNonzero

// Begin mosek.fusion.ParameterImpl.getND
// Method mosek.fusion.ParameterImpl.getND @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:205:6-64
int32_t mosek::fusion::ParameterImpl :: getND() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_ParameterImpl::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.ParameterImpl.getND

// Begin mosek.fusion.ParameterImpl.getShape
// Method mosek.fusion.ParameterImpl.getShape @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:204:6-82
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::ParameterImpl :: getShape() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ParameterImpl::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.ParameterImpl.getShape

// Begin mosek.fusion.ParameterImpl.getDim
// Method mosek.fusion.ParameterImpl.getDim @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:203:6-69
int32_t mosek::fusion::ParameterImpl :: getDim(int32_t _4513_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getDim(_4513_i); }
int32_t mosek::fusion::p_ParameterImpl::getDim(int32_t _4513_i)
{
  return ((*shape)(_4513_i));
}
// End mosek.fusion.ParameterImpl.getDim

// Begin mosek.fusion.ParameterImpl.getAllIndexes
// Method mosek.fusion.ParameterImpl.getAllIndexes @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:198:6-201:7
void mosek::fusion::ParameterImpl :: getAllIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _4514_dst,int32_t _4515_ofs) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getAllIndexes(_4514_dst,_4515_ofs); }
void mosek::fusion::p_ParameterImpl::getAllIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _4514_dst,int32_t _4515_ofs)
{
  _checked_ptr_1<int32_t> _ptr__4514_dst(_4514_dst ? _4514_dst->raw() : nullptr, _4514_dst ? _4514_dst->size(0) : 0);
  int32_t _11277_ = (int)0;
  int32_t _11278_ = (int)((nidxs)->size(0));
  for (int32_t _4516_i = _11277_; _4516_i < _11278_; ++_4516_i)
  {
    {
      _ptr__4514_dst[safe_add( _4515_ofs,_4516_i )] = ((*nidxs)(_4516_i));
    }
  }
}
// End mosek.fusion.ParameterImpl.getAllIndexes

// Begin mosek.fusion.ParameterImpl.getIndex
// Method mosek.fusion.ParameterImpl.getIndex @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:195:6-197:7
int32_t mosek::fusion::ParameterImpl :: getIndex(int32_t _4517_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getIndex(_4517_i); }
int32_t mosek::fusion::p_ParameterImpl::getIndex(int32_t _4517_i)
{
  return ((*nidxs)(_4517_i));
}
// End mosek.fusion.ParameterImpl.getIndex

// Begin mosek.fusion.ParameterImpl.getValue
// Method mosek.fusion.ParameterImpl.getValue @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:190:6-192:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ParameterImpl :: getValue() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getValue(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_ParameterImpl::getValue()
{
  return mosek::fusion::p_Model::_get_impl(model.get())->getParameterValue(nidxs);
}
// End mosek.fusion.ParameterImpl.getValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:168:6-186:7
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,2 > > _4518_values2) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4518_values2); }
void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,2 > > _4518_values2)
{
  if (((_pubthis->getND() != (int)2) || (((int)((_4518_values2)->size(0)) != ((*shape)((int)0))) || ((int)((_4518_values2)->size(1)) != ((*shape)((int)1))))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching value shape"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4519_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( ((*shape)((int)0)),((*shape)((int)1)) ))));
      _checked_ptr_1<double> _ptr__4519_vals(_4519_vals ? _4519_vals->raw() : nullptr,_4519_vals ? _4519_vals->size(0) : 0);
      int32_t _11279_ = (int)0;
      int32_t _11280_ = ((*shape)((int)0));
      for (int32_t _4520_i = _11279_; _4520_i < _11280_; ++_4520_i)
      {
        {
          int32_t _11281_ = (int)0;
          int32_t _11282_ = ((*shape)((int)1));
          for (int32_t _4521_j = _11281_; _4521_j < _11282_; ++_4521_j)
          {
            {
              _ptr__4519_vals[safe_add( safe_mul( _4520_i,((*shape)((int)1)) ),_4521_j )] = ((*_4518_values2)(_4520_i,_4521_j));
            }
          }
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4519_vals);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4522_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((sp)->size(0)))));
      _checked_ptr_1<double> _ptr__4522_vals(_4522_vals ? _4522_vals->raw() : nullptr,_4522_vals ? _4522_vals->size(0) : 0);
      int32_t _11283_ = (int)0;
      int32_t _11284_ = (int)((sp)->size(0));
      for (int32_t _4523_i = _11283_; _4523_i < _11284_; ++_4523_i)
      {
        {
          _ptr__4522_vals[_4523_i] = ((*_4518_values2)((((*sp)(_4523_i)) / ((*shape)((int)1))),(((*sp)(_4523_i)) % ((*shape)((int)1)))));
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4522_vals);
    }
  }
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:147:6-166:7
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,1 > > _4524_values) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4524_values); }
void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,1 > > _4524_values)
{
  _checked_ptr_1<double> _ptr__4524_values(_4524_values ? _4524_values->raw() : nullptr, _4524_values ? _4524_values->size(0) : 0);
  if ((NULL != sp.get()))
  {
    {
      if (((int)((_4524_values)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _4525_cvals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nidxs)->size(0)))));
          _checked_ptr_1<double> _ptr__4525_cvals(_4525_cvals ? _4525_cvals->raw() : nullptr,_4525_cvals ? _4525_cvals->size(0) : 0);
          int32_t _11285_ = (int)0;
          int32_t _11286_ = (int)((nidxs)->size(0));
          for (int32_t _4526_i = _11285_; _4526_i < _11286_; ++_4526_i)
          {
            {
              _ptr__4525_cvals[_4526_i] = _ptr__4524_values[((*sp)(_4526_i))];
            }
          }
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4525_cvals);
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_4524_values)->size(0)) != (int)((nidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect for sparse parameter"));
        }
      }
      else
      {
        {
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4524_values);
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:140:6-145:7
void mosek::fusion::ParameterImpl :: setValue(double _4527_value) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4527_value); }
void mosek::fusion::p_ParameterImpl::setValue(double _4527_value)
{
  std::shared_ptr< monty::ndarray< double,1 > > _4528_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(size)));
  _checked_ptr_1<double> _ptr__4528_vals(_4528_vals ? _4528_vals->raw() : nullptr,_4528_vals ? _4528_vals->size(0) : 0);
  int32_t _11287_ = (int)0;
  int64_t _11288_ = size;
  for (int64_t _4529_i = _11287_; _4529_i < _11288_; ++_4529_i)
  {
    {
      _ptr__4528_vals[_4529_i] = _4527_value;
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4528_vals);
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.getModel
// Method mosek.fusion.ParameterImpl.getModel @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:139:6-54
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__getModel() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
/* override: mosek.fusion.Expression.getModel*/
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__getModel()
{
  return model;
}
// End mosek.fusion.ParameterImpl.getModel

void mosek::fusion::p_ParameterImpl::destroy()
{
  nidxs.reset();
  sp.reset();
  shape.reset();
  model.reset();
}
void mosek::fusion::ParameterImpl::destroy() { mosek::fusion::p_ParameterImpl::_get_impl(this)->destroy(); }
// } class ParameterImpl
// class Parameter { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameter.monty:74:4-110:5
// Begin mosek.fusion.Parameter.clone
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::clone(monty::rc_ptr< ::mosek::fusion::Model > _4530_m) { return __mosek_2fusion_2Parameter__clone(_4530_m); }
// End mosek.fusion.Parameter.clone

// Begin mosek.fusion.Parameter.getSize
// End mosek.fusion.Parameter.getSize

// Begin mosek.fusion.Parameter.getAllIndexes
// End mosek.fusion.Parameter.getAllIndexes

// Begin mosek.fusion.Parameter.getIndex
// End mosek.fusion.Parameter.getIndex

// Begin mosek.fusion.Parameter.getSp
// End mosek.fusion.Parameter.getSp

// Begin mosek.fusion.Parameter.getShape
// End mosek.fusion.Parameter.getShape

// Begin mosek.fusion.Parameter.getND
// End mosek.fusion.Parameter.getND

// Begin mosek.fusion.Parameter.getDim
// End mosek.fusion.Parameter.getDim

// Begin mosek.fusion.Parameter.transpose
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::transpose() { return __mosek_2fusion_2Parameter__transpose(); }
// End mosek.fusion.Parameter.transpose

// Begin mosek.fusion.Parameter.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4537_midxs) { return __mosek_2fusion_2Parameter__pick(_4537_midxs); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4537_midxs) { return __mosek_2fusion_2Parameter__pick(_4537_midxs); }
// End mosek.fusion.Parameter.pick

// Begin mosek.fusion.Parameter.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4538_idxs) { return __mosek_2fusion_2Parameter__pick(_4538_idxs); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4538_idxs) { return __mosek_2fusion_2Parameter__pick(_4538_idxs); }
// End mosek.fusion.Parameter.pick

// Begin mosek.fusion.Parameter.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4539_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4540_astop) { return __mosek_2fusion_2Parameter__slice(_4539_astart,_4540_astop); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4539_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4540_astop) { return __mosek_2fusion_2Parameter__slice(_4539_astart,_4540_astop); }
// End mosek.fusion.Parameter.slice

// Begin mosek.fusion.Parameter.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(int32_t _4541_start,int32_t _4542_stop) { return __mosek_2fusion_2Parameter__slice(_4541_start,_4542_stop); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(int32_t _4541_start,int32_t _4542_stop) { return __mosek_2fusion_2Parameter__slice(_4541_start,_4542_stop); }
// End mosek.fusion.Parameter.slice

// Begin mosek.fusion.Parameter.isSparse
// End mosek.fusion.Parameter.isSparse

// Begin mosek.fusion.Parameter.reshape
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4543_dims) { return __mosek_2fusion_2Parameter__reshape(_4543_dims); }
// End mosek.fusion.Parameter.reshape

// Begin mosek.fusion.Parameter.getNumNonzero
// End mosek.fusion.Parameter.getNumNonzero

// Begin mosek.fusion.Parameter.asExpr
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::asExpr() { return __mosek_2fusion_2Parameter__asExpr(); }
// End mosek.fusion.Parameter.asExpr

// Begin mosek.fusion.Parameter.getValue
// End mosek.fusion.Parameter.getValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// } class Parameter
// class ExprOptimizeCode { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:456:4-1161:5
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode(mosek::fusion::p_ExprOptimizeCode *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprOptimizeCode()" << this << std::endl; */ }
mosek::fusion::ExprOptimizeCode::~ExprOptimizeCode() {  /* std::cout << "~ExprOptimizeCode()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprOptimizeCode::p_ExprOptimizeCode
  (::mosek::fusion::ExprOptimizeCode * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprOptimizeCode.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:458:6-461:7
mosek::fusion::ExprOptimizeCode::t mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode
  (monty::rc_ptr< ::mosek::fusion::Expression > _4547_expr)
{ return new mosek::fusion::ExprOptimizeCode(_4547_expr); }
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode
  (monty::rc_ptr< ::mosek::fusion::Expression > _4547_expr) : 
   ExprOptimizeCode(new mosek::fusion::p_ExprOptimizeCode(this))
{ mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->_initialize(_4547_expr); }
void mosek::fusion::p_ExprOptimizeCode::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4547_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4547_expr->__mosek_2fusion_2Expression__getModel(),_4547_expr->getShape());
    mosek::fusion::p_ExprOptimizeCode::_get_impl(::mosek::fusion::ExprOptimizeCode::t(_pubthis))->expr = _4547_expr;
  }
}
// mosek.fusion.ExprOptimizeCode.ctor

// Begin mosek.fusion.ExprOptimizeCode.compress_code
// Method mosek.fusion.ExprOptimizeCode.compress_code @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:718:6-1160:7
void mosek::fusion::p_ExprOptimizeCode::compress_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _4548_xs,int32_t _4549_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _4550_code,int32_t _4551_code_base,std::shared_ptr< monty::ndarray< int32_t,1 > > _4552_ptr,int32_t _4553_ptr_base,std::shared_ptr< monty::ndarray< double,1 > > _4554_fixterm,int32_t _4555_fixterm_base,std::shared_ptr< monty::ndarray< double,1 > > _4556_code_consts,int32_t _4557_code_consts_base,int32_t _4558_target_code_base,int32_t _4559_target_const_base,int32_t _4560_target_ptr_base)
{
  _checked_ptr_1<int32_t> _ptr__4550_code(_4550_code ? _4550_code->raw() : nullptr, _4550_code ? _4550_code->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4552_ptr(_4552_ptr ? _4552_ptr->raw() : nullptr, _4552_ptr ? _4552_ptr->size(0) : 0);
  _checked_ptr_1<double> _ptr__4554_fixterm(_4554_fixterm ? _4554_fixterm->raw() : nullptr, _4554_fixterm ? _4554_fixterm->size(0) : 0);
  _checked_ptr_1<double> _ptr__4556_code_consts(_4556_code_consts ? _4556_code_consts->raw() : nullptr, _4556_code_consts ? _4556_code_consts->size(0) : 0);
  int32_t _4561_ncodeatoms = _ptr__4552_ptr[safe_add( _4553_ptr_base,_4549_n )];
  int32_t _4562_stack = _4548_xs->alloci32(safe_add( _4561_ncodeatoms,(int)2 ));
  int32_t _4563_stackp = (int)0;
  int32_t _4564_chld = _4548_xs->alloci32(safe_add( _4561_ncodeatoms,(int)2 ));
  int32_t _4565_chld_ptr = _4548_xs->alloci32(safe_add( _4561_ncodeatoms,(int)3 ));
  int32_t _4566_tcconst = _4548_xs->allocf64(safe_add( _4561_ncodeatoms,(int)2 ));
  int32_t _4567_tcode = _4548_xs->alloci32(safe_add( _4561_ncodeatoms,(int)2 ));
  int32_t _4568_tcodep = (int)0;
  int32_t _4569_error_at = (-(int)1);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4570_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4548_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4570_xi32(_4570_xi32 ? _4570_xi32->raw() : nullptr,_4570_xi32 ? _4570_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4571_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4548_xs)->f64;
  _checked_ptr_1<double> _ptr__4571_xf64(_4571_xf64 ? _4571_xf64->raw() : nullptr,_4571_xf64 ? _4571_xf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4572_target_code = _4570_xi32;
  _checked_ptr_1<int32_t> _ptr__4572_target_code(_4572_target_code ? _4572_target_code->raw() : nullptr,_4572_target_code ? _4572_target_code->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4573_target_const = _4571_xf64;
  _checked_ptr_1<double> _ptr__4573_target_const(_4573_target_const ? _4573_target_const->raw() : nullptr,_4573_target_const ? _4573_target_const->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4574_target_ptr = _4570_xi32;
  _checked_ptr_1<int32_t> _ptr__4574_target_ptr(_4574_target_ptr ? _4574_target_ptr->raw() : nullptr,_4574_target_ptr ? _4574_target_ptr->size(0) : 0);
  int32_t _4575_xpi32 = mosek::fusion::p_WorkStack::_get_impl(_4548_xs)->pi32;
  int32_t _4576_xpi64 = mosek::fusion::p_WorkStack::_get_impl(_4548_xs)->pi64;
  int32_t _4577_xpf64 = mosek::fusion::p_WorkStack::_get_impl(_4548_xs)->pf64;
  _ptr__4574_target_ptr[_4560_target_ptr_base] = (int)0;
  int32_t _4578_codei = (int)0;
  int32_t _11289_ = (int)0;
  int32_t _11290_ = _4549_n;
  for (int32_t _4579_i = _11289_; _4579_i < _11290_; ++_4579_i)
  {
    {
      int32_t _4580_e = _ptr__4552_ptr[safe_add( safe_add( _4553_ptr_base,_4579_i ),(int)1 )];
      int32_t _4581_b = _ptr__4552_ptr[safe_add( _4553_ptr_base,_4579_i )];
      if ((_4569_error_at < (int)0))
      {
        {
          _4563_stackp = (int)0;
          _4568_tcodep = (int)0;
          _ptr__4570_xi32[_4565_chld_ptr] = (int)0;
          int32_t _11291_ = (int)0;
          int32_t _11292_ = (_4580_e - _4581_b);
          for (int32_t _4582_j = _11291_; _4582_j < _11292_; ++_4582_j)
          {
            {
              _ptr__4572_target_code[safe_add( _4567_tcode,_4582_j )] = (-(int)9999);
            }
          }
          int32_t _11293_ = _4581_b;
          int32_t _11294_ = _4580_e;
          for (int32_t _4583_j = _11293_; _4583_j < _11294_; ++_4583_j)
          {
            {
              int32_t _4584_opcode = _ptr__4550_code[safe_add( _4551_code_base,_4583_j )];
              double _4585_oparg = _ptr__4556_code_consts[safe_add( _4557_code_consts_base,_4583_j )];
              if ((_4584_opcode == 0))
              {
                {
                }
              }
              else if((_4584_opcode == 2))
              {
                {
                  _ptr__4572_target_code[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                  _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = _4585_oparg;
                  _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                  _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                  ++ _4563_stackp;
                  ++ _4568_tcodep;
                }
              }
              else if((_4584_opcode == 1))
              {
                {
                  _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = _4584_opcode;
                  _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = _4585_oparg;
                  _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                  _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                  ++ _4563_stackp;
                  ++ _4568_tcodep;
                }
              }
              else if((_4584_opcode == 3))
              {
                {
                  if ((_4563_stackp >= (int)2))
                  {
                    {
                      int32_t _4586_i1 = _ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)];
                      -- _4563_stackp;
                      int32_t _4587_i0 = _ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)];
                      -- _4563_stackp;
                      if (((_ptr__4570_xi32[safe_add( _4567_tcode,_4587_i0 )] == 2) && (_ptr__4570_xi32[safe_add( _4567_tcode,_4586_i1 )] == 2)))
                      {
                        {
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = (_ptr__4571_xf64[safe_add( _4566_tcconst,_4587_i0 )] + _ptr__4571_xf64[safe_add( _4566_tcconst,_4586_i1 )]);
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else if(((_ptr__4570_xi32[safe_add( _4567_tcode,_4587_i0 )] == 2) && ((_ptr__4571_xf64[safe_add( _4566_tcconst,_4587_i0 )] <= 0.0) && (_ptr__4571_xf64[safe_add( _4566_tcconst,_4587_i0 )] >= 0.0))))
                      {
                        {
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = 0.0;
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4586_i1;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else if(((_ptr__4570_xi32[safe_add( _4567_tcode,_4586_i1 )] == 2) && ((_ptr__4571_xf64[safe_add( _4566_tcconst,_4586_i1 )] <= 0.0) && (_ptr__4571_xf64[safe_add( _4566_tcconst,_4586_i1 )] >= 0.0))))
                      {
                        {
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4587_i0;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = safe_add( _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )],(int)2 );
                          _ptr__4570_xi32[safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] )] = _4587_i0;
                          _ptr__4570_xi32[safe_add( safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] ),(int)1 )] = _4586_i1;
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = _4584_opcode;
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = _4585_oparg;
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4569_error_at = _4583_j;
                    }
                  }
                }
              }
              else if((_4584_opcode == 5))
              {
                {
                  if ((_4563_stackp >= (int)2))
                  {
                    {
                      int32_t _4588_i1 = _ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)];
                      -- _4563_stackp;
                      int32_t _4589_i0 = _ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)];
                      -- _4563_stackp;
                      if (((_ptr__4570_xi32[safe_add( _4567_tcode,_4589_i0 )] == 2) && (_ptr__4570_xi32[safe_add( _4567_tcode,_4588_i1 )] == 2)))
                      {
                        {
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = (_ptr__4571_xf64[safe_add( _4566_tcconst,_4589_i0 )] * _ptr__4571_xf64[safe_add( _4566_tcconst,_4588_i1 )]);
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else if(((_ptr__4570_xi32[safe_add( _4567_tcode,_4589_i0 )] == 2) && ((_ptr__4571_xf64[safe_add( _4566_tcconst,_4589_i0 )] <= 0.0) && (_ptr__4571_xf64[safe_add( _4566_tcconst,_4589_i0 )] >= 0.0))))
                      {
                        {
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = 0.0;
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else if(((_ptr__4570_xi32[safe_add( _4567_tcode,_4588_i1 )] == 2) && ((_ptr__4571_xf64[safe_add( _4566_tcconst,_4588_i1 )] <= 0.0) && (_ptr__4571_xf64[safe_add( _4566_tcconst,_4588_i1 )] >= 0.0))))
                      {
                        {
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = 0.0;
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else if(((_ptr__4570_xi32[safe_add( _4567_tcode,_4588_i1 )] == 2) && ((_ptr__4571_xf64[safe_add( _4566_tcconst,_4588_i1 )] <= 1.0) && (_ptr__4571_xf64[safe_add( _4566_tcconst,_4588_i1 )] >= 1.0))))
                      {
                        {
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = safe_add( _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )],(int)1 );
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4589_i0;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else if(((_ptr__4570_xi32[safe_add( _4567_tcode,_4589_i0 )] == 2) && ((_ptr__4571_xf64[safe_add( _4566_tcconst,_4589_i0 )] <= 1.0) && (_ptr__4571_xf64[safe_add( _4566_tcconst,_4589_i0 )] >= 1.0))))
                      {
                        {
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = safe_add( _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )],(int)1 );
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4588_i1;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = safe_add( _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )],(int)2 );
                          _ptr__4570_xi32[safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] )] = _4589_i0;
                          _ptr__4570_xi32[safe_add( safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] ),(int)1 )] = _4588_i1;
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 5;
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = _4585_oparg;
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4569_error_at = _4583_j;
                    }
                  }
                }
              }
              else if((_4584_opcode == 4))
              {
                {
                  if ((_4563_stackp >= (int)1))
                  {
                    {
                      int32_t _4590_i0 = _ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)];
                      -- _4563_stackp;
                      if ((_ptr__4570_xi32[safe_add( _4567_tcode,_4590_i0 )] == 2))
                      {
                        {
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = (-_ptr__4571_xf64[safe_add( _4566_tcconst,_4590_i0 )]);
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = _ptr__4550_code[safe_add( _4551_code_base,_4583_j )];
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = safe_add( _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )],(int)1 );
                          _ptr__4570_xi32[safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] )] = _4590_i0;
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4569_error_at = _4583_j;
                    }
                  }
                }
              }
              else if((_4584_opcode == 6))
              {
                {
                  if ((_4563_stackp >= (int)1))
                  {
                    {
                      int32_t _4591_i0 = _ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)];
                      -- _4563_stackp;
                      if ((_ptr__4570_xi32[safe_add( _4567_tcode,_4591_i0 )] == 2))
                      {
                        {
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                          _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = (1.0 / _ptr__4571_xf64[safe_add( _4566_tcconst,_4591_i0 )]);
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = _ptr__4550_code[safe_add( _4551_code_base,_4583_j )];
                          _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = safe_add( _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )],(int)1 );
                          _ptr__4570_xi32[safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] )] = _4591_i0;
                          _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                          ++ _4563_stackp;
                          ++ _4568_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4569_error_at = _4583_j;
                    }
                  }
                }
              }
              else if((_4584_opcode == 8))
              {
                {
                  int32_t _4592_num = (int32_t)_4585_oparg;
                  if ((_4592_num < (int)0))
                  {
                    {
                      _4569_error_at = _4583_j;
                    }
                  }
                  else if((_4592_num > _4563_stackp))
                  {
                    {
                      _4569_error_at = _4583_j;
                    }
                  }
                  else if((_4592_num == (int)0))
                  {
                    {
                      _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                      _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = 0.0;
                      _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                      _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                      ++ _4563_stackp;
                      ++ _4568_tcodep;
                    }
                  }
                  else if((_4592_num == (int)1))
                  {
                    {
                      _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = (int)0;
                      _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                      _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                      ++ _4563_stackp;
                      ++ _4568_tcodep;
                    }
                  }
                  else
                  {
                    {
                      std::vector<int32_t> _11295_;
                      for (int32_t _4594_j = (int)0, _11296_ = _4592_num; _4594_j < _11296_ ; ++_4594_j)
                      {
                        _11295_.push_back(_ptr__4570_xi32[((safe_add( _4562_stack,_4563_stackp ) - (int)1) - _4594_j)]);
                      }
                      auto _11297_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11295_.size()),_11295_.begin(),_11295_.end()));
                      std::shared_ptr< monty::ndarray< int32_t,1 > > _4593_ii = _11297_;
                      _checked_ptr_1<int32_t> _ptr__4593_ii(_4593_ii ? _4593_ii->raw() : nullptr,_4593_ii ? _4593_ii->size(0) : 0);
                      _4563_stackp -= _4592_num;
                      {
                        int32_t _4595_i1 = (_4592_num - (int)1);
                        int32_t _4596_i0 = (int)0;
                        while ( (_4596_i0 < _4595_i1) )
                        {
                          {
                            while ( ((_4596_i0 < _4595_i1) && (_ptr__4570_xi32[safe_add( _4567_tcode,_ptr__4593_ii[_4596_i0] )] == 2)) )
                            {
                              {
                                ++ _4596_i0;
                              }
                            }
                            while ( ((_4596_i0 < _4595_i1) && (_ptr__4570_xi32[safe_add( _4567_tcode,_ptr__4593_ii[_4595_i1] )] != 2)) )
                            {
                              {
                                -- _4595_i1;
                              }
                            }
                            if ((_4596_i0 < _4595_i1))
                            {
                              {
                                int32_t _4597_t = _ptr__4593_ii[_4596_i0];
                                _ptr__4593_ii[_4596_i0] = _ptr__4593_ii[_4595_i1];
                                _ptr__4593_ii[_4595_i1] = _4597_t;
                                ++ _4596_i0;
                                -- _4595_i1;
                              }
                            }
                            {}
                          }
                        }
                        double _4598_val = 0.0;
                        int32_t _4599_numconstelm = (int)0;
                        while ( ((_4599_numconstelm < _4592_num) && (_ptr__4570_xi32[safe_add( _4567_tcode,_ptr__4593_ii[_4599_numconstelm] )] == 2)) )
                        {
                          {
                            _4598_val += _ptr__4571_xf64[safe_add( _4566_tcconst,_ptr__4593_ii[_4599_numconstelm] )];
                            ++ _4599_numconstelm;
                          }
                        }
                        int32_t _11298_;
                        bool _11299_ = (_4599_numconstelm > (int)0);
                        if (_11299_)
                        {
                          _11298_ = safe_add( (_4592_num - _4599_numconstelm),(int)1 );
                        }
                        else
                        {
                          _11298_ = _4592_num;
                        }
                        int32_t _4600_numsumelm = _11298_;
                        int32_t _4601_p = (int)0;
                        if ((_4599_numconstelm < (int)2))
                        {
                          {
                            int32_t _11300_ = (int)0;
                            int32_t _11301_ = _4592_num;
                            for (int32_t _4602_j = _11300_; _4602_j < _11301_; ++_4602_j)
                            {
                              {
                                _ptr__4570_xi32[safe_add( safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] ),_4602_j )] = _ptr__4593_ii[_4602_j];
                              }
                            }
                            _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = safe_add( _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )],_4592_num );
                            _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 8;
                            _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = _4592_num;
                            _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                            ++ _4563_stackp;
                            ++ _4568_tcodep;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 2;
                            _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = _4598_val;
                            _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )];
                            ++ _4568_tcodep;
                            if ((_4599_numconstelm == _4592_num))
                            {
                              {
                                _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = (_4568_tcodep - (int)1);
                                ++ _4563_stackp;
                              }
                            }
                            else
                            {
                              {
                                _ptr__4570_xi32[safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] )] = (_4568_tcodep - (int)1);
                                int32_t _11302_ = _4599_numconstelm;
                                int32_t _11303_ = _4592_num;
                                for (int32_t _4603_j = _11302_; _4603_j < _11303_; ++_4603_j)
                                {
                                  {
                                    _ptr__4570_xi32[safe_add( (safe_add( safe_add( _4564_chld,_ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )] ),_4603_j ) - _4599_numconstelm),(int)1 )] = _ptr__4593_ii[_4603_j];
                                  }
                                }
                                _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4568_tcodep ),(int)1 )] = safe_add( _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4568_tcodep )],_4600_numsumelm );
                                _ptr__4570_xi32[safe_add( _4567_tcode,_4568_tcodep )] = 8;
                                _ptr__4571_xf64[safe_add( _4566_tcconst,_4568_tcodep )] = _4600_numsumelm;
                                _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _4568_tcodep;
                                ++ _4563_stackp;
                                ++ _4568_tcodep;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                {
                  _4569_error_at = _4583_j;
                }
              }
            }
          }
        }
      }
      {}
      if (((_4569_error_at < (int)0) && (_4563_stackp != (int)1)))
      {
        {
          _4569_error_at = _4568_tcodep;
        }
      }
      {}
      if ((_4569_error_at < (int)0))
      {
        {
          int32_t _4604_p0 = _4578_codei;
          int32_t _4605_p = _4604_p0;
          if ((_ptr__4570_xi32[safe_add( _4567_tcode,_ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)] )] == 2))
          {
            {
              _ptr__4554_fixterm[safe_add( _4555_fixterm_base,_4579_i )] += _ptr__4571_xf64[safe_add( _4566_tcconst,_ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)] )];
              _ptr__4572_target_code[safe_add( _4558_target_code_base,_4605_p )] = 10;
              _ptr__4573_target_const[safe_add( _4559_target_const_base,_4605_p )] = 0.0;
              ++ _4605_p;
            }
          }
          else
          {
            {
              if (((_ptr__4554_fixterm[safe_add( _4555_fixterm_base,_4579_i )] < (int)0) || ((int)0 < _ptr__4554_fixterm[safe_add( _4555_fixterm_base,_4579_i )])))
              {
                {
                  _ptr__4572_target_code[safe_add( _4558_target_code_base,_4605_p )] = 3;
                  ++ _4605_p;
                  _ptr__4572_target_code[safe_add( _4558_target_code_base,_4605_p )] = 2;
                  _ptr__4573_target_const[safe_add( _4559_target_const_base,_4605_p )] = _ptr__4554_fixterm[safe_add( _4555_fixterm_base,_4579_i )];
                  ++ _4605_p;
                  _ptr__4554_fixterm[safe_add( _4555_fixterm_base,_4579_i )] = (int)0;
                }
              }
              {}
              while ( (_4563_stackp > (int)0) )
              {
                {
                  int32_t _4606_k = _ptr__4570_xi32[(safe_add( _4562_stack,_4563_stackp ) - (int)1)];
                  -- _4563_stackp;
                  int32_t _4607_op = _ptr__4570_xi32[safe_add( _4567_tcode,_4606_k )];
                  double _4608_arg = _ptr__4571_xf64[safe_add( _4566_tcconst,_4606_k )];
                  _ptr__4572_target_code[safe_add( _4558_target_code_base,_4605_p )] = _4607_op;
                  _ptr__4573_target_const[safe_add( _4559_target_const_base,_4605_p )] = _4608_arg;
                  ++ _4605_p;
                  int32_t _11304_ = _ptr__4570_xi32[safe_add( _4565_chld_ptr,_4606_k )];
                  int32_t _11305_ = _ptr__4570_xi32[safe_add( safe_add( _4565_chld_ptr,_4606_k ),(int)1 )];
                  for (int32_t _4609_l = _11304_; _4609_l < _11305_; ++_4609_l)
                  {
                    {
                      _ptr__4570_xi32[safe_add( _4562_stack,_4563_stackp )] = _ptr__4570_xi32[safe_add( _4564_chld,_4609_l )];
                      ++ _4563_stackp;
                    }
                  }
                }
              }
              int32_t _4610_p1 = _4605_p;
              -- _4610_p1;
              while ( (_4604_p0 < _4610_p1) )
              {
                {
                  int32_t _4611_ta = _ptr__4572_target_code[safe_add( _4558_target_code_base,_4604_p0 )];
                  double _4612_v = _ptr__4573_target_const[safe_add( _4559_target_const_base,_4604_p0 )];
                  _ptr__4572_target_code[safe_add( _4558_target_code_base,_4604_p0 )] = _ptr__4572_target_code[safe_add( _4558_target_code_base,_4610_p1 )];
                  _ptr__4573_target_const[safe_add( _4559_target_const_base,_4604_p0 )] = _ptr__4573_target_const[safe_add( _4559_target_const_base,_4610_p1 )];
                  _ptr__4572_target_code[safe_add( _4558_target_code_base,_4610_p1 )] = _4611_ta;
                  _ptr__4573_target_const[safe_add( _4559_target_const_base,_4610_p1 )] = _4612_v;
                  ++ _4604_p0;
                  -- _4610_p1;
                }
              }
            }
          }
          _ptr__4574_target_ptr[safe_add( safe_add( _4560_target_ptr_base,_4579_i ),(int)1 )] = _4605_p;
          _4578_codei = _4605_p;
        }
      }
      {}
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_4548_xs)->pi32 = _4575_xpi32;
  mosek::fusion::p_WorkStack::_get_impl(_4548_xs)->pi64 = _4576_xpi64;
  mosek::fusion::p_WorkStack::_get_impl(_4548_xs)->pf64 = _4577_xpf64;
  if ((_4569_error_at >= (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid parameterization code list"));
    }
  }
  {}
}
// End mosek.fusion.ExprOptimizeCode.compress_code

// Begin mosek.fusion.ExprOptimizeCode.eval
// Method mosek.fusion.ExprOptimizeCode.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:467:6-701:7
void mosek::fusion::ExprOptimizeCode :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4613_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4614_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4615_xs) { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->eval(_4613_rs,_4614_ws,_4615_xs); }
void mosek::fusion::p_ExprOptimizeCode::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4613_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4614_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4615_xs)
{
  expr->eval(_4614_ws,_4613_rs,_4615_xs);
  _4614_ws->peek_expr();
  _4614_ws->pop_expr();
  int32_t _4616_nd = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->nd;
  int32_t _4617_shape = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->shape_base;
  int32_t _4618_nelem = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->nelem;
  int32_t _4619_nnz = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->nnz;
  bool _4620_hassp = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->hassp;
  int32_t _4621_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->ncodeatom;
  int32_t _4622_ptr = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->ptr_base;
  int32_t _4623_sp = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->sp_base;
  int32_t _4624_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->nidxs_base;
  int32_t _4625_cof = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->cof_base;
  int32_t _4626_code = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->code_base;
  int32_t _4627_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->codeptr_base;
  int32_t _4628_cconst = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4629_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4629_wi32(_4629_wi32 ? _4629_wi32->raw() : nullptr,_4629_wi32 ? _4629_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4630_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4630_wi64(_4630_wi64 ? _4630_wi64->raw() : nullptr,_4630_wi64 ? _4630_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4631_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4614_ws)->f64;
  _checked_ptr_1<double> _ptr__4631_wf64(_4631_wf64 ? _4631_wf64->raw() : nullptr,_4631_wf64 ? _4631_wf64->size(0) : 0);
  if ((_4621_ncodeatom == (int)0))
  {
    {
      _4613_rs->alloc_expr(_4616_nd,_4618_nelem,_4619_nnz,_4620_hassp,(int)0);
      int32_t _4632_rptr = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->ptr_base;
      int32_t _4633_rsp = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->sp_base;
      int32_t _4634_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->nidxs_base;
      int32_t _4635_rcof = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->cof_base;
      int32_t _4636_rshape = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->shape_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4637_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4637_ri32(_4637_ri32 ? _4637_ri32->raw() : nullptr,_4637_ri32 ? _4637_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4638_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4638_ri64(_4638_ri64 ? _4638_ri64->raw() : nullptr,_4638_ri64 ? _4638_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4639_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->f64;
      _checked_ptr_1<double> _ptr__4639_rf64(_4639_rf64 ? _4639_rf64->raw() : nullptr,_4639_rf64 ? _4639_rf64->size(0) : 0);
      int32_t _11306_ = (int)0;
      int32_t _11307_ = safe_add( _4618_nelem,(int)1 );
      for (int32_t _4640_i = _11306_; _4640_i < _11307_; ++_4640_i)
      {
        {
          _ptr__4637_ri32[safe_add( _4632_rptr,_4640_i )] = _ptr__4629_wi32[safe_add( _4622_ptr,_4640_i )];
        }
      }
      int32_t _11308_ = (int)0;
      int32_t _11309_ = _4616_nd;
      for (int32_t _4641_i = _11308_; _4641_i < _11309_; ++_4641_i)
      {
        {
          _ptr__4637_ri32[safe_add( _4636_rshape,_4641_i )] = _ptr__4629_wi32[safe_add( _4617_shape,_4641_i )];
        }
      }
      int32_t _11310_ = (int)0;
      int32_t _11311_ = _4619_nnz;
      for (int32_t _4642_i = _11310_; _4642_i < _11311_; ++_4642_i)
      {
        {
          _ptr__4638_ri64[safe_add( _4634_rnidxs,_4642_i )] = _ptr__4630_wi64[safe_add( _4624_nidxs,_4642_i )];
        }
      }
      int32_t _11312_ = (int)0;
      int32_t _11313_ = _4619_nnz;
      for (int32_t _4643_i = _11312_; _4643_i < _11313_; ++_4643_i)
      {
        {
          _ptr__4639_rf64[safe_add( _4635_rcof,_4643_i )] = _ptr__4631_wf64[safe_add( _4625_cof,_4643_i )];
        }
      }
      if (_4620_hassp)
      {
        {
          int32_t _11314_ = (int)0;
          int32_t _11315_ = _4618_nelem;
          for (int32_t _4644_i = _11314_; _4644_i < _11315_; ++_4644_i)
          {
            {
              _ptr__4638_ri64[safe_add( _4633_rsp,_4644_i )] = _ptr__4630_wi64[safe_add( _4623_sp,_4644_i )];
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4645_xcode = _4615_xs->alloci32(safe_add( _4621_ncodeatom,safe_mul( _4619_nnz,(int)2 ) ));
      int32_t _4646_xcodeptr = _4615_xs->alloci32(safe_add( _4619_nnz,(int)1 ));
      int32_t _4647_xcconst = _4615_xs->allocf64(safe_add( _4621_ncodeatom,safe_mul( _4619_nnz,(int)2 ) ));
      ::mosek::fusion::p_ExprOptimizeCode::compress_code(_4615_xs,_4619_nnz,_4629_wi32,_4626_code,_4629_wi32,_4627_codeptr,_4631_wf64,_4625_cof,_4631_wf64,_4628_cconst,_4645_xcode,_4647_xcconst,_4646_xcodeptr);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4648_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4615_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4648_xi32(_4648_xi32 ? _4648_xi32->raw() : nullptr,_4648_xi32 ? _4648_xi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4649_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4615_xs)->f64;
      _checked_ptr_1<double> _ptr__4649_xf64(_4649_xf64 ? _4649_xf64->raw() : nullptr,_4649_xf64 ? _4649_xf64->size(0) : 0);
      int32_t _4650_rncodeatom = (int)0;
      int32_t _4651_rnnz = (int)0;
      int32_t _4652_rnelem = (int)0;
      int32_t _11316_ = (int)0;
      int32_t _11317_ = _4618_nelem;
      for (int32_t _4653_i = _11316_; _4653_i < _11317_; ++_4653_i)
      {
        {
          int32_t _4654_elmnz = (int)0;
          int32_t _11318_ = _ptr__4629_wi32[safe_add( _4622_ptr,_4653_i )];
          int32_t _11319_ = _ptr__4629_wi32[safe_add( safe_add( _4622_ptr,_4653_i ),(int)1 )];
          for (int32_t _4655_j = _11318_; _4655_j < _11319_; ++_4655_j)
          {
            {
              if (((_ptr__4631_wf64[safe_add( _4625_cof,_4655_j )] < (int)0) || ((int)0 < _ptr__4631_wf64[safe_add( _4625_cof,_4655_j )])))
              {
                {
                  ++ _4651_rnnz;
                  ++ _4654_elmnz;
                  ++ _4650_rncodeatom;
                }
              }
              else
              {
                {
                  if (((_ptr__4648_xi32[safe_add( safe_add( _4646_xcodeptr,_4655_j ),(int)1 )] - _ptr__4648_xi32[safe_add( _4646_xcodeptr,_4655_j )]) > (int)1))
                  {
                    {
                      ++ _4651_rnnz;
                      ++ _4654_elmnz;
                      _4650_rncodeatom += (_ptr__4648_xi32[safe_add( safe_add( _4646_xcodeptr,_4655_j ),(int)1 )] - _ptr__4648_xi32[safe_add( _4646_xcodeptr,_4655_j )]);
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__4648_xi32[safe_add( _4645_xcode,_ptr__4648_xi32[safe_add( _4646_xcodeptr,_4655_j )] )] != 10))
                      {
                        {
                          ++ _4651_rnnz;
                          ++ _4654_elmnz;
                          ++ _4650_rncodeatom;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          if ((_4654_elmnz > (int)0))
          {
            {
              ++ _4652_rnelem;
            }
          }
          {}
        }
      }
      bool _4656_rhassp = false;
      {
        int64_t _4657_sz = (int64_t)1;
        int32_t _11320_ = (int)0;
        int32_t _11321_ = _4616_nd;
        for (int32_t _4658_i = _11320_; _4658_i < _11321_; ++_4658_i)
        {
          {
            _4657_sz *= _ptr__4629_wi32[safe_add( _4617_shape,_4658_i )];
          }
        }
        _4656_rhassp = (_4657_sz > _4652_rnelem);
      }
      _4613_rs->alloc_expr(_4616_nd,_4652_rnelem,_4651_rnnz,_4656_rhassp,_4650_rncodeatom);
      int32_t _4659_rptr = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->ptr_base;
      int32_t _4660_rsp = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->sp_base;
      int32_t _4661_rshape = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->shape_base;
      int32_t _4662_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->nidxs_base;
      int32_t _4663_rcof = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->cof_base;
      int32_t _4664_rcode = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->code_base;
      int32_t _4665_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->codeptr_base;
      int32_t _4666_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4667_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4667_ri32(_4667_ri32 ? _4667_ri32->raw() : nullptr,_4667_ri32 ? _4667_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4668_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4668_ri64(_4668_ri64 ? _4668_ri64->raw() : nullptr,_4668_ri64 ? _4668_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4669_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4613_rs)->f64;
      _checked_ptr_1<double> _ptr__4669_rf64(_4669_rf64 ? _4669_rf64->raw() : nullptr,_4669_rf64 ? _4669_rf64->size(0) : 0);
      int32_t _11322_ = (int)0;
      int32_t _11323_ = _4616_nd;
      for (int32_t _4670_i = _11322_; _4670_i < _11323_; ++_4670_i)
      {
        {
          _ptr__4667_ri32[safe_add( _4661_rshape,_4670_i )] = _ptr__4629_wi32[safe_add( _4617_shape,_4670_i )];
        }
      }
      if ((_4621_ncodeatom == (int)0))
      {
        {
          int32_t _11324_ = (int)0;
          int32_t _11325_ = _4619_nnz;
          for (int32_t _4671_i = _11324_; _4671_i < _11325_; ++_4671_i)
          {
            {
              _ptr__4668_ri64[safe_add( _4662_rnidxs,_4671_i )] = _ptr__4630_wi64[safe_add( _4624_nidxs,_4671_i )];
            }
          }
          int32_t _11326_ = (int)0;
          int32_t _11327_ = _4619_nnz;
          for (int32_t _4672_i = _11326_; _4672_i < _11327_; ++_4672_i)
          {
            {
              _ptr__4669_rf64[safe_add( _4663_rcof,_4672_i )] = _ptr__4631_wf64[safe_add( _4625_cof,_4672_i )];
            }
          }
          int32_t _11328_ = (int)0;
          int32_t _11329_ = safe_add( _4618_nelem,(int)1 );
          for (int32_t _4673_i = _11328_; _4673_i < _11329_; ++_4673_i)
          {
            {
              _ptr__4667_ri32[safe_add( _4659_rptr,_4673_i )] = _ptr__4667_ri32[safe_add( _4622_ptr,_4673_i )];
            }
          }
          if (_4620_hassp)
          {
            {
              int32_t _11330_ = (int)0;
              int32_t _11331_ = _4618_nelem;
              for (int32_t _4674_i = _11330_; _4674_i < _11331_; ++_4674_i)
              {
                {
                  _ptr__4668_ri64[safe_add( _4660_rsp,_4674_i )] = _ptr__4668_ri64[safe_add( _4623_sp,_4674_i )];
                }
              }
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _4675_codei = (int)0;
          int32_t _4676_elmi = (int)0;
          int32_t _4677_nzi = (int)0;
          _ptr__4667_ri32[_4659_rptr] = (int)0;
          if ((_4650_rncodeatom > (int)0))
          {
            {
              _ptr__4667_ri32[_4665_rcodeptr] = (int)0;
            }
          }
          {}
          int32_t _11332_ = (int)0;
          int32_t _11333_ = _4618_nelem;
          for (int32_t _4678_i = _11332_; _4678_i < _11333_; ++_4678_i)
          {
            {
              int32_t _4679_elmnz = (int)0;
              int32_t _11334_ = _ptr__4629_wi32[safe_add( _4622_ptr,_4678_i )];
              int32_t _11335_ = _ptr__4629_wi32[safe_add( safe_add( _4622_ptr,_4678_i ),(int)1 )];
              for (int32_t _4680_j = _11334_; _4680_j < _11335_; ++_4680_j)
              {
                {
                  if (((_ptr__4631_wf64[safe_add( _4625_cof,_4680_j )] < (int)0) || ((int)0 < _ptr__4631_wf64[safe_add( _4625_cof,_4680_j )])))
                  {
                    {
                      _ptr__4668_ri64[safe_add( _4662_rnidxs,_4677_nzi )] = _ptr__4630_wi64[safe_add( _4624_nidxs,_4680_j )];
                      _ptr__4669_rf64[safe_add( _4663_rcof,_4677_nzi )] = _ptr__4631_wf64[safe_add( _4625_cof,_4680_j )];
                      _ptr__4667_ri32[safe_add( _4664_rcode,_4675_codei )] = _ptr__4648_xi32[safe_add( _4645_xcode,_ptr__4648_xi32[safe_add( _4646_xcodeptr,_4680_j )] )];
                      _ptr__4669_rf64[safe_add( _4666_rcconst,_4675_codei )] = _ptr__4649_xf64[safe_add( _4647_xcconst,_ptr__4648_xi32[safe_add( _4646_xcodeptr,_4680_j )] )];
                      ++ _4675_codei;
                      _ptr__4667_ri32[safe_add( safe_add( _4665_rcodeptr,_4677_nzi ),(int)1 )] = _4675_codei;
                      ++ _4677_nzi;
                      ++ _4679_elmnz;
                    }
                  }
                  else
                  {
                    {
                      if ((((_ptr__4648_xi32[safe_add( safe_add( _4646_xcodeptr,_4680_j ),(int)1 )] - _ptr__4648_xi32[safe_add( _4646_xcodeptr,_4680_j )]) > (int)1) || (_ptr__4648_xi32[safe_add( _4645_xcode,_ptr__4648_xi32[safe_add( _4646_xcodeptr,_4680_j )] )] != 10)))
                      {
                        {
                          _ptr__4668_ri64[safe_add( _4662_rnidxs,_4677_nzi )] = _ptr__4630_wi64[safe_add( _4624_nidxs,_4680_j )];
                          _ptr__4669_rf64[safe_add( _4663_rcof,_4677_nzi )] = 0.0;
                          int32_t _11336_ = _ptr__4648_xi32[safe_add( _4646_xcodeptr,_4680_j )];
                          int32_t _11337_ = _ptr__4648_xi32[safe_add( safe_add( _4646_xcodeptr,_4680_j ),(int)1 )];
                          for (int32_t _4681_k = _11336_; _4681_k < _11337_; ++_4681_k)
                          {
                            {
                              _ptr__4667_ri32[safe_add( _4664_rcode,_4675_codei )] = _ptr__4648_xi32[safe_add( _4645_xcode,_4681_k )];
                              _ptr__4669_rf64[safe_add( _4666_rcconst,_4675_codei )] = _ptr__4649_xf64[safe_add( _4647_xcconst,_4681_k )];
                              ++ _4675_codei;
                            }
                          }
                          _ptr__4667_ri32[safe_add( safe_add( _4665_rcodeptr,_4677_nzi ),(int)1 )] = _4675_codei;
                          ++ _4677_nzi;
                          ++ _4679_elmnz;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              if ((_4679_elmnz > (int)0))
              {
                {
                  _ptr__4667_ri32[safe_add( safe_add( _4659_rptr,_4676_elmi ),(int)1 )] = _4677_nzi;
                  if (_4656_rhassp)
                  {
                    {
                      if (_4620_hassp)
                      {
                        {
                          _ptr__4668_ri64[safe_add( _4660_rsp,_4676_elmi )] = _ptr__4630_wi64[safe_add( _4623_sp,_4678_i )];
                        }
                      }
                      else
                      {
                        {
                          _ptr__4668_ri64[safe_add( _4660_rsp,_4676_elmi )] = _4678_i;
                        }
                      }
                    }
                  }
                  {}
                  ++ _4676_elmi;
                }
              }
              {}
            }
          }
          if ((_4676_elmi != _4652_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nelem"));
            }
          }
          {}
          if ((_4677_nzi != _4651_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nnz"));
            }
          }
          {}
          if ((_4675_codei != _4650_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result num code atoms"));
            }
          }
          {}
          if ((_4650_rncodeatom > (int)0))
          {
            {
              if ((_ptr__4667_ri32[safe_add( _4665_rcodeptr,_4651_rnnz )] != _4650_rncodeatom))
              {
                {
                  throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
}
// End mosek.fusion.ExprOptimizeCode.eval

// Begin mosek.fusion.ExprOptimizeCode.toString
// Method mosek.fusion.ExprOptimizeCode.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:463:6-465:7
std::string mosek::fusion::ExprOptimizeCode :: toString() { return mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprOptimizeCode::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprOptimizeCode("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprOptimizeCode.toString

void mosek::fusion::p_ExprOptimizeCode::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprOptimizeCode::destroy() { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->destroy(); }
// } class ExprOptimizeCode
// class ExprCompress { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:11:4-445:5
mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }
mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprCompress::p_ExprCompress
  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprCompress.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:16:6-19:7
mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress
  (monty::rc_ptr< ::mosek::fusion::Expression > _4682_expr)
{ return new mosek::fusion::ExprCompress(_4682_expr); }
mosek::fusion::ExprCompress::ExprCompress
  (monty::rc_ptr< ::mosek::fusion::Expression > _4682_expr) : 
   ExprCompress(new mosek::fusion::p_ExprCompress(this))
{ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4682_expr); }
void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4682_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4682_expr->__mosek_2fusion_2Expression__getModel(),_4682_expr->getShape());
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4682_expr;
  }
}
// mosek.fusion.ExprCompress.ctor

// Begin mosek.fusion.ExprCompress.arg_sort
// Method mosek.fusion.ExprCompress.arg_sort @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:312:6-444:7
void mosek::fusion::ExprCompress::arg_sort
  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4683_ws,
    monty::rc_ptr< ::mosek::fusion::WorkStack > _4684_xs,
    int32_t _4685_perm,
    int32_t _4686_nelem,
    int32_t _4687_nnz,
    int32_t _4688_ptr,
    int32_t _4689_nidxs) { mosek::fusion::p_ExprCompress::arg_sort(_4683_ws,_4684_xs,_4685_perm,_4686_nelem,_4687_nnz,_4688_ptr,_4689_nidxs); }
void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4683_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4684_xs,int32_t _4685_perm,int32_t _4686_nelem,int32_t _4687_nnz,int32_t _4688_ptr,int32_t _4689_nidxs)
{
  int32_t _4690_maxrow = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4691_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4683_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4691_wi32(_4691_wi32 ? _4691_wi32->raw() : nullptr,_4691_wi32 ? _4691_wi32->size(0) : 0);
  int32_t _11338_ = (int)0;
  int32_t _11339_ = _4686_nelem;
  for (int32_t _4692_i = _11338_; _4692_i < _11339_; ++_4692_i)
  {
    {
      if (((_ptr__4691_wi32[safe_add( safe_add( _4688_ptr,_4692_i ),(int)1 )] - _ptr__4691_wi32[safe_add( _4688_ptr,_4692_i )]) > _4690_maxrow))
      {
        {
          _4690_maxrow = (_ptr__4691_wi32[safe_add( safe_add( _4688_ptr,_4692_i ),(int)1 )] - _ptr__4691_wi32[safe_add( _4688_ptr,_4692_i )]);
        }
      }
      {}
    }
  }
  int32_t _11340_;
  bool _11341_ = (_4690_maxrow > (int)2);
  if (_11341_)
  {
    _11340_ = _4684_xs->alloci32(safe_mul( _4690_maxrow,(int)2 ));
  }
  else
  {
    _11340_ = (int)99999;
  }
  int32_t _4693_workspace = _11340_;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4694_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4684_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4694_xi32(_4694_xi32 ? _4694_xi32->raw() : nullptr,_4694_xi32 ? _4694_xi32->size(0) : 0);
  _4691_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4683_ws)->i32;
  _ptr__4691_wi32.update(_4691_wi32 ? _4691_wi32->raw() : nullptr, _4691_wi32 ? _4691_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4695_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4683_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4695_wi64(_4695_wi64 ? _4695_wi64->raw() : nullptr,_4695_wi64 ? _4695_wi64->size(0) : 0);
  int32_t _11342_ = (int)0;
  int32_t _11343_ = _4686_nelem;
  for (int32_t _4696_i = _11342_; _4696_i < _11343_; ++_4696_i)
  {
    {
      int32_t _4697_p0 = _ptr__4691_wi32[safe_add( _4688_ptr,_4696_i )];
      int32_t _4698_p1 = _ptr__4691_wi32[safe_add( safe_add( _4688_ptr,_4696_i ),(int)1 )];
      int32_t _4699_n = (_4698_p1 - _4697_p0);
      if ((_4699_n == (int)0))
      {
        {
        }
      }
      else if((_4699_n == (int)1))
      {
        {
          _ptr__4694_xi32[safe_add( _4685_perm,_4697_p0 )] = _4697_p0;
        }
      }
      else if((_4699_n == (int)2))
      {
        {
          if ((_ptr__4695_wi64[safe_add( _4689_nidxs,_4697_p0 )] <= _ptr__4695_wi64[safe_add( safe_add( _4689_nidxs,_4697_p0 ),(int)1 )]))
          {
            {
              _ptr__4694_xi32[safe_add( _4685_perm,_4697_p0 )] = _4697_p0;
              _ptr__4694_xi32[safe_add( safe_add( _4685_perm,_4697_p0 ),(int)1 )] = safe_add( _4697_p0,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4694_xi32[safe_add( _4685_perm,_4697_p0 )] = safe_add( _4697_p0,(int)1 );
              _ptr__4694_xi32[safe_add( safe_add( _4685_perm,_4697_p0 ),(int)1 )] = _4697_p0;
            }
          }
        }
      }
      else
      {
        {
          int64_t _4700_vmin = _ptr__4695_wi64[safe_add( _4689_nidxs,_4697_p0 )];
          int64_t _4701_vmax = _ptr__4695_wi64[safe_add( _4689_nidxs,_4697_p0 )];
          bool _4702_sorted = false;
          int32_t _11344_ = safe_add( _4697_p0,(int)1 );
          int32_t _11345_ = _4698_p1;
          for (int32_t _4703_i = _11344_; _4703_i < _11345_; ++_4703_i)
          {
            {
              _4702_sorted = (_4702_sorted && (_ptr__4695_wi64[(safe_add( _4689_nidxs,_4703_i ) - (int)1)] <= _ptr__4695_wi64[safe_add( _4689_nidxs,_4703_i )]));
              if ((_4700_vmin > _ptr__4695_wi64[safe_add( _4689_nidxs,_4703_i )]))
              {
                {
                  _4700_vmin = _ptr__4695_wi64[safe_add( _4689_nidxs,_4703_i )];
                }
              }
              {}
              if ((_4701_vmax < _ptr__4695_wi64[safe_add( _4689_nidxs,_4703_i )]))
              {
                {
                  _4701_vmax = _ptr__4695_wi64[safe_add( _4689_nidxs,_4703_i )];
                }
              }
              {}
            }
          }
          if (_4702_sorted)
          {
            {
              int32_t _11346_ = _4697_p0;
              int32_t _11347_ = _4698_p1;
              for (int32_t _4704_i = _11346_; _4704_i < _11347_; ++_4704_i)
              {
                {
                  _ptr__4694_xi32[safe_add( _4685_perm,_4704_i )] = _4704_i;
                }
              }
            }
          }
          else if((safe_add( (_4701_vmax - _4700_vmin),(int)1 ) <= _4699_n))
          {
            {
              int64_t _4705_m = safe_add( (_4701_vmax - _4700_vmin),(int)1 );
              int32_t _11348_ = (int)0;
              int64_t _11349_ = safe_add( _4705_m,(int)1 );
              for (int64_t _4706_j = _11348_; _4706_j < _11349_; ++_4706_j)
              {
                {
                  _ptr__4694_xi32[safe_add( _4693_workspace,_4706_j )] = (int)0;
                }
              }
              int32_t _11350_ = _4697_p0;
              int32_t _11351_ = _4698_p1;
              for (int32_t _4707_j = _11350_; _4707_j < _11351_; ++_4707_j)
              {
                {
                  ++ _ptr__4694_xi32[safe_add( (safe_add( _4693_workspace,_ptr__4695_wi64[safe_add( _4689_nidxs,_4707_j )] ) - _4700_vmin),(int)1 )];
                }
              }
              int32_t _11352_ = (int)0;
              int64_t _11353_ = _4705_m;
              for (int64_t _4708_j = _11352_; _4708_j < _11353_; ++_4708_j)
              {
                {
                  _ptr__4694_xi32[safe_add( safe_add( _4693_workspace,_4708_j ),(int)1 )] += _ptr__4694_xi32[safe_add( _4693_workspace,_4708_j )];
                }
              }
              int32_t _11354_ = _4697_p0;
              int32_t _11355_ = _4698_p1;
              for (int32_t _4709_j = _11354_; _4709_j < _11355_; ++_4709_j)
              {
                {
                  _ptr__4694_xi32[safe_add( safe_add( _4685_perm,_4697_p0 ),_ptr__4694_xi32[(safe_add( _4693_workspace,_ptr__4695_wi64[safe_add( _4689_nidxs,_4709_j )] ) - _4700_vmin)] )] = _4709_j;
                  ++ _ptr__4694_xi32[(safe_add( _4693_workspace,_ptr__4695_wi64[safe_add( _4689_nidxs,_4709_j )] ) - _4700_vmin)];
                }
              }
            }
          }
          else
          {
            {
              int32_t _4710_blocksize = (int)1;
              int32_t _4711_perm1 = _4693_workspace;
              int32_t _4712_perm2 = safe_add( _4693_workspace,_4699_n );
              int32_t _11356_ = (int)0;
              int32_t _11357_ = _4699_n;
              for (int32_t _4713_j = _11356_; _4713_j < _11357_; ++_4713_j)
              {
                {
                  _ptr__4694_xi32[safe_add( _4711_perm1,_4713_j )] = _4713_j;
                }
              }
              while ( (_4710_blocksize < _4699_n) )
              {
                {
                  int32_t _4714_mergesize = safe_mul( _4710_blocksize,(int)2 );
                  int32_t _4715_nummerges = (_4699_n / _4714_mergesize);
                  if ((safe_add( safe_mul( _4715_nummerges,_4714_mergesize ),_4710_blocksize ) < _4699_n))
                  {
                    {
                      ++ _4715_nummerges;
                    }
                  }
                  {}
                  int32_t _4716_k = (int)0;
                  int32_t _11358_ = (int)0;
                  int32_t _11359_ = _4715_nummerges;
                  for (int32_t _4717_j = _11358_; _4717_j < _11359_; ++_4717_j)
                  {
                    {
                      int32_t _4718_a0 = safe_mul( _4717_j,_4714_mergesize );
                      int32_t _4719_a1 = safe_add( _4718_a0,_4710_blocksize );
                      int32_t _4720_b0 = _4719_a1;
                      int32_t _4721_b1 = safe_add( _4720_b0,_4710_blocksize );
                      if ((_4721_b1 > _4699_n))
                      {
                        {
                          _4721_b1 = _4699_n;
                        }
                      }
                      {}
                      while ( ((_4718_a0 < _4719_a1) && (_4720_b0 < _4721_b1)) )
                      {
                        {
                          if ((_ptr__4695_wi64[safe_add( safe_add( _4689_nidxs,_ptr__4694_xi32[safe_add( _4711_perm1,_4718_a0 )] ),_4697_p0 )] <= _ptr__4695_wi64[safe_add( safe_add( _4689_nidxs,_ptr__4694_xi32[safe_add( _4711_perm1,_4720_b0 )] ),_4697_p0 )]))
                          {
                            {
                              _ptr__4694_xi32[safe_add( _4712_perm2,_4716_k )] = _ptr__4694_xi32[safe_add( _4711_perm1,_4718_a0 )];
                              ++ _4716_k;
                              ++ _4718_a0;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4694_xi32[safe_add( _4712_perm2,_4716_k )] = _ptr__4694_xi32[safe_add( _4711_perm1,_4720_b0 )];
                              ++ _4716_k;
                              ++ _4720_b0;
                            }
                          }
                        }
                      }
                      while ( (_4718_a0 < _4719_a1) )
                      {
                        {
                          _ptr__4694_xi32[safe_add( _4712_perm2,_4716_k )] = _ptr__4694_xi32[safe_add( _4711_perm1,_4718_a0 )];
                          ++ _4716_k;
                          ++ _4718_a0;
                        }
                      }
                      while ( (_4720_b0 < _4721_b1) )
                      {
                        {
                          _ptr__4694_xi32[safe_add( _4712_perm2,_4716_k )] = _ptr__4694_xi32[safe_add( _4711_perm1,_4720_b0 )];
                          ++ _4716_k;
                          ++ _4720_b0;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4715_nummerges,_4714_mergesize ) < _4699_n))
                  {
                    {
                      int32_t _4722_b = safe_mul( _4715_nummerges,_4714_mergesize );
                      while ( (_4722_b < _4699_n) )
                      {
                        {
                          _ptr__4694_xi32[safe_add( _4712_perm2,_4716_k )] = _ptr__4694_xi32[safe_add( _4711_perm1,_4722_b )];
                          ++ _4722_b;
                          ++ _4716_k;
                        }
                      }
                    }
                  }
                  {}
                  int32_t _4723_tmp = _4711_perm1;
                  _4711_perm1 = _4712_perm2;
                  _4712_perm2 = _4723_tmp;
                  _4710_blocksize *= (int)2;
                }
              }
              int32_t _11360_ = (int)0;
              int32_t _11361_ = _4699_n;
              for (int32_t _4724_i = _11360_; _4724_i < _11361_; ++_4724_i)
              {
                {
                  _ptr__4694_xi32[safe_add( safe_add( _4685_perm,_4697_p0 ),_4724_i )] = safe_add( _ptr__4694_xi32[safe_add( _4711_perm1,_4724_i )],_4697_p0 );
                }
              }
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprCompress.arg_sort

// Begin mosek.fusion.ExprCompress.merge_sort
// Method mosek.fusion.ExprCompress.merge_sort @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:251:6-310:7
void mosek::fusion::ExprCompress::merge_sort
  ( int32_t _4725_origperm1,
    int32_t _4726_origperm2,
    int32_t _4727_nelem,
    int32_t _4728_nnz,
    int32_t _4729_ptr_base,
    int32_t _4730_nidxs_base,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4731_wi32,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4732_wi64) { mosek::fusion::p_ExprCompress::merge_sort(_4725_origperm1,_4726_origperm2,_4727_nelem,_4728_nnz,_4729_ptr_base,_4730_nidxs_base,_4731_wi32,_4732_wi64); }
void mosek::fusion::p_ExprCompress::merge_sort(int32_t _4725_origperm1,int32_t _4726_origperm2,int32_t _4727_nelem,int32_t _4728_nnz,int32_t _4729_ptr_base,int32_t _4730_nidxs_base,std::shared_ptr< monty::ndarray< int32_t,1 > > _4731_wi32,std::shared_ptr< monty::ndarray< int64_t,1 > > _4732_wi64)
{
  _checked_ptr_1<int32_t> _ptr__4731_wi32(_4731_wi32 ? _4731_wi32->raw() : nullptr, _4731_wi32 ? _4731_wi32->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__4732_wi64(_4732_wi64 ? _4732_wi64->raw() : nullptr, _4732_wi64 ? _4732_wi64->size(0) : 0);
  int32_t _4733_perm1 = _4725_origperm1;
  int32_t _4734_perm2 = _4726_origperm2;
  int32_t _11362_ = (int)0;
  int32_t _11363_ = _4728_nnz;
  for (int32_t _4735_j = _11362_; _4735_j < _11363_; ++_4735_j)
  {
    {
      _ptr__4731_wi32[safe_add( _4733_perm1,_4735_j )] = _4735_j;
    }
  }
  int32_t _11364_ = (int)0;
  int32_t _11365_ = _4727_nelem;
  for (int32_t _4736_i = _11364_; _4736_i < _11365_; ++_4736_i)
  {
    {
      _4733_perm1 = _4725_origperm1;
      _4734_perm2 = _4726_origperm2;
      int32_t _4737_p1 = _ptr__4731_wi32[safe_add( safe_add( _4729_ptr_base,_4736_i ),(int)1 )];
      int32_t _4738_p0 = _ptr__4731_wi32[safe_add( _4729_ptr_base,_4736_i )];
      if ((safe_add( _4738_p0,(int)1 ) < _4737_p1))
      {
        {
          int32_t _4739_n = (_4737_p1 - _4738_p0);
          int32_t _4740_lg2n = (int)0;
          while ( (_4739_n > (int)1) )
          {
            {
              ++ _4740_lg2n;
              _4739_n /= (int)2;
            }
          }
          _4739_n = (_4737_p1 - _4738_p0);
          int32_t _4741_blocksz = (int)1;
          int32_t _11366_ = (int)0;
          int32_t _11367_ = safe_add( _4740_lg2n,(int)1 );
          for (int32_t _4742_k = _11366_; _4742_k < _11367_; ++_4742_k)
          {
            {
              int32_t _4743_numblocks = ((safe_add( _4739_n,_4741_blocksz ) - (int)1) / _4741_blocksz);
              int32_t _4744_nmerge = (_4743_numblocks / (int)2);
              int32_t _4745_kk = _4738_p0;
              int32_t _11368_ = (int)0;
              int32_t _11369_ = _4744_nmerge;
              for (int32_t _4746_ii_ = _11368_; _4746_ii_ < _11369_; ++_4746_ii_)
              {
                {
                  int32_t _4747_ii = safe_mul( safe_mul( _4746_ii_,_4741_blocksz ),(int)2 );
                  int32_t _11370_;
                  bool _11371_ = (safe_add( safe_add( _4738_p0,_4747_ii ),safe_mul( (int)2,_4741_blocksz ) ) < _4737_p1);
                  if (_11371_)
                  {
                    _11370_ = safe_add( safe_add( _4738_p0,_4747_ii ),safe_mul( (int)2,_4741_blocksz ) );
                  }
                  else
                  {
                    _11370_ = _4737_p1;
                  }
                  int32_t _4748_jj1e = _11370_;
                  int32_t _4749_jj1 = safe_add( safe_add( _4738_p0,_4747_ii ),_4741_blocksz );
                  int32_t _4750_jj0e = safe_add( safe_add( _4738_p0,_4747_ii ),_4741_blocksz );
                  int32_t _4751_jj0 = safe_add( _4738_p0,_4747_ii );
                  while ( ((_4751_jj0 < _4750_jj0e) && (_4749_jj1 < _4748_jj1e)) )
                  {
                    {
                      if ((_ptr__4732_wi64[safe_add( _4730_nidxs_base,_ptr__4731_wi32[safe_add( _4733_perm1,_4751_jj0 )] )] <= _ptr__4732_wi64[safe_add( _4730_nidxs_base,_ptr__4731_wi32[safe_add( _4733_perm1,_4749_jj1 )] )]))
                      {
                        {
                          _ptr__4731_wi32[safe_add( _4734_perm2,_4745_kk )] = _ptr__4731_wi32[safe_add( _4733_perm1,_4751_jj0 )];
                          ++ _4745_kk;
                          ++ _4751_jj0;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4731_wi32[safe_add( _4734_perm2,_4745_kk )] = _ptr__4731_wi32[safe_add( _4733_perm1,_4749_jj1 )];
                          ++ _4745_kk;
                          ++ _4749_jj1;
                        }
                      }
                    }
                  }
                  while ( (_4751_jj0 < _4750_jj0e) )
                  {
                    {
                      _ptr__4731_wi32[safe_add( _4734_perm2,_4745_kk )] = _ptr__4731_wi32[safe_add( _4733_perm1,_4751_jj0 )];
                      ++ _4745_kk;
                      ++ _4751_jj0;
                    }
                  }
                  while ( (_4749_jj1 < _4748_jj1e) )
                  {
                    {
                      _ptr__4731_wi32[safe_add( _4734_perm2,_4745_kk )] = _ptr__4731_wi32[safe_add( _4733_perm1,_4749_jj1 )];
                      ++ _4745_kk;
                      ++ _4749_jj1;
                    }
                  }
                }
              }
              int32_t _11372_ = _4745_kk;
              int32_t _11373_ = _4737_p1;
              for (int32_t _4752_ii = _11372_; _4752_ii < _11373_; ++_4752_ii)
              {
                {
                  _ptr__4731_wi32[safe_add( _4734_perm2,_4752_ii )] = _ptr__4731_wi32[safe_add( _4733_perm1,_4752_ii )];
                }
              }
              int32_t _4753_tmp = _4733_perm1;
              _4733_perm1 = _4734_perm2;
              _4734_perm2 = _4753_tmp;
              _4741_blocksz *= (int)2;
            }
          }
        }
      }
      {}
      int32_t _11374_ = _4738_p0;
      int32_t _11375_ = _4737_p1;
      for (int32_t _4754_i = _11374_; _4754_i < _11375_; ++_4754_i)
      {
        {
          _ptr__4731_wi32[safe_add( _4725_origperm1,_4754_i )] = _ptr__4731_wi32[safe_add( _4733_perm1,_4754_i )];
        }
      }
    }
  }
}
// End mosek.fusion.ExprCompress.merge_sort

// Begin mosek.fusion.ExprCompress.eval
// Method mosek.fusion.ExprCompress.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:21:6-247:7
void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4755_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4756_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4757_xs) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4755_rs,_4756_ws,_4757_xs); }
void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4755_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4756_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4757_xs)
{
  expr->eval(_4756_ws,_4755_rs,_4757_xs);
  _4756_ws->pop_expr();
  int32_t _4758_nd = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->nd;
  int32_t _4759_shape = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->shape_base;
  int32_t _4760_nelem = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->nelem;
  int32_t _4761_nnz = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->nnz;
  bool _4762_hassp = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->hassp;
  int32_t _4763_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->ncodeatom;
  int32_t _4764_ptr = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->ptr_base;
  int32_t _4765_sp = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->sp_base;
  int32_t _4766_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->nidxs_base;
  int32_t _4767_cof = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->cof_base;
  int32_t _4768_code = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->code_base;
  int32_t _4769_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->codeptr_base;
  int32_t _4770_cconst = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4771_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4771_wi32(_4771_wi32 ? _4771_wi32->raw() : nullptr,_4771_wi32 ? _4771_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4772_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4772_wi64(_4772_wi64 ? _4772_wi64->raw() : nullptr,_4772_wi64 ? _4772_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4773_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4756_ws)->f64;
  _checked_ptr_1<double> _ptr__4773_wf64(_4773_wf64 ? _4773_wf64->raw() : nullptr,_4773_wf64 ? _4773_wf64->size(0) : 0);
  bool _4774_iscompact = true;
  {
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4775_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4757_xs)->i32;
    _checked_ptr_1<int32_t> _ptr__4775_xi32(_4775_xi32 ? _4775_xi32->raw() : nullptr,_4775_xi32 ? _4775_xi32->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4776_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4757_xs)->i64;
    _checked_ptr_1<int64_t> _ptr__4776_xi64(_4776_xi64 ? _4776_xi64->raw() : nullptr,_4776_xi64 ? _4776_xi64->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _4777_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4757_xs)->f64;
    _checked_ptr_1<double> _ptr__4777_xf64(_4777_xf64 ? _4777_xf64->raw() : nullptr,_4777_xf64 ? _4777_xf64->size(0) : 0);
    int32_t _11376_ = (int)0;
    int32_t _11377_ = _4760_nelem;
    for (int32_t _4778_i = _11376_; _4778_i < _11377_; ++_4778_i)
    {
      {
        int32_t _11378_ = _ptr__4771_wi32[safe_add( _4764_ptr,_4778_i )];
        int32_t _11379_ = (_ptr__4771_wi32[safe_add( safe_add( _4764_ptr,_4778_i ),(int)1 )] - (int)1);
        for (int32_t _4779_j = _11378_; _4779_j < _11379_; ++_4779_j)
        {
          {
            _4774_iscompact = (_4774_iscompact && (_ptr__4772_wi64[safe_add( _4766_nidxs,_4779_j )] < _ptr__4772_wi64[safe_add( safe_add( _4766_nidxs,_4779_j ),(int)1 )]));
          }
        }
      }
    }
    if (_4774_iscompact)
    {
      {
        if ((_4763_ncodeatom > (int)0))
        {
          {
            int32_t _11380_ = (int)0;
            int32_t _11381_ = _4761_nnz;
            for (int32_t _4780_j = _11380_; _4780_j < _11381_; ++_4780_j)
            {
              {
                _4774_iscompact = (_4774_iscompact && ((!((_ptr__4773_wf64[safe_add( _4767_cof,_4780_j )] >= 0.0) && (0.0 >= _ptr__4773_wf64[safe_add( _4767_cof,_4780_j )]))) || (((_ptr__4771_wi32[safe_add( safe_add( _4769_codeptr,_4780_j ),(int)1 )] - _ptr__4771_wi32[safe_add( _4769_codeptr,_4780_j )]) == (int)0) || (!(((_ptr__4771_wi32[safe_add( safe_add( _4769_codeptr,_4780_j ),(int)1 )] - _ptr__4771_wi32[safe_add( _4769_codeptr,_4780_j )]) == (int)1) && ((_ptr__4771_wi32[safe_add( _4768_code,_ptr__4771_wi32[safe_add( _4769_codeptr,_4780_j )] )] == 2) && (!((_ptr__4773_wf64[safe_add( _4770_cconst,_ptr__4771_wi32[safe_add( _4769_codeptr,_4780_j )] )] <= 0.0) && (_ptr__4773_wf64[safe_add( _4770_cconst,_ptr__4771_wi32[safe_add( _4769_codeptr,_4780_j )] )] >= 0.0)))))))));
              }
            }
          }
        }
        else
        {
          {
            int32_t _11382_ = (int)0;
            int32_t _11383_ = _4761_nnz;
            for (int32_t _4781_j = _11382_; _4781_j < _11383_; ++_4781_j)
            {
              {
                _4774_iscompact = (_4774_iscompact && (!((_ptr__4773_wf64[safe_add( _4767_cof,_4781_j )] <= 0.0) && (0.0 <= _ptr__4773_wf64[safe_add( _4767_cof,_4781_j )]))));
              }
            }
          }
        }
      }
    }
    {}
  }
  if (_4774_iscompact)
  {
    {
      _4755_rs->alloc_expr(_4758_nd,_4760_nelem,_4761_nnz,_4762_hassp,_4763_ncodeatom);
      int32_t _4782_rptr = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->ptr_base;
      int32_t _4783_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->nidxs_base;
      int32_t _4784_rsp = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->sp_base;
      int32_t _4785_rcof = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->cof_base;
      int32_t _4786_rshape = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->shape_base;
      int32_t _4787_rcode = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->code_base;
      int32_t _4788_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->codeptr_base;
      int32_t _4789_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4790_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4790_ri32(_4790_ri32 ? _4790_ri32->raw() : nullptr,_4790_ri32 ? _4790_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4791_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4791_ri64(_4791_ri64 ? _4791_ri64->raw() : nullptr,_4791_ri64 ? _4791_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4792_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->f64;
      _checked_ptr_1<double> _ptr__4792_rf64(_4792_rf64 ? _4792_rf64->raw() : nullptr,_4792_rf64 ? _4792_rf64->size(0) : 0);
      {
        int32_t _11384_ = (int)0;
        int32_t _11385_ = _4758_nd;
        for (int32_t _4793_i = _11384_; _4793_i < _11385_; ++_4793_i)
        {
          {
            _ptr__4790_ri32[safe_add( _4786_rshape,_4793_i )] = _ptr__4771_wi32[safe_add( _4759_shape,_4793_i )];
          }
        }
        int32_t _11386_ = (int)0;
        int32_t _11387_ = safe_add( _4760_nelem,(int)1 );
        for (int32_t _4794_i = _11386_; _4794_i < _11387_; ++_4794_i)
        {
          {
            _ptr__4790_ri32[safe_add( _4782_rptr,_4794_i )] = _ptr__4771_wi32[safe_add( _4764_ptr,_4794_i )];
          }
        }
        int32_t _11388_ = (int)0;
        int32_t _11389_ = _4761_nnz;
        for (int32_t _4795_i = _11388_; _4795_i < _11389_; ++_4795_i)
        {
          {
            _ptr__4791_ri64[safe_add( _4783_rnidxs,_4795_i )] = _ptr__4772_wi64[safe_add( _4766_nidxs,_4795_i )];
          }
        }
        int32_t _11390_ = (int)0;
        int32_t _11391_ = _4761_nnz;
        for (int32_t _4796_i = _11390_; _4796_i < _11391_; ++_4796_i)
        {
          {
            _ptr__4792_rf64[safe_add( _4785_rcof,_4796_i )] = _ptr__4773_wf64[safe_add( _4767_cof,_4796_i )];
          }
        }
        if (_4762_hassp)
        {
          {
            int32_t _11392_ = (int)0;
            int32_t _11393_ = _4760_nelem;
            for (int32_t _4797_i = _11392_; _4797_i < _11393_; ++_4797_i)
            {
              {
                _ptr__4791_ri64[safe_add( _4784_rsp,_4797_i )] = _ptr__4772_wi64[safe_add( _4765_sp,_4797_i )];
              }
            }
          }
        }
        {}
        if ((_4763_ncodeatom > (int)0))
        {
          {
            int32_t _11394_ = (int)0;
            int32_t _11395_ = _4763_ncodeatom;
            for (int32_t _4798_i = _11394_; _4798_i < _11395_; ++_4798_i)
            {
              {
                _ptr__4790_ri32[safe_add( _4787_rcode,_4798_i )] = _ptr__4771_wi32[safe_add( _4768_code,_4798_i )];
              }
            }
            int32_t _11396_ = (int)0;
            int32_t _11397_ = _4763_ncodeatom;
            for (int32_t _4799_i = _11396_; _4799_i < _11397_; ++_4799_i)
            {
              {
                _ptr__4792_rf64[safe_add( _4789_rcconst,_4799_i )] = _ptr__4773_wf64[safe_add( _4770_cconst,_4799_i )];
              }
            }
            int32_t _11398_ = (int)0;
            int32_t _11399_ = safe_add( _4761_nnz,(int)1 );
            for (int32_t _4800_i = _11398_; _4800_i < _11399_; ++_4800_i)
            {
              {
                _ptr__4790_ri32[safe_add( _4788_rcodeptr,_4800_i )] = _ptr__4771_wi32[safe_add( _4769_codeptr,_4800_i )];
              }
            }
          }
        }
        {}
      }
      if ((_4763_ncodeatom > (int)0))
      {
        {
          if ((_ptr__4790_ri32[safe_add( _4788_rcodeptr,_4761_nnz )] != _4763_ncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4801_perm1 = _4757_xs->alloci32(_4761_nnz);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4756_ws,_4757_xs,_4801_perm1,_4760_nelem,_4761_nnz,_4764_ptr,_4766_nidxs);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4802_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4757_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4802_xi32(_4802_xi32 ? _4802_xi32->raw() : nullptr,_4802_xi32 ? _4802_xi32->size(0) : 0);
      int32_t _4803_rnnz = (int)0;
      int32_t _4804_rncodeatom = _4763_ncodeatom;
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _4805_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->i32;
        _checked_ptr_1<int32_t> _ptr__4805_ri32(_4805_ri32 ? _4805_ri32->raw() : nullptr,_4805_ri32 ? _4805_ri32->size(0) : 0);
        int32_t _11400_ = (int)0;
        int32_t _11401_ = _4760_nelem;
        for (int32_t _4806_i = _11400_; _4806_i < _11401_; ++_4806_i)
        {
          {
            int32_t _4807_pe = _ptr__4771_wi32[safe_add( safe_add( _4764_ptr,_4806_i ),(int)1 )];
            int32_t _4808_pb = _ptr__4771_wi32[safe_add( _4764_ptr,_4806_i )];
            if ((_4808_pb < _4807_pe))
            {
              {
                int32_t _4809_p = _4808_pb;
                while ( (_4809_p < _4807_pe) )
                {
                  {
                    double _4810_c = 0.0;
                    bool _4811_cnonzero = false;
                    int64_t _4812_varidx = _ptr__4772_wi64[safe_add( _4766_nidxs,_ptr__4802_xi32[safe_add( _4801_perm1,_4809_p )] )];
                    int32_t _4813_p0 = _4809_p;
                    while ( ((_4809_p < _4807_pe) && (_ptr__4772_wi64[safe_add( _4766_nidxs,_ptr__4802_xi32[safe_add( _4801_perm1,_4809_p )] )] == _4812_varidx)) )
                    {
                      {
                        double _4814_ci = _ptr__4773_wf64[safe_add( _4767_cof,_ptr__4802_xi32[safe_add( _4801_perm1,_4809_p )] )];
                        _4811_cnonzero = (_4811_cnonzero || (!((_4814_ci <= 0.0) && (_4814_ci >= 0.0))));
                        _4810_c += _4814_ci;
                        ++ _4809_p;
                      }
                    }
                    if ((_4811_cnonzero || (_4763_ncodeatom > (int)0)))
                    {
                      {
                        ++ _4803_rnnz;
                        if (((safe_add( _4813_p0,(int)1 ) < _4809_p) && (_4763_ncodeatom > (int)0)))
                        {
                          {
                            _4804_rncodeatom += (int)1;
                          }
                        }
                        {}
                      }
                    }
                    {}
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4755_rs->alloc_expr(_4758_nd,_4760_nelem,_4803_rnnz,_4762_hassp,_4804_rncodeatom);
      int32_t _4815_rnidx = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->nidxs_base;
      int32_t _4816_rshape = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->shape_base;
      int32_t _4817_rsp = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->sp_base;
      int32_t _4818_rcof = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->cof_base;
      int32_t _4819_rptr = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->ptr_base;
      int32_t _4820_rcode = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->code_base;
      int32_t _4821_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->codeptr_base;
      int32_t _4822_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4823_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4823_ri32(_4823_ri32 ? _4823_ri32->raw() : nullptr,_4823_ri32 ? _4823_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4824_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4824_ri64(_4824_ri64 ? _4824_ri64->raw() : nullptr,_4824_ri64 ? _4824_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4825_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4755_rs)->f64;
      _checked_ptr_1<double> _ptr__4825_rf64(_4825_rf64 ? _4825_rf64->raw() : nullptr,_4825_rf64 ? _4825_rf64->size(0) : 0);
      {
        int32_t _11402_ = (int)0;
        int32_t _11403_ = _4758_nd;
        for (int32_t _4826_i = _11402_; _4826_i < _11403_; ++_4826_i)
        {
          {
            _ptr__4823_ri32[safe_add( _4816_rshape,_4826_i )] = _ptr__4771_wi32[safe_add( _4759_shape,_4826_i )];
          }
        }
        if (_4762_hassp)
        {
          {
            int32_t _11404_ = (int)0;
            int32_t _11405_ = _4760_nelem;
            for (int32_t _4827_i = _11404_; _4827_i < _11405_; ++_4827_i)
            {
              {
                _ptr__4824_ri64[safe_add( _4817_rsp,_4827_i )] = _ptr__4772_wi64[safe_add( _4765_sp,_4827_i )];
              }
            }
          }
        }
        {}
        int32_t _4828_nzi = (int)0;
        int32_t _4829_codei = (int)0;
        {
          _ptr__4823_ri32[_4819_rptr] = (int)0;
          if ((_4804_rncodeatom > (int)0))
          {
            {
              _ptr__4823_ri32[_4821_rcodeptr] = (int)0;
            }
          }
          {}
          int32_t _11406_ = (int)0;
          int32_t _11407_ = _4760_nelem;
          for (int32_t _4830_elmi = _11406_; _4830_elmi < _11407_; ++_4830_elmi)
          {
            {
              int32_t _4831_pe = _ptr__4771_wi32[safe_add( safe_add( _4764_ptr,_4830_elmi ),(int)1 )];
              int32_t _4832_pb = _ptr__4771_wi32[safe_add( _4764_ptr,_4830_elmi )];
              if ((_4832_pb < _4831_pe))
              {
                {
                  int32_t _4833_p = _4832_pb;
                  int32_t _4834_p0 = _4833_p;
                  while ( (_4833_p < _4831_pe) )
                  {
                    {
                      double _4835_c = 0.0;
                      bool _4836_cnonzero = false;
                      int32_t _4837_p0e = safe_add( _4833_p,(int)1 );
                      int32_t _4838_p0b = _4833_p;
                      int64_t _4839_varidx = _ptr__4772_wi64[safe_add( _4766_nidxs,_ptr__4802_xi32[safe_add( _4801_perm1,_4838_p0b )] )];
                      while ( ((_4837_p0e < _4831_pe) && (_ptr__4772_wi64[safe_add( _4766_nidxs,_ptr__4802_xi32[safe_add( _4801_perm1,_4837_p0e )] )] == _4839_varidx)) )
                      {
                        {
                          ++ _4837_p0e;
                        }
                      }
                      if ((_4763_ncodeatom > (int)0))
                      {
                        {
                          while ( (_4833_p < _4837_p0e) )
                          {
                            {
                              double _4840_ci = _ptr__4773_wf64[safe_add( _4767_cof,_ptr__4802_xi32[safe_add( _4801_perm1,_4833_p )] )];
                              _4836_cnonzero = (_4836_cnonzero || (!((_4840_ci <= 0.0) && (_4840_ci >= 0.0))));
                              _4835_c += _4840_ci;
                              int32_t _11408_ = _ptr__4771_wi32[safe_add( _4769_codeptr,_ptr__4802_xi32[safe_add( _4801_perm1,_4833_p )] )];
                              int32_t _11409_ = _ptr__4771_wi32[safe_add( safe_add( _4769_codeptr,_ptr__4802_xi32[safe_add( _4801_perm1,_4833_p )] ),(int)1 )];
                              for (int32_t _4841_l = _11408_; _4841_l < _11409_; ++_4841_l)
                              {
                                {
                                  _ptr__4823_ri32[safe_add( _4820_rcode,_4829_codei )] = _ptr__4771_wi32[safe_add( _4768_code,_4841_l )];
                                  _ptr__4825_rf64[safe_add( _4822_rcconst,_4829_codei )] = _ptr__4773_wf64[safe_add( _4770_cconst,_4841_l )];
                                  ++ _4829_codei;
                                }
                              }
                              ++ _4833_p;
                            }
                          }
                          if (((_4837_p0e - _4838_p0b) > (int)1))
                          {
                            {
                              _ptr__4823_ri32[safe_add( _4820_rcode,_4829_codei )] = 8;
                              _ptr__4825_rf64[safe_add( _4822_rcconst,_4829_codei )] = (_4837_p0e - _4838_p0b);
                              ++ _4829_codei;
                            }
                          }
                          {}
                          _ptr__4823_ri32[safe_add( safe_add( _4821_rcodeptr,_4828_nzi ),(int)1 )] = _4829_codei;
                          _ptr__4824_ri64[safe_add( _4815_rnidx,_4828_nzi )] = _4839_varidx;
                          _ptr__4825_rf64[safe_add( _4818_rcof,_4828_nzi )] = _4835_c;
                          ++ _4828_nzi;
                        }
                      }
                      else
                      {
                        {
                          while ( (_4833_p < _4837_p0e) )
                          {
                            {
                              double _4842_ci = _ptr__4773_wf64[safe_add( _4767_cof,_ptr__4802_xi32[safe_add( _4801_perm1,_4833_p )] )];
                              _4836_cnonzero = (_4836_cnonzero || (!((_4842_ci <= 0.0) && (_4842_ci >= 0.0))));
                              _4835_c += _4842_ci;
                              ++ _4833_p;
                            }
                          }
                          if (_4836_cnonzero)
                          {
                            {
                              _ptr__4824_ri64[safe_add( _4815_rnidx,_4828_nzi )] = _4839_varidx;
                              _ptr__4825_rf64[safe_add( _4818_rcof,_4828_nzi )] = _4835_c;
                              ++ _4828_nzi;
                            }
                          }
                          {}
                        }
                      }
                    }
                  }
                }
              }
              {}
              _ptr__4823_ri32[safe_add( safe_add( _4819_rptr,_4830_elmi ),(int)1 )] = _4828_nzi;
            }
          }
        }
        if ((_4804_rncodeatom != _4829_codei))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ncodeatom"));
          }
        }
        {}
        if ((_4828_nzi != _4803_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
          }
        }
        {}
        if ((_4803_rnnz != _ptr__4823_ri32[safe_add( _4819_rptr,_4760_nelem )]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
          }
        }
        {}
      }
      if ((_4804_rncodeatom > (int)0))
      {
        {
          if ((_ptr__4823_ri32[safe_add( _4821_rcodeptr,_4803_rnnz )] != _4804_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  _4757_xs->clear();
}
// End mosek.fusion.ExprCompress.eval

// Begin mosek.fusion.ExprCompress.toString
// Method mosek.fusion.ExprCompress.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprCompress.monty:14:6-130
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprCompress::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprCompress.toString

void mosek::fusion::p_ExprCompress::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }
// } class ExprCompress
// class ExprConst { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprConst.monty:4:4-80:5
mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }
mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprConst::p_ExprConst
  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprConst.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprConst.monty:37:6-42:7
mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4843_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4844_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4845_bfix)
{ return new mosek::fusion::ExprConst(_4843_shape,_4844_sparsity,_4845_bfix); }
mosek::fusion::ExprConst::ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4843_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4844_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4845_bfix) : 
   ExprConst(new mosek::fusion::p_ExprConst(this))
{ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4843_shape,_4844_sparsity,_4845_bfix); }
void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4843_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4844_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4845_bfix)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4843_shape(_4843_shape ? _4843_shape->raw() : nullptr, _4843_shape ? _4843_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4844_sparsity(_4844_sparsity ? _4844_sparsity->raw() : nullptr, _4844_sparsity ? _4844_sparsity->size(0) : 0);
    _checked_ptr_1<double> _ptr__4845_bfix(_4845_bfix ? _4845_bfix->raw() : nullptr, _4845_bfix ? _4845_bfix->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(nullptr,_4843_shape);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_4845_bfix);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _11410_;
    bool _11411_ = (NULL != _4844_sparsity.get());
    if (_11411_)
    {
      _11410_ = ::mosek::fusion::Utils::Tools::arraycopy(_4844_sparsity);
    }
    else
    {
      _11410_ = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _11410_;
    ::mosek::fusion::p_ExprConst::validate(_4843_shape,_4845_bfix,_4844_sparsity);
  }
}
// mosek.fusion.ExprConst.ctor

// mosek.fusion.ExprConst.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprConst.monty:28:6-35:7
mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4846_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4847_sparsity,
    double _4848_bfix)
{ return new mosek::fusion::ExprConst(_4846_shape,_4847_sparsity,_4848_bfix); }
mosek::fusion::ExprConst::ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4846_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4847_sparsity,
    double _4848_bfix) : 
   ExprConst(new mosek::fusion::p_ExprConst(this))
{ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4846_shape,_4847_sparsity,_4848_bfix); }
void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4846_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4847_sparsity,
    double _4848_bfix)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4846_shape(_4846_shape ? _4846_shape->raw() : nullptr, _4846_shape ? _4846_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4847_sparsity(_4847_sparsity ? _4847_sparsity->raw() : nullptr, _4847_sparsity ? _4847_sparsity->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(nullptr,_4846_shape);
    int64_t _11412_;
    bool _11413_ = (NULL == _4847_sparsity.get());
    if (_11413_)
    {
      _11412_ = ::mosek::fusion::p_Set::size(_4846_shape);
    }
    else
    {
      _11412_ = (int)((_4847_sparsity)->size(0));
    }
    int64_t _4849_n = _11412_;
    std::vector<double> _11414_;
    for (int64_t _4850_i = (int)0, _11415_ = _4849_n; _4850_i < _11415_ ; ++_4850_i)
    {
      _11414_.push_back(_4848_bfix);
    }
    auto _11416_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11414_.size()),_11414_.begin(),_11414_.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _11416_;
    std::shared_ptr< monty::ndarray< int64_t,1 > > _11417_;
    bool _11418_ = (NULL != _4847_sparsity.get());
    if (_11418_)
    {
      _11417_ = ::mosek::fusion::Utils::Tools::arraycopy(_4847_sparsity);
    }
    else
    {
      _11417_ = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _11417_;
    ::mosek::fusion::p_ExprConst::validate(_4846_shape,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_4847_sparsity);
  }
}
// mosek.fusion.ExprConst.ctor

// Begin mosek.fusion.ExprConst.eval
// Method mosek.fusion.ExprConst.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprConst.monty:44:6-79:7
void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4851_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4852_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4853_xs) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_4851_rs,_4852_ws,_4853_xs); }
void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4851_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4852_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4853_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4854_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__4854_shape(_4854_shape ? _4854_shape->raw() : nullptr,_4854_shape ? _4854_shape->size(0) : 0);
  int32_t _4855_nd = (int)((_4854_shape)->size(0));
  int32_t _4856_nnz = (int)0;
  int32_t _11419_ = (int)0;
  int32_t _11420_ = (int)((bfix)->size(0));
  for (int32_t _4857_i = _11419_; _4857_i < _11420_; ++_4857_i)
  {
    {
      if ((!((((*bfix)(_4857_i)) <= 0.0) && (((*bfix)(_4857_i)) >= 0.0))))
      {
        {
          ++ _4856_nnz;
        }
      }
      {}
    }
  }
  int32_t _4858_nelem = (int)((bfix)->size(0));
  bool _4859_hassp = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_4854_shape)));
  _4851_rs->alloc_expr(_4855_nd,_4858_nelem,_4856_nnz,_4859_hassp,(int)0);
  int32_t _4860_rshape = mosek::fusion::p_WorkStack::_get_impl(_4851_rs)->shape_base;
  int32_t _4861_rptr = mosek::fusion::p_WorkStack::_get_impl(_4851_rs)->ptr_base;
  int32_t _4862_rsp = mosek::fusion::p_WorkStack::_get_impl(_4851_rs)->sp_base;
  int32_t _4863_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4851_rs)->nidxs_base;
  int32_t _4864_rcof = mosek::fusion::p_WorkStack::_get_impl(_4851_rs)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4865_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4851_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4865_ri32(_4865_ri32 ? _4865_ri32->raw() : nullptr,_4865_ri32 ? _4865_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4866_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4851_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4866_ri64(_4866_ri64 ? _4866_ri64->raw() : nullptr,_4866_ri64 ? _4866_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4867_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4851_rs)->f64;
  _checked_ptr_1<double> _ptr__4867_rf64(_4867_rf64 ? _4867_rf64->raw() : nullptr,_4867_rf64 ? _4867_rf64->size(0) : 0);
  int32_t _11421_ = (int)0;
  int32_t _11422_ = _4855_nd;
  for (int32_t _4868_i = _11421_; _4868_i < _11422_; ++_4868_i)
  {
    {
      _ptr__4865_ri32[safe_add( _4860_rshape,_4868_i )] = _ptr__4854_shape[_4868_i];
    }
  }
  int32_t _4869_nzi = (int)0;
  _ptr__4865_ri32[_4861_rptr] = (int)0;
  if (_4859_hassp)
  {
    {
      int32_t _11423_ = (int)0;
      int32_t _11424_ = _4858_nelem;
      for (int32_t _4870_i = _11423_; _4870_i < _11424_; ++_4870_i)
      {
        {
          _ptr__4866_ri64[safe_add( _4862_rsp,_4870_i )] = ((*sparsity)(_4870_i));
        }
      }
    }
  }
  {}
  int32_t _11425_ = (int)0;
  int32_t _11426_ = _4858_nelem;
  for (int32_t _4871_i = _11425_; _4871_i < _11426_; ++_4871_i)
  {
    {
      if ((!((((*bfix)(_4871_i)) <= 0.0) && (((*bfix)(_4871_i)) >= 0.0))))
      {
        {
          _ptr__4866_ri64[safe_add( _4863_rnidxs,_4869_nzi )] = (int)0;
          _ptr__4867_rf64[safe_add( _4864_rcof,_4869_nzi )] = ((*bfix)(_4871_i));
          ++ _4869_nzi;
        }
      }
      {}
      _ptr__4865_ri32[safe_add( safe_add( _4861_rptr,_4871_i ),(int)1 )] = _4869_nzi;
    }
  }
}
// End mosek.fusion.ExprConst.eval

// Begin mosek.fusion.ExprConst.validate
// Method mosek.fusion.ExprConst.validate @ bld/docker-rockylinux-8/final/default/src/fusion/ExprConst.monty:10:6-26:7
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _4872_shape,std::shared_ptr< monty::ndarray< double,1 > > _4873_bfix,std::shared_ptr< monty::ndarray< int64_t,1 > > _4874_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__4872_shape(_4872_shape ? _4872_shape->raw() : nullptr, _4872_shape ? _4872_shape->size(0) : 0);
  _checked_ptr_1<double> _ptr__4873_bfix(_4873_bfix ? _4873_bfix->raw() : nullptr, _4873_bfix ? _4873_bfix->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__4874_sparsity(_4874_sparsity ? _4874_sparsity->raw() : nullptr, _4874_sparsity ? _4874_sparsity->size(0) : 0);
  int64_t _4875_sz = ::mosek::fusion::p_Set::size(_4872_shape);
  if ((NULL != _4874_sparsity.get()))
  {
    {
      if (((int)((_4874_sparsity)->size(0)) != (int)((_4873_bfix)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _4876_err = false;
      int32_t _11427_ = (int)0;
      int32_t _11428_ = (int)((_4874_sparsity)->size(0));
      for (int32_t _4877_i = _11427_; _4877_i < _11428_; ++_4877_i)
      {
        {
          if (((_ptr__4874_sparsity[_4877_i] < (int)0) || (_ptr__4874_sparsity[_4877_i] >= _4875_sz)))
          {
            {
              _4876_err = true;
            }
          }
          {}
        }
      }
      if (_4876_err)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_4873_bfix)->size(0)) != _4875_sz))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprConst.validate

// Begin mosek.fusion.ExprConst.toString
// Method mosek.fusion.ExprConst.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprConst.monty:8:6-63
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprConst::toString()
{
  return std::string ("ExprConst()");
}
// End mosek.fusion.ExprConst.toString

void mosek::fusion::p_ExprConst::destroy()
{
  sparsity.reset();
  bfix.reset();
}
void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }
// } class ExprConst
// class ExprPick { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:187:4-390:5
mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }
mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprPick::p_ExprPick
  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprPick.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:210:6-239:7
mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4878_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4879_idxs)
{ return new mosek::fusion::ExprPick(_4878_expr,_4879_idxs); }
mosek::fusion::ExprPick::ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4878_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4879_idxs) : 
   ExprPick(new mosek::fusion::p_ExprPick(this))
{ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4878_expr,_4879_idxs); }
void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4878_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4879_idxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4878_expr->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_4879_idxs)->size(0)))}));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4880_shape = _4878_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__4880_shape(_4880_shape ? _4880_shape->raw() : nullptr,_4880_shape ? _4880_shape->size(0) : 0);
    int32_t _4881_nd = (int)((_4880_shape)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4878_expr;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_4879_idxs)->size(0)))));
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4882_this_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<int64_t> _ptr__4882_this_idxs(_4882_this_idxs ? _4882_this_idxs->raw() : nullptr,_4882_this_idxs ? _4882_this_idxs->size(0) : 0);
    if (((int)((_4879_idxs)->size(1)) != _4881_nd))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _4883_wrongindex = false;
    int32_t _11429_ = (int)0;
    int32_t _11430_ = (int)((_4879_idxs)->size(0));
    for (int32_t _4884_i = _11429_; _4884_i < _11430_; ++_4884_i)
    {
      {
        int32_t _11431_ = (int)0;
        int32_t _11432_ = _4881_nd;
        for (int32_t _4885_j = _11431_; _4885_j < _11432_; ++_4885_j)
        {
          {
            if (((((*_4879_idxs)(_4884_i,_4885_j)) < (int)0) || (((*_4879_idxs)(_4884_i,_4885_j)) >= _ptr__4880_shape[_4885_j])))
            {
              {
                _4883_wrongindex = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_4883_wrongindex)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4886_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4881_nd)));
      _checked_ptr_1<int64_t> _ptr__4886_st(_4886_st ? _4886_st->raw() : nullptr,_4886_st ? _4886_st->size(0) : 0);
      _ptr__4886_st[(_4881_nd - (int)1)] = (int)1;
      int32_t _11433_ = (int)1;
      int32_t _11434_ = _4881_nd;
      for (int32_t _4887_i = _11433_; _4887_i < _11434_; ++_4887_i)
      {
        {
          _ptr__4886_st[((_4881_nd - _4887_i) - (int)1)] = safe_mul( _ptr__4886_st[(_4881_nd - _4887_i)],_ptr__4880_shape[(_4881_nd - _4887_i)] );
        }
      }
      int32_t _11435_ = (int)0;
      int32_t _11436_ = (int)((_4879_idxs)->size(0));
      for (int32_t _4888_i = _11435_; _4888_i < _11436_; ++_4888_i)
      {
        {
          int64_t _4889_ii = (int64_t)0;
          int32_t _11437_ = (int)0;
          int32_t _11438_ = _4881_nd;
          for (int32_t _4890_j = _11437_; _4890_j < _11438_; ++_4890_j)
          {
            {
              _4889_ii += safe_mul( _ptr__4886_st[_4890_j],((*_4879_idxs)(_4888_i,_4890_j)) );
            }
          }
          _ptr__4882_this_idxs[_4888_i] = _4889_ii;
        }
      }
    }
  }
}
// mosek.fusion.ExprPick.ctor

// mosek.fusion.ExprPick.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:191:6-206:7
mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4891_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4892_idxs)
{ return new mosek::fusion::ExprPick(_4891_expr,_4892_idxs); }
mosek::fusion::ExprPick::ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4891_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4892_idxs) : 
   ExprPick(new mosek::fusion::p_ExprPick(this))
{ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4891_expr,_4892_idxs); }
void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4891_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4892_idxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__4892_idxs(_4892_idxs ? _4892_idxs->raw() : nullptr, _4892_idxs ? _4892_idxs->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4891_expr->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_4892_idxs)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4891_expr;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4893_shape = _4891_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__4893_shape(_4893_shape ? _4893_shape->raw() : nullptr,_4893_shape ? _4893_shape->size(0) : 0);
    int64_t _4894_size = ::mosek::fusion::p_Set::size(_4893_shape);
    bool _4895_wrongindex = false;
    int32_t _11439_ = (int)0;
    int32_t _11440_ = (int)((_4892_idxs)->size(0));
    for (int32_t _4896_i = _11439_; _4896_i < _11440_; ++_4896_i)
    {
      {
        if (((_ptr__4892_idxs[_4896_i] < (int)0) || (_ptr__4892_idxs[_4896_i] >= _4894_size)))
        {
          {
            _4895_wrongindex = true;
          }
        }
        {}
      }
    }
    if (_4895_wrongindex)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_4892_idxs);
  }
}
// mosek.fusion.ExprPick.ctor

// Begin mosek.fusion.ExprPick.eval
// Method mosek.fusion.ExprPick.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:241:6-389:7
void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4897_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4898_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4899_xs) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_4897_rs,_4898_ws,_4899_xs); }
void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4897_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4898_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4899_xs)
{
  expr->eval(_4898_ws,_4897_rs,_4899_xs);
  _4898_ws->pop_expr();
  int32_t _4900_nd = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->nd;
  int32_t _4901_shape = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->shape_base;
  int32_t _4902_nelem = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->nelem;
  int32_t _4903_nnz = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->nnz;
  int32_t _4904_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->ncodeatom;
  bool _4905_hassp = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->hassp;
  int32_t _4906_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->ptr_base;
  int32_t _4907_sp_base = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->sp_base;
  int32_t _4908_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->nidxs_base;
  int32_t _4909_cof_base = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->cof_base;
  int32_t _4910_code = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->code_base;
  int32_t _4911_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->codeptr_base;
  int32_t _4912_cconst = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4913_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4913_wi32(_4913_wi32 ? _4913_wi32->raw() : nullptr,_4913_wi32 ? _4913_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4914_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4914_wi64(_4914_wi64 ? _4914_wi64->raw() : nullptr,_4914_wi64 ? _4914_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4915_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4898_ws)->f64;
  _checked_ptr_1<double> _ptr__4915_wf64(_4915_wf64 ? _4915_wf64->raw() : nullptr,_4915_wf64 ? _4915_wf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4916_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<int64_t> _ptr__4916_idxs(_4916_idxs ? _4916_idxs->raw() : nullptr,_4916_idxs ? _4916_idxs->size(0) : 0);
  if ((!_4905_hassp))
  {
    {
      int32_t _4917_rnelem = (int)((_4916_idxs)->size(0));
      int32_t _4918_rnd = (int)1;
      int32_t _4919_rnnz = (int)0;
      int32_t _4920_rncodeatom = (int)0;
      int32_t _11441_ = (int)0;
      int32_t _11442_ = (int)((_4916_idxs)->size(0));
      for (int32_t _4921_i = _11441_; _4921_i < _11442_; ++_4921_i)
      {
        {
          _4919_rnnz += (_ptr__4913_wi32[safe_add( safe_add( _4906_ptr_base,_ptr__4916_idxs[_4921_i] ),(int)1 )] - _ptr__4913_wi32[safe_add( _4906_ptr_base,_ptr__4916_idxs[_4921_i] )]);
          if ((_4904_ncodeatom > (int)0))
          {
            {
              _4920_rncodeatom += (_ptr__4913_wi32[safe_add( _4911_codeptr,_ptr__4913_wi32[safe_add( safe_add( _4906_ptr_base,_ptr__4916_idxs[_4921_i] ),(int)1 )] )] - _ptr__4913_wi32[safe_add( _4911_codeptr,_ptr__4913_wi32[safe_add( _4906_ptr_base,_ptr__4916_idxs[_4921_i] )] )]);
            }
          }
          {}
        }
      }
      _4897_rs->alloc_expr(_4918_rnd,_4917_rnelem,_4919_rnnz,false,_4920_rncodeatom);
      int32_t _4922_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->cof_base;
      int32_t _4923_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->nidxs_base;
      int32_t _4924_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->ptr_base;
      int32_t _4925_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->shape_base;
      int32_t _4926_rcode = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->code_base;
      int32_t _4927_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->codeptr_base;
      int32_t _4928_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->cconst_base;
      {
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4929_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4929_ri32(_4929_ri32 ? _4929_ri32->raw() : nullptr,_4929_ri32 ? _4929_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4930_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4930_ri64(_4930_ri64 ? _4930_ri64->raw() : nullptr,_4930_ri64 ? _4930_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4931_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->f64;
      _checked_ptr_1<double> _ptr__4931_rf64(_4931_rf64 ? _4931_rf64->raw() : nullptr,_4931_rf64 ? _4931_rf64->size(0) : 0);
      _ptr__4929_ri32[_4925_rshape_base] = (int)((_4916_idxs)->size(0));
      int32_t _4932_codei = (int)0;
      int32_t _4933_knz = (int)0;
      _ptr__4929_ri32[_4924_rptr_base] = (int)0;
      if ((_4920_rncodeatom > (int)0))
      {
        {
          _ptr__4929_ri32[_4927_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _11443_ = (int)0;
      int32_t _11444_ = (int)((_4916_idxs)->size(0));
      for (int32_t _4934_i = _11443_; _4934_i < _11444_; ++_4934_i)
      {
        {
          int32_t _11445_ = _ptr__4913_wi32[safe_add( _4906_ptr_base,_ptr__4916_idxs[_4934_i] )];
          int32_t _11446_ = _ptr__4913_wi32[safe_add( safe_add( _4906_ptr_base,_ptr__4916_idxs[_4934_i] ),(int)1 )];
          for (int32_t _4935_j = _11445_; _4935_j < _11446_; ++_4935_j)
          {
            {
              _ptr__4930_ri64[safe_add( _4923_rnidxs_base,_4933_knz )] = _ptr__4914_wi64[safe_add( _4908_nidxs_base,_4935_j )];
              _ptr__4931_rf64[safe_add( _4922_rcof_base,_4933_knz )] = _ptr__4915_wf64[safe_add( _4909_cof_base,_4935_j )];
              if ((_4920_rncodeatom > (int)0))
              {
                {
                  int32_t _11447_ = _ptr__4913_wi32[safe_add( _4911_codeptr,_4935_j )];
                  int32_t _11448_ = _ptr__4913_wi32[safe_add( safe_add( _4911_codeptr,_4935_j ),(int)1 )];
                  for (int32_t _4936_k = _11447_; _4936_k < _11448_; ++_4936_k)
                  {
                    {
                      _ptr__4929_ri32[safe_add( _4926_rcode,_4932_codei )] = _ptr__4913_wi32[safe_add( _4910_code,_4936_k )];
                      _ptr__4931_rf64[safe_add( _4928_rcconst,_4932_codei )] = _ptr__4915_wf64[safe_add( _4912_cconst,_4936_k )];
                      ++ _4932_codei;
                    }
                  }
                  _ptr__4929_ri32[safe_add( safe_add( _4927_rcodeptr,_4933_knz ),(int)1 )] = _4932_codei;
                }
              }
              {}
              ++ _4933_knz;
            }
          }
          _ptr__4929_ri32[safe_add( safe_add( _4924_rptr_base,_4934_i ),(int)1 )] = _4933_knz;
        }
      }
    }
  }
  else
  {
    {
      int32_t _4937_rnd = (int)1;
      int32_t _4938_rnelem = (int)((_4916_idxs)->size(0));
      int32_t _4939_rnnz = (int)0;
      int32_t _4940_rncodeatom = (int)0;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4941_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<int64_t> _ptr__4941_idxs(_4941_idxs ? _4941_idxs->raw() : nullptr,_4941_idxs ? _4941_idxs->size(0) : 0);
      int32_t _4942_tidxs = _4899_xs->alloci32((int)((_4941_idxs)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4943_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4899_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4943_xi32(_4943_xi32 ? _4943_xi32->raw() : nullptr,_4943_xi32 ? _4943_xi32->size(0) : 0);
      int32_t _11449_ = (int)0;
      int32_t _11450_ = (int)((_4941_idxs)->size(0));
      for (int32_t _4944_i = _11449_; _4944_i < _11450_; ++_4944_i)
      {
        {
          int32_t _4945_b1 = _4902_nelem;
          int32_t _4946_b0 = (int)0;
          while ( (_4946_b0 < _4945_b1) )
          {
            {
              int32_t _4947_pi = (safe_add( _4945_b1,_4946_b0 ) / (int)2);
              if ((_ptr__4914_wi64[safe_add( _4907_sp_base,_4947_pi )] >= _ptr__4941_idxs[_4944_i]))
              {
                {
                  _4945_b1 = _4947_pi;
                }
              }
              else
              {
                {
                  _4946_b0 = safe_add( _4947_pi,(int)1 );
                }
              }
            }
          }
          if (((_4946_b0 < _4902_nelem) && (_ptr__4914_wi64[safe_add( _4907_sp_base,_4946_b0 )] == _ptr__4941_idxs[_4944_i])))
          {
            {
              _ptr__4943_xi32[safe_add( _4942_tidxs,_4944_i )] = _4946_b0;
              _4939_rnnz += (_ptr__4913_wi32[safe_add( safe_add( _4906_ptr_base,_4946_b0 ),(int)1 )] - _ptr__4913_wi32[safe_add( _4906_ptr_base,_4946_b0 )]);
              if ((_4904_ncodeatom > (int)0))
              {
                {
                  _4940_rncodeatom += (_ptr__4913_wi32[safe_add( _4911_codeptr,_ptr__4913_wi32[safe_add( safe_add( _4906_ptr_base,_ptr__4941_idxs[_4944_i] ),(int)1 )] )] - _ptr__4913_wi32[safe_add( _4911_codeptr,_ptr__4913_wi32[safe_add( _4906_ptr_base,_ptr__4941_idxs[_4944_i] )] )]);
                }
              }
              {}
            }
          }
          else
          {
            {
              _ptr__4943_xi32[safe_add( _4942_tidxs,_4944_i )] = (-(int)1);
            }
          }
        }
      }
      _4897_rs->alloc_expr(_4937_rnd,_4938_rnelem,_4939_rnnz,false,_4940_rncodeatom);
      int32_t _4948_rptr = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->ptr_base;
      int32_t _4949_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->nidxs_base;
      int32_t _4950_rcof = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->cof_base;
      int32_t _4951_rshape = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->shape_base;
      int32_t _4952_rcode = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->code_base;
      int32_t _4953_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->codeptr_base;
      int32_t _4954_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4955_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4955_ri32(_4955_ri32 ? _4955_ri32->raw() : nullptr,_4955_ri32 ? _4955_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4956_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4956_ri64(_4956_ri64 ? _4956_ri64->raw() : nullptr,_4956_ri64 ? _4956_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4957_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4897_rs)->f64;
      _checked_ptr_1<double> _ptr__4957_rf64(_4957_rf64 ? _4957_rf64->raw() : nullptr,_4957_rf64 ? _4957_rf64->size(0) : 0);
      _ptr__4955_ri32[_4951_rshape] = (int)((_4941_idxs)->size(0));
      _ptr__4955_ri32[_4948_rptr] = (int)0;
      if ((_4940_rncodeatom > (int)0))
      {
        {
          _ptr__4955_ri32[_4953_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _4958_codei = (int)0;
      int32_t _4959_k = (int)0;
      int32_t _11451_ = (int)0;
      int32_t _11452_ = (int)((_4941_idxs)->size(0));
      for (int32_t _4960_i = _11451_; _4960_i < _11452_; ++_4960_i)
      {
        {
          if ((_ptr__4943_xi32[safe_add( _4942_tidxs,_4960_i )] >= (int)0))
          {
            {
              int32_t _4961_b0 = _ptr__4943_xi32[safe_add( _4942_tidxs,_4960_i )];
              int32_t _11453_ = _ptr__4913_wi32[safe_add( _4906_ptr_base,_4961_b0 )];
              int32_t _11454_ = _ptr__4913_wi32[safe_add( safe_add( _4906_ptr_base,_4961_b0 ),(int)1 )];
              for (int32_t _4962_j = _11453_; _4962_j < _11454_; ++_4962_j)
              {
                {
                  _ptr__4956_ri64[safe_add( _4949_rnidxs,_4959_k )] = _ptr__4914_wi64[safe_add( _4908_nidxs_base,_4962_j )];
                  _ptr__4957_rf64[safe_add( _4950_rcof,_4959_k )] = _ptr__4915_wf64[safe_add( _4909_cof_base,_4962_j )];
                  if ((_4940_rncodeatom > (int)0))
                  {
                    {
                      int32_t _11455_ = _ptr__4913_wi32[safe_add( _4911_codeptr,_4962_j )];
                      int32_t _11456_ = _ptr__4913_wi32[safe_add( safe_add( _4911_codeptr,_4962_j ),(int)1 )];
                      for (int32_t _4963_l = _11455_; _4963_l < _11456_; ++_4963_l)
                      {
                        {
                          _ptr__4955_ri32[safe_add( _4952_rcode,_4958_codei )] = _ptr__4913_wi32[safe_add( _4910_code,_4963_l )];
                          _ptr__4957_rf64[safe_add( _4954_rcconst,_4958_codei )] = _ptr__4915_wf64[safe_add( _4912_cconst,_4963_l )];
                          ++ _4958_codei;
                        }
                      }
                      _ptr__4955_ri32[safe_add( safe_add( _4953_rcodeptr,_4959_k ),(int)1 )] = _4958_codei;
                    }
                  }
                  {}
                  ++ _4959_k;
                }
              }
            }
          }
          {}
          _ptr__4955_ri32[safe_add( safe_add( _4948_rptr,_4960_i ),(int)1 )] = _4959_k;
        }
      }
    }
  }
}
// End mosek.fusion.ExprPick.eval

// Begin mosek.fusion.ExprPick.toString
// Method mosek.fusion.ExprPick.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:208:6-62
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprPick::toString()
{
  return std::string ("ExprPick()");
}
// End mosek.fusion.ExprPick.toString

void mosek::fusion::p_ExprPick::destroy()
{
  idxs.reset();
  expr.reset();
}
void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }
// } class ExprPick
// class ExprSlice { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:4:4-183:5
mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }
mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSlice::p_ExprSlice
  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSlice.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:28:6-34:7
mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice
  (monty::rc_ptr< ::mosek::fusion::Expression > _4964_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4965_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4966_last)
{ return new mosek::fusion::ExprSlice(_4964_expr,_4965_first,_4966_last); }
mosek::fusion::ExprSlice::ExprSlice
  (monty::rc_ptr< ::mosek::fusion::Expression > _4964_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4965_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4966_last) : 
   ExprSlice(new mosek::fusion::p_ExprSlice(this))
{ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_4964_expr,_4965_first,_4966_last); }
void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4964_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4965_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4966_last)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4965_first(_4965_first ? _4965_first->raw() : nullptr, _4965_first ? _4965_first->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__4966_last(_4966_last ? _4966_last->raw() : nullptr, _4966_last ? _4966_last->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4964_expr->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprSlice::makeShape(_4964_expr->getShape(),_4965_first,_4966_last));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _4964_expr;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _4965_first;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _4966_last;
  }
}
// mosek.fusion.ExprSlice.ctor

// Begin mosek.fusion.ExprSlice.eval
// Method mosek.fusion.ExprSlice.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:36:6-182:7
void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4967_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4968_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4969_xs) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_4967_rs,_4968_ws,_4969_xs); }
void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4967_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4968_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4969_xs)
{
  expr->eval(_4968_ws,_4967_rs,_4969_xs);
  _4968_ws->pop_expr();
  int32_t _4970_nd = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->nd;
  int32_t _4971_nelem = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->nelem;
  int32_t _4972_nnz = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->nnz;
  int32_t _4973_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->ncodeatom;
  bool _4974_hassp = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->hassp;
  int32_t _4975_shape_base = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->shape_base;
  int32_t _4976_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->ptr_base;
  int32_t _4977_sp_base = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->sp_base;
  int32_t _4978_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->nidxs_base;
  int32_t _4979_cof_base = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->cof_base;
  int32_t _4980_code = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->code_base;
  int32_t _4981_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->codeptr_base;
  int32_t _4982_cconst = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4983_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4983_wi32(_4983_wi32 ? _4983_wi32->raw() : nullptr,_4983_wi32 ? _4983_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4984_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4984_wi64(_4984_wi64 ? _4984_wi64->raw() : nullptr,_4984_wi64 ? _4984_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4985_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4968_ws)->f64;
  _checked_ptr_1<double> _ptr__4985_wf64(_4985_wf64 ? _4985_wf64->raw() : nullptr,_4985_wf64 ? _4985_wf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4986_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4970_nd)));
  _checked_ptr_1<int64_t> _ptr__4986_st(_4986_st ? _4986_st->raw() : nullptr,_4986_st ? _4986_st->size(0) : 0);
  _ptr__4986_st[(_4970_nd - (int)1)] = (int)1;
  int32_t _11457_ = (int)1;
  int32_t _11458_ = _4970_nd;
  for (int32_t _4987_i = _11457_; _4987_i < _11458_; ++_4987_i)
  {
    {
      _ptr__4986_st[((_4970_nd - _4987_i) - (int)1)] = safe_mul( _ptr__4986_st[(_4970_nd - _4987_i)],_ptr__4983_wi32[(safe_add( _4975_shape_base,_4970_nd ) - _4987_i)] );
    }
  }
  int32_t _4988_rncodeatom = (int)0;
  int32_t _4989_rnelem = (int)0;
  int32_t _4990_rnnz = (int)0;
  if (_4974_hassp)
  {
    {
      int32_t _11459_ = (int)0;
      int32_t _11460_ = _4971_nelem;
      for (int32_t _4991_i = _11459_; _4991_i < _11460_; ++_4991_i)
      {
        {
          bool _4992_in_bounds = true;
          int32_t _11461_ = (int)0;
          int32_t _11462_ = _4970_nd;
          for (int32_t _4993_j = _11461_; _4993_j < _11462_; ++_4993_j)
          {
            {
              int64_t _4994_kj = ((_ptr__4984_wi64[safe_add( _4977_sp_base,_4991_i )] / _ptr__4986_st[_4993_j]) % _ptr__4983_wi32[safe_add( _4975_shape_base,_4993_j )]);
              _4992_in_bounds = (_4992_in_bounds && ((_4994_kj >= ((*first)(_4993_j))) && (_4994_kj < ((*last)(_4993_j)))));
            }
          }
          if (_4992_in_bounds)
          {
            {
              _4990_rnnz += (_ptr__4983_wi32[safe_add( safe_add( _4976_ptr_base,_4991_i ),(int)1 )] - _ptr__4983_wi32[safe_add( _4976_ptr_base,_4991_i )]);
              if ((_4973_ncodeatom > (int)0))
              {
                {
                  _4988_rncodeatom += (_ptr__4983_wi32[safe_add( _4981_codeptr,_ptr__4983_wi32[safe_add( safe_add( _4976_ptr_base,_4991_i ),(int)1 )] )] - _ptr__4983_wi32[safe_add( _4981_codeptr,_ptr__4983_wi32[safe_add( _4976_ptr_base,_4991_i )] )]);
                }
              }
              {}
              ++ _4989_rnelem;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _4989_rnelem = (int)1;
      int32_t _11463_ = (int)0;
      int32_t _11464_ = _4970_nd;
      for (int32_t _4995_i = _11463_; _4995_i < _11464_; ++_4995_i)
      {
        {
          _4989_rnelem *= (((*last)(_4995_i)) - ((*first)(_4995_i)));
        }
      }
      int32_t _11465_ = (int)0;
      int32_t _11466_ = _4971_nelem;
      for (int32_t _4996_i = _11465_; _4996_i < _11466_; ++_4996_i)
      {
        {
          bool _4997_in_bounds = true;
          int32_t _11467_ = (int)0;
          int32_t _11468_ = _4970_nd;
          for (int32_t _4998_j = _11467_; _4998_j < _11468_; ++_4998_j)
          {
            {
              int64_t _4999_kj = ((_4996_i / _ptr__4986_st[_4998_j]) % _ptr__4983_wi32[safe_add( _4975_shape_base,_4998_j )]);
              _4997_in_bounds = (_4997_in_bounds && ((_4999_kj >= ((*first)(_4998_j))) && (_4999_kj < ((*last)(_4998_j)))));
            }
          }
          if (_4997_in_bounds)
          {
            {
              _4990_rnnz += (_ptr__4983_wi32[safe_add( safe_add( _4976_ptr_base,_4996_i ),(int)1 )] - _ptr__4983_wi32[safe_add( _4976_ptr_base,_4996_i )]);
              if ((_4973_ncodeatom > (int)0))
              {
                {
                  _4988_rncodeatom += (_ptr__4983_wi32[safe_add( _4981_codeptr,_ptr__4983_wi32[safe_add( safe_add( _4976_ptr_base,_4996_i ),(int)1 )] )] - _ptr__4983_wi32[safe_add( _4981_codeptr,_ptr__4983_wi32[safe_add( _4976_ptr_base,_4996_i )] )]);
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int32_t> _11469_;
  for (int32_t _5001_i = (int)0, _11470_ = _4970_nd; _5001_i < _11470_ ; ++_5001_i)
  {
    _11469_.push_back((((*last)(_5001_i)) - ((*first)(_5001_i))));
  }
  auto _11471_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11469_.size()),_11469_.begin(),_11469_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5000_rshape = _11471_;
  _checked_ptr_1<int32_t> _ptr__5000_rshape(_5000_rshape ? _5000_rshape->raw() : nullptr,_5000_rshape ? _5000_rshape->size(0) : 0);
  bool _5002_rhassp = (_4989_rnelem < ::mosek::fusion::p_Set::size(_5000_rshape));
  _4967_rs->alloc_expr(_4970_nd,_4989_rnelem,_4990_rnnz,_5002_rhassp,_4988_rncodeatom);
  int32_t _5003_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->shape_base;
  int32_t _5004_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->cof_base;
  int32_t _5005_rnidx_base = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->nidxs_base;
  int32_t _11472_;
  bool _11473_ = _5002_rhassp;
  if (_11473_)
  {
    _11472_ = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->sp_base;
  }
  else
  {
    _11472_ = _4967_rs->alloci64(_4989_rnelem);
  }
  int32_t _5006_rsp_base = _11472_;
  int32_t _5007_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->ptr_base;
  int32_t _5008_rcode = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->code_base;
  int32_t _5009_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->codeptr_base;
  int32_t _5010_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5011_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5011_ri32(_5011_ri32 ? _5011_ri32->raw() : nullptr,_5011_ri32 ? _5011_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5012_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5012_ri64(_5012_ri64 ? _5012_ri64->raw() : nullptr,_5012_ri64 ? _5012_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5013_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4967_rs)->f64;
  _checked_ptr_1<double> _ptr__5013_rf64(_5013_rf64 ? _5013_rf64->raw() : nullptr,_5013_rf64 ? _5013_rf64->size(0) : 0);
  int32_t _11474_ = (int)0;
  int32_t _11475_ = _4970_nd;
  for (int32_t _5014_i = _11474_; _5014_i < _11475_; ++_5014_i)
  {
    {
      _ptr__5011_ri32[safe_add( _5003_rshape_base,_5014_i )] = _ptr__5000_rshape[_5014_i];
    }
  }
  _ptr__5011_ri32[_5007_rptr_base] = (int)0;
  if ((_4988_rncodeatom > (int)0))
  {
    {
      _ptr__5011_ri32[_5009_rcodeptr] = (int)0;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5015_rst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4970_nd)));
  _checked_ptr_1<int64_t> _ptr__5015_rst(_5015_rst ? _5015_rst->raw() : nullptr,_5015_rst ? _5015_rst->size(0) : 0);
  _ptr__5015_rst[(_4970_nd - (int)1)] = (int)1;
  int32_t _11476_ = (int)1;
  int32_t _11477_ = _4970_nd;
  for (int32_t _5016_j = _11476_; _5016_j < _11477_; ++_5016_j)
  {
    {
      _ptr__5015_rst[((_4970_nd - _5016_j) - (int)1)] = safe_mul( _ptr__5015_rst[(_4970_nd - _5016_j)],_ptr__5000_rshape[(_4970_nd - _5016_j)] );
    }
  }
  int32_t _5017_codei = (int)0;
  int32_t _5018_kelem = (int)0;
  int32_t _5019_knz = (int)0;
  if (_4974_hassp)
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5020_key = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4970_nd)));
      _checked_ptr_1<int32_t> _ptr__5020_key(_5020_key ? _5020_key->raw() : nullptr,_5020_key ? _5020_key->size(0) : 0);
      int32_t _11478_ = (int)0;
      int32_t _11479_ = _4971_nelem;
      for (int32_t _5021_i = _11478_; _5021_i < _11479_; ++_5021_i)
      {
        {
          bool _5022_in_bounds = true;
          int32_t _11480_ = (int)0;
          int32_t _11481_ = _4970_nd;
          for (int32_t _5023_j = _11480_; _5023_j < _11481_; ++_5023_j)
          {
            {
              _ptr__5020_key[_5023_j] = (int32_t)((_ptr__4984_wi64[safe_add( _4977_sp_base,_5021_i )] / _ptr__4986_st[_5023_j]) % _ptr__4983_wi32[safe_add( _4975_shape_base,_5023_j )]);
              _5022_in_bounds = (_5022_in_bounds && ((_ptr__5020_key[_5023_j] >= ((*first)(_5023_j))) && (_ptr__5020_key[_5023_j] < ((*last)(_5023_j)))));
            }
          }
          if (_5022_in_bounds)
          {
            {
              int32_t _11482_ = _ptr__4983_wi32[safe_add( _4976_ptr_base,_5021_i )];
              int32_t _11483_ = _ptr__4983_wi32[safe_add( safe_add( _4976_ptr_base,_5021_i ),(int)1 )];
              for (int32_t _5024_j = _11482_; _5024_j < _11483_; ++_5024_j)
              {
                {
                  _ptr__5012_ri64[safe_add( _5005_rnidx_base,_5019_knz )] = _ptr__4984_wi64[safe_add( _4978_nidxs_base,_5024_j )];
                  _ptr__5013_rf64[safe_add( _5004_rcof_base,_5019_knz )] = _ptr__4985_wf64[safe_add( _4979_cof_base,_5024_j )];
                  if ((_4988_rncodeatom > (int)0))
                  {
                    {
                      int32_t _11484_ = _ptr__4983_wi32[safe_add( _4981_codeptr,_5024_j )];
                      int32_t _11485_ = _ptr__4983_wi32[safe_add( safe_add( _4981_codeptr,_5024_j ),(int)1 )];
                      for (int32_t _5025_k = _11484_; _5025_k < _11485_; ++_5025_k)
                      {
                        {
                          _ptr__5011_ri32[safe_add( _5008_rcode,_5017_codei )] = _ptr__4983_wi32[safe_add( _4980_code,_5025_k )];
                          _ptr__5013_rf64[safe_add( _5010_rcconst,_5017_codei )] = _ptr__4985_wf64[safe_add( _4982_cconst,_5025_k )];
                          ++ _5017_codei;
                        }
                      }
                      _ptr__5011_ri32[safe_add( safe_add( _5009_rcodeptr,_5019_knz ),(int)1 )] = _5017_codei;
                    }
                  }
                  {}
                  ++ _5019_knz;
                }
              }
              int64_t _5026_newidx = (int64_t)0;
              int32_t _11486_ = (int)0;
              int32_t _11487_ = _4970_nd;
              for (int32_t _5027_j = _11486_; _5027_j < _11487_; ++_5027_j)
              {
                {
                  _5026_newidx += safe_mul( _ptr__5015_rst[_5027_j],(_ptr__5020_key[_5027_j] - ((*first)(_5027_j))) );
                }
              }
              _ptr__5012_ri64[safe_add( _5006_rsp_base,_5018_kelem )] = _5026_newidx;
              _ptr__5011_ri32[safe_add( safe_add( _5007_rptr_base,_5018_kelem ),(int)1 )] = _5019_knz;
              ++ _5018_kelem;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int32_t _11488_ = (int)0;
      int32_t _11489_ = _4971_nelem;
      for (int32_t _5028_i = _11488_; _5028_i < _11489_; ++_5028_i)
      {
        {
          bool _5029_in_bounds = true;
          int32_t _11490_ = (int)0;
          int32_t _11491_ = _4970_nd;
          for (int32_t _5030_j = _11490_; _5030_j < _11491_; ++_5030_j)
          {
            {
              int64_t _5031_kj = ((_5028_i / _ptr__4986_st[_5030_j]) % _ptr__4983_wi32[safe_add( _4975_shape_base,_5030_j )]);
              _5029_in_bounds = (_5029_in_bounds && ((_5031_kj >= ((*first)(_5030_j))) && (_5031_kj < ((*last)(_5030_j)))));
            }
          }
          if (_5029_in_bounds)
          {
            {
              int32_t _11492_ = _ptr__4983_wi32[safe_add( _4976_ptr_base,_5028_i )];
              int32_t _11493_ = _ptr__4983_wi32[safe_add( safe_add( _4976_ptr_base,_5028_i ),(int)1 )];
              for (int32_t _5032_j = _11492_; _5032_j < _11493_; ++_5032_j)
              {
                {
                  _ptr__5012_ri64[safe_add( _5005_rnidx_base,_5019_knz )] = _ptr__4984_wi64[safe_add( _4978_nidxs_base,_5032_j )];
                  _ptr__5013_rf64[safe_add( _5004_rcof_base,_5019_knz )] = _ptr__4985_wf64[safe_add( _4979_cof_base,_5032_j )];
                  if ((_4988_rncodeatom > (int)0))
                  {
                    {
                      int32_t _11494_ = _ptr__4983_wi32[safe_add( _4981_codeptr,_5032_j )];
                      int32_t _11495_ = _ptr__4983_wi32[safe_add( safe_add( _4981_codeptr,_5032_j ),(int)1 )];
                      for (int32_t _5033_k = _11494_; _5033_k < _11495_; ++_5033_k)
                      {
                        {
                          _ptr__5011_ri32[safe_add( _5008_rcode,_5017_codei )] = _ptr__4983_wi32[safe_add( _4980_code,_5033_k )];
                          _ptr__5013_rf64[safe_add( _5010_rcconst,_5017_codei )] = _ptr__4985_wf64[safe_add( _4982_cconst,_5033_k )];
                          ++ _5017_codei;
                        }
                      }
                      _ptr__5011_ri32[safe_add( safe_add( _5009_rcodeptr,_5019_knz ),(int)1 )] = _5017_codei;
                    }
                  }
                  {}
                  ++ _5019_knz;
                }
              }
              _ptr__5011_ri32[safe_add( safe_add( _5007_rptr_base,_5018_kelem ),(int)1 )] = _5019_knz;
              ++ _5018_kelem;
            }
          }
          {}
        }
      }
    }
  }
  if ((!_5002_rhassp))
  {
    {
      _4967_rs->popi64(_4989_rnelem);
    }
  }
  {}
}
// End mosek.fusion.ExprSlice.eval

// Begin mosek.fusion.ExprSlice.makeShape
// Method mosek.fusion.ExprSlice.makeShape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:17:6-24:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _5034_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _5035_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _5036_last)
{
  _checked_ptr_1<int32_t> _ptr__5034_shape(_5034_shape ? _5034_shape->raw() : nullptr, _5034_shape ? _5034_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5035_first(_5035_first ? _5035_first->raw() : nullptr, _5035_first ? _5035_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5036_last(_5036_last ? _5036_last->raw() : nullptr, _5036_last ? _5036_last->size(0) : 0);
  if ((((int)((_5034_shape)->size(0)) != (int)((_5035_first)->size(0))) || ((int)((_5034_shape)->size(0)) != (int)((_5036_last)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int32_t _11496_ = (int)0;
  int32_t _11497_ = (int)((_5034_shape)->size(0));
  for (int32_t _5037_i = _11496_; _5037_i < _11497_; ++_5037_i)
  {
    {
      if (((_ptr__5035_first[_5037_i] < (int)0) || ((_ptr__5036_last[_5037_i] < _ptr__5035_first[_5037_i]) || (_ptr__5036_last[_5037_i] > _ptr__5034_shape[_5037_i]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _11498_;
  for (int32_t _5038_i = (int)0, _11499_ = (int)((_5034_shape)->size(0)); _5038_i < _11499_ ; ++_5038_i)
  {
    _11498_.push_back((_ptr__5036_last[_5038_i] - _ptr__5035_first[_5038_i]));
  }
  auto _11500_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11498_.size()),_11498_.begin(),_11498_.end()));
  return _11500_;
}
// End mosek.fusion.ExprSlice.makeShape

// Begin mosek.fusion.ExprSlice.toString
// Method mosek.fusion.ExprSlice.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprSlice.monty:9:6-15:7
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSlice::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5039_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int32_t _11501_ = (int)1;
  int32_t _11502_ = (int)((first)->size(0));
  for (int32_t _5040_i = _11501_; _5040_i < _11502_; ++_5040_i)
  {
    {
      _5039_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_5040_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_5040_i)));
    }
  }
  _5039_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _5039_sb->toString();
}
// End mosek.fusion.ExprSlice.toString

void mosek::fusion::p_ExprSlice::destroy()
{
  last.reset();
  first.reset();
  expr.reset();
}
void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }
// } class ExprSlice
// class ExprPermuteDims { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:207:4-697:5
mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }
mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims
  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprPermuteDims.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:221:6-238:7
mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _5041_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _5042_expr)
{ return new mosek::fusion::ExprPermuteDims(_5041_perm,_5042_expr); }
mosek::fusion::ExprPermuteDims::ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _5041_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _5042_expr) : 
   ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this))
{ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_5041_perm,_5042_expr); }
void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _5041_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _5042_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5041_perm(_5041_perm ? _5041_perm->raw() : nullptr, _5041_perm ? _5041_perm->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_5041_perm,_5042_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5043_shape = _5042_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__5043_shape(_5043_shape ? _5043_shape->raw() : nullptr,_5043_shape ? _5043_shape->size(0) : 0);
    if (((int)((_5041_perm)->size(0)) != (int)((_5043_shape)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation length"));
      }
    }
    {}
    std::vector<int32_t> _11503_;
    for (int32_t _5045_i = (int)0, _11504_ = (int)((_5041_perm)->size(0)); _5045_i < _11504_ ; ++_5045_i)
    {
      _11503_.push_back((int)0);
    }
    auto _11505_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11503_.size()),_11503_.begin(),_11503_.end()));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5044_check = _11505_;
    _checked_ptr_1<int32_t> _ptr__5044_check(_5044_check ? _5044_check->raw() : nullptr,_5044_check ? _5044_check->size(0) : 0);
    int32_t _11506_ = (int)0;
    int32_t _11507_ = (int)((_5044_check)->size(0));
    for (int32_t _5046_i = _11506_; _5046_i < _11507_; ++_5046_i)
    {
      {
        if (((_ptr__5041_perm[_5046_i] < (int)0) || (_ptr__5041_perm[_5046_i] > (int)((_5043_shape)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation index"));
          }
        }
        {}
        ++ _ptr__5044_check[_ptr__5041_perm[_5046_i]];
      }
    }
    int32_t _11508_ = (int)0;
    int32_t _11509_ = (int)((_5044_check)->size(0));
    for (int32_t _5047_i = _11508_; _5047_i < _11509_; ++_5047_i)
    {
      {
        if (((_ptr__5044_check[_5047_i] < (int)1) || (_ptr__5044_check[_5047_i] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Dimension permutation contains duplicates"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprPermuteDims.ctor

// mosek.fusion.ExprPermuteDims.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:215:6-219:7
mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _5048_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _5049_expr,
    int32_t _5050_validated)
{ return new mosek::fusion::ExprPermuteDims(_5048_perm,_5049_expr,_5050_validated); }
mosek::fusion::ExprPermuteDims::ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _5048_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _5049_expr,
    int32_t _5050_validated) : 
   ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this))
{ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_5048_perm,_5049_expr,_5050_validated); }
void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _5048_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _5049_expr,
    int32_t _5050_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5048_perm(_5048_perm ? _5048_perm->raw() : nullptr, _5048_perm ? _5048_perm->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5049_expr->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprPermuteDims::computeshape(_5048_perm,_5049_expr->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _5049_expr;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_5048_perm);
  }
}
// mosek.fusion.ExprPermuteDims.ctor

// Begin mosek.fusion.ExprPermuteDims.eval
// Method mosek.fusion.ExprPermuteDims.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:240:6-355:7
void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5051_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5052_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5053_xs) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_5051_rs,_5052_ws,_5053_xs); }
void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5051_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5052_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5053_xs)
{
  expr->eval(_5052_ws,_5051_rs,_5053_xs);
  _5052_ws->pop_expr();
  int32_t _5054_nd = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->nd;
  int32_t _5055_nelem = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->nelem;
  int32_t _5056_nnz = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->nnz;
  int32_t _5057_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->ncodeatom;
  bool _5058_hassp = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->hassp;
  int32_t _5059_shape_base = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->shape_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5060_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5054_nd)));
  _checked_ptr_1<int64_t> _ptr__5060_stride(_5060_stride ? _5060_stride->raw() : nullptr,_5060_stride ? _5060_stride->size(0) : 0);
  _ptr__5060_stride[(_5054_nd - (int)1)] = (int)1;
  int32_t _11510_ = (int)1;
  int32_t _11511_ = _5054_nd;
  for (int32_t _5061_i = _11510_; _5061_i < _11511_; ++_5061_i)
  {
    {
      _ptr__5060_stride[((_5054_nd - _5061_i) - (int)1)] = safe_mul( _ptr__5060_stride[(_5054_nd - _5061_i)],((*mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->i32)((safe_add( _5059_shape_base,_5054_nd ) - _5061_i))) );
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5062_dstride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5054_nd)));
  _checked_ptr_1<int64_t> _ptr__5062_dstride(_5062_dstride ? _5062_dstride->raw() : nullptr,_5062_dstride ? _5062_dstride->size(0) : 0);
  _ptr__5062_dstride[(_5054_nd - (int)1)] = (int)1;
  int32_t _11512_ = (int)1;
  int32_t _11513_ = _5054_nd;
  for (int32_t _5063_i = _11512_; _5063_i < _11513_; ++_5063_i)
  {
    {
      _ptr__5062_dstride[((_5054_nd - _5063_i) - (int)1)] = safe_mul( _ptr__5062_dstride[(_5054_nd - _5063_i)],((*mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->i32)(safe_add( _5059_shape_base,((*dperm)((_5054_nd - _5063_i))) ))) );
    }
  }
  int32_t _5064_eptr_base = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->ptr_base;
  int32_t _5065_esp_base = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->sp_base;
  int32_t _5066_enidxs_base = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->nidxs_base;
  int32_t _5067_ecof_base = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->cof_base;
  int32_t _5068_code = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->code_base;
  int32_t _5069_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->codeptr_base;
  int32_t _5070_cconst = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5071_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5071_wi32(_5071_wi32 ? _5071_wi32->raw() : nullptr,_5071_wi32 ? _5071_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5072_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5072_wi64(_5072_wi64 ? _5072_wi64->raw() : nullptr,_5072_wi64 ? _5072_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5073_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5052_ws)->f64;
  _checked_ptr_1<double> _ptr__5073_wf64(_5073_wf64 ? _5073_wf64->raw() : nullptr,_5073_wf64 ? _5073_wf64->size(0) : 0);
  _5051_rs->alloc_expr(_5054_nd,_5055_nelem,_5056_nnz,_5058_hassp,_5057_ncodeatom);
  int32_t _5074_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->ptr_base;
  int32_t _5075_rshape = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->shape_base;
  int32_t _5076_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->nidxs_base;
  int32_t _5077_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->sp_base;
  int32_t _5078_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->cof_base;
  int32_t _5079_rcode = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->code_base;
  int32_t _5080_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->codeptr_base;
  int32_t _5081_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5082_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5082_ri32(_5082_ri32 ? _5082_ri32->raw() : nullptr,_5082_ri32 ? _5082_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5083_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5083_ri64(_5083_ri64 ? _5083_ri64->raw() : nullptr,_5083_ri64 ? _5083_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5084_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5051_rs)->f64;
  _checked_ptr_1<double> _ptr__5084_rf64(_5084_rf64 ? _5084_rf64->raw() : nullptr,_5084_rf64 ? _5084_rf64->size(0) : 0);
  int32_t _11514_ = (int)0;
  int32_t _11515_ = _5054_nd;
  for (int32_t _5085_i = _11514_; _5085_i < _11515_; ++_5085_i)
  {
    {
      _ptr__5082_ri32[safe_add( _5075_rshape,_5085_i )] = _ptr__5071_wi32[safe_add( _5059_shape_base,((*dperm)(_5085_i)) )];
    }
  }
  if (_5058_hassp)
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5086_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5055_nelem)));
      _checked_ptr_1<int64_t> _ptr__5086_sp(_5086_sp ? _5086_sp->raw() : nullptr,_5086_sp ? _5086_sp->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int64_t,1 > > _5087_idx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5054_nd)));
        _checked_ptr_1<int64_t> _ptr__5087_idx(_5087_idx ? _5087_idx->raw() : nullptr,_5087_idx ? _5087_idx->size(0) : 0);
        int32_t _11516_ = (int)0;
        int32_t _11517_ = _5055_nelem;
        for (int32_t _5088_i = _11516_; _5088_i < _11517_; ++_5088_i)
        {
          {
            int64_t _5089_k = _ptr__5072_wi64[safe_add( _5065_esp_base,_5088_i )];
            int32_t _11518_ = (int)0;
            int32_t _11519_ = _5054_nd;
            for (int32_t _5090_j = _11518_; _5090_j < _11519_; ++_5090_j)
            {
              {
                _ptr__5087_idx[_5090_j] = (_5089_k / _ptr__5060_stride[_5090_j]);
                _5089_k %= _ptr__5060_stride[_5090_j];
              }
            }
            int64_t _5091_p = _ptr__5087_idx[((*dperm)((int)0))];
            int32_t _11520_ = (int)1;
            int32_t _11521_ = _5054_nd;
            for (int32_t _5092_j = _11520_; _5092_j < _11521_; ++_5092_j)
            {
              {
                _5091_p = safe_add( safe_mul( _5091_p,_ptr__5082_ri32[safe_add( _5075_rshape,_5092_j )] ),_ptr__5087_idx[((*dperm)(_5092_j))] );
              }
            }
            _ptr__5086_sp[_5088_i] = _5091_p;
          }
        }
      }
      std::vector<int64_t> _11522_;
      for (int32_t _5094_i = (int)0, _11523_ = _5055_nelem; _5094_i < _11523_ ; ++_5094_i)
      {
        _11522_.push_back(_5094_i);
      }
      auto _11524_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_11522_.size()),_11522_.begin(),_11522_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5093_perm = _11524_;
      _checked_ptr_1<int64_t> _ptr__5093_perm(_5093_perm ? _5093_perm->raw() : nullptr,_5093_perm ? _5093_perm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_5093_perm,_5086_sp,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_5055_nelem));
      _ptr__5082_ri32[_5074_rptr_base] = (int)0;
      if ((_5057_ncodeatom > (int)0))
      {
        {
          _ptr__5082_ri32[_5080_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _5095_codei = (int)0;
      int32_t _5096_kelem = (int)0;
      int32_t _5097_knz = (int)0;
      int32_t _11525_ = (int)0;
      int32_t _11526_ = _5055_nelem;
      for (int32_t _5098_i = _11525_; _5098_i < _11526_; ++_5098_i)
      {
        {
          int64_t _5099_ii = _ptr__5093_perm[_5098_i];
          int32_t _11527_ = _ptr__5071_wi32[safe_add( _5064_eptr_base,_5099_ii )];
          int32_t _11528_ = _ptr__5071_wi32[safe_add( safe_add( _5064_eptr_base,_5099_ii ),(int)1 )];
          for (int32_t _5100_j = _11527_; _5100_j < _11528_; ++_5100_j)
          {
            {
              _ptr__5083_ri64[safe_add( _5076_rnidxs_base,_5097_knz )] = _ptr__5072_wi64[safe_add( _5066_enidxs_base,_5100_j )];
              _ptr__5084_rf64[safe_add( _5078_rcof_base,_5097_knz )] = _ptr__5073_wf64[safe_add( _5067_ecof_base,_5100_j )];
              if ((_5057_ncodeatom > (int)0))
              {
                {
                  int32_t _11529_ = _ptr__5071_wi32[safe_add( _5069_codeptr,_5100_j )];
                  int32_t _11530_ = _ptr__5071_wi32[safe_add( safe_add( _5069_codeptr,_5100_j ),(int)1 )];
                  for (int32_t _5101_l = _11529_; _5101_l < _11530_; ++_5101_l)
                  {
                    {
                      _ptr__5082_ri32[safe_add( _5079_rcode,_5095_codei )] = _ptr__5071_wi32[safe_add( _5068_code,_5101_l )];
                      _ptr__5084_rf64[safe_add( _5081_rcconst,_5095_codei )] = _ptr__5073_wf64[safe_add( _5070_cconst,_5101_l )];
                      ++ _5095_codei;
                    }
                  }
                  _ptr__5082_ri32[safe_add( safe_add( _5080_rcodeptr,_5097_knz ),(int)1 )] = _5095_codei;
                }
              }
              {}
              ++ _5097_knz;
            }
          }
          _ptr__5083_ri64[safe_add( _5077_rsp_base,_5098_i )] = _ptr__5086_sp[_5099_ii];
          ++ _5096_kelem;
          _ptr__5082_ri32[safe_add( safe_add( _5074_rptr_base,_5098_i ),(int)1 )] = _5097_knz;
        }
      }
    }
  }
  else
  {
    {
      _ptr__5082_ri32[_5074_rptr_base] = (int)0;
      if ((_5057_ncodeatom > (int)0))
      {
        {
          _ptr__5082_ri32[_5080_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _5102_codei = (int)0;
      int32_t _5103_kelem = (int)0;
      int32_t _5104_knz = (int)0;
      int32_t _11531_ = (int)0;
      int32_t _11532_ = _5055_nelem;
      for (int32_t _5105_i = _11531_; _5105_i < _11532_; ++_5105_i)
      {
        {
          int64_t _5106_ii = (int64_t)0;
          int64_t _5107_k = _5105_i;
          int32_t _11533_ = (int)0;
          int32_t _11534_ = _5054_nd;
          for (int32_t _5108_j = _11533_; _5108_j < _11534_; ++_5108_j)
          {
            {
              _5106_ii += safe_mul( (_5107_k / _ptr__5062_dstride[_5108_j]),_ptr__5060_stride[((*dperm)(_5108_j))] );
              _5107_k %= _ptr__5062_dstride[_5108_j];
            }
          }
          int32_t _11535_ = _ptr__5071_wi32[safe_add( _5064_eptr_base,_5106_ii )];
          int32_t _11536_ = _ptr__5071_wi32[safe_add( safe_add( _5064_eptr_base,_5106_ii ),(int)1 )];
          for (int32_t _5109_j = _11535_; _5109_j < _11536_; ++_5109_j)
          {
            {
              _ptr__5083_ri64[safe_add( _5076_rnidxs_base,_5104_knz )] = _ptr__5072_wi64[safe_add( _5066_enidxs_base,_5109_j )];
              _ptr__5084_rf64[safe_add( _5078_rcof_base,_5104_knz )] = _ptr__5073_wf64[safe_add( _5067_ecof_base,_5109_j )];
              if ((_5057_ncodeatom > (int)0))
              {
                {
                  int32_t _11537_ = _ptr__5071_wi32[safe_add( _5069_codeptr,_5109_j )];
                  int32_t _11538_ = _ptr__5071_wi32[safe_add( safe_add( _5069_codeptr,_5109_j ),(int)1 )];
                  for (int32_t _5110_l = _11537_; _5110_l < _11538_; ++_5110_l)
                  {
                    {
                      _ptr__5082_ri32[safe_add( _5079_rcode,_5102_codei )] = _ptr__5071_wi32[safe_add( _5068_code,_5110_l )];
                      _ptr__5084_rf64[safe_add( _5081_rcconst,_5102_codei )] = _ptr__5073_wf64[safe_add( _5070_cconst,_5110_l )];
                      ++ _5102_codei;
                    }
                  }
                  _ptr__5082_ri32[safe_add( safe_add( _5080_rcodeptr,_5104_knz ),(int)1 )] = _5102_codei;
                }
              }
              {}
              ++ _5104_knz;
            }
          }
          ++ _5103_kelem;
          _ptr__5082_ri32[safe_add( _5074_rptr_base,_5103_kelem )] = _5104_knz;
        }
      }
    }
  }
}
// End mosek.fusion.ExprPermuteDims.eval

// Begin mosek.fusion.ExprPermuteDims.computeshape
// Method mosek.fusion.ExprPermuteDims.computeshape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:211:6-213:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _5111_perm,std::shared_ptr< monty::ndarray< int32_t,1 > > _5112_shape)
{
  _checked_ptr_1<int32_t> _ptr__5111_perm(_5111_perm ? _5111_perm->raw() : nullptr, _5111_perm ? _5111_perm->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5112_shape(_5112_shape ? _5112_shape->raw() : nullptr, _5112_shape ? _5112_shape->size(0) : 0);
  std::vector<int32_t> _11539_;
  for (int32_t _5113_i = (int)0, _11540_ = (int)((_5111_perm)->size(0)); _5113_i < _11540_ ; ++_5113_i)
  {
    _11539_.push_back(_ptr__5112_shape[_ptr__5111_perm[_5113_i]]);
  }
  auto _11541_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11539_.size()),_11539_.begin(),_11539_.end()));
  return _11541_;
}
// End mosek.fusion.ExprPermuteDims.computeshape

void mosek::fusion::p_ExprPermuteDims::destroy()
{
  dperm.reset();
  expr.reset();
}
void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }
// } class ExprPermuteDims
// class ExprTranspose { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:4:4-199:5
mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }
mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprTranspose::p_ExprTranspose
  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprTranspose.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:18:6-21:7
mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose
  (monty::rc_ptr< ::mosek::fusion::Expression > _5114_expr)
{ return new mosek::fusion::ExprTranspose(_5114_expr); }
mosek::fusion::ExprTranspose::ExprTranspose
  (monty::rc_ptr< ::mosek::fusion::Expression > _5114_expr) : 
   ExprTranspose(new mosek::fusion::p_ExprTranspose(this))
{ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_5114_expr); }
void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5114_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_5114_expr->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprTranspose::transposeShape(_5114_expr->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _5114_expr;
  }
}
// mosek.fusion.ExprTranspose.ctor

// Begin mosek.fusion.ExprTranspose.eval
// Method mosek.fusion.ExprTranspose.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:23:6-149:7
void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5115_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5116_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5117_xs) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_5115_rs,_5116_ws,_5117_xs); }
void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5115_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5116_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5117_xs)
{
  monty::rc_ptr< ::mosek::fusion::Expression > _11542_ = expr;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::ExprTranspose*>(_11542_.get()))
  {
    ::mosek::fusion::ExprTranspose::t _5118_e (dynamic_cast<::mosek::fusion::ExprTranspose*>(_11542_.get()));
    {
      mosek::fusion::p_ExprTranspose::_get_impl(_5118_e)->expr->eval(_5115_rs,_5116_ws,_5117_xs);
    }
  }
  else
  {
    mosek::fusion::Expression::t _5119_expr = _11542_;
    {
      _5119_expr->eval(_5116_ws,_5115_rs,_5117_xs);
      _5116_ws->pop_expr();
      if ((mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->nd != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
        }
      }
      else
      {
        {
          int32_t _5120_shape_base = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->shape_base;
          int32_t _5121_nelem = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->nelem;
          int32_t _5122_nnz = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->nnz;
          bool _5123_hassp = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->hassp;
          int32_t _5124_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->ncodeatom;
          int32_t _5125_eptr_base = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->ptr_base;
          int32_t _5126_esp_base = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->sp_base;
          int32_t _5127_enidx_base = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->nidxs_base;
          int32_t _5128_ecof_base = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->cof_base;
          int32_t _5129_code = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->code_base;
          int32_t _5130_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->codeptr_base;
          int32_t _5131_cconst = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->cconst_base;
          int32_t _5132_dim0 = ((*mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->i32)(_5120_shape_base));
          int32_t _5133_dim1 = ((*mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->i32)(safe_add( _5120_shape_base,(int)1 )));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5134_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->i32;
          _checked_ptr_1<int32_t> _ptr__5134_wi32(_5134_wi32 ? _5134_wi32->raw() : nullptr,_5134_wi32 ? _5134_wi32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5135_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->i64;
          _checked_ptr_1<int64_t> _ptr__5135_wi64(_5135_wi64 ? _5135_wi64->raw() : nullptr,_5135_wi64 ? _5135_wi64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5136_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5116_ws)->f64;
          _checked_ptr_1<double> _ptr__5136_wf64(_5136_wf64 ? _5136_wf64->raw() : nullptr,_5136_wf64 ? _5136_wf64->size(0) : 0);
          _5115_rs->alloc_expr((int)2,_5121_nelem,_5122_nnz,_5123_hassp,_5124_ncodeatom);
          int32_t _5137_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->ptr_base;
          int32_t _5138_rnidx_base = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->nidxs_base;
          int32_t _5139_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->sp_base;
          int32_t _5140_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->cof_base;
          int32_t _5141_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->shape_base;
          int32_t _5142_rcode = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->code_base;
          int32_t _5143_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->codeptr_base;
          int32_t _5144_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->cconst_base;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5145_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5145_ri32(_5145_ri32 ? _5145_ri32->raw() : nullptr,_5145_ri32 ? _5145_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5146_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5146_ri64(_5146_ri64 ? _5146_ri64->raw() : nullptr,_5146_ri64 ? _5146_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5147_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5115_rs)->f64;
          _checked_ptr_1<double> _ptr__5147_rf64(_5147_rf64 ? _5147_rf64->raw() : nullptr,_5147_rf64 ? _5147_rf64->size(0) : 0);
          _ptr__5145_ri32[_5141_rshape_base] = _5133_dim1;
          _ptr__5145_ri32[safe_add( _5141_rshape_base,(int)1 )] = _5132_dim0;
          _ptr__5145_ri32[_5137_rptr_base] = (int)0;
          if ((_5124_ncodeatom > (int)0))
          {
            {
              _ptr__5145_ri32[_5143_rcodeptr] = (int)0;
            }
          }
          {}
          if (_5123_hassp)
          {
            {
              int32_t _5148_perm = _5117_xs->alloci32(_5121_nelem);
              int32_t _5149_ptr = _5117_xs->alloci32(safe_add( _5133_dim1,(int)1 ));
              std::shared_ptr< monty::ndarray< int32_t,1 > > _5150_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5117_xs)->i32;
              _checked_ptr_1<int32_t> _ptr__5150_xi32(_5150_xi32 ? _5150_xi32->raw() : nullptr,_5150_xi32 ? _5150_xi32->size(0) : 0);
              {
                int32_t _11543_ = (int)0;
                int32_t _11544_ = safe_add( _5133_dim1,(int)1 );
                for (int32_t _5151_i = _11543_; _5151_i < _11544_; ++_5151_i)
                {
                  {
                    _ptr__5150_xi32[safe_add( _5149_ptr,_5151_i )] = (int)0;
                  }
                }
                int32_t _11545_ = (int)0;
                int32_t _11546_ = _5121_nelem;
                for (int32_t _5152_i = _11545_; _5152_i < _11546_; ++_5152_i)
                {
                  {
                    ++ _ptr__5150_xi32[safe_add( safe_add( _5149_ptr,(_ptr__5135_wi64[safe_add( _5126_esp_base,_5152_i )] % _5133_dim1) ),(int)1 )];
                  }
                }
                int32_t _11547_ = (int)0;
                int32_t _11548_ = _5133_dim1;
                for (int32_t _5153_i = _11547_; _5153_i < _11548_; ++_5153_i)
                {
                  {
                    _ptr__5150_xi32[safe_add( safe_add( _5149_ptr,_5153_i ),(int)1 )] += _ptr__5150_xi32[safe_add( _5149_ptr,_5153_i )];
                  }
                }
                int32_t _11549_ = (int)0;
                int32_t _11550_ = _5121_nelem;
                for (int32_t _5154_i = _11549_; _5154_i < _11550_; ++_5154_i)
                {
                  {
                    int64_t _5155_j = (_ptr__5135_wi64[safe_add( _5126_esp_base,_5154_i )] % _5133_dim1);
                    _ptr__5150_xi32[safe_add( _5148_perm,_ptr__5150_xi32[safe_add( _5149_ptr,_5155_j )] )] = _5154_i;
                    ++ _ptr__5150_xi32[safe_add( _5149_ptr,_5155_j )];
                  }
                }
                _ptr__5145_ri32[_5137_rptr_base] = (int)0;
                int32_t _5156_codei = (int)0;
                int32_t _5157_p = (int)0;
                int32_t _11551_ = (int)0;
                int32_t _11552_ = _5121_nelem;
                for (int32_t _5158_i = _11551_; _5158_i < _11552_; ++_5158_i)
                {
                  {
                    int32_t _5159_j = _ptr__5150_xi32[safe_add( _5148_perm,_5158_i )];
                    int32_t _11553_ = _ptr__5134_wi32[safe_add( _5125_eptr_base,_5159_j )];
                    int32_t _11554_ = _ptr__5134_wi32[safe_add( safe_add( _5125_eptr_base,_5159_j ),(int)1 )];
                    for (int32_t _5160_k = _11553_; _5160_k < _11554_; ++_5160_k)
                    {
                      {
                        _ptr__5146_ri64[safe_add( _5138_rnidx_base,_5157_p )] = _ptr__5135_wi64[safe_add( _5127_enidx_base,_5160_k )];
                        _ptr__5147_rf64[safe_add( _5140_rcof_base,_5157_p )] = _ptr__5136_wf64[safe_add( _5128_ecof_base,_5160_k )];
                        if ((_5124_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11555_ = _ptr__5134_wi32[safe_add( _5130_codeptr,_5160_k )];
                            int32_t _11556_ = _ptr__5134_wi32[safe_add( safe_add( _5130_codeptr,_5160_k ),(int)1 )];
                            for (int32_t _5161_l = _11555_; _5161_l < _11556_; ++_5161_l)
                            {
                              {
                                _ptr__5145_ri32[safe_add( _5142_rcode,_5156_codei )] = _ptr__5134_wi32[safe_add( _5129_code,_5161_l )];
                                _ptr__5147_rf64[safe_add( _5144_rcconst,_5156_codei )] = _ptr__5136_wf64[safe_add( _5131_cconst,_5161_l )];
                                ++ _5156_codei;
                              }
                            }
                            _ptr__5145_ri32[safe_add( safe_add( _5143_rcodeptr,_5157_p ),(int)1 )] = _5156_codei;
                          }
                        }
                        {}
                        ++ _5157_p;
                      }
                    }
                    int64_t _5162_ii = (_ptr__5135_wi64[safe_add( _5126_esp_base,_5159_j )] / _5133_dim1);
                    int64_t _5163_jj = (_ptr__5135_wi64[safe_add( _5126_esp_base,_5159_j )] % _5133_dim1);
                    _ptr__5145_ri32[safe_add( safe_add( _5137_rptr_base,_5158_i ),(int)1 )] = _5157_p;
                    _ptr__5146_ri64[safe_add( _5139_rsp_base,_5158_i )] = safe_add( safe_mul( _5163_jj,_5132_dim0 ),_5162_ii );
                  }
                }
              }
            }
          }
          else
          {
            {
              _ptr__5145_ri32[_5137_rptr_base] = (int)0;
              int32_t _5164_codei = (int)0;
              int32_t _5165_rinz = (int)0;
              int32_t _5166_wi = (int)0;
              int32_t _11557_ = (int)0;
              int32_t _11558_ = _5133_dim1;
              for (int32_t _5167_i = _11557_; _5167_i < _11558_; ++_5167_i)
              {
                {
                  int32_t _11559_ = (int)0;
                  int32_t _11560_ = _5132_dim0;
                  for (int32_t _5168_j = _11559_; _5168_j < _11560_; ++_5168_j)
                  {
                    {
                      int32_t _5169_p = safe_add( safe_mul( _5168_j,_5133_dim1 ),_5167_i );
                      int32_t _11561_ = _ptr__5134_wi32[safe_add( _5125_eptr_base,_5169_p )];
                      int32_t _11562_ = _ptr__5134_wi32[safe_add( safe_add( _5125_eptr_base,_5169_p ),(int)1 )];
                      for (int32_t _5170_k = _11561_; _5170_k < _11562_; ++_5170_k)
                      {
                        {
                          _ptr__5146_ri64[safe_add( _5138_rnidx_base,_5165_rinz )] = _ptr__5135_wi64[safe_add( _5127_enidx_base,_5170_k )];
                          _ptr__5147_rf64[safe_add( _5140_rcof_base,_5165_rinz )] = _ptr__5136_wf64[safe_add( _5128_ecof_base,_5170_k )];
                          if ((_5124_ncodeatom > (int)0))
                          {
                            {
                              int32_t _11563_ = _ptr__5134_wi32[safe_add( _5130_codeptr,_5170_k )];
                              int32_t _11564_ = _ptr__5134_wi32[safe_add( safe_add( _5130_codeptr,_5170_k ),(int)1 )];
                              for (int32_t _5171_l = _11563_; _5171_l < _11564_; ++_5171_l)
                              {
                                {
                                  _ptr__5145_ri32[safe_add( _5142_rcode,_5164_codei )] = _ptr__5134_wi32[safe_add( _5129_code,_5171_l )];
                                  _ptr__5147_rf64[safe_add( _5144_rcconst,_5164_codei )] = _ptr__5136_wf64[safe_add( _5131_cconst,_5171_l )];
                                  ++ _5164_codei;
                                }
                              }
                              _ptr__5145_ri32[safe_add( safe_add( _5143_rcodeptr,_5165_rinz ),(int)1 )] = _5164_codei;
                            }
                          }
                          {}
                          ++ _5165_rinz;
                        }
                      }
                      _ptr__5145_ri32[safe_add( safe_add( _5137_rptr_base,_5166_wi ),(int)1 )] = _5165_rinz;
                      ++ _5166_wi;
                    }
                  }
                }
              }
            }
          }
          _5117_xs->clear();
        }
      }
    }
  }
}
// End mosek.fusion.ExprTranspose.eval

// Begin mosek.fusion.ExprTranspose.toString
// Method mosek.fusion.ExprTranspose.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:14:6-16:7
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprTranspose::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprTranspose.toString

// Begin mosek.fusion.ExprTranspose.transposeShape
// Method mosek.fusion.ExprTranspose.transposeShape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprTranspose.monty:7:6-12:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _5172_shape)
{
  _checked_ptr_1<int32_t> _ptr__5172_shape(_5172_shape ? _5172_shape->raw() : nullptr, _5172_shape ? _5172_shape->size(0) : 0);
  if (((int)((_5172_shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__5172_shape[(int)1]),(int32_t)(_ptr__5172_shape[(int)0])});
    }
  }
}
// End mosek.fusion.ExprTranspose.transposeShape

void mosek::fusion::p_ExprTranspose::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }
// } class ExprTranspose
// class ExprRepeat { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:520:4-835:5
mosek::fusion::ExprRepeat::ExprRepeat(mosek::fusion::p_ExprRepeat *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprRepeat()" << this << std::endl; */ }
mosek::fusion::ExprRepeat::~ExprRepeat() {  /* std::cout << "~ExprRepeat()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprRepeat::p_ExprRepeat
  (::mosek::fusion::ExprRepeat * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprRepeat.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:544:6-549:7
mosek::fusion::ExprRepeat::t mosek::fusion::p_ExprRepeat::_new_ExprRepeat
  (monty::rc_ptr< ::mosek::fusion::Expression > _5173_expr,
    int32_t _5174_dim,
    int32_t _5175_n)
{ return new mosek::fusion::ExprRepeat(_5173_expr,_5174_dim,_5175_n); }
mosek::fusion::ExprRepeat::ExprRepeat
  (monty::rc_ptr< ::mosek::fusion::Expression > _5173_expr,
    int32_t _5174_dim,
    int32_t _5175_n) : 
   ExprRepeat(new mosek::fusion::p_ExprRepeat(this))
{ mosek::fusion::p_ExprRepeat::_get_impl(this)->_initialize(_5173_expr,_5174_dim,_5175_n); }
void mosek::fusion::p_ExprRepeat::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5173_expr,
    int32_t _5174_dim,
    int32_t _5175_n)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_5173_expr->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprRepeat::getshape(_5173_expr,_5174_dim,_5175_n));
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->expr = _5173_expr;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->dim = _5174_dim;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->n = _5175_n;
  }
}
// mosek.fusion.ExprRepeat.ctor

// Begin mosek.fusion.ExprRepeat.eval
// Method mosek.fusion.ExprRepeat.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:551:6-680:7
void mosek::fusion::ExprRepeat :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5176_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5177_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5178_xs) { mosek::fusion::p_ExprRepeat::_get_impl(this)->eval(_5176_rs,_5177_ws,_5178_xs); }
void mosek::fusion::p_ExprRepeat::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5176_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5177_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5178_xs)
{
  expr->eval(_5177_ws,_5176_rs,_5178_xs);
  _5177_ws->pop_expr();
  int32_t _5179_nd = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->nd;
  int32_t _5180_shape = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->shape_base;
  int32_t _5181_nelem = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->nelem;
  int32_t _5182_nnz = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->nnz;
  int32_t _5183_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->ncodeatom;
  bool _5184_hassp = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->hassp;
  int32_t _5185_ptr = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->ptr_base;
  int32_t _5186_sp = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->sp_base;
  int32_t _5187_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->nidxs_base;
  int32_t _5188_cof = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->cof_base;
  int32_t _5189_code = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->code_base;
  int32_t _5190_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->codeptr_base;
  int32_t _5191_cconst = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5192_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5192_wi32(_5192_wi32 ? _5192_wi32->raw() : nullptr,_5192_wi32 ? _5192_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5193_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5193_wi64(_5193_wi64 ? _5193_wi64->raw() : nullptr,_5193_wi64 ? _5193_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5194_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5177_ws)->f64;
  _checked_ptr_1<double> _ptr__5194_wf64(_5194_wf64 ? _5194_wf64->raw() : nullptr,_5194_wf64 ? _5194_wf64->size(0) : 0);
  int32_t _11565_;
  bool _11566_ = (dim < _5179_nd);
  if (_11566_)
  {
    _11565_ = _5179_nd;
  }
  else
  {
    _11565_ = safe_add( _5179_nd,(int)1 );
  }
  int32_t _5195_rnd = _11565_;
  int32_t _5196_rnelem = safe_mul( _5181_nelem,n );
  int32_t _5197_rnnz = safe_mul( _5182_nnz,n );
  int32_t _5198_rncodeatom = safe_mul( _5183_ncodeatom,n );
  _5176_rs->alloc_expr(_5195_rnd,_5196_rnelem,_5197_rnnz,_5184_hassp,_5198_rncodeatom);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5199_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5199_ri32(_5199_ri32 ? _5199_ri32->raw() : nullptr,_5199_ri32 ? _5199_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5200_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5200_ri64(_5200_ri64 ? _5200_ri64->raw() : nullptr,_5200_ri64 ? _5200_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5201_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->f64;
  _checked_ptr_1<double> _ptr__5201_rf64(_5201_rf64 ? _5201_rf64->raw() : nullptr,_5201_rf64 ? _5201_rf64->size(0) : 0);
  int32_t _5202_rshape = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->shape_base;
  int32_t _5203_rptr = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->ptr_base;
  int32_t _5204_rsp = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->sp_base;
  int32_t _5205_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->nidxs_base;
  int32_t _5206_rcof = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->cof_base;
  int32_t _5207_rcode = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->code_base;
  int32_t _5208_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->codeptr_base;
  int32_t _5209_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5176_rs)->cconst_base;
  int32_t _5210_d0 = (int)1;
  int32_t _11567_ = (int)0;
  int32_t _11568_ = dim;
  for (int32_t _5211_i = _11567_; _5211_i < _11568_; ++_5211_i)
  {
    {
      _5210_d0 *= _ptr__5192_wi32[safe_add( _5180_shape,_5211_i )];
    }
  }
  int32_t _11569_;
  bool _11570_ = (dim < _5179_nd);
  if (_11570_)
  {
    _11569_ = _ptr__5192_wi32[safe_add( _5180_shape,dim )];
  }
  else
  {
    _11569_ = (int)1;
  }
  int32_t _5212_d1 = _11569_;
  int32_t _5213_rd1 = safe_mul( n,_5212_d1 );
  int32_t _5214_d2 = (int)1;
  int32_t _11571_ = safe_add( dim,(int)1 );
  int32_t _11572_ = _5179_nd;
  for (int32_t _5215_i = _11571_; _5215_i < _11572_; ++_5215_i)
  {
    {
      _5214_d2 *= _ptr__5192_wi32[safe_add( _5180_shape,_5215_i )];
    }
  }
  {
    int32_t _11573_ = (int)0;
    int32_t _11574_ = _5179_nd;
    for (int32_t _5216_i = _11573_; _5216_i < _11574_; ++_5216_i)
    {
      {
        _ptr__5199_ri32[safe_add( _5202_rshape,_5216_i )] = _ptr__5192_wi32[safe_add( _5180_shape,_5216_i )];
      }
    }
    _ptr__5199_ri32[safe_add( _5202_rshape,dim )] = _5213_rd1;
    _ptr__5199_ri32[_5203_rptr] = (int)0;
    if ((_5198_rncodeatom != (int)0))
    {
      {
        _ptr__5199_ri32[_5208_rcodeptr] = (int)0;
      }
    }
    {}
    if (_5184_hassp)
    {
      {
        int32_t _5217_codei = (int)0;
        int32_t _5218_ni = (int)0;
        int32_t _5219_ei = (int)0;
        int32_t _5220_elmi = (int)0;
        int32_t _5221_nzi = (int)0;
        while ( (_5219_ei < _5181_nelem) )
        {
          {
            int64_t _5222_nidx = _ptr__5193_wi64[safe_add( _5186_sp,_5219_ei )];
            int64_t _5223_ninext = safe_add( (_5222_nidx - (_5222_nidx % safe_mul( _5212_d1,_5214_d2 ))),safe_mul( _5212_d1,_5214_d2 ) );
            int32_t _5224_eb = _5219_ei;
            ++ _5219_ei;
            while ( ((_5219_ei < _5181_nelem) && (_ptr__5193_wi64[safe_add( _5186_sp,_5219_ei )] < _5223_ninext)) )
            {
              {
                ++ _5219_ei;
              }
            }
            int32_t _5225_ee = _5219_ei;
            int32_t _11575_ = (int)0;
            int32_t _11576_ = n;
            for (int32_t _5226_i = _11575_; _5226_i < _11576_; ++_5226_i)
            {
              {
                int32_t _11577_ = _5224_eb;
                int32_t _11578_ = _5225_ee;
                for (int32_t _5227_j = _11577_; _5227_j < _11578_; ++_5227_j)
                {
                  {
                    int64_t _5228_i0 = (_ptr__5193_wi64[safe_add( _5186_sp,_5227_j )] / safe_mul( _5212_d1,_5214_d2 ));
                    int64_t _5229_i1 = ((_ptr__5193_wi64[safe_add( _5186_sp,_5227_j )] / _5214_d2) % _5212_d1);
                    int64_t _5230_i2 = (_ptr__5193_wi64[safe_add( _5186_sp,_5227_j )] % _5214_d2);
                    int32_t _11579_ = _ptr__5192_wi32[safe_add( _5185_ptr,_5227_j )];
                    int32_t _11580_ = _ptr__5192_wi32[safe_add( safe_add( _5185_ptr,_5227_j ),(int)1 )];
                    for (int32_t _5231_k = _11579_; _5231_k < _11580_; ++_5231_k)
                    {
                      {
                        _ptr__5200_ri64[safe_add( _5205_rnidxs,_5221_nzi )] = _ptr__5193_wi64[safe_add( _5187_nidxs,_5231_k )];
                        _ptr__5201_rf64[safe_add( _5206_rcof,_5221_nzi )] = _ptr__5194_wf64[safe_add( _5188_cof,_5231_k )];
                        if ((_5183_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11581_ = _ptr__5192_wi32[safe_add( _5190_codeptr,_5231_k )];
                            int32_t _11582_ = _ptr__5192_wi32[safe_add( safe_add( _5190_codeptr,_5231_k ),(int)1 )];
                            for (int32_t _5232_l = _11581_; _5232_l < _11582_; ++_5232_l)
                            {
                              {
                                _ptr__5199_ri32[safe_add( _5207_rcode,_5217_codei )] = _ptr__5192_wi32[safe_add( _5189_code,_5232_l )];
                                _ptr__5201_rf64[safe_add( _5209_rcconst,_5217_codei )] = _ptr__5194_wf64[safe_add( _5191_cconst,_5232_l )];
                                ++ _5217_codei;
                              }
                            }
                            _ptr__5199_ri32[safe_add( safe_add( _5208_rcodeptr,_5221_nzi ),(int)1 )] = _5217_codei;
                          }
                        }
                        {}
                        ++ _5221_nzi;
                      }
                    }
                    _ptr__5199_ri32[safe_add( safe_add( _5203_rptr,_5220_elmi ),(int)1 )] = _5221_nzi;
                    _ptr__5200_ri64[safe_add( _5204_rsp,_5220_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5228_i0,_5213_rd1 ),safe_mul( _5226_i,_5212_d1 ) ),_5229_i1 ),_5214_d2 ),_5230_i2 );
                    ++ _5220_elmi;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _5233_codei = (int)0;
        int32_t _5234_elmi = (int)0;
        int32_t _5235_nzi = (int)0;
        int32_t _5236_p0 = (int)0;
        int32_t _11583_ = (int)0;
        int32_t _11584_ = _5210_d0;
        for (int32_t _5237_i0 = _11583_; _5237_i0 < _11584_; ++_5237_i0)
        {
          {
            int32_t _11585_ = (int)0;
            int32_t _11586_ = n;
            for (int32_t _5238_i1 = _11585_; _5238_i1 < _11586_; ++_5238_i1)
            {
              {
                int32_t _5239_p = safe_mul( safe_mul( _5237_i0,_5212_d1 ),_5214_d2 );
                int32_t _11587_ = (int)0;
                int32_t _11588_ = safe_mul( _5212_d1,_5214_d2 );
                for (int32_t _5240_i2 = _11587_; _5240_i2 < _11588_; ++_5240_i2)
                {
                  {
                    int32_t _11589_ = _ptr__5192_wi32[safe_add( _5185_ptr,_5239_p )];
                    int32_t _11590_ = _ptr__5192_wi32[safe_add( safe_add( _5185_ptr,_5239_p ),(int)1 )];
                    for (int32_t _5241_k = _11589_; _5241_k < _11590_; ++_5241_k)
                    {
                      {
                        _ptr__5200_ri64[safe_add( _5205_rnidxs,_5235_nzi )] = _ptr__5193_wi64[safe_add( _5187_nidxs,_5241_k )];
                        _ptr__5201_rf64[safe_add( _5206_rcof,_5235_nzi )] = _ptr__5194_wf64[safe_add( _5188_cof,_5241_k )];
                        if ((_5183_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11591_ = _ptr__5192_wi32[safe_add( _5190_codeptr,_5241_k )];
                            int32_t _11592_ = _ptr__5192_wi32[safe_add( safe_add( _5190_codeptr,_5241_k ),(int)1 )];
                            for (int32_t _5242_l = _11591_; _5242_l < _11592_; ++_5242_l)
                            {
                              {
                                _ptr__5199_ri32[safe_add( _5207_rcode,_5233_codei )] = _ptr__5192_wi32[safe_add( _5189_code,_5242_l )];
                                _ptr__5201_rf64[safe_add( _5209_rcconst,_5233_codei )] = _ptr__5194_wf64[safe_add( _5191_cconst,_5242_l )];
                                ++ _5233_codei;
                              }
                            }
                            _ptr__5199_ri32[safe_add( safe_add( _5208_rcodeptr,_5235_nzi ),(int)1 )] = _5233_codei;
                          }
                        }
                        {}
                        ++ _5235_nzi;
                      }
                    }
                    _ptr__5199_ri32[safe_add( safe_add( _5203_rptr,_5234_elmi ),(int)1 )] = _5235_nzi;
                    ++ _5234_elmi;
                    ++ _5239_p;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprRepeat.eval

// Begin mosek.fusion.ExprRepeat.getshape
// Method mosek.fusion.ExprRepeat.getshape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:529:6-542:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprRepeat::getshape(monty::rc_ptr< ::mosek::fusion::Expression > _5243_e,int32_t _5244_dim,int32_t _5245_n)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5246_shape_ = _5243_e->getShape();
  _checked_ptr_1<int32_t> _ptr__5246_shape_(_5246_shape_ ? _5246_shape_->raw() : nullptr,_5246_shape_ ? _5246_shape_->size(0) : 0);
  int32_t _5247_nd = (int)((_5246_shape_)->size(0));
  if ((_5244_dim < _5247_nd))
  {
    {
      _ptr__5246_shape_[_5244_dim] *= _5245_n;
      return _5246_shape_;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _11593_;
      bool _11594_ = (_5244_dim == _5247_nd);
      if (_11594_)
      {
        _11593_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _5247_nd,(int)1 ))));
      }
      else
      {
        _11593_ = _5246_shape_;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5248_shape = _11593_;
      _checked_ptr_1<int32_t> _ptr__5248_shape(_5248_shape ? _5248_shape->raw() : nullptr,_5248_shape ? _5248_shape->size(0) : 0);
      int32_t _11595_ = (int)0;
      int32_t _11596_ = _5247_nd;
      for (int32_t _5249_i = _11595_; _5249_i < _11596_; ++_5249_i)
      {
        {
          _ptr__5248_shape[_5249_i] = _ptr__5246_shape_[_5249_i];
        }
      }
      _ptr__5248_shape[_5244_dim] = _5245_n;
      return _5248_shape;
    }
  }
}
// End mosek.fusion.ExprRepeat.getshape

// Begin mosek.fusion.ExprRepeat.toString
// Method mosek.fusion.ExprRepeat.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:525:6-527:7
std::string mosek::fusion::ExprRepeat :: toString() { return mosek::fusion::p_ExprRepeat::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprRepeat::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprRepeat(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprRepeat.toString

void mosek::fusion::p_ExprRepeat::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprRepeat::destroy() { mosek::fusion::p_ExprRepeat::_get_impl(this)->destroy(); }
// } class ExprRepeat
// class ExprStack { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:4:4-516:5
mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }
mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprStack::p_ExprStack
  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprStack.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:49:6-53:7
mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5250_exprs,
    int32_t _5251_dim)
{ return new mosek::fusion::ExprStack(_5250_exprs,_5251_dim); }
mosek::fusion::ExprStack::ExprStack
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5250_exprs,
    int32_t _5251_dim) : 
   ExprStack(new mosek::fusion::p_ExprStack(this))
{ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_5250_exprs,_5251_dim); }
void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5250_exprs,
    int32_t _5251_dim)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_5250_exprs),::mosek::fusion::p_ExprStack::getshape(_5250_exprs,_5251_dim));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11597_;
    for (int32_t _5252_i = (int)0, _11598_ = (int)((_5250_exprs)->size(0)); _5252_i < _11598_ ; ++_5252_i)
    {
      _11597_.push_back(((*_5250_exprs)(_5252_i)));
    }
    auto _11599_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11597_.size()),_11597_.begin(),_11597_.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _11599_;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _5251_dim;
  }
}
// mosek.fusion.ExprStack.ctor

// Begin mosek.fusion.ExprStack.eval
// Method mosek.fusion.ExprStack.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:55:6-390:7
void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5253_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5254_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5255_xs) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_5253_rs,_5254_ws,_5255_xs); }
void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5253_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5254_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5255_xs)
{
  int32_t _5256_n = (int)((exprs)->size(0));
  if ((_5256_n == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_5253_rs,_5254_ws,_5255_xs);
    }
  }
  else
  {
    {
      int32_t _11600_ = (int)0;
      int32_t _11601_ = _5256_n;
      for (int32_t _5257_i = _11600_; _5257_i < _11601_; ++_5257_i)
      {
        {
          ((*exprs)(((_5256_n - _5257_i) - (int)1)))->eval(_5254_ws,_5253_rs,_5255_xs);
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5258_nds = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5258_nds(_5258_nds ? _5258_nds->raw() : nullptr,_5258_nds ? _5258_nds->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5259_shape_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5259_shape_base(_5259_shape_base ? _5259_shape_base->raw() : nullptr,_5259_shape_base ? _5259_shape_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5260_nelem = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5260_nelem(_5260_nelem ? _5260_nelem->raw() : nullptr,_5260_nelem ? _5260_nelem->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5261_nnz = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5261_nnz(_5261_nnz ? _5261_nnz->raw() : nullptr,_5261_nnz ? _5261_nnz->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5262_ncodeatom = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5262_ncodeatom(_5262_ncodeatom ? _5262_ncodeatom->raw() : nullptr,_5262_ncodeatom ? _5262_ncodeatom->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5263_hassp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5263_hassp(_5263_hassp ? _5263_hassp->raw() : nullptr,_5263_hassp ? _5263_hassp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5264_ptr_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5264_ptr_base(_5264_ptr_base ? _5264_ptr_base->raw() : nullptr,_5264_ptr_base ? _5264_ptr_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5265_nidxs_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5265_nidxs_base(_5265_nidxs_base ? _5265_nidxs_base->raw() : nullptr,_5265_nidxs_base ? _5265_nidxs_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5266_sp_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5266_sp_base(_5266_sp_base ? _5266_sp_base->raw() : nullptr,_5266_sp_base ? _5266_sp_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5267_cof_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5267_cof_base(_5267_cof_base ? _5267_cof_base->raw() : nullptr,_5267_cof_base ? _5267_cof_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5268_code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5268_code(_5268_code ? _5268_code->raw() : nullptr,_5268_code ? _5268_code->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5269_codeptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5269_codeptr(_5269_codeptr ? _5269_codeptr->raw() : nullptr,_5269_codeptr ? _5269_codeptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5270_cconst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5270_cconst(_5270_cconst ? _5270_cconst->raw() : nullptr,_5270_cconst ? _5270_cconst->size(0) : 0);
      int32_t _11602_ = (int)0;
      int32_t _11603_ = _5256_n;
      for (int32_t _5271_i = _11602_; _5271_i < _11603_; ++_5271_i)
      {
        {
          _5254_ws->pop_expr();
          _ptr__5258_nds[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->nd;
          _ptr__5259_shape_base[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->shape_base;
          _ptr__5260_nelem[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->nelem;
          _ptr__5261_nnz[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->nnz;
          _ptr__5262_ncodeatom[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->ncodeatom;
          int32_t _11604_;
          bool _11605_ = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->hassp;
          if (_11605_)
          {
            _11604_ = (int)1;
          }
          else
          {
            _11604_ = (int)0;
          }
          _ptr__5263_hassp[_5271_i] = _11604_;
          _ptr__5264_ptr_base[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->ptr_base;
          _ptr__5266_sp_base[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->sp_base;
          _ptr__5265_nidxs_base[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->nidxs_base;
          _ptr__5267_cof_base[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->cof_base;
          _ptr__5268_code[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->code_base;
          _ptr__5269_codeptr[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->codeptr_base;
          _ptr__5270_cconst[_5271_i] = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->cconst_base;
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5272_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->i32;
      _checked_ptr_1<int32_t> _ptr__5272_wi32(_5272_wi32 ? _5272_wi32->raw() : nullptr,_5272_wi32 ? _5272_wi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5273_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->i64;
      _checked_ptr_1<int64_t> _ptr__5273_wi64(_5273_wi64 ? _5273_wi64->raw() : nullptr,_5273_wi64 ? _5273_wi64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5274_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5254_ws)->f64;
      _checked_ptr_1<double> _ptr__5274_wf64(_5274_wf64 ? _5274_wf64->raw() : nullptr,_5274_wf64 ? _5274_wf64->size(0) : 0);
      int32_t _5275_nd = _ptr__5258_nds[(int)0];
      int32_t _5276_shape = _ptr__5259_shape_base[(int)0];
      bool _5277_dense = (_ptr__5263_hassp[(int)0] == (int)0);
      bool _5278_mismatching_dims = false;
      int32_t _11606_ = (int)1;
      int32_t _11607_ = _5256_n;
      for (int32_t _5279_i = _11606_; _5279_i < _11607_; ++_5279_i)
      {
        {
          _5278_mismatching_dims = (_5278_mismatching_dims || ((dim != _5279_i) && (_ptr__5258_nds[_5279_i] != _5275_nd)));
          if ((!_5278_mismatching_dims))
          {
            {
              int32_t _11608_ = (int)0;
              int32_t _11609_ = dim;
              for (int32_t _5280_j = _11608_; _5280_j < _11609_; ++_5280_j)
              {
                {
                  _5278_mismatching_dims = (_5278_mismatching_dims || (_ptr__5272_wi32[safe_add( _5276_shape,_5280_j )] != _ptr__5272_wi32[safe_add( _ptr__5259_shape_base[_5279_i],_5280_j )]));
                }
              }
            }
          }
          {}
          if ((!_5278_mismatching_dims))
          {
            {
              int32_t _11610_ = safe_add( dim,(int)1 );
              int32_t _11611_ = _5275_nd;
              for (int32_t _5281_j = _11610_; _5281_j < _11611_; ++_5281_j)
              {
                {
                  _5278_mismatching_dims = (_5278_mismatching_dims || (_ptr__5272_wi32[safe_add( _5276_shape,_5281_j )] != _ptr__5272_wi32[safe_add( _ptr__5259_shape_base[_5279_i],_5281_j )]));
                }
              }
            }
          }
          {}
          _5277_dense = (_5277_dense && ((int)0 == _ptr__5263_hassp[_5279_i]));
        }
      }
      if (_5278_mismatching_dims)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int32_t _5282_sdim = (int)0;
      if ((dim < _5275_nd))
      {
        {
          int32_t _11612_ = (int)0;
          int32_t _11613_ = _5256_n;
          for (int32_t _5283_i = _11612_; _5283_i < _11613_; ++_5283_i)
          {
            {
              _5282_sdim += _ptr__5272_wi32[safe_add( _ptr__5259_shape_base[_5283_i],dim )];
            }
          }
        }
      }
      else
      {
        {
          _5282_sdim = _5256_n;
        }
      }
      int32_t _11614_;
      bool _11615_ = (dim < _5275_nd);
      if (_11615_)
      {
        _11614_ = _5275_nd;
      }
      else
      {
        _11614_ = safe_add( _5275_nd,(int)1 );
      }
      int32_t _5284_rnd = _11614_;
      if ((_5284_rnd != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching dimensions"));
        }
      }
      {}
      int32_t _5285_rncodeatom = (int)0;
      int32_t _5286_rnelem = (int)0;
      int32_t _5287_rnnz = (int)0;
      bool _5288_parameterized = false;
      {
        int32_t _11616_ = (int)0;
        int32_t _11617_ = _5256_n;
        for (int32_t _5289_i = _11616_; _5289_i < _11617_; ++_5289_i)
        {
          {
            _5288_parameterized = (_5288_parameterized || (_ptr__5262_ncodeatom[_5289_i] > (int)0));
          }
        }
        int32_t _11618_ = (int)0;
        int32_t _11619_ = _5256_n;
        for (int32_t _5290_i = _11618_; _5290_i < _11619_; ++_5290_i)
        {
          {
            _5287_rnnz += _ptr__5261_nnz[_5290_i];
          }
        }
        int32_t _11620_ = (int)0;
        int32_t _11621_ = _5256_n;
        for (int32_t _5291_i = _11620_; _5291_i < _11621_; ++_5291_i)
        {
          {
            _5286_rnelem += _ptr__5260_nelem[_5291_i];
          }
        }
        if (_5288_parameterized)
        {
          {
            int32_t _11622_ = (int)0;
            int32_t _11623_ = _5256_n;
            for (int32_t _5292_i = _11622_; _5292_i < _11623_; ++_5292_i)
            {
              {
                int32_t _11624_;
                bool _11625_ = (_ptr__5262_ncodeatom[_5292_i] > (int)0);
                if (_11625_)
                {
                  _11624_ = _ptr__5262_ncodeatom[_5292_i];
                }
                else
                {
                  _11624_ = _ptr__5261_nnz[_5292_i];
                }
                _5285_rncodeatom += _11624_;
              }
            }
          }
        }
        {}
      }
      int32_t _5293_d0 = (int)1;
      int32_t _11626_ = (int)0;
      int32_t _11627_ = dim;
      for (int32_t _5294_i = _11626_; _5294_i < _11627_; ++_5294_i)
      {
        {
          _5293_d0 *= _ptr__5272_wi32[safe_add( _5276_shape,_5294_i )];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _11628_;
      bool _11629_ = (dim < _5275_nd);
      if (_11629_)
      {
        std::vector<int32_t> _11630_;
        for (int32_t _5296_i = (int)0, _11631_ = _5256_n; _5296_i < _11631_ ; ++_5296_i)
        {
          _11630_.push_back(_ptr__5272_wi32[safe_add( _ptr__5259_shape_base[_5296_i],dim )]);
        }
        auto _11632_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11630_.size()),_11630_.begin(),_11630_.end()));
        _11628_ = _11632_;
      }
      else
      {
        std::vector<int32_t> _11633_;
        for (int32_t _5297_i = (int)0, _11634_ = _5256_n; _5297_i < _11634_ ; ++_5297_i)
        {
          _11633_.push_back((int)1);
        }
        auto _11635_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11633_.size()),_11633_.begin(),_11633_.end()));
        _11628_ = _11635_;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5295_d1s = _11628_;
      _checked_ptr_1<int32_t> _ptr__5295_d1s(_5295_d1s ? _5295_d1s->raw() : nullptr,_5295_d1s ? _5295_d1s->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5298_offset = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5256_n)));
      _checked_ptr_1<int32_t> _ptr__5298_offset(_5298_offset ? _5298_offset->raw() : nullptr,_5298_offset ? _5298_offset->size(0) : 0);
      _ptr__5298_offset[(int)0] = (int)0;
      int32_t _11636_ = (int)1;
      int32_t _11637_ = _5256_n;
      for (int32_t _5299_i = _11636_; _5299_i < _11637_; ++_5299_i)
      {
        {
          _ptr__5298_offset[_5299_i] = safe_add( _ptr__5298_offset[(_5299_i - (int)1)],_ptr__5295_d1s[(_5299_i - (int)1)] );
        }
      }
      int32_t _5300_d1 = (int)0;
      int32_t _11638_ = (int)0;
      int32_t _11639_ = _5256_n;
      for (int32_t _5301_i = _11638_; _5301_i < _11639_; ++_5301_i)
      {
        {
          _5300_d1 += _ptr__5295_d1s[_5301_i];
        }
      }
      int32_t _5302_d2 = (int)1;
      int32_t _11640_ = safe_add( dim,(int)1 );
      int32_t _11641_ = _5275_nd;
      for (int32_t _5303_i = _11640_; _5303_i < _11641_; ++_5303_i)
      {
        {
          _5302_d2 *= _ptr__5272_wi32[safe_add( _5276_shape,_5303_i )];
        }
      }
      if (_5277_dense)
      {
        {
          _5253_rs->alloc_expr(_5284_rnd,_5286_rnelem,_5287_rnnz,false,_5285_rncodeatom);
          int32_t _5304_rptr = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->ptr_base;
          int32_t _5305_rshape = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->shape_base;
          int32_t _5306_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->nidxs_base;
          int32_t _5307_rcof = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->cof_base;
          int32_t _5308_rcode = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->code_base;
          int32_t _5309_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->codeptr_base;
          int32_t _5310_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->cconst_base;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5311_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5311_ri32(_5311_ri32 ? _5311_ri32->raw() : nullptr,_5311_ri32 ? _5311_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5312_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5312_ri64(_5312_ri64 ? _5312_ri64->raw() : nullptr,_5312_ri64 ? _5312_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5313_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->f64;
          _checked_ptr_1<double> _ptr__5313_rf64(_5313_rf64 ? _5313_rf64->raw() : nullptr,_5313_rf64 ? _5313_rf64->size(0) : 0);
          int32_t _11642_;
          bool _11643_ = (_5285_rncodeatom > (int)0);
          if (_11643_)
          {
            _11642_ = _5255_xs->alloci32(safe_add( _5286_rnelem,(int)1 ));
          }
          else
          {
            _11642_ = (-(int)9999);
          }
          int32_t _5314_xcodeptr = _11642_;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5315_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5255_xs)->i32;
          _checked_ptr_1<int32_t> _ptr__5315_xi32(_5315_xi32 ? _5315_xi32->raw() : nullptr,_5315_xi32 ? _5315_xi32->size(0) : 0);
          int32_t _11644_ = (int)0;
          int32_t _11645_ = _5275_nd;
          for (int32_t _5316_i = _11644_; _5316_i < _11645_; ++_5316_i)
          {
            {
              _ptr__5311_ri32[safe_add( _5305_rshape,_5316_i )] = _ptr__5272_wi32[safe_add( _5276_shape,_5316_i )];
            }
          }
          _ptr__5311_ri32[safe_add( _5305_rshape,dim )] = _5282_sdim;
          {
            int32_t _5317_codei = (int)0;
            int32_t _5318_elmi = (int)0;
            int32_t _5319_nzi = (int)0;
            _ptr__5311_ri32[_5304_rptr] = (int)0;
            if (_5288_parameterized)
            {
              {
                _ptr__5311_ri32[_5309_rcodeptr] = (int)0;
              }
            }
            {}
            int32_t _11646_ = (int)0;
            int32_t _11647_ = _5293_d0;
            for (int32_t _5320_i0 = _11646_; _5320_i0 < _11647_; ++_5320_i0)
            {
              {
                int32_t _11648_ = (int)0;
                int32_t _11649_ = _5256_n;
                for (int32_t _5321_i = _11648_; _5321_i < _11649_; ++_5321_i)
                {
                  {
                    int32_t _11650_ = (int)0;
                    int32_t _11651_ = _ptr__5295_d1s[_5321_i];
                    for (int32_t _5322_i1z = _11650_; _5322_i1z < _11651_; ++_5322_i1z)
                    {
                      {
                        int32_t _11652_ = (int)0;
                        int32_t _11653_ = _5302_d2;
                        for (int32_t _5323_i2 = _11652_; _5323_i2 < _11653_; ++_5323_i2)
                        {
                          {
                            int32_t _5324_j = safe_add( safe_add( safe_mul( safe_mul( _5320_i0,_ptr__5295_d1s[_5321_i] ),_5302_d2 ),safe_mul( _5322_i1z,_5302_d2 ) ),_5323_i2 );
                            int32_t _11654_ = _ptr__5272_wi32[safe_add( _ptr__5264_ptr_base[_5321_i],_5324_j )];
                            int32_t _11655_ = _ptr__5272_wi32[safe_add( safe_add( _ptr__5264_ptr_base[_5321_i],_5324_j ),(int)1 )];
                            for (int32_t _5325_k = _11654_; _5325_k < _11655_; ++_5325_k)
                            {
                              {
                                _ptr__5312_ri64[safe_add( _5306_rnidxs,_5319_nzi )] = _ptr__5273_wi64[safe_add( _ptr__5265_nidxs_base[_5321_i],_5325_k )];
                                _ptr__5313_rf64[safe_add( _5307_rcof,_5319_nzi )] = _ptr__5274_wf64[safe_add( _ptr__5267_cof_base[_5321_i],_5325_k )];
                                if ((_ptr__5262_ncodeatom[_5321_i] > (int)0))
                                {
                                  {
                                    int32_t _11656_ = _ptr__5272_wi32[safe_add( _ptr__5269_codeptr[_5321_i],_5325_k )];
                                    int32_t _11657_ = _ptr__5272_wi32[safe_add( safe_add( _ptr__5269_codeptr[_5321_i],_5325_k ),(int)1 )];
                                    for (int32_t _5326_l = _11656_; _5326_l < _11657_; ++_5326_l)
                                    {
                                      {
                                        _ptr__5311_ri32[safe_add( _5308_rcode,_5317_codei )] = _ptr__5272_wi32[safe_add( _ptr__5268_code[_5321_i],_5326_l )];
                                        _ptr__5313_rf64[safe_add( _5310_rcconst,_5317_codei )] = _ptr__5274_wf64[safe_add( _ptr__5270_cconst[_5321_i],_5326_l )];
                                        ++ _5317_codei;
                                      }
                                    }
                                    _ptr__5311_ri32[safe_add( safe_add( _5309_rcodeptr,_5319_nzi ),(int)1 )] = _5317_codei;
                                  }
                                }
                                else if(_5288_parameterized)
                                {
                                  {
                                    _ptr__5311_ri32[safe_add( _5308_rcode,_5317_codei )] = 2;
                                    _ptr__5313_rf64[safe_add( _5310_rcconst,_5317_codei )] = 0.0;
                                    ++ _5317_codei;
                                    _ptr__5311_ri32[safe_add( safe_add( _5309_rcodeptr,_5319_nzi ),(int)1 )] = _5317_codei;
                                  }
                                }
                                {}
                                ++ _5319_nzi;
                              }
                            }
                            _ptr__5311_ri32[safe_add( safe_add( _5304_rptr,_5318_elmi ),(int)1 )] = _5319_nzi;
                            ++ _5318_elmi;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _5327_rshapesize = (int)1;
          int32_t _11658_ = (int)0;
          int32_t _11659_ = dim;
          for (int32_t _5328_i = _11658_; _5328_i < _11659_; ++_5328_i)
          {
            {
              _5327_rshapesize *= _ptr__5272_wi32[safe_add( _5276_shape,_5328_i )];
            }
          }
          _5327_rshapesize *= _5282_sdim;
          int32_t _11660_ = safe_add( dim,(int)1 );
          int32_t _11661_ = _5275_nd;
          for (int32_t _5329_i = _11660_; _5329_i < _11661_; ++_5329_i)
          {
            {
              _5327_rshapesize *= _ptr__5272_wi32[safe_add( _5276_shape,_5329_i )];
            }
          }
          bool _5330_rhassp = (_5286_rnelem < _5327_rshapesize);
          _5253_rs->alloc_expr(_5284_rnd,_5286_rnelem,_5287_rnnz,_5330_rhassp,_5285_rncodeatom);
          int32_t _5331_rptr = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->ptr_base;
          int32_t _5332_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->nidxs_base;
          int32_t _11662_;
          bool _11663_ = _5330_rhassp;
          if (_11663_)
          {
            _11662_ = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->sp_base;
          }
          else
          {
            _11662_ = _5253_rs->alloci64(_5286_rnelem);
          }
          int32_t _5333_rsp = _11662_;
          int32_t _5334_rcof = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->cof_base;
          int32_t _5335_rcode = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->code_base;
          int32_t _5336_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->codeptr_base;
          int32_t _5337_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->cconst_base;
          int32_t _5338_rshape = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->shape_base;
          int32_t _11664_ = (int)0;
          int32_t _11665_ = _5275_nd;
          for (int32_t _5339_i = _11664_; _5339_i < _11665_; ++_5339_i)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->i32)(safe_add( _5338_rshape,_5339_i ))) = _ptr__5272_wi32[safe_add( _5276_shape,_5339_i )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->i32)(safe_add( _5338_rshape,dim ))) = _5282_sdim;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5340_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5340_ri32(_5340_ri32 ? _5340_ri32->raw() : nullptr,_5340_ri32 ? _5340_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5341_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5341_ri64(_5341_ri64 ? _5341_ri64->raw() : nullptr,_5341_ri64 ? _5341_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5342_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5253_rs)->f64;
          _checked_ptr_1<double> _ptr__5342_rf64(_5342_rf64 ? _5342_rf64->raw() : nullptr,_5342_rf64 ? _5342_rf64->size(0) : 0);
          if ((dim == (int)0))
          {
            {
              int32_t _5343_codei = (int)0;
              int32_t _5344_nzi = (int)0;
              int32_t _5345_elmi = (int)0;
              int64_t _5346_spofs = (int64_t)0;
              _ptr__5340_ri32[_5331_rptr] = (int)0;
              if ((_5285_rncodeatom > (int)0))
              {
                {
                  _ptr__5340_ri32[_5336_rcodeptr] = (int)0;
                }
              }
              {}
              int32_t _11666_ = (int)0;
              int32_t _11667_ = _5256_n;
              for (int32_t _5347_i = _11666_; _5347_i < _11667_; ++_5347_i)
              {
                {
                  int32_t _11668_ = (int)0;
                  int32_t _11669_ = _ptr__5260_nelem[_5347_i];
                  for (int32_t _5348_j = _11668_; _5348_j < _11669_; ++_5348_j)
                  {
                    {
                      int32_t _11670_ = _ptr__5272_wi32[safe_add( _ptr__5264_ptr_base[_5347_i],_5348_j )];
                      int32_t _11671_ = _ptr__5272_wi32[safe_add( safe_add( _ptr__5264_ptr_base[_5347_i],_5348_j ),(int)1 )];
                      for (int32_t _5349_k = _11670_; _5349_k < _11671_; ++_5349_k)
                      {
                        {
                          _ptr__5341_ri64[safe_add( _5332_rnidxs,_5344_nzi )] = _ptr__5273_wi64[safe_add( _ptr__5265_nidxs_base[_5347_i],_5349_k )];
                          _ptr__5342_rf64[safe_add( _5334_rcof,_5344_nzi )] = _ptr__5274_wf64[safe_add( _ptr__5267_cof_base[_5347_i],_5349_k )];
                          if ((_ptr__5262_ncodeatom[_5347_i] > (int)0))
                          {
                            {
                              int32_t _11672_ = _ptr__5272_wi32[safe_add( _ptr__5269_codeptr[_5347_i],_5349_k )];
                              int32_t _11673_ = _ptr__5272_wi32[safe_add( safe_add( _ptr__5269_codeptr[_5347_i],_5349_k ),(int)1 )];
                              for (int32_t _5350_l = _11672_; _5350_l < _11673_; ++_5350_l)
                              {
                                {
                                  _ptr__5340_ri32[safe_add( _5335_rcode,_5343_codei )] = _ptr__5272_wi32[safe_add( _ptr__5268_code[_5347_i],_5350_l )];
                                  _ptr__5342_rf64[safe_add( _5337_rcconst,_5343_codei )] = _ptr__5274_wf64[safe_add( _ptr__5270_cconst[_5347_i],_5350_l )];
                                  ++ _5343_codei;
                                }
                              }
                              _ptr__5340_ri32[safe_add( safe_add( _5336_rcodeptr,_5344_nzi ),(int)1 )] = _5343_codei;
                            }
                          }
                          else if((_5285_rncodeatom > (int)0))
                          {
                            {
                              _ptr__5340_ri32[safe_add( _5335_rcode,_5343_codei )] = 2;
                              _ptr__5342_rf64[safe_add( _5337_rcconst,_5343_codei )] = 0.0;
                              ++ _5343_codei;
                              _ptr__5340_ri32[safe_add( safe_add( _5336_rcodeptr,_5344_nzi ),(int)1 )] = _5343_codei;
                            }
                          }
                          {}
                          ++ _5344_nzi;
                        }
                      }
                      _ptr__5340_ri32[safe_add( safe_add( _5331_rptr,_5345_elmi ),(int)1 )] = _5344_nzi;
                      if ((_ptr__5263_hassp[_5347_i] != (int)0))
                      {
                        {
                          _ptr__5341_ri64[safe_add( _5333_rsp,_5345_elmi )] = safe_add( _5346_spofs,_ptr__5273_wi64[safe_add( _ptr__5266_sp_base[_5347_i],_5348_j )] );
                        }
                      }
                      else
                      {
                        {
                          _ptr__5341_ri64[safe_add( _5333_rsp,_5345_elmi )] = safe_add( _5346_spofs,_5348_j );
                        }
                      }
                      ++ _5345_elmi;
                    }
                  }
                  int64_t _5351_sz = (int64_t)1;
                  int32_t _11674_ = (int)0;
                  int32_t _11675_ = _5275_nd;
                  for (int32_t _5352_j = _11674_; _5352_j < _11675_; ++_5352_j)
                  {
                    {
                      _5351_sz *= _ptr__5272_wi32[safe_add( _ptr__5259_shape_base[_5347_i],_5352_j )];
                    }
                  }
                  _5346_spofs += _5351_sz;
                }
              }
            }
          }
          else
          {
            {
              int32_t _5353_maxdim = (int)0;
              int32_t _11676_ = (int)0;
              int32_t _11677_ = _5284_rnd;
              for (int32_t _5354_i = _11676_; _5354_i < _11677_; ++_5354_i)
              {
                {
                  if ((_5353_maxdim < _ptr__5340_ri32[safe_add( _5338_rshape,_5354_i )]))
                  {
                    {
                      _5353_maxdim = _ptr__5340_ri32[safe_add( _5338_rshape,_5354_i )];
                    }
                  }
                  {}
                }
              }
              int32_t _5355_tsp = _5255_xs->alloci64(_5286_rnelem);
              int32_t _5356_ti = _5255_xs->alloci32(_5286_rnelem);
              int32_t _5357_tj = _5255_xs->alloci32(_5286_rnelem);
              int32_t _5358_curperm = _5255_xs->alloci32(_5286_rnelem);
              int32_t _5359_tgtperm = _5255_xs->alloci32(_5286_rnelem);
              int32_t _5360_xptr = _5255_xs->alloci32(safe_add( _5353_maxdim,(int)1 ));
              std::shared_ptr< monty::ndarray< int32_t,1 > > _5361_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5255_xs)->i32;
              _checked_ptr_1<int32_t> _ptr__5361_xi32(_5361_xi32 ? _5361_xi32->raw() : nullptr,_5361_xi32 ? _5361_xi32->size(0) : 0);
              std::shared_ptr< monty::ndarray< int64_t,1 > > _5362_xi64 = mosek::fusion::p_WorkStack::_get_impl(_5255_xs)->i64;
              _checked_ptr_1<int64_t> _ptr__5362_xi64(_5362_xi64 ? _5362_xi64->raw() : nullptr,_5362_xi64 ? _5362_xi64->size(0) : 0);
              {
                int32_t _5363_elmi = (int)0;
                int32_t _11678_ = (int)0;
                int32_t _11679_ = _5256_n;
                for (int32_t _5364_i = _11678_; _5364_i < _11679_; ++_5364_i)
                {
                  {
                    int32_t _5365_d1 = _ptr__5295_d1s[_5364_i];
                    int32_t _5366_s0 = safe_mul( _5365_d1,_5302_d2 );
                    int32_t _5367_s1 = _5302_d2;
                    if ((_ptr__5263_hassp[_5364_i] != (int)0))
                    {
                      {
                        int32_t _11680_ = (int)0;
                        int32_t _11681_ = _ptr__5260_nelem[_5364_i];
                        for (int32_t _5368_j = _11680_; _5368_j < _11681_; ++_5368_j)
                        {
                          {
                            int64_t _5369_i0 = (_ptr__5273_wi64[safe_add( _ptr__5266_sp_base[_5364_i],_5368_j )] / _5366_s0);
                            int64_t _5370_i1 = ((_ptr__5273_wi64[safe_add( _ptr__5266_sp_base[_5364_i],_5368_j )] / _5367_s1) % _5365_d1);
                            int64_t _5371_i2 = (_ptr__5273_wi64[safe_add( _ptr__5266_sp_base[_5364_i],_5368_j )] % _5302_d2);
                            _ptr__5362_xi64[safe_add( _5355_tsp,_5363_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5369_i0,_5282_sdim ),_5370_i1 ),_ptr__5298_offset[_5364_i] ),_5302_d2 ),_5371_i2 );
                            _ptr__5361_xi32[safe_add( _5356_ti,_5363_elmi )] = _5364_i;
                            _ptr__5361_xi32[safe_add( _5357_tj,_5363_elmi )] = _5368_j;
                            ++ _5363_elmi;
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        int32_t _11682_ = (int)0;
                        int32_t _11683_ = _ptr__5260_nelem[_5364_i];
                        for (int32_t _5372_j = _11682_; _5372_j < _11683_; ++_5372_j)
                        {
                          {
                            int64_t _5373_i0 = ((int64_t)_5372_j / _5366_s0);
                            int64_t _5374_i1 = (((int64_t)_5372_j / _5367_s1) % _5365_d1);
                            int64_t _5375_i2 = ((int64_t)_5372_j % _5302_d2);
                            _ptr__5362_xi64[safe_add( _5355_tsp,_5363_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5373_i0,_5282_sdim ),_5374_i1 ),_ptr__5298_offset[_5364_i] ),_5302_d2 ),_5375_i2 );
                            _ptr__5361_xi32[safe_add( _5356_ti,_5363_elmi )] = _5364_i;
                            _ptr__5361_xi32[safe_add( _5357_tj,_5363_elmi )] = _5372_j;
                            ++ _5363_elmi;
                          }
                        }
                      }
                    }
                  }
                }
              }
              {
                std::shared_ptr< monty::ndarray< int64_t,1 > > _5376_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5284_rnd)));
                _checked_ptr_1<int64_t> _ptr__5376_s(_5376_s ? _5376_s->raw() : nullptr,_5376_s ? _5376_s->size(0) : 0);
                _ptr__5376_s[(_5284_rnd - (int)1)] = (int)1;
                int32_t _11684_ = (int)1;
                int32_t _11685_ = _5284_rnd;
                for (int32_t _5377_i = _11684_; _5377_i < _11685_; ++_5377_i)
                {
                  {
                    _ptr__5376_s[((_5284_rnd - _5377_i) - (int)1)] = safe_mul( _ptr__5376_s[(_5284_rnd - _5377_i)],_ptr__5340_ri32[(safe_add( _5338_rshape,_5284_rnd ) - _5377_i)] );
                  }
                }
                int32_t _11686_ = (int)0;
                int32_t _11687_ = _5286_rnelem;
                for (int32_t _5378_i = _11686_; _5378_i < _11687_; ++_5378_i)
                {
                  {
                    _ptr__5361_xi32[safe_add( _5358_curperm,_5378_i )] = _5378_i;
                  }
                }
                int32_t _11688_ = (int)0;
                int32_t _11689_ = _5284_rnd;
                for (int32_t _5379_ii = _11688_; _5379_ii < _11689_; ++_5379_ii)
                {
                  {
                    int32_t _5380_i = ((_5284_rnd - _5379_ii) - (int)1);
                    int32_t _5381_di = _ptr__5340_ri32[safe_add( _5338_rshape,_5380_i )];
                    int32_t _11690_ = (int)0;
                    int32_t _11691_ = safe_add( _5381_di,(int)1 );
                    for (int32_t _5382_k = _11690_; _5382_k < _11691_; ++_5382_k)
                    {
                      {
                        _ptr__5361_xi32[safe_add( _5360_xptr,_5382_k )] = (int)0;
                      }
                    }
                    int32_t _11692_ = (int)0;
                    int32_t _11693_ = _5286_rnelem;
                    for (int32_t _5383_kk = _11692_; _5383_kk < _11693_; ++_5383_kk)
                    {
                      {
                        int32_t _5384_k = _ptr__5361_xi32[safe_add( _5358_curperm,_5383_kk )];
                        int64_t _5385_sub = ((_ptr__5362_xi64[safe_add( _5355_tsp,_5384_k )] / _ptr__5376_s[_5380_i]) % _5381_di);
                        ++ _ptr__5361_xi32[safe_add( safe_add( _5360_xptr,_5385_sub ),(int)1 )];
                      }
                    }
                    {
                      int32_t _11694_ = (int)0;
                      int32_t _11695_ = _5381_di;
                      for (int32_t _5386_k = _11694_; _5386_k < _11695_; ++_5386_k)
                      {
                        {
                          _ptr__5361_xi32[safe_add( safe_add( _5360_xptr,_5386_k ),(int)1 )] += _ptr__5361_xi32[safe_add( _5360_xptr,_5386_k )];
                        }
                      }
                      int32_t _11696_ = (int)0;
                      int32_t _11697_ = _5286_rnelem;
                      for (int32_t _5387_kk = _11696_; _5387_kk < _11697_; ++_5387_kk)
                      {
                        {
                          int32_t _5388_k = _ptr__5361_xi32[safe_add( _5358_curperm,_5387_kk )];
                          int64_t _5389_sub = ((_ptr__5362_xi64[safe_add( _5355_tsp,_5388_k )] / _ptr__5376_s[_5380_i]) % _5381_di);
                          _ptr__5361_xi32[safe_add( _5359_tgtperm,_ptr__5361_xi32[safe_add( _5360_xptr,_5389_sub )] )] = _5388_k;
                          ++ _ptr__5361_xi32[safe_add( _5360_xptr,_5389_sub )];
                        }
                      }
                    }
                    int32_t _5390_tmp = _5358_curperm;
                    _5358_curperm = _5359_tgtperm;
                    _5359_tgtperm = _5390_tmp;
                  }
                }
              }
              {
                int32_t _5391_codei = (int)0;
                int32_t _5392_nzi = (int)0;
                _ptr__5340_ri32[_5331_rptr] = (int)0;
                if ((_5285_rncodeatom > (int)0))
                {
                  {
                    _ptr__5340_ri32[_5336_rcodeptr] = (int)0;
                  }
                }
                {}
                int32_t _11698_ = (int)0;
                int32_t _11699_ = _5286_rnelem;
                for (int32_t _5393_elmi = _11698_; _5393_elmi < _11699_; ++_5393_elmi)
                {
                  {
                    int32_t _5394_pelmi = _ptr__5361_xi32[safe_add( _5358_curperm,_5393_elmi )];
                    int32_t _5395_i = _ptr__5361_xi32[safe_add( _5356_ti,_5394_pelmi )];
                    int32_t _5396_j = _ptr__5361_xi32[safe_add( _5357_tj,_5394_pelmi )];
                    int32_t _11700_ = _ptr__5272_wi32[safe_add( _ptr__5264_ptr_base[_5395_i],_5396_j )];
                    int32_t _11701_ = _ptr__5272_wi32[safe_add( safe_add( _ptr__5264_ptr_base[_5395_i],_5396_j ),(int)1 )];
                    for (int32_t _5397_k = _11700_; _5397_k < _11701_; ++_5397_k)
                    {
                      {
                        _ptr__5341_ri64[safe_add( _5332_rnidxs,_5392_nzi )] = _ptr__5273_wi64[safe_add( _ptr__5265_nidxs_base[_5395_i],_5397_k )];
                        _ptr__5342_rf64[safe_add( _5334_rcof,_5392_nzi )] = _ptr__5274_wf64[safe_add( _ptr__5267_cof_base[_5395_i],_5397_k )];
                        if ((_ptr__5262_ncodeatom[_5395_i] > (int)0))
                        {
                          {
                            int32_t _11702_ = _ptr__5272_wi32[safe_add( _ptr__5269_codeptr[_5395_i],_5397_k )];
                            int32_t _11703_ = _ptr__5272_wi32[safe_add( safe_add( _ptr__5269_codeptr[_5395_i],_5397_k ),(int)1 )];
                            for (int32_t _5398_l = _11702_; _5398_l < _11703_; ++_5398_l)
                            {
                              {
                                _ptr__5340_ri32[safe_add( _5335_rcode,_5391_codei )] = _ptr__5272_wi32[safe_add( _ptr__5268_code[_5395_i],_5398_l )];
                                _ptr__5342_rf64[safe_add( _5337_rcconst,_5391_codei )] = _ptr__5274_wf64[safe_add( _ptr__5270_cconst[_5395_i],_5398_l )];
                                ++ _5391_codei;
                              }
                            }
                            _ptr__5340_ri32[safe_add( safe_add( _5336_rcodeptr,_5392_nzi ),(int)1 )] = _5391_codei;
                          }
                        }
                        else if(_5288_parameterized)
                        {
                          {
                            _ptr__5340_ri32[safe_add( _5335_rcode,_5391_codei )] = 2;
                            _ptr__5342_rf64[safe_add( _5337_rcconst,_5391_codei )] = 0.0;
                            ++ _5391_codei;
                            _ptr__5340_ri32[safe_add( safe_add( _5336_rcodeptr,_5392_nzi ),(int)1 )] = _5391_codei;
                          }
                        }
                        {}
                        ++ _5392_nzi;
                      }
                    }
                    _ptr__5340_ri32[safe_add( safe_add( _5331_rptr,_5393_elmi ),(int)1 )] = _5392_nzi;
                    _ptr__5341_ri64[safe_add( _5333_rsp,_5393_elmi )] = _ptr__5362_xi64[safe_add( _5355_tsp,_5394_pelmi )];
                  }
                }
              }
            }
          }
          if ((!_5330_rhassp))
          {
            {
              _5253_rs->popi64(_5286_rnelem);
            }
          }
          {}
        }
      }
    }
  }
}
// End mosek.fusion.ExprStack.eval

// Begin mosek.fusion.ExprStack.getshape
// Method mosek.fusion.ExprStack.getshape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:16:6-47:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5399_es,int32_t _5400_dim)
{
  if (((int)((_5399_es)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_5399_es)->size(0)) == (int)1))
  {
    {
      return ((*_5399_es)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _11704_;
      for (int32_t _5402_i = (int)0, _11705_ = (int)((_5399_es)->size(0)); _5402_i < _11705_ ; ++_5402_i)
      {
        _11704_.push_back(((*_5399_es)(_5402_i))->getShape());
      }
      auto _11706_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_11704_.size()),_11704_.begin(),_11704_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _5401_shapes = _11706_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5403_shape = ((*_5401_shapes)((int)0));
      _checked_ptr_1<int32_t> _ptr__5403_shape(_5403_shape ? _5403_shape->raw() : nullptr,_5403_shape ? _5403_shape->size(0) : 0);
      int32_t _5404_nd = (int)((_5403_shape)->size(0));
      int32_t _11707_ = (int)1;
      int32_t _11708_ = (int)((_5401_shapes)->size(0));
      for (int32_t _5405_i = _11707_; _5405_i < _11708_; ++_5405_i)
      {
        {
          if ((_5404_nd != (int)((((*_5401_shapes)(_5405_i)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int32_t _11709_ = (int)0;
          int32_t _11710_ = _5400_dim;
          for (int32_t _5406_j = _11709_; _5406_j < _11710_; ++_5406_j)
          {
            {
              if ((_ptr__5403_shape[_5406_j] != ((*((*_5401_shapes)(_5405_i)))(_5406_j))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int32_t _11711_ = safe_add( _5400_dim,(int)1 );
          int32_t _11712_ = _5404_nd;
          for (int32_t _5407_j = _11711_; _5407_j < _11712_; ++_5407_j)
          {
            {
              if ((_ptr__5403_shape[_5407_j] != ((*((*_5401_shapes)(_5405_i)))(_5407_j))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_5400_dim == _5404_nd))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5408_resshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _5404_nd,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__5408_resshape(_5408_resshape ? _5408_resshape->raw() : nullptr,_5408_resshape ? _5408_resshape->size(0) : 0);
          int32_t _11713_ = (int)0;
          int32_t _11714_ = _5404_nd;
          for (int32_t _5409_i = _11713_; _5409_i < _11714_; ++_5409_i)
          {
            {
              _ptr__5408_resshape[_5409_i] = _ptr__5403_shape[_5409_i];
            }
          }
          _ptr__5408_resshape[_5404_nd] = (int)((_5401_shapes)->size(0));
          return _5408_resshape;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5410_resshape = _5403_shape;
          _checked_ptr_1<int32_t> _ptr__5410_resshape(_5410_resshape ? _5410_resshape->raw() : nullptr,_5410_resshape ? _5410_resshape->size(0) : 0);
          int32_t _11715_ = (int)1;
          int32_t _11716_ = (int)((_5401_shapes)->size(0));
          for (int32_t _5411_i = _11715_; _5411_i < _11716_; ++_5411_i)
          {
            {
              _ptr__5410_resshape[_5400_dim] += ((*((*_5401_shapes)(_5411_i)))(_5400_dim));
            }
          }
          return _5410_resshape;
        }
      }
    }
  }
}
// End mosek.fusion.ExprStack.getshape

// Begin mosek.fusion.ExprStack.toString
// Method mosek.fusion.ExprStack.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprStack.monty:8:6-14:7
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprStack::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5412_b = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int32_t _11717_ = (int)1;
  int32_t _11718_ = (int)((exprs)->size(0));
  for (int32_t _5413_i = _11717_; _5413_i < _11718_; ++_5413_i)
  {
    {
      _5412_b->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_5413_i))->toString());
    }
  }
  _5412_b->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _5412_b->toString();
}
// End mosek.fusion.ExprStack.toString

void mosek::fusion::p_ExprStack::destroy()
{
  exprs.reset();
}
void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }
// } class ExprStack
// class ExprInner { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:2097:4-2290:5
mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }
mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprInner::p_ExprInner
  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprInner.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:2129:6-2158:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5414_expr3,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5415_vsub3,
    std::shared_ptr< monty::ndarray< double,1 > > _5416_vcof3)
{ return new mosek::fusion::ExprInner(_5414_expr3,_5415_vsub3,_5416_vcof3); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5414_expr3,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5415_vsub3,
    std::shared_ptr< monty::ndarray< double,1 > > _5416_vcof3) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5414_expr3,_5415_vsub3,_5416_vcof3); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5414_expr3,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5415_vsub3,
    std::shared_ptr< monty::ndarray< double,1 > > _5416_vcof3)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__5415_vsub3(_5415_vsub3 ? _5415_vsub3->raw() : nullptr, _5415_vsub3 ? _5415_vsub3->size(0) : 0);
    _checked_ptr_1<double> _ptr__5416_vcof3(_5416_vcof3 ? _5416_vcof3->raw() : nullptr, _5416_vcof3 ? _5416_vcof3->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5414_expr3->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _5414_expr3;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _5415_vsub3;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _5416_vcof3;
    if (((int)((_5415_vsub3)->size(0)) != (int)((_5416_vcof3)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5417_shp = _5414_expr3->getShape();
    _checked_ptr_1<int32_t> _ptr__5417_shp(_5417_shp ? _5417_shp->raw() : nullptr,_5417_shp ? _5417_shp->size(0) : 0);
    int64_t _5418_size = ::mosek::fusion::p_Set::size(_5417_shp);
    bool _5419_err_sorted = false;
    bool _5420_err_bounds = false;
    {
      int32_t _11719_ = (int)1;
      int32_t _11720_ = (int)((_5415_vsub3)->size(0));
      for (int32_t _5421_i = _11719_; _5421_i < _11720_; ++_5421_i)
      {
        {
          if ((_ptr__5415_vsub3[_5421_i] <= _ptr__5415_vsub3[(_5421_i - (int)1)]))
          {
            {
              _5419_err_sorted = true;
            }
          }
          {}
        }
      }
      if (((int)((_5415_vsub3)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5415_vsub3[(int)0] < (int)0) || (_ptr__5415_vsub3[((int)((_5415_vsub3)->size(0)) - (int)1)] > _5418_size)))
          {
            {
              _5420_err_bounds = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_5419_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_5420_err_bounds)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprInner.ctor

// mosek.fusion.ExprInner.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:2120:6-2127:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5422_expr2,
    std::shared_ptr< monty::ndarray< double,1 > > _5423_vcof2)
{ return new mosek::fusion::ExprInner(_5422_expr2,_5423_vcof2); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5422_expr2,
    std::shared_ptr< monty::ndarray< double,1 > > _5423_vcof2) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5422_expr2,_5423_vcof2); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5422_expr2,
    std::shared_ptr< monty::ndarray< double,1 > > _5423_vcof2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5423_vcof2(_5423_vcof2 ? _5423_vcof2->raw() : nullptr, _5423_vcof2 ? _5423_vcof2->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5422_expr2,::mosek::fusion::p_ExprInner::range((int)((_5423_vcof2)->size(0))),_5423_vcof2);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5424_eshape = _5422_expr2->getShape();
    _checked_ptr_1<int32_t> _ptr__5424_eshape(_5424_eshape ? _5424_eshape->raw() : nullptr,_5424_eshape ? _5424_eshape->size(0) : 0);
    if ((((int)((_5424_eshape)->size(0)) != (int)1) || (_ptr__5424_eshape[(int)0] != (int)((_5423_vcof2)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprInner.ctor

// mosek.fusion.ExprInner.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:2116:6-2118:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5425_expr1,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5426_vsub1,
    std::shared_ptr< monty::ndarray< double,1 > > _5427_vcof1)
{ return new mosek::fusion::ExprInner(_5425_expr1,_5426_vsub1,_5427_vcof1); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5425_expr1,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5426_vsub1,
    std::shared_ptr< monty::ndarray< double,1 > > _5427_vcof1) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5425_expr1,_5426_vsub1,_5427_vcof1); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5425_expr1,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5426_vsub1,
    std::shared_ptr< monty::ndarray< double,1 > > _5427_vcof1)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5427_vcof1(_5427_vcof1 ? _5427_vcof1->raw() : nullptr, _5427_vcof1 ? _5427_vcof1->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5425_expr1,::mosek::fusion::p_ExprInner::convert(_5425_expr1->getShape(),_5426_vsub1),_5427_vcof1);
  }
}
// mosek.fusion.ExprInner.ctor

// Begin mosek.fusion.ExprInner.eval
// Method mosek.fusion.ExprInner.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:2160:6-2289:7
void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5428_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5429_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5430_xs) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_5428_rs,_5429_ws,_5430_xs); }
void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5428_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5429_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5430_xs)
{
  expr->eval(_5429_ws,_5428_rs,_5430_xs);
  _5429_ws->pop_expr();
  int32_t _5431_nd = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->nd;
  int32_t _5432_nelem = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->nelem;
  int32_t _5433_nnz = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->nnz;
  int32_t _5434_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->ncodeatom;
  bool _5435_hassp = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->hassp;
  int32_t _5436_shape = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->shape_base;
  int32_t _5437_ptr = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->ptr_base;
  int32_t _5438_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->nidxs_base;
  int32_t _5439_sp = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->sp_base;
  int32_t _5440_cof = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->cof_base;
  int32_t _5441_code = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->code_base;
  int32_t _5442_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->codeptr_base;
  int32_t _5443_cconst = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5444_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5444_wi32(_5444_wi32 ? _5444_wi32->raw() : nullptr,_5444_wi32 ? _5444_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5445_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5445_wi64(_5445_wi64 ? _5445_wi64->raw() : nullptr,_5445_wi64 ? _5445_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5446_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5429_ws)->f64;
  _checked_ptr_1<double> _ptr__5446_wf64(_5446_wf64 ? _5446_wf64->raw() : nullptr,_5446_wf64 ? _5446_wf64->size(0) : 0);
  int32_t _5447_rnnz = (int)0;
  if (_5435_hassp)
  {
    {
      int32_t _5448_i1 = (int)0;
      int32_t _5449_i0 = (int)0;
      while ( ((_5449_i0 < (int)((vsub)->size(0))) && (_5448_i1 < _5432_nelem)) )
      {
        {
          if ((_ptr__5445_wi64[safe_add( _5439_sp,_5448_i1 )] < ((*vsub)(_5449_i0))))
          {
            {
              ++ _5448_i1;
            }
          }
          else if((_ptr__5445_wi64[safe_add( _5439_sp,_5448_i1 )] > ((*vsub)(_5449_i0))))
          {
            {
              ++ _5449_i0;
            }
          }
          else
          {
            {
              _5447_rnnz += (_ptr__5444_wi32[safe_add( safe_add( _5437_ptr,_5448_i1 ),(int)1 )] - _ptr__5444_wi32[safe_add( _5437_ptr,_5448_i1 )]);
              ++ _5449_i0;
              ++ _5448_i1;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _11721_ = (int)0;
      int32_t _11722_ = (int)((vsub)->size(0));
      for (int32_t _5450_i = _11721_; _5450_i < _11722_; ++_5450_i)
      {
        {
          _5447_rnnz += (_ptr__5444_wi32[safe_add( safe_add( _5437_ptr,((*vsub)(_5450_i)) ),(int)1 )] - _ptr__5444_wi32[safe_add( _5437_ptr,((*vsub)(_5450_i)) )]);
        }
      }
    }
  }
  int32_t _11723_;
  bool _11724_ = (_5434_ncodeatom > (int)0);
  if (_11724_)
  {
    _11723_ = safe_add( _5434_ncodeatom,safe_mul( (int)2,_5433_nnz ) );
  }
  else
  {
    _11723_ = (int)0;
  }
  int32_t _5451_rncodeatom = _11723_;
  _5428_rs->alloc_expr((int)0,(int)1,_5447_rnnz,false,_5451_rncodeatom);
  int32_t _5452_rptr = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->ptr_base;
  int32_t _5453_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->nidxs_base;
  int32_t _5454_rcof = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->cof_base;
  int32_t _5455_rcode = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->code_base;
  int32_t _5456_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->codeptr_base;
  int32_t _5457_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5458_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5458_ri32(_5458_ri32 ? _5458_ri32->raw() : nullptr,_5458_ri32 ? _5458_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5459_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5459_ri64(_5459_ri64 ? _5459_ri64->raw() : nullptr,_5459_ri64 ? _5459_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5460_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5428_rs)->f64;
  _checked_ptr_1<double> _ptr__5460_rf64(_5460_rf64 ? _5460_rf64->raw() : nullptr,_5460_rf64 ? _5460_rf64->size(0) : 0);
  _ptr__5458_ri32[_5452_rptr] = (int)0;
  _ptr__5458_ri32[safe_add( _5452_rptr,(int)1 )] = _5447_rnnz;
  if ((_5451_rncodeatom > (int)0))
  {
    {
      _ptr__5458_ri32[_5456_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _5461_codei = (int)0;
  int32_t _5462_k = (int)0;
  if (_5435_hassp)
  {
    {
      int32_t _5463_i1 = (int)0;
      int32_t _5464_i0 = (int)0;
      while ( ((_5464_i0 < (int)((vsub)->size(0))) && (_5463_i1 < _5432_nelem)) )
      {
        {
          if ((_ptr__5445_wi64[safe_add( _5439_sp,_5463_i1 )] < ((*vsub)(_5464_i0))))
          {
            {
              ++ _5463_i1;
            }
          }
          else if((_ptr__5445_wi64[safe_add( _5439_sp,_5463_i1 )] > ((*vsub)(_5464_i0))))
          {
            {
              ++ _5464_i0;
            }
          }
          else
          {
            {
              int32_t _5465_p0 = _ptr__5444_wi32[safe_add( _5437_ptr,_5463_i1 )];
              int32_t _5466_p1 = _ptr__5444_wi32[safe_add( safe_add( _5437_ptr,_5463_i1 ),(int)1 )];
              int32_t _11725_ = _5465_p0;
              int32_t _11726_ = _5466_p1;
              for (int32_t _5467_j = _11725_; _5467_j < _11726_; ++_5467_j)
              {
                {
                  _ptr__5459_ri64[safe_add( _5453_rnidxs,_5462_k )] = _ptr__5445_wi64[safe_add( _5438_nidxs,_5467_j )];
                  _ptr__5460_rf64[safe_add( _5454_rcof,_5462_k )] = (((*vcof)(_5464_i0)) * _ptr__5446_wf64[safe_add( _5440_cof,_5467_j )]);
                  if ((_5451_rncodeatom > (int)0))
                  {
                    {
                      int32_t _11727_ = _ptr__5444_wi32[safe_add( _5442_codeptr,_5467_j )];
                      int32_t _11728_ = _ptr__5444_wi32[safe_add( safe_add( _5442_codeptr,_5467_j ),(int)1 )];
                      for (int32_t _5468_l = _11727_; _5468_l < _11728_; ++_5468_l)
                      {
                        {
                          _ptr__5458_ri32[safe_add( _5455_rcode,_5461_codei )] = _ptr__5444_wi32[safe_add( _5441_code,_5468_l )];
                          _ptr__5460_rf64[safe_add( _5457_rcconst,_5461_codei )] = _ptr__5446_wf64[safe_add( _5443_cconst,_5468_l )];
                          ++ _5461_codei;
                        }
                      }
                      _ptr__5458_ri32[safe_add( _5455_rcode,_5461_codei )] = 2;
                      _ptr__5460_rf64[safe_add( _5457_rcconst,_5461_codei )] = ((*vcof)(_5464_i0));
                      ++ _5461_codei;
                      _ptr__5458_ri32[safe_add( _5455_rcode,_5461_codei )] = 5;
                      ++ _5461_codei;
                      _ptr__5458_ri32[safe_add( safe_add( _5456_rcodeptr,_5462_k ),(int)1 )] = _5461_codei;
                    }
                  }
                  {}
                  ++ _5462_k;
                }
              }
              ++ _5464_i0;
              ++ _5463_i1;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _11729_ = (int)0;
      int32_t _11730_ = (int)((vsub)->size(0));
      for (int32_t _5469_i = _11729_; _5469_i < _11730_; ++_5469_i)
      {
        {
          int32_t _5470_p0 = _ptr__5444_wi32[safe_add( _5437_ptr,((*vsub)(_5469_i)) )];
          int32_t _5471_p1 = _ptr__5444_wi32[safe_add( safe_add( _5437_ptr,((*vsub)(_5469_i)) ),(int)1 )];
          int32_t _11731_ = _5470_p0;
          int32_t _11732_ = _5471_p1;
          for (int32_t _5472_j = _11731_; _5472_j < _11732_; ++_5472_j)
          {
            {
              _ptr__5459_ri64[safe_add( _5453_rnidxs,_5462_k )] = _ptr__5445_wi64[safe_add( _5438_nidxs,_5472_j )];
              _ptr__5460_rf64[safe_add( _5454_rcof,_5462_k )] = (((*vcof)(_5469_i)) * _ptr__5446_wf64[safe_add( _5440_cof,_5472_j )]);
              if ((_5451_rncodeatom > (int)0))
              {
                {
                  int32_t _11733_ = _ptr__5444_wi32[safe_add( _5442_codeptr,_5472_j )];
                  int32_t _11734_ = _ptr__5444_wi32[safe_add( safe_add( _5442_codeptr,_5472_j ),(int)1 )];
                  for (int32_t _5473_l = _11733_; _5473_l < _11734_; ++_5473_l)
                  {
                    {
                      _ptr__5458_ri32[safe_add( _5455_rcode,_5461_codei )] = _ptr__5444_wi32[safe_add( _5441_code,_5473_l )];
                      _ptr__5460_rf64[safe_add( _5457_rcconst,_5461_codei )] = _ptr__5446_wf64[safe_add( _5443_cconst,_5473_l )];
                      ++ _5461_codei;
                    }
                  }
                  _ptr__5458_ri32[safe_add( _5455_rcode,_5461_codei )] = 2;
                  _ptr__5460_rf64[safe_add( _5457_rcconst,_5461_codei )] = ((*vcof)(_5469_i));
                  ++ _5461_codei;
                  _ptr__5458_ri32[safe_add( _5455_rcode,_5461_codei )] = 5;
                  ++ _5461_codei;
                  _ptr__5458_ri32[safe_add( safe_add( _5456_rcodeptr,_5462_k ),(int)1 )] = _5461_codei;
                }
              }
              {}
              ++ _5462_k;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprInner.eval

// Begin mosek.fusion.ExprInner.range
// Method mosek.fusion.ExprInner.range @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:2114:6-90
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ExprInner::range(int32_t _5474_n)
{
  std::vector<int64_t> _11735_;
  for (int32_t _5475_i = (int)0, _11736_ = _5474_n; _5475_i < _11736_ ; ++_5475_i)
  {
    _11735_.push_back(_5475_i);
  }
  auto _11737_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_11735_.size()),_11735_.begin(),_11735_.end()));
  return _11737_;
}
// End mosek.fusion.ExprInner.range

// Begin mosek.fusion.ExprInner.convert
// Method mosek.fusion.ExprInner.convert @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:2104:6-2112:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int32_t,1 > > _5476_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _5477_vsub)
{
  _checked_ptr_1<int32_t> _ptr__5476_shape(_5476_shape ? _5476_shape->raw() : nullptr, _5476_shape ? _5476_shape->size(0) : 0);
  int32_t _5478_nd = (int)((_5476_shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5479_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5478_nd)));
  _checked_ptr_1<int64_t> _ptr__5479_s(_5479_s ? _5479_s->raw() : nullptr,_5479_s ? _5479_s->size(0) : 0);
  _ptr__5479_s[(_5478_nd - (int)1)] = (int)1;
  int32_t _11738_ = (int)1;
  int32_t _11739_ = _5478_nd;
  for (int32_t _5480_i = _11738_; _5480_i < _11739_; ++_5480_i)
  {
    {
      _ptr__5479_s[((_5478_nd - _5480_i) - (int)1)] = safe_mul( _ptr__5479_s[(_5478_nd - _5480_i)],_ptr__5476_shape[(_5478_nd - _5480_i)] );
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5481_res = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_5477_vsub)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__5481_res(_5481_res ? _5481_res->raw() : nullptr,_5481_res ? _5481_res->size(0) : 0);
  int32_t _11740_ = (int)0;
  int32_t _11741_ = (int)((_5477_vsub)->size(0));
  for (int32_t _5482_i = _11740_; _5482_i < _11741_; ++_5482_i)
  {
    {
      int32_t _11742_ = (int)0;
      int32_t _11743_ = _5478_nd;
      for (int32_t _5483_j = _11742_; _5483_j < _11743_; ++_5483_j)
      {
        {
          _ptr__5481_res[_5482_i] += safe_mul( _ptr__5479_s[_5483_j],((*_5477_vsub)(_5482_i,_5483_j)) );
        }
      }
    }
  }
  return _5481_res;
}
// End mosek.fusion.ExprInner.convert

// Begin mosek.fusion.ExprInner.toString
// Method mosek.fusion.ExprInner.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:2102:6-64
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprInner::toString()
{
  return std::string ("ExprInner()");
}
// End mosek.fusion.ExprInner.toString

void mosek::fusion::p_ExprInner::destroy()
{
  vcof.reset();
  vsub.reset();
  expr.reset();
}
void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }
// } class ExprInner
// class ExprMulDiagRight { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1738:4-2093:5
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }
mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight
  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulDiagRight.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1824:6-1842:7
mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight
  (int32_t _5484_mdim0,
    int32_t _5485_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5486_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5487_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5488_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5489_expr,
    int32_t _5490_validated)
{ return new mosek::fusion::ExprMulDiagRight(_5484_mdim0,_5485_mdim1,_5486_msubi,_5487_msubj,_5488_mval,_5489_expr,_5490_validated); }
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight
  (int32_t _5484_mdim0,
    int32_t _5485_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5486_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5487_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5488_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5489_expr,
    int32_t _5490_validated) : 
   ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this))
{ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5484_mdim0,_5485_mdim1,_5486_msubi,_5487_msubj,_5488_mval,_5489_expr,_5490_validated); }
void mosek::fusion::p_ExprMulDiagRight::_initialize  (int32_t _5484_mdim0,
    int32_t _5485_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5486_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5487_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5488_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5489_expr,
    int32_t _5490_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5486_msubi(_5486_msubi ? _5486_msubi->raw() : nullptr, _5486_msubi ? _5486_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5487_msubj(_5487_msubj ? _5487_msubj->raw() : nullptr, _5487_msubj ? _5487_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5488_mval(_5488_mval ? _5488_mval->raw() : nullptr, _5488_mval ? _5488_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5489_expr->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5485_mdim1)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _5484_mdim0;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _5485_mdim1;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _5486_msubi;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _5487_msubj;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _5488_mval;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _5489_expr;
  }
}
// mosek.fusion.ExprMulDiagRight.ctor

// mosek.fusion.ExprMulDiagRight.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1812:6-1822:7
mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight
  (int32_t _5491_mdim0,
    int32_t _5492_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5493_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5494_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5495_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5496_expr)
{ return new mosek::fusion::ExprMulDiagRight(_5491_mdim0,_5492_mdim1,_5493_msubi,_5494_msubj,_5495_mval,_5496_expr); }
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight
  (int32_t _5491_mdim0,
    int32_t _5492_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5493_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5494_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5495_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5496_expr) : 
   ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this))
{ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5491_mdim0,_5492_mdim1,_5493_msubi,_5494_msubj,_5495_mval,_5496_expr); }
void mosek::fusion::p_ExprMulDiagRight::_initialize  (int32_t _5491_mdim0,
    int32_t _5492_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5493_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5494_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5495_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5496_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5493_msubi(_5493_msubi ? _5493_msubi->raw() : nullptr, _5493_msubi ? _5493_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5494_msubj(_5494_msubj ? _5494_msubj->raw() : nullptr, _5494_msubj ? _5494_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5495_mval(_5495_mval ? _5495_mval->raw() : nullptr, _5495_mval ? _5495_mval->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_5491_mdim0,_5492_mdim1,_5493_msubi,_5494_msubj,_5495_mval,_5496_expr,::mosek::fusion::p_ExprMulDiagRight::validate(_5491_mdim0,_5492_mdim1,_5493_msubi,_5494_msubj,_5495_mval,_5496_expr));
  }
}
// mosek.fusion.ExprMulDiagRight.ctor

// Begin mosek.fusion.ExprMulDiagRight.eval
// Method mosek.fusion.ExprMulDiagRight.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1845:6-2092:7
void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5497_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5498_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5499_xs) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_5497_rs,_5498_ws,_5499_xs); }
void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5497_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5498_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5499_xs)
{
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_5498_ws,_5497_rs,_5499_xs);
  _5498_ws->pop_expr();
  int32_t _5500_nd = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->nd;
  int32_t _5501_nnz = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->nnz;
  int32_t _5502_nelem = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->nelem;
  int32_t _5503_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->ncodeatom;
  bool _5504_hassp = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->hassp;
  int32_t _5505_shape = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->shape_base;
  int32_t _5506_ptr = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->ptr_base;
  int32_t _5507_sp = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->sp_base;
  int32_t _5508_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->nidxs_base;
  int32_t _5509_cof = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->cof_base;
  int32_t _5510_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->codeptr_base;
  int32_t _5511_code = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->code_base;
  int32_t _5512_cconst = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5513_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5513_wi32(_5513_wi32 ? _5513_wi32->raw() : nullptr,_5513_wi32 ? _5513_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5514_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5514_wi64(_5514_wi64 ? _5514_wi64->raw() : nullptr,_5514_wi64 ? _5514_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5515_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5498_ws)->f64;
  _checked_ptr_1<double> _ptr__5515_wf64(_5515_wf64 ? _5515_wf64->raw() : nullptr,_5515_wf64 ? _5515_wf64->size(0) : 0);
  int32_t _5516_edim0 = _ptr__5513_wi32[_5505_shape];
  int32_t _5517_edim1 = _ptr__5513_wi32[safe_add( _5505_shape,(int)1 )];
  int32_t _5518_mnnz = (int)((mval)->size(0));
  int32_t _5519_xmperm = _5499_xs->alloci32(_5518_mnnz);
  int32_t _5520_xmcolptr = _5499_xs->alloci32(safe_add( mdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5521_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5499_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__5521_xi32(_5521_xi32 ? _5521_xi32->raw() : nullptr,_5521_xi32 ? _5521_xi32->size(0) : 0);
  {
    int32_t _11744_ = (int)0;
    int32_t _11745_ = safe_add( mdim1,(int)1 );
    for (int32_t _5522_i = _11744_; _5522_i < _11745_; ++_5522_i)
    {
      {
        _ptr__5521_xi32[safe_add( _5520_xmcolptr,_5522_i )] = (int)0;
      }
    }
    int32_t _11746_ = (int)0;
    int32_t _11747_ = _5518_mnnz;
    for (int32_t _5523_i = _11746_; _5523_i < _11747_; ++_5523_i)
    {
      {
        ++ _ptr__5521_xi32[safe_add( safe_add( _5520_xmcolptr,((*msubj)(_5523_i)) ),(int)1 )];
      }
    }
    int32_t _11748_ = (int)0;
    int32_t _11749_ = mdim1;
    for (int32_t _5524_i = _11748_; _5524_i < _11749_; ++_5524_i)
    {
      {
        _ptr__5521_xi32[safe_add( safe_add( _5520_xmcolptr,_5524_i ),(int)1 )] += _ptr__5521_xi32[safe_add( _5520_xmcolptr,_5524_i )];
      }
    }
    int32_t _11750_ = (int)0;
    int32_t _11751_ = _5518_mnnz;
    for (int32_t _5525_i = _11750_; _5525_i < _11751_; ++_5525_i)
    {
      {
        _ptr__5521_xi32[safe_add( _5519_xmperm,_ptr__5521_xi32[safe_add( _5520_xmcolptr,((*msubj)(_5525_i)) )] )] = _5525_i;
        ++ _ptr__5521_xi32[safe_add( _5520_xmcolptr,((*msubj)(_5525_i)) )];
      }
    }
    int32_t _11752_ = (int)0;
    int32_t _11753_ = mdim1;
    for (int32_t _5526_i = _11752_; _5526_i < _11753_; ++_5526_i)
    {
      {
        _ptr__5521_xi32[(safe_add( _5520_xmcolptr,mdim1 ) - _5526_i)] = _ptr__5521_xi32[((safe_add( _5520_xmcolptr,mdim1 ) - _5526_i) - (int)1)];
      }
    }
    _ptr__5521_xi32[_5520_xmcolptr] = (int)0;
  }
  int32_t _5527_rncodeatom = (int)0;
  int32_t _5528_rnnz = (int)0;
  int32_t _5529_rnelem = (int)0;
  if ((!_5504_hassp))
  {
    {
      int32_t _5530_i1 = (int)0;
      while ( (_5530_i1 < _5518_mnnz) )
      {
        {
          int32_t _5531_mcol = ((*msubj)(_ptr__5521_xi32[safe_add( _5519_xmperm,_5530_i1 )]));
          int32_t _5532_b1 = _5530_i1;
          while ( ((_5530_i1 < _5518_mnnz) && (_5531_mcol == ((*msubj)(_ptr__5521_xi32[safe_add( _5519_xmperm,_5530_i1 )])))) )
          {
            {
              ++ _5530_i1;
            }
          }
          int32_t _11754_ = _5532_b1;
          int32_t _11755_ = _5530_i1;
          for (int32_t _5533_i = _11754_; _5533_i < _11755_; ++_5533_i)
          {
            {
              int32_t _5534_eidx = safe_add( safe_mul( ((*msubj)(_ptr__5521_xi32[safe_add( _5519_xmperm,_5533_i )])),_5517_edim1 ),((*msubi)(_ptr__5521_xi32[safe_add( _5519_xmperm,_5533_i )])) );
              _5528_rnnz += (_ptr__5513_wi32[safe_add( safe_add( _5506_ptr,_5534_eidx ),(int)1 )] - _ptr__5513_wi32[safe_add( _5506_ptr,_5534_eidx )]);
              if ((_5503_ncodeatom > (int)0))
              {
                {
                  _5527_rncodeatom += safe_add( (_ptr__5513_wi32[safe_add( _5510_codeptr,_ptr__5513_wi32[safe_add( safe_add( _5506_ptr,_5534_eidx ),(int)1 )] )] - _ptr__5513_wi32[safe_add( _5510_codeptr,_ptr__5513_wi32[safe_add( _5506_ptr,_5534_eidx )] )]),safe_mul( (int)2,(_ptr__5513_wi32[safe_add( safe_add( _5506_ptr,_5534_eidx ),(int)1 )] - _ptr__5513_wi32[safe_add( _5506_ptr,_5534_eidx )]) ) );
                }
              }
              {}
            }
          }
          ++ _5529_rnelem;
        }
      }
    }
  }
  else
  {
    {
      int32_t _5535_i1 = (int)0;
      int32_t _5536_i0 = (int)0;
      int32_t _11756_ = (int)0;
      int32_t _11757_ = mdim1;
      for (int32_t _5537_i = _11756_; _5537_i < _11757_; ++_5537_i)
      {
        {
          int32_t _5538_b1 = _5535_i1;
          int32_t _5539_b0 = _5536_i0;
          while ( ((_5535_i1 < _5518_mnnz) && (_5537_i == ((*msubj)(_ptr__5521_xi32[safe_add( _5519_xmperm,_5535_i1 )])))) )
          {
            {
              ++ _5535_i1;
            }
          }
          while ( ((_5536_i0 < _5502_nelem) && (_5537_i == (_ptr__5514_wi64[safe_add( _5507_sp,_5536_i0 )] / _5517_edim1))) )
          {
            {
              ++ _5536_i0;
            }
          }
          int32_t _5540_ii1 = _5538_b1;
          int32_t _5541_ii0 = _5539_b0;
          int32_t _5542_rownnz = (int)0;
          while ( ((_5541_ii0 < _5536_i0) && (_5540_ii1 < _5535_i1)) )
          {
            {
              if (((_ptr__5514_wi64[safe_add( _5507_sp,_5541_ii0 )] % _5517_edim1) < ((*msubi)(_ptr__5521_xi32[safe_add( _5519_xmperm,_5540_ii1 )]))))
              {
                {
                  ++ _5541_ii0;
                }
              }
              else if(((_ptr__5514_wi64[safe_add( _5507_sp,_5541_ii0 )] % _5517_edim1) > ((*msubi)(_ptr__5521_xi32[safe_add( _5519_xmperm,_5540_ii1 )]))))
              {
                {
                  ++ _5540_ii1;
                }
              }
              else
              {
                {
                  _5528_rnnz += (_ptr__5513_wi32[safe_add( safe_add( _5506_ptr,_5541_ii0 ),(int)1 )] - _ptr__5513_wi32[safe_add( _5506_ptr,_5541_ii0 )]);
                  if ((_5503_ncodeatom > (int)0))
                  {
                    {
                      _5527_rncodeatom += safe_add( (_ptr__5513_wi32[safe_add( _5510_codeptr,_ptr__5513_wi32[safe_add( safe_add( _5506_ptr,_5541_ii0 ),(int)1 )] )] - _ptr__5513_wi32[safe_add( _5510_codeptr,_ptr__5513_wi32[safe_add( _5506_ptr,_5541_ii0 )] )]),safe_mul( (int)2,(_ptr__5513_wi32[safe_add( safe_add( _5506_ptr,_5541_ii0 ),(int)1 )] - _ptr__5513_wi32[safe_add( _5506_ptr,_5541_ii0 )]) ) );
                    }
                  }
                  {}
                  ++ _5542_rownnz;
                  ++ _5541_ii0;
                  ++ _5540_ii1;
                }
              }
            }
          }
          if ((_5542_rownnz > (int)0))
          {
            {
              ++ _5529_rnelem;
            }
          }
          {}
        }
      }
    }
  }
  bool _5543_rhassp = (_5529_rnelem < _5516_edim0);
  _5497_rs->alloc_expr((int)1,_5529_rnelem,_5528_rnnz,_5543_rhassp,_5527_rncodeatom);
  int32_t _5544_rptr = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->ptr_base;
  int32_t _5545_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->nidxs_base;
  int32_t _11758_;
  bool _11759_ = _5543_rhassp;
  if (_11759_)
  {
    _11758_ = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->sp_base;
  }
  else
  {
    _11758_ = _5497_rs->alloci64(_5529_rnelem);
  }
  int32_t _5546_rsp = _11758_;
  int32_t _5547_rcof = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->cof_base;
  int32_t _5548_rshape = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->shape_base;
  int32_t _5549_rcode = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->code_base;
  int32_t _5550_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->codeptr_base;
  int32_t _5551_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5552_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5552_ri64(_5552_ri64 ? _5552_ri64->raw() : nullptr,_5552_ri64 ? _5552_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5553_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->f64;
  _checked_ptr_1<double> _ptr__5553_rf64(_5553_rf64 ? _5553_rf64->raw() : nullptr,_5553_rf64 ? _5553_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5554_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5497_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5554_ri32(_5554_ri32 ? _5554_ri32->raw() : nullptr,_5554_ri32 ? _5554_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5555_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5499_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__5555_xi32(_5555_xi32 ? _5555_xi32->raw() : nullptr,_5555_xi32 ? _5555_xi32->size(0) : 0);
  {
    int32_t _5556_codei = (int)0;
    int32_t _5557_nzi = (int)0;
    int32_t _5558_elmi = (int)0;
    _ptr__5554_ri32[_5544_rptr] = (int)0;
    if ((_5527_rncodeatom > (int)0))
    {
      {
        _ptr__5554_ri32[_5550_rcodeptr] = (int)0;
      }
    }
    {}
    _ptr__5554_ri32[_5548_rshape] = mdim1;
    if ((!_5504_hassp))
    {
      {
        int32_t _5559_i1 = (int)0;
        while ( (_5559_i1 < _5518_mnnz) )
        {
          {
            int32_t _5560_mcol = ((*msubj)(_ptr__5555_xi32[safe_add( _5519_xmperm,_5559_i1 )]));
            int32_t _5561_b1 = _5559_i1;
            while ( ((_5559_i1 < _5518_mnnz) && (_5560_mcol == ((*msubj)(_ptr__5555_xi32[safe_add( _5519_xmperm,_5559_i1 )])))) )
            {
              {
                ++ _5559_i1;
              }
            }
            int32_t _11760_ = _5561_b1;
            int32_t _11761_ = _5559_i1;
            for (int32_t _5562_i = _11760_; _5562_i < _11761_; ++_5562_i)
            {
              {
                int32_t _5563_midx = _ptr__5555_xi32[safe_add( _5519_xmperm,_5562_i )];
                int32_t _5564_eidx = safe_add( safe_mul( ((*msubj)(_5563_midx)),_5517_edim1 ),((*msubi)(_5563_midx)) );
                int32_t _11762_ = _ptr__5513_wi32[safe_add( _5506_ptr,_5564_eidx )];
                int32_t _11763_ = _ptr__5513_wi32[safe_add( safe_add( _5506_ptr,_5564_eidx ),(int)1 )];
                for (int32_t _5565_j = _11762_; _5565_j < _11763_; ++_5565_j)
                {
                  {
                    _ptr__5552_ri64[safe_add( _5545_rnidxs,_5557_nzi )] = _ptr__5514_wi64[safe_add( _5508_nidxs,_5565_j )];
                    _ptr__5553_rf64[safe_add( _5547_rcof,_5557_nzi )] = (_ptr__5515_wf64[safe_add( _5509_cof,_5565_j )] * ((*mval)(_5563_midx)));
                    if ((_5503_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11764_ = _ptr__5513_wi32[safe_add( _5510_codeptr,_5565_j )];
                        int32_t _11765_ = _ptr__5513_wi32[safe_add( safe_add( _5510_codeptr,_5565_j ),(int)1 )];
                        for (int32_t _5566_k = _11764_; _5566_k < _11765_; ++_5566_k)
                        {
                          {
                            _ptr__5554_ri32[safe_add( _5549_rcode,_5556_codei )] = _ptr__5513_wi32[safe_add( _5511_code,_5566_k )];
                            _ptr__5553_rf64[safe_add( _5551_rcconst,_5556_codei )] = _ptr__5515_wf64[safe_add( _5512_cconst,_5566_k )];
                            ++ _5556_codei;
                          }
                        }
                        _ptr__5554_ri32[safe_add( _5549_rcode,_5556_codei )] = 2;
                        _ptr__5553_rf64[safe_add( _5551_rcconst,_5556_codei )] = ((*mval)(_5563_midx));
                        ++ _5556_codei;
                        _ptr__5554_ri32[safe_add( _5549_rcode,_5556_codei )] = 5;
                        ++ _5556_codei;
                        _ptr__5554_ri32[safe_add( safe_add( _5550_rcodeptr,_5557_nzi ),(int)1 )] = _5556_codei;
                      }
                    }
                    {}
                    ++ _5557_nzi;
                  }
                }
              }
            }
            _ptr__5552_ri64[safe_add( _5546_rsp,_5558_elmi )] = _5560_mcol;
            _ptr__5554_ri32[safe_add( safe_add( _5544_rptr,_5558_elmi ),(int)1 )] = _5557_nzi;
            ++ _5558_elmi;
          }
        }
      }
    }
    else
    {
      {
        int32_t _5567_i1 = (int)0;
        int32_t _5568_i0 = (int)0;
        int32_t _11766_ = (int)0;
        int32_t _11767_ = mdim1;
        for (int32_t _5569_i = _11766_; _5569_i < _11767_; ++_5569_i)
        {
          {
            int32_t _5570_b1 = _5567_i1;
            int32_t _5571_b0 = _5568_i0;
            while ( ((_5568_i0 < _5502_nelem) && (_5569_i == (_ptr__5514_wi64[safe_add( _5507_sp,_5568_i0 )] / _5517_edim1))) )
            {
              {
                ++ _5568_i0;
              }
            }
            while ( ((_5567_i1 < _5518_mnnz) && (_5569_i == ((*msubj)(_ptr__5555_xi32[safe_add( _5519_xmperm,_5567_i1 )])))) )
            {
              {
                ++ _5567_i1;
              }
            }
            int32_t _5572_ii1 = _5570_b1;
            int32_t _5573_ii0 = _5571_b0;
            int32_t _5574_rownnz = (int)0;
            while ( ((_5573_ii0 < _5568_i0) && (_5572_ii1 < _5567_i1)) )
            {
              {
                if (((_ptr__5514_wi64[safe_add( _5507_sp,_5573_ii0 )] % _5517_edim1) < ((*msubi)(_ptr__5555_xi32[safe_add( _5519_xmperm,_5572_ii1 )]))))
                {
                  {
                    ++ _5573_ii0;
                  }
                }
                else if(((_ptr__5514_wi64[safe_add( _5507_sp,_5573_ii0 )] % _5517_edim1) > ((*msubi)(_ptr__5555_xi32[safe_add( _5519_xmperm,_5572_ii1 )]))))
                {
                  {
                    ++ _5572_ii1;
                  }
                }
                else
                {
                  {
                    int32_t _5575_midx = _ptr__5555_xi32[safe_add( _5519_xmperm,_5572_ii1 )];
                    int32_t _11768_ = _ptr__5513_wi32[safe_add( _5506_ptr,_5573_ii0 )];
                    int32_t _11769_ = _ptr__5513_wi32[safe_add( safe_add( _5506_ptr,_5573_ii0 ),(int)1 )];
                    for (int32_t _5576_j = _11768_; _5576_j < _11769_; ++_5576_j)
                    {
                      {
                        _ptr__5552_ri64[safe_add( _5545_rnidxs,_5557_nzi )] = _ptr__5514_wi64[safe_add( _5508_nidxs,_5576_j )];
                        _ptr__5553_rf64[safe_add( _5547_rcof,_5557_nzi )] = (_ptr__5515_wf64[safe_add( _5509_cof,_5576_j )] * ((*mval)(_5575_midx)));
                        if ((_5503_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11770_ = _ptr__5513_wi32[safe_add( _5510_codeptr,_5576_j )];
                            int32_t _11771_ = _ptr__5513_wi32[safe_add( safe_add( _5510_codeptr,_5576_j ),(int)1 )];
                            for (int32_t _5577_k = _11770_; _5577_k < _11771_; ++_5577_k)
                            {
                              {
                                _ptr__5554_ri32[safe_add( _5549_rcode,_5556_codei )] = _ptr__5513_wi32[safe_add( _5511_code,_5577_k )];
                                _ptr__5553_rf64[safe_add( _5551_rcconst,_5556_codei )] = _ptr__5515_wf64[safe_add( _5512_cconst,_5577_k )];
                                ++ _5556_codei;
                              }
                            }
                            _ptr__5554_ri32[safe_add( _5549_rcode,_5556_codei )] = 2;
                            _ptr__5553_rf64[safe_add( _5551_rcconst,_5556_codei )] = ((*mval)(_5575_midx));
                            ++ _5556_codei;
                            _ptr__5554_ri32[safe_add( _5549_rcode,_5556_codei )] = 5;
                            ++ _5556_codei;
                            _ptr__5554_ri32[safe_add( safe_add( _5550_rcodeptr,_5557_nzi ),(int)1 )] = _5556_codei;
                          }
                        }
                        {}
                        ++ _5557_nzi;
                      }
                    }
                    ++ _5574_rownnz;
                    ++ _5573_ii0;
                    ++ _5572_ii1;
                  }
                }
              }
            }
            if ((_5574_rownnz > (int)0))
            {
              {
                _ptr__5554_ri32[safe_add( safe_add( _5544_rptr,_5558_elmi ),(int)1 )] = _5557_nzi;
                _ptr__5552_ri64[safe_add( _5546_rsp,_5558_elmi )] = _5569_i;
                ++ _5558_elmi;
              }
            }
            {}
          }
        }
      }
    }
    if ((!_5543_rhassp))
    {
      {
        _5497_rs->popi64(_5529_rnelem);
      }
    }
    {}
    if ((!(_5528_rnnz == _5557_nzi)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of non-zeros"));
      }
    }
    {}
    if ((!(_5529_rnelem == _5558_elmi)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of elements"));
      }
    }
    {}
  }
  _5499_xs->clear();
}
// End mosek.fusion.ExprMulDiagRight.eval

// Begin mosek.fusion.ExprMulDiagRight.validate
// Method mosek.fusion.ExprMulDiagRight.validate @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1751:6-1797:7
int32_t mosek::fusion::p_ExprMulDiagRight::validate(int32_t _5578_mdim0,int32_t _5579_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5580_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5581_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5582_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5583_expr)
{
  _checked_ptr_1<int32_t> _ptr__5580_msubi(_5580_msubi ? _5580_msubi->raw() : nullptr, _5580_msubi ? _5580_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5581_msubj(_5581_msubj ? _5581_msubj->raw() : nullptr, _5581_msubj ? _5581_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5582_mval(_5582_mval ? _5582_mval->raw() : nullptr, _5582_mval ? _5582_mval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5584_eshape = _5583_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__5584_eshape(_5584_eshape ? _5584_eshape->raw() : nullptr,_5584_eshape ? _5584_eshape->size(0) : 0);
  if (((int)((_5584_eshape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _5585_edim0 = _ptr__5584_eshape[(int)0];
  int32_t _5586_edim1 = _ptr__5584_eshape[(int)1];
  if (((_5578_mdim0 < (int)0) || ((_5579_mdim1 < (int)0) || ((_5585_edim0 < (int)0) || (_5586_edim1 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5578_mdim0 != _5586_edim1) || (_5579_mdim1 != _5585_edim0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5580_msubi)->size(0)) != (int)((_5581_msubj)->size(0))) || ((int)((_5580_msubi)->size(0)) != (int)((_5582_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5587_mnnz = (int)((_5580_msubi)->size(0));
  bool _5588_err_data = false;
  bool _5589_err_sorted = false;
  {
    int32_t _11772_ = (int)0;
    int32_t _11773_ = _5587_mnnz;
    for (int32_t _5590_i = _11772_; _5590_i < _11773_; ++_5590_i)
    {
      {
        if (((_ptr__5580_msubi[_5590_i] < (int)0) || ((_ptr__5580_msubi[_5590_i] >= _5578_mdim0) || ((_ptr__5581_msubj[_5590_i] < (int)0) || (_ptr__5581_msubj[_5590_i] >= _5579_mdim1)))))
        {
          {
            _5588_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11774_ = (int)0;
    int32_t _11775_ = (_5587_mnnz - (int)1);
    for (int32_t _5591_i = _11774_; _5591_i < _11775_; ++_5591_i)
    {
      {
        if (((_ptr__5580_msubi[_5591_i] > _ptr__5580_msubi[safe_add( _5591_i,(int)1 )]) || ((_ptr__5580_msubi[_5591_i] == _ptr__5580_msubi[safe_add( _5591_i,(int)1 )]) && (_ptr__5581_msubj[_5591_i] >= _ptr__5581_msubj[safe_add( _5591_i,(int)1 )]))))
        {
          {
            _5589_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5588_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5589_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprMulDiagRight.validate

// Begin mosek.fusion.ExprMulDiagRight.toString
// Method mosek.fusion.ExprMulDiagRight.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1749:6-137
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulDiagRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",m)"))->toString();
}
// End mosek.fusion.ExprMulDiagRight.toString

void mosek::fusion::p_ExprMulDiagRight::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }
// } class ExprMulDiagRight
// class ExprMulDiagLeft { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1355:4-1724:5
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft
  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulDiagLeft.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1440:6-1459:7
mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft
  (int32_t _5592_mdim0,
    int32_t _5593_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5594_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5595_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5596_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5597_expr,
    int32_t _5598_validated)
{ return new mosek::fusion::ExprMulDiagLeft(_5592_mdim0,_5593_mdim1,_5594_msubi,_5595_msubj,_5596_mval,_5597_expr,_5598_validated); }
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft
  (int32_t _5592_mdim0,
    int32_t _5593_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5594_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5595_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5596_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5597_expr,
    int32_t _5598_validated) : 
   ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this))
{ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5592_mdim0,_5593_mdim1,_5594_msubi,_5595_msubj,_5596_mval,_5597_expr,_5598_validated); }
void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int32_t _5592_mdim0,
    int32_t _5593_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5594_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5595_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5596_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5597_expr,
    int32_t _5598_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5594_msubi(_5594_msubi ? _5594_msubi->raw() : nullptr, _5594_msubi ? _5594_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5595_msubj(_5595_msubj ? _5595_msubj->raw() : nullptr, _5595_msubj ? _5595_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5596_mval(_5596_mval ? _5596_mval->raw() : nullptr, _5596_mval ? _5596_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5597_expr->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5592_mdim0)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _5592_mdim0;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _5593_mdim1;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _5594_msubi;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _5595_msubj;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _5596_mval;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _5597_expr;
  }
}
// mosek.fusion.ExprMulDiagLeft.ctor

// mosek.fusion.ExprMulDiagLeft.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1428:6-1438:7
mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft
  (int32_t _5599_mdim0,
    int32_t _5600_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5601_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5602_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5603_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5604_expr)
{ return new mosek::fusion::ExprMulDiagLeft(_5599_mdim0,_5600_mdim1,_5601_msubi,_5602_msubj,_5603_mval,_5604_expr); }
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft
  (int32_t _5599_mdim0,
    int32_t _5600_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5601_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5602_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5603_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5604_expr) : 
   ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this))
{ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5599_mdim0,_5600_mdim1,_5601_msubi,_5602_msubj,_5603_mval,_5604_expr); }
void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int32_t _5599_mdim0,
    int32_t _5600_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5601_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5602_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5603_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5604_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5601_msubi(_5601_msubi ? _5601_msubi->raw() : nullptr, _5601_msubi ? _5601_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5602_msubj(_5602_msubj ? _5602_msubj->raw() : nullptr, _5602_msubj ? _5602_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5603_mval(_5603_mval ? _5603_mval->raw() : nullptr, _5603_mval ? _5603_mval->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_5599_mdim0,_5600_mdim1,_5601_msubi,_5602_msubj,_5603_mval,_5604_expr,::mosek::fusion::p_ExprMulDiagLeft::validate(_5599_mdim0,_5600_mdim1,_5601_msubi,_5602_msubj,_5603_mval,_5604_expr));
  }
}
// mosek.fusion.ExprMulDiagLeft.ctor

// Begin mosek.fusion.ExprMulDiagLeft.eval
// Method mosek.fusion.ExprMulDiagLeft.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1462:6-1723:7
void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5605_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5606_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5607_xs) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_5605_rs,_5606_ws,_5607_xs); }
void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5605_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5606_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5607_xs)
{
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_5606_ws,_5605_rs,_5607_xs);
  _5606_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5608_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5608_wi32(_5608_wi32 ? _5608_wi32->raw() : nullptr,_5608_wi32 ? _5608_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5609_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5609_wi64(_5609_wi64 ? _5609_wi64->raw() : nullptr,_5609_wi64 ? _5609_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5610_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->f64;
  _checked_ptr_1<double> _ptr__5610_wf64(_5610_wf64 ? _5610_wf64->raw() : nullptr,_5610_wf64 ? _5610_wf64->size(0) : 0);
  int32_t _5611_nd = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->nd;
  int32_t _5612_nelem = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->nelem;
  int32_t _5613_nnz = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->nnz;
  bool _5614_hassp = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->hassp;
  int32_t _5615_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->ncodeatom;
  int32_t _5616_ptr = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->ptr_base;
  int32_t _5617_code = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->code_base;
  int32_t _5618_cconst = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->cconst_base;
  int32_t _5619_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->codeptr_base;
  int32_t _5620_shape = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->shape_base;
  int32_t _5621_sp = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->sp_base;
  int32_t _5622_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->nidxs_base;
  int32_t _5623_cof = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->cof_base;
  int32_t _5624_consts = mosek::fusion::p_WorkStack::_get_impl(_5606_ws)->cconst_base;
  if ((_5611_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _5625_edim0 = _ptr__5608_wi32[_5620_shape];
  int32_t _5626_edim1 = _ptr__5608_wi32[safe_add( _5620_shape,(int)1 )];
  int32_t _5627_mnumnz = (int)((msubi)->size(0));
  if ((!_5614_hassp))
  {
    {
      int32_t _5628_rnnz = (int)0;
      int32_t _5629_rnelem = (int)0;
      int32_t _5630_rncodeatom = (int)0;
      int32_t _5631_i = (int)0;
      while ( (_5631_i < (int)((msubi)->size(0))) )
      {
        {
          int32_t _5632_i0 = ((*msubi)(_5631_i));
          while ( ((_5631_i < (int)((msubi)->size(0))) && (((*msubi)(_5631_i)) == _5632_i0)) )
          {
            {
              int32_t _5633_idx = safe_add( safe_mul( ((*msubj)(_5631_i)),_5626_edim1 ),((*msubi)(_5631_i)) );
              _5628_rnnz += (_ptr__5608_wi32[safe_add( safe_add( _5616_ptr,_5633_idx ),(int)1 )] - _ptr__5608_wi32[safe_add( _5616_ptr,_5633_idx )]);
              if ((_5615_ncodeatom > (int)0))
              {
                {
                  _5630_rncodeatom += safe_add( (_ptr__5608_wi32[safe_add( _5619_codeptr,_ptr__5608_wi32[safe_add( safe_add( _5616_ptr,_5633_idx ),(int)1 )] )] - _ptr__5608_wi32[safe_add( _5619_codeptr,_ptr__5608_wi32[safe_add( _5616_ptr,_5633_idx )] )]),safe_mul( (int)2,(_ptr__5608_wi32[safe_add( safe_add( _5616_ptr,_5633_idx ),(int)1 )] - _ptr__5608_wi32[safe_add( _5616_ptr,_5633_idx )]) ) );
                }
              }
              {}
              ++ _5631_i;
            }
          }
          ++ _5629_rnelem;
        }
      }
      bool _5634_rhassp = (_5629_rnelem < mdim0);
      _5605_rs->alloc_expr((int)1,_5629_rnelem,_5628_rnnz,_5634_rhassp,_5630_rncodeatom);
      int32_t _5635_rptr = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->ptr_base;
      int32_t _5636_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->nidxs_base;
      int32_t _11776_;
      bool _11777_ = _5634_rhassp;
      if (_11777_)
      {
        _11776_ = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->sp_base;
      }
      else
      {
        _11776_ = _5605_rs->alloci64(_5629_rnelem);
      }
      int32_t _5637_rsp = _11776_;
      int32_t _5638_rcof = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->cof_base;
      int32_t _5639_rshape = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->shape_base;
      int32_t _5640_rcode = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->code_base;
      int32_t _5641_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->codeptr_base;
      int32_t _5642_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5643_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5643_ri64(_5643_ri64 ? _5643_ri64->raw() : nullptr,_5643_ri64 ? _5643_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5644_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->f64;
      _checked_ptr_1<double> _ptr__5644_rf64(_5644_rf64 ? _5644_rf64->raw() : nullptr,_5644_rf64 ? _5644_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5645_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5645_ri32(_5645_ri32 ? _5645_ri32->raw() : nullptr,_5645_ri32 ? _5645_ri32->size(0) : 0);
      {
        _ptr__5645_ri32[_5635_rptr] = (int)0;
        if ((_5615_ncodeatom > (int)0))
        {
          {
            _ptr__5645_ri32[_5641_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__5645_ri32[_5639_rshape] = mdim0;
        int32_t _5646_nzi = (int)0;
        int32_t _5647_elmi = (int)0;
        int32_t _5648_codei = (int)0;
        {
        }
        {
          int32_t _5649_i = (int)0;
          while ( (_5649_i < (int)((msubi)->size(0))) )
          {
            {
              int32_t _5650_i0 = ((*msubi)(_5649_i));
              while ( ((_5649_i < (int)((msubi)->size(0))) && (((*msubi)(_5649_i)) == _5650_i0)) )
              {
                {
                  int32_t _5651_idx = safe_add( safe_mul( ((*msubj)(_5649_i)),_5626_edim1 ),((*msubi)(_5649_i)) );
                  int32_t _11778_ = _ptr__5608_wi32[safe_add( _5616_ptr,_5651_idx )];
                  int32_t _11779_ = _ptr__5608_wi32[safe_add( safe_add( _5616_ptr,_5651_idx ),(int)1 )];
                  for (int32_t _5652_j = _11778_; _5652_j < _11779_; ++_5652_j)
                  {
                    {
                      _ptr__5643_ri64[safe_add( _5636_rnidxs,_5646_nzi )] = _ptr__5609_wi64[safe_add( _5622_nidxs,_5652_j )];
                      _ptr__5644_rf64[safe_add( _5638_rcof,_5646_nzi )] = (_ptr__5610_wf64[safe_add( _5623_cof,_5652_j )] * ((*mval)(_5649_i)));
                      if ((_5630_rncodeatom > (int)0))
                      {
                        {
                          int32_t _11780_ = _ptr__5608_wi32[safe_add( _5619_codeptr,_5652_j )];
                          int32_t _11781_ = _ptr__5608_wi32[safe_add( safe_add( _5619_codeptr,_5652_j ),(int)1 )];
                          for (int32_t _5653_k = _11780_; _5653_k < _11781_; ++_5653_k)
                          {
                            {
                              _ptr__5645_ri32[safe_add( _5640_rcode,_5648_codei )] = _ptr__5608_wi32[safe_add( _5617_code,_5653_k )];
                              _ptr__5644_rf64[safe_add( _5642_rcconst,_5648_codei )] = _ptr__5610_wf64[safe_add( _5618_cconst,_5653_k )];
                              ++ _5648_codei;
                            }
                          }
                          _ptr__5645_ri32[safe_add( _5640_rcode,_5648_codei )] = 2;
                          _ptr__5644_rf64[safe_add( _5642_rcconst,_5648_codei )] = ((*mval)(_5649_i));
                          ++ _5648_codei;
                          _ptr__5645_ri32[safe_add( _5640_rcode,_5648_codei )] = 5;
                          ++ _5648_codei;
                          _ptr__5645_ri32[safe_add( safe_add( _5641_rcodeptr,_5646_nzi ),(int)1 )] = _5648_codei;
                        }
                      }
                      {}
                      ++ _5646_nzi;
                    }
                  }
                  ++ _5649_i;
                }
              }
              _ptr__5645_ri32[safe_add( safe_add( _5635_rptr,_5647_elmi ),(int)1 )] = _5646_nzi;
              _ptr__5643_ri64[safe_add( _5637_rsp,_5647_elmi )] = _5650_i0;
              ++ _5647_elmi;
            }
          }
        }
      }
      if ((!_5634_rhassp))
      {
        {
          _5605_rs->popi64(_5629_rnelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _5654_xecolptr = _5607_xs->alloci32(safe_add( _5626_edim1,(int)1 ));
      int32_t _5655_xeperm = _5607_xs->alloci32(_5612_nelem);
      int32_t _5656_xmptr = _5607_xs->alloci32(safe_add( mdim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5657_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5607_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__5657_xi32(_5657_xi32 ? _5657_xi32->raw() : nullptr,_5657_xi32 ? _5657_xi32->size(0) : 0);
      int32_t _5658_rncodeatom = (int)0;
      int32_t _5659_rnnz = (int)0;
      int32_t _5660_rnelem = (int)0;
      {
        int32_t _11782_ = (int)0;
        int32_t _11783_ = safe_add( _5626_edim1,(int)1 );
        for (int32_t _5661_i = _11782_; _5661_i < _11783_; ++_5661_i)
        {
          {
            _ptr__5657_xi32[safe_add( _5654_xecolptr,_5661_i )] = (int)0;
          }
        }
        int32_t _11784_ = (int)0;
        int32_t _11785_ = _5612_nelem;
        for (int32_t _5662_i = _11784_; _5662_i < _11785_; ++_5662_i)
        {
          {
            ++ _ptr__5657_xi32[safe_add( safe_add( _5654_xecolptr,(_ptr__5609_wi64[safe_add( _5621_sp,_5662_i )] % _5626_edim1) ),(int)1 )];
          }
        }
        int32_t _11786_ = (int)0;
        int32_t _11787_ = _5626_edim1;
        for (int32_t _5663_i = _11786_; _5663_i < _11787_; ++_5663_i)
        {
          {
            _ptr__5657_xi32[safe_add( safe_add( _5654_xecolptr,_5663_i ),(int)1 )] += _ptr__5657_xi32[safe_add( _5654_xecolptr,_5663_i )];
          }
        }
        int32_t _11788_ = (int)0;
        int32_t _11789_ = _5612_nelem;
        for (int32_t _5664_i = _11788_; _5664_i < _11789_; ++_5664_i)
        {
          {
            int64_t _5665_ej = (_ptr__5609_wi64[safe_add( _5621_sp,_5664_i )] % _5626_edim1);
            _ptr__5657_xi32[safe_add( _5655_xeperm,_ptr__5657_xi32[safe_add( _5654_xecolptr,_5665_ej )] )] = _5664_i;
            ++ _ptr__5657_xi32[safe_add( _5654_xecolptr,_5665_ej )];
          }
        }
        int32_t _11790_ = (int)0;
        int32_t _11791_ = _5626_edim1;
        for (int32_t _5666_i = _11790_; _5666_i < _11791_; ++_5666_i)
        {
          {
            _ptr__5657_xi32[(safe_add( _5654_xecolptr,_5626_edim1 ) - _5666_i)] = _ptr__5657_xi32[((safe_add( _5654_xecolptr,_5626_edim1 ) - _5666_i) - (int)1)];
          }
        }
        _ptr__5657_xi32[_5654_xecolptr] = (int)0;
        int32_t _5667_ie = (int)0;
        int32_t _5668_im = (int)0;
        while ( ((_5668_im < (int)((msubi)->size(0))) && (_5667_ie < _5612_nelem)) )
        {
          {
            if ((((*msubi)(_5668_im)) < (_ptr__5609_wi64[safe_add( _5621_sp,_ptr__5657_xi32[safe_add( _5655_xeperm,_5667_ie )] )] % _5626_edim1)))
            {
              {
                ++ _5668_im;
              }
            }
            else if((((*msubi)(_5668_im)) > (_ptr__5609_wi64[safe_add( _5621_sp,_ptr__5657_xi32[safe_add( _5655_xeperm,_5667_ie )] )] % _5626_edim1)))
            {
              {
                ++ _5667_ie;
              }
            }
            else
            {
              {
                int32_t _5669_elmnnz = (int)0;
                int64_t _5670_ecol = (_ptr__5609_wi64[safe_add( _5621_sp,_ptr__5657_xi32[safe_add( _5655_xeperm,_5667_ie )] )] % _5626_edim1);
                int32_t _5671_mb = _5668_im;
                while ( ((_5668_im < (int)((msubi)->size(0))) && (((*msubi)(_5668_im)) == ((*msubi)(_5671_mb)))) )
                {
                  {
                    ++ _5668_im;
                  }
                }
                int32_t _5672_eb = _5667_ie;
                while ( ((_5667_ie < _5612_nelem) && ((_ptr__5609_wi64[safe_add( _5621_sp,_ptr__5657_xi32[safe_add( _5655_xeperm,_5667_ie )] )] % _5626_edim1) == _5670_ecol)) )
                {
                  {
                    ++ _5667_ie;
                  }
                }
                int32_t _5673_i1 = _5672_eb;
                int32_t _5674_i0 = _5671_mb;
                int32_t _5675_elmnz = (int)0;
                while ( ((_5674_i0 < _5668_im) && (_5673_i1 < _5667_ie)) )
                {
                  {
                    int32_t _5676_eidx = _ptr__5657_xi32[safe_add( _5655_xeperm,_5673_i1 )];
                    if ((((*msubj)(_5674_i0)) < (_ptr__5609_wi64[safe_add( _5621_sp,_5676_eidx )] / _5626_edim1)))
                    {
                      {
                        ++ _5674_i0;
                      }
                    }
                    else if((((*msubj)(_5674_i0)) > (_ptr__5609_wi64[safe_add( _5621_sp,_5676_eidx )] / _5626_edim1)))
                    {
                      {
                        ++ _5673_i1;
                      }
                    }
                    else
                    {
                      {
                        _5659_rnnz += (_ptr__5608_wi32[safe_add( safe_add( _5616_ptr,_5676_eidx ),(int)1 )] - _ptr__5608_wi32[safe_add( _5616_ptr,_5676_eidx )]);
                        if ((_5615_ncodeatom > (int)0))
                        {
                          {
                            _5658_rncodeatom += safe_add( (_ptr__5608_wi32[safe_add( _5619_codeptr,_ptr__5608_wi32[safe_add( safe_add( _5616_ptr,_5676_eidx ),(int)1 )] )] - _ptr__5608_wi32[safe_add( _5619_codeptr,_ptr__5608_wi32[safe_add( _5616_ptr,_5676_eidx )] )]),safe_mul( (int)2,(_ptr__5608_wi32[safe_add( safe_add( _5616_ptr,_5676_eidx ),(int)1 )] - _ptr__5608_wi32[safe_add( _5616_ptr,_5676_eidx )]) ) );
                          }
                        }
                        {}
                        ++ _5675_elmnz;
                        ++ _5674_i0;
                        ++ _5673_i1;
                      }
                    }
                  }
                }
                if ((_5675_elmnz > (int)0))
                {
                  {
                    ++ _5660_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      bool _5677_rhassp = (_5660_rnelem < mdim0);
      _5605_rs->alloc_expr((int)1,_5660_rnelem,_5659_rnnz,_5677_rhassp,_5658_rncodeatom);
      int32_t _5678_rptr = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->ptr_base;
      int32_t _5679_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->nidxs_base;
      int32_t _11792_;
      bool _11793_ = _5677_rhassp;
      if (_11793_)
      {
        _11792_ = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->sp_base;
      }
      else
      {
        _11792_ = _5605_rs->alloci64(_5660_rnelem);
      }
      int32_t _5680_rsp = _11792_;
      int32_t _5681_rcof = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->cof_base;
      int32_t _5682_rshape = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->shape_base;
      int32_t _5683_rcode = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->code_base;
      int32_t _5684_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->codeptr_base;
      int32_t _5685_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5686_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5686_ri64(_5686_ri64 ? _5686_ri64->raw() : nullptr,_5686_ri64 ? _5686_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5687_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->f64;
      _checked_ptr_1<double> _ptr__5687_rf64(_5687_rf64 ? _5687_rf64->raw() : nullptr,_5687_rf64 ? _5687_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5688_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5605_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5688_ri32(_5688_ri32 ? _5688_ri32->raw() : nullptr,_5688_ri32 ? _5688_ri32->size(0) : 0);
      {
        int32_t _5689_elmi = (int)0;
        int32_t _5690_nzi = (int)0;
        int32_t _5691_codei = (int)0;
        int32_t _5692_ie = (int)0;
        int32_t _5693_im = (int)0;
        _ptr__5688_ri32[_5678_rptr] = (int)0;
        if ((_5615_ncodeatom > (int)0))
        {
          {
            _ptr__5688_ri32[_5684_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__5688_ri32[_5682_rshape] = mdim0;
        while ( ((_5693_im < (int)((msubi)->size(0))) && (_5692_ie < _5612_nelem)) )
        {
          {
            if ((((*msubi)(_5693_im)) < (_ptr__5609_wi64[safe_add( _5621_sp,_ptr__5657_xi32[safe_add( _5655_xeperm,_5692_ie )] )] % _5626_edim1)))
            {
              {
                ++ _5693_im;
              }
            }
            else if((((*msubi)(_5693_im)) > (_ptr__5609_wi64[safe_add( _5621_sp,_ptr__5657_xi32[safe_add( _5655_xeperm,_5692_ie )] )] % _5626_edim1)))
            {
              {
                ++ _5692_ie;
              }
            }
            else
            {
              {
                int32_t _5694_elmnnz = (int)0;
                int64_t _5695_ecol = (_ptr__5609_wi64[safe_add( _5621_sp,_ptr__5657_xi32[safe_add( _5655_xeperm,_5692_ie )] )] % _5626_edim1);
                int32_t _5696_mb = _5693_im;
                while ( ((_5693_im < (int)((msubi)->size(0))) && (((*msubi)(_5693_im)) == ((*msubi)(_5696_mb)))) )
                {
                  {
                    ++ _5693_im;
                  }
                }
                int32_t _5697_eb = _5692_ie;
                while ( ((_5692_ie < _5612_nelem) && ((_ptr__5609_wi64[safe_add( _5621_sp,_ptr__5657_xi32[safe_add( _5655_xeperm,_5692_ie )] )] % _5626_edim1) == _5695_ecol)) )
                {
                  {
                    ++ _5692_ie;
                  }
                }
                int32_t _5698_i1 = _5697_eb;
                int32_t _5699_i0 = _5696_mb;
                int32_t _5700_elmnz = (int)0;
                int32_t _5701_mrow = ((*msubi)(_5696_mb));
                while ( ((_5699_i0 < _5693_im) && (_5698_i1 < _5692_ie)) )
                {
                  {
                    int32_t _5702_eidx = _ptr__5657_xi32[safe_add( _5655_xeperm,_5698_i1 )];
                    if ((((*msubj)(_5699_i0)) < (_ptr__5609_wi64[safe_add( _5621_sp,_5702_eidx )] / _5626_edim1)))
                    {
                      {
                        ++ _5699_i0;
                      }
                    }
                    else if((((*msubj)(_5699_i0)) > (_ptr__5609_wi64[safe_add( _5621_sp,_5702_eidx )] / _5626_edim1)))
                    {
                      {
                        ++ _5698_i1;
                      }
                    }
                    else
                    {
                      {
                        int32_t _11794_ = _ptr__5608_wi32[safe_add( _5616_ptr,_5702_eidx )];
                        int32_t _11795_ = _ptr__5608_wi32[safe_add( safe_add( _5616_ptr,_5702_eidx ),(int)1 )];
                        for (int32_t _5703_j = _11794_; _5703_j < _11795_; ++_5703_j)
                        {
                          {
                            _ptr__5686_ri64[safe_add( _5679_rnidxs,_5690_nzi )] = _ptr__5609_wi64[safe_add( _5622_nidxs,_5703_j )];
                            _ptr__5687_rf64[safe_add( _5681_rcof,_5690_nzi )] = (_ptr__5610_wf64[safe_add( _5623_cof,_5703_j )] * ((*mval)(_5699_i0)));
                            if ((_5615_ncodeatom > (int)0))
                            {
                              {
                                int32_t _11796_ = _ptr__5608_wi32[safe_add( _5619_codeptr,_5703_j )];
                                int32_t _11797_ = _ptr__5608_wi32[safe_add( safe_add( _5619_codeptr,_5703_j ),(int)1 )];
                                for (int32_t _5704_k = _11796_; _5704_k < _11797_; ++_5704_k)
                                {
                                  {
                                    _ptr__5688_ri32[safe_add( _5683_rcode,_5691_codei )] = _ptr__5608_wi32[safe_add( _5617_code,_5704_k )];
                                    _ptr__5687_rf64[safe_add( _5685_rcconst,_5691_codei )] = _ptr__5610_wf64[safe_add( _5618_cconst,_5704_k )];
                                    ++ _5691_codei;
                                  }
                                }
                                _ptr__5688_ri32[safe_add( _5683_rcode,_5691_codei )] = 2;
                                _ptr__5687_rf64[safe_add( _5685_rcconst,_5691_codei )] = ((*mval)(_5699_i0));
                                ++ _5691_codei;
                                _ptr__5688_ri32[safe_add( _5683_rcode,_5691_codei )] = 5;
                                ++ _5691_codei;
                                _ptr__5688_ri32[safe_add( safe_add( _5684_rcodeptr,_5690_nzi ),(int)1 )] = _5691_codei;
                              }
                            }
                            {}
                            ++ _5690_nzi;
                            ++ _5700_elmnz;
                          }
                        }
                        ++ _5699_i0;
                        ++ _5698_i1;
                      }
                    }
                  }
                }
                if ((_5700_elmnz > (int)0))
                {
                  {
                    _ptr__5688_ri32[safe_add( safe_add( _5678_rptr,_5689_elmi ),(int)1 )] = _5690_nzi;
                    _ptr__5686_ri64[safe_add( _5680_rsp,_5689_elmi )] = _5701_mrow;
                    ++ _5689_elmi;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_5690_nzi != _5659_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
          }
        }
        {}
        if ((_5689_elmi != _5660_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
          }
        }
        {}
      }
      if ((!_5677_rhassp))
      {
        {
          _5605_rs->popi64(_5660_rnelem);
        }
      }
      {}
    }
  }
  _5607_xs->clear();
}
// End mosek.fusion.ExprMulDiagLeft.eval

// Begin mosek.fusion.ExprMulDiagLeft.validate
// Method mosek.fusion.ExprMulDiagLeft.validate @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1368:6-1412:7
int32_t mosek::fusion::p_ExprMulDiagLeft::validate(int32_t _5705_mdim0,int32_t _5706_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5707_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5708_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5709_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5710_expr)
{
  _checked_ptr_1<int32_t> _ptr__5707_msubi(_5707_msubi ? _5707_msubi->raw() : nullptr, _5707_msubi ? _5707_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5708_msubj(_5708_msubj ? _5708_msubj->raw() : nullptr, _5708_msubj ? _5708_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5709_mval(_5709_mval ? _5709_mval->raw() : nullptr, _5709_mval ? _5709_mval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5711_eshape = _5710_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__5711_eshape(_5711_eshape ? _5711_eshape->raw() : nullptr,_5711_eshape ? _5711_eshape->size(0) : 0);
  if (((int)((_5711_eshape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _5712_edim0 = _ptr__5711_eshape[(int)0];
  int32_t _5713_edim1 = _ptr__5711_eshape[(int)1];
  if (((_5705_mdim0 < (int)0) || (_5706_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5706_mdim1 != _5712_edim0) || (_5705_mdim0 != _5713_edim1)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5707_msubi)->size(0)) != (int)((_5708_msubj)->size(0))) || ((int)((_5707_msubi)->size(0)) != (int)((_5709_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5714_mnnz = (int)((_5707_msubi)->size(0));
  bool _5715_err_data = false;
  bool _5716_err_sorted = false;
  {
    int32_t _11798_ = (int)0;
    int32_t _11799_ = _5714_mnnz;
    for (int32_t _5717_i = _11798_; _5717_i < _11799_; ++_5717_i)
    {
      {
        if (((_ptr__5707_msubi[_5717_i] < (int)0) || ((_ptr__5707_msubi[_5717_i] >= _5705_mdim0) || ((_ptr__5708_msubj[_5717_i] < (int)0) || (_ptr__5708_msubj[_5717_i] >= _5706_mdim1)))))
        {
          {
            _5715_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11800_ = (int)0;
    int32_t _11801_ = (_5714_mnnz - (int)1);
    for (int32_t _5718_i = _11800_; _5718_i < _11801_; ++_5718_i)
    {
      {
        if (((_ptr__5707_msubi[_5718_i] > _ptr__5707_msubi[safe_add( _5718_i,(int)1 )]) || ((_ptr__5707_msubi[_5718_i] == _ptr__5707_msubi[safe_add( _5718_i,(int)1 )]) && (_ptr__5708_msubj[_5718_i] >= _ptr__5708_msubj[safe_add( _5718_i,(int)1 )]))))
        {
          {
            _5716_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5715_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5716_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprMulDiagLeft.validate

// Begin mosek.fusion.ExprMulDiagLeft.toString
// Method mosek.fusion.ExprMulDiagLeft.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1366:6-136
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulDiagLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagLeft(m,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulDiagLeft.toString

void mosek::fusion::p_ExprMulDiagLeft::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }
// } class ExprMulDiagLeft
// class ExprMulElement { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1139:4-1339:5
mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }
mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulElement::p_ExprMulElement
  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulElement.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1154:6-1179:7
mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5719_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5720_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5721_expr)
{ return new mosek::fusion::ExprMulElement(_5719_mcof,_5720_msp,_5721_expr); }
mosek::fusion::ExprMulElement::ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5719_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5720_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5721_expr) : 
   ExprMulElement(new mosek::fusion::p_ExprMulElement(this))
{ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5719_mcof,_5720_msp,_5721_expr); }
void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5719_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5720_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5721_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5719_mcof(_5719_mcof ? _5719_mcof->raw() : nullptr, _5719_mcof ? _5719_mcof->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__5720_msp(_5720_msp ? _5720_msp->raw() : nullptr, _5720_msp ? _5720_msp->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_5719_mcof,_5720_msp,_5721_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5722_eshape = _5721_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__5722_eshape(_5722_eshape ? _5722_eshape->raw() : nullptr,_5722_eshape ? _5722_eshape->size(0) : 0);
    if (((int)((_5719_mcof)->size(0)) != (int)((_5720_msp)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    int64_t _5723_sz = ::mosek::fusion::p_Set::size(_5722_eshape);
    bool _5724_err_data = false;
    bool _5725_err_sorted = false;
    {
      int32_t _11802_ = (int)0;
      int32_t _11803_ = (int)((_5720_msp)->size(0));
      for (int32_t _5726_i = _11802_; _5726_i < _11803_; ++_5726_i)
      {
        {
          if (((_ptr__5720_msp[_5726_i] < (int)0) || (_ptr__5720_msp[_5726_i] >= _5723_sz)))
          {
            {
              _5724_err_data = true;
            }
          }
          {}
        }
      }
      int32_t _11804_ = (int)0;
      int32_t _11805_ = ((int)((_5720_msp)->size(0)) - (int)1);
      for (int32_t _5727_i = _11804_; _5727_i < _11805_; ++_5727_i)
      {
        {
          if ((_ptr__5720_msp[_5727_i] >= _ptr__5720_msp[safe_add( _5727_i,(int)1 )]))
          {
            {
              _5725_err_sorted = true;
            }
          }
          {}
        }
      }
    }
    if (_5724_err_data)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_5725_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulElement.ctor

// mosek.fusion.ExprMulElement.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1147:6-1152:7
mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5728_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5729_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5730_expr,
    int32_t _5731_validated)
{ return new mosek::fusion::ExprMulElement(_5728_cof,_5729_msp,_5730_expr,_5731_validated); }
mosek::fusion::ExprMulElement::ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5728_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5729_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5730_expr,
    int32_t _5731_validated) : 
   ExprMulElement(new mosek::fusion::p_ExprMulElement(this))
{ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5728_cof,_5729_msp,_5730_expr,_5731_validated); }
void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5728_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5729_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5730_expr,
    int32_t _5731_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5728_cof(_5728_cof ? _5728_cof->raw() : nullptr, _5728_cof ? _5728_cof->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__5729_msp(_5729_msp ? _5729_msp->raw() : nullptr, _5729_msp ? _5729_msp->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5730_expr->__mosek_2fusion_2Expression__getModel(),_5730_expr->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _5730_expr;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _5728_cof;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _5729_msp;
  }
}
// mosek.fusion.ExprMulElement.ctor

// Begin mosek.fusion.ExprMulElement.eval
// Method mosek.fusion.ExprMulElement.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1181:6-1338:7
void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5732_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5733_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5734_xs) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_5732_rs,_5733_ws,_5734_xs); }
void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5732_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5733_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5734_xs)
{
  expr->eval(_5733_ws,_5732_rs,_5734_xs);
  _5733_ws->pop_expr();
  int32_t _5735_nd = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->nd;
  int32_t _5736_nelem = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->nelem;
  int32_t _5737_nnz = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->nnz;
  int32_t _5738_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->ncodeatom;
  bool _5739_hassp = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->hassp;
  int32_t _5740_shape = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->shape_base;
  int32_t _5741_ptr = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->ptr_base;
  int32_t _5742_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->nidxs_base;
  int32_t _5743_sp = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->sp_base;
  int32_t _5744_cof = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->cof_base;
  int32_t _5745_code = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->code_base;
  int32_t _5746_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->codeptr_base;
  int32_t _5747_cconst = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5748_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5748_wi32(_5748_wi32 ? _5748_wi32->raw() : nullptr,_5748_wi32 ? _5748_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5749_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5749_wi64(_5749_wi64 ? _5749_wi64->raw() : nullptr,_5749_wi64 ? _5749_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5750_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5733_ws)->f64;
  _checked_ptr_1<double> _ptr__5750_wf64(_5750_wf64 ? _5750_wf64->raw() : nullptr,_5750_wf64 ? _5750_wf64->size(0) : 0);
  int32_t _5751_rncodeatom = (int)0;
  int32_t _5752_rnnz = (int)0;
  int32_t _5753_rnelem = (int)0;
  if ((!_5739_hassp))
  {
    {
      _5753_rnelem = (int)((msp)->size(0));
      int32_t _11806_ = (int)0;
      int32_t _11807_ = (int)((msp)->size(0));
      for (int32_t _5754_i = _11806_; _5754_i < _11807_; ++_5754_i)
      {
        {
          _5752_rnnz += (_ptr__5748_wi32[safe_add( safe_add( _5741_ptr,((*msp)(_5754_i)) ),(int)1 )] - _ptr__5748_wi32[safe_add( _5741_ptr,((*msp)(_5754_i)) )]);
        }
      }
      if ((_5738_ncodeatom > (int)0))
      {
        {
          int32_t _11808_ = (int)0;
          int32_t _11809_ = (int)((msp)->size(0));
          for (int32_t _5755_i = _11808_; _5755_i < _11809_; ++_5755_i)
          {
            {
              _5751_rncodeatom += safe_add( (_ptr__5748_wi32[safe_add( _5746_codeptr,_ptr__5748_wi32[safe_add( safe_add( _5741_ptr,((*msp)(_5755_i)) ),(int)1 )] )] - _ptr__5748_wi32[safe_add( _5746_codeptr,_ptr__5748_wi32[safe_add( _5741_ptr,((*msp)(_5755_i)) )] )]),safe_mul( (int)2,(_ptr__5748_wi32[safe_add( safe_add( _5741_ptr,((*msp)(_5755_i)) ),(int)1 )] - _ptr__5748_wi32[safe_add( _5741_ptr,((*msp)(_5755_i)) )]) ) );
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _5756_e0 = (int)((msp)->size(0));
      int32_t _5757_i0 = (int)0;
      int32_t _5758_e1 = _5736_nelem;
      int32_t _5759_i1 = (int)0;
      while ( ((_5757_i0 < _5756_e0) && (_5759_i1 < _5758_e1)) )
      {
        {
          if ((((*msp)(_5757_i0)) < _ptr__5749_wi64[safe_add( _5743_sp,_5759_i1 )]))
          {
            {
              ++ _5757_i0;
            }
          }
          else if((((*msp)(_5757_i0)) > _ptr__5749_wi64[safe_add( _5743_sp,_5759_i1 )]))
          {
            {
              ++ _5759_i1;
            }
          }
          else
          {
            {
              _5752_rnnz += (_ptr__5748_wi32[safe_add( safe_add( _5741_ptr,_5759_i1 ),(int)1 )] - _ptr__5748_wi32[safe_add( _5741_ptr,_5759_i1 )]);
              if ((_5738_ncodeatom > (int)0))
              {
                {
                  _5751_rncodeatom += safe_add( (_ptr__5748_wi32[safe_add( _5746_codeptr,_ptr__5748_wi32[safe_add( safe_add( _5741_ptr,_5759_i1 ),(int)1 )] )] - _ptr__5748_wi32[safe_add( _5746_codeptr,_ptr__5748_wi32[safe_add( _5741_ptr,_5759_i1 )] )]),safe_mul( (int)2,(_ptr__5748_wi32[safe_add( safe_add( _5741_ptr,_5759_i1 ),(int)1 )] - _ptr__5748_wi32[safe_add( _5741_ptr,_5759_i1 )]) ) );
                }
              }
              {}
              ++ _5757_i0;
              ++ _5759_i1;
              ++ _5753_rnelem;
            }
          }
        }
      }
    }
  }
  int64_t _5760_rsize = (int64_t)1;
  int32_t _11810_ = (int)0;
  int32_t _11811_ = _5735_nd;
  for (int32_t _5761_i = _11810_; _5761_i < _11811_; ++_5761_i)
  {
    {
      _5760_rsize *= _ptr__5748_wi32[safe_add( _5740_shape,_5761_i )];
    }
  }
  bool _5762_rhassp = (_5753_rnelem < _5760_rsize);
  int32_t _5763_rnd = _5735_nd;
  _5732_rs->alloc_expr(_5763_rnd,_5753_rnelem,_5752_rnnz,_5762_rhassp,_5751_rncodeatom);
  int32_t _5764_rptr = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->ptr_base;
  int32_t _5765_rshape = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->shape_base;
  int32_t _5766_rnidx = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->nidxs_base;
  int32_t _11812_;
  bool _11813_ = _5762_rhassp;
  if (_11813_)
  {
    _11812_ = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->sp_base;
  }
  else
  {
    _11812_ = _5732_rs->alloci64(_5753_rnelem);
  }
  int32_t _5767_rsp = _11812_;
  int32_t _5768_rcof = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->cof_base;
  int32_t _5769_rcode = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->code_base;
  int32_t _5770_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->codeptr_base;
  int32_t _5771_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5772_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5772_ri32(_5772_ri32 ? _5772_ri32->raw() : nullptr,_5772_ri32 ? _5772_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5773_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5773_ri64(_5773_ri64 ? _5773_ri64->raw() : nullptr,_5773_ri64 ? _5773_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5774_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5732_rs)->f64;
  _checked_ptr_1<double> _ptr__5774_rf64(_5774_rf64 ? _5774_rf64->raw() : nullptr,_5774_rf64 ? _5774_rf64->size(0) : 0);
  {
    int32_t _5775_codei = (int)0;
    int32_t _5776_elmi = (int)0;
    int32_t _5777_nzi = (int)0;
    _ptr__5772_ri32[_5764_rptr] = (int)0;
    if ((_5751_rncodeatom > (int)0))
    {
      {
        _ptr__5772_ri32[_5770_rcodeptr] = (int)0;
      }
    }
    {}
    int32_t _11814_ = (int)0;
    int32_t _11815_ = _5763_rnd;
    for (int32_t _5778_i = _11814_; _5778_i < _11815_; ++_5778_i)
    {
      {
        _ptr__5772_ri32[safe_add( _5765_rshape,_5778_i )] = _ptr__5748_wi32[safe_add( _5740_shape,_5778_i )];
      }
    }
    if ((!_5739_hassp))
    {
      {
        int32_t _11816_ = (int)0;
        int32_t _11817_ = (int)((msp)->size(0));
        for (int32_t _5779_i = _11816_; _5779_i < _11817_; ++_5779_i)
        {
          {
            int32_t _5780_p0 = _ptr__5748_wi32[safe_add( _5741_ptr,((*msp)(_5779_i)) )];
            int32_t _5781_p1 = _ptr__5748_wi32[safe_add( safe_add( _5741_ptr,((*msp)(_5779_i)) ),(int)1 )];
            int32_t _11818_ = _5780_p0;
            int32_t _11819_ = _5781_p1;
            for (int32_t _5782_p = _11818_; _5782_p < _11819_; ++_5782_p)
            {
              {
                _ptr__5773_ri64[safe_add( _5766_rnidx,_5777_nzi )] = _ptr__5749_wi64[safe_add( _5742_nidxs,_5782_p )];
                _ptr__5774_rf64[safe_add( _5768_rcof,_5777_nzi )] = (_ptr__5750_wf64[safe_add( _5744_cof,_5782_p )] * ((*mcof)(_5779_i)));
                if ((_5738_ncodeatom > (int)0))
                {
                  {
                    int32_t _11820_ = _ptr__5748_wi32[safe_add( _5746_codeptr,_5782_p )];
                    int32_t _11821_ = _ptr__5748_wi32[safe_add( safe_add( _5746_codeptr,_5782_p ),(int)1 )];
                    for (int32_t _5783_l = _11820_; _5783_l < _11821_; ++_5783_l)
                    {
                      {
                        _ptr__5772_ri32[safe_add( _5769_rcode,_5775_codei )] = _ptr__5748_wi32[safe_add( _5745_code,_5783_l )];
                        _ptr__5774_rf64[safe_add( _5771_rcconst,_5775_codei )] = _ptr__5750_wf64[safe_add( _5747_cconst,_5783_l )];
                        ++ _5775_codei;
                      }
                    }
                    _ptr__5772_ri32[safe_add( _5769_rcode,_5775_codei )] = 2;
                    _ptr__5774_rf64[safe_add( _5771_rcconst,_5775_codei )] = ((*mcof)(_5779_i));
                    ++ _5775_codei;
                    _ptr__5772_ri32[safe_add( _5769_rcode,_5775_codei )] = 5;
                    ++ _5775_codei;
                    _ptr__5772_ri32[safe_add( safe_add( _5770_rcodeptr,_5777_nzi ),(int)1 )] = _5775_codei;
                  }
                }
                {}
                ++ _5777_nzi;
              }
            }
            _ptr__5772_ri32[safe_add( safe_add( _5764_rptr,_5779_i ),(int)1 )] = _5777_nzi;
            _ptr__5773_ri64[safe_add( _5767_rsp,_5779_i )] = ((*msp)(_5779_i));
          }
        }
      }
    }
    else
    {
      {
        int32_t _5784_e0 = (int)((msp)->size(0));
        int32_t _5785_i0 = (int)0;
        int32_t _5786_e1 = _5736_nelem;
        int32_t _5787_i1 = (int)0;
        while ( ((_5785_i0 < _5784_e0) && (_5787_i1 < _5786_e1)) )
        {
          {
            if ((((*msp)(_5785_i0)) < _ptr__5749_wi64[safe_add( _5743_sp,_5787_i1 )]))
            {
              {
                ++ _5785_i0;
              }
            }
            else if((((*msp)(_5785_i0)) > _ptr__5749_wi64[safe_add( _5743_sp,_5787_i1 )]))
            {
              {
                ++ _5787_i1;
              }
            }
            else
            {
              {
                int32_t _5788_p0 = _ptr__5748_wi32[safe_add( _5741_ptr,_5787_i1 )];
                int32_t _5789_p1 = _ptr__5748_wi32[safe_add( safe_add( _5741_ptr,_5787_i1 ),(int)1 )];
                int32_t _11822_ = _5788_p0;
                int32_t _11823_ = _5789_p1;
                for (int32_t _5790_j = _11822_; _5790_j < _11823_; ++_5790_j)
                {
                  {
                    _ptr__5773_ri64[safe_add( _5766_rnidx,_5777_nzi )] = _ptr__5749_wi64[safe_add( _5742_nidxs,_5790_j )];
                    _ptr__5774_rf64[safe_add( _5768_rcof,_5777_nzi )] = (_ptr__5750_wf64[safe_add( _5742_nidxs,_5790_j )] * ((*mcof)(_5785_i0)));
                    if ((_5738_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11824_ = _ptr__5748_wi32[safe_add( _5746_codeptr,_5790_j )];
                        int32_t _11825_ = _ptr__5748_wi32[safe_add( safe_add( _5746_codeptr,_5790_j ),(int)1 )];
                        for (int32_t _5791_l = _11824_; _5791_l < _11825_; ++_5791_l)
                        {
                          {
                            _ptr__5772_ri32[safe_add( _5769_rcode,_5775_codei )] = _ptr__5748_wi32[safe_add( _5745_code,_5791_l )];
                            _ptr__5774_rf64[safe_add( _5771_rcconst,_5775_codei )] = _ptr__5750_wf64[safe_add( _5747_cconst,_5791_l )];
                            ++ _5775_codei;
                          }
                        }
                        _ptr__5772_ri32[safe_add( _5769_rcode,_5775_codei )] = 2;
                        _ptr__5774_rf64[safe_add( _5771_rcconst,_5775_codei )] = ((*mcof)(_5785_i0));
                        ++ _5775_codei;
                        _ptr__5772_ri32[safe_add( _5769_rcode,_5775_codei )] = 5;
                        ++ _5775_codei;
                        _ptr__5772_ri32[safe_add( safe_add( _5770_rcodeptr,_5777_nzi ),(int)1 )] = _5775_codei;
                      }
                    }
                    {}
                    ++ _5777_nzi;
                  }
                }
                _ptr__5772_ri32[safe_add( safe_add( _5764_rptr,_5776_elmi ),(int)1 )] = _5777_nzi;
                _ptr__5773_ri64[safe_add( _5767_rsp,_5776_elmi )] = ((*msp)(_5785_i0));
                ++ _5776_elmi;
                ++ _5785_i0;
                ++ _5787_i1;
              }
            }
          }
        }
      }
    }
  }
  if ((!_5762_rhassp))
  {
    {
      _5732_rs->popi64(_5753_rnelem);
    }
  }
  {}
}
// End mosek.fusion.ExprMulElement.eval

// Begin mosek.fusion.ExprMulElement.toString
// Method mosek.fusion.ExprMulElement.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1145:6-135
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulElement::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulElement(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulElement.toString

void mosek::fusion::p_ExprMulElement::destroy()
{
  expr.reset();
  msp.reset();
  mcof.reset();
}
void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }
// } class ExprMulElement
// class ExprMulScalarConst { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1036:4-1127:5
mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }
mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst
  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulScalarConst.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1045:6-1050:7
mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst
  (double _5792_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5793_expr)
{ return new mosek::fusion::ExprMulScalarConst(_5792_c,_5793_expr); }
mosek::fusion::ExprMulScalarConst::ExprMulScalarConst
  (double _5792_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5793_expr) : 
   ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this))
{ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_5792_c,_5793_expr); }
void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _5792_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5793_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_5793_expr->__mosek_2fusion_2Expression__getModel(),_5793_expr->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _5792_c;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _5793_expr;
  }
}
// mosek.fusion.ExprMulScalarConst.ctor

// Begin mosek.fusion.ExprMulScalarConst.eval
// Method mosek.fusion.ExprMulScalarConst.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1052:6-1126:7
void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5794_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5795_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5796_xs) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_5794_rs,_5795_ws,_5796_xs); }
void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5794_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5795_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5796_xs)
{
  expr->eval(_5795_ws,_5794_rs,_5796_xs);
  _5795_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5797_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5797_wi32(_5797_wi32 ? _5797_wi32->raw() : nullptr,_5797_wi32 ? _5797_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5798_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5798_wi64(_5798_wi64 ? _5798_wi64->raw() : nullptr,_5798_wi64 ? _5798_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5799_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->f64;
  _checked_ptr_1<double> _ptr__5799_wf64(_5799_wf64 ? _5799_wf64->raw() : nullptr,_5799_wf64 ? _5799_wf64->size(0) : 0);
  int32_t _5800_nd = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->nd;
  int32_t _5801_nelem = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->nelem;
  int32_t _5802_nnz = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->nnz;
  bool _5803_hassp = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->hassp;
  int32_t _5804_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->ncodeatom;
  int32_t _5805_ptr = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->ptr_base;
  int32_t _5806_code = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->code_base;
  int32_t _5807_cconst = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->cconst_base;
  int32_t _5808_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->codeptr_base;
  int32_t _5809_shape = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->shape_base;
  int32_t _5810_sp = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->sp_base;
  int32_t _5811_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->nidxs_base;
  int32_t _5812_cof = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->cof_base;
  int32_t _5813_consts = mosek::fusion::p_WorkStack::_get_impl(_5795_ws)->cconst_base;
  int32_t _11826_;
  bool _11827_ = (_5804_ncodeatom == (int)0);
  if (_11827_)
  {
    _11826_ = (int)0;
  }
  else
  {
    _11826_ = safe_add( _5804_ncodeatom,safe_mul( (int)2,_5802_nnz ) );
  }
  int32_t _5814_rncodeatom = _11826_;
  _5794_rs->alloc_expr(_5800_nd,_5801_nelem,_5802_nnz,_5803_hassp,_5814_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5815_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5815_ri64(_5815_ri64 ? _5815_ri64->raw() : nullptr,_5815_ri64 ? _5815_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5816_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->f64;
  _checked_ptr_1<double> _ptr__5816_rf64(_5816_rf64 ? _5816_rf64->raw() : nullptr,_5816_rf64 ? _5816_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5817_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5817_ri32(_5817_ri32 ? _5817_ri32->raw() : nullptr,_5817_ri32 ? _5817_ri32->size(0) : 0);
  int32_t _5818_rptr = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->ptr_base;
  int32_t _5819_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->nidxs_base;
  int32_t _5820_rcof = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->cof_base;
  int32_t _5821_rcode = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->code_base;
  int32_t _5822_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->codeptr_base;
  int32_t _5823_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->cconst_base;
  bool _5824_rhassp = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->hassp;
  int32_t _5825_rshape = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->shape_base;
  int32_t _5826_rsp = mosek::fusion::p_WorkStack::_get_impl(_5794_rs)->sp_base;
  {
    int32_t _11828_ = (int)0;
    int32_t _11829_ = safe_add( _5801_nelem,(int)1 );
    for (int32_t _5827_i = _11828_; _5827_i < _11829_; ++_5827_i)
    {
      {
        _ptr__5817_ri32[safe_add( _5818_rptr,_5827_i )] = _ptr__5797_wi32[safe_add( _5805_ptr,_5827_i )];
      }
    }
    int32_t _11830_ = (int)0;
    int32_t _11831_ = _5802_nnz;
    for (int32_t _5828_i = _11830_; _5828_i < _11831_; ++_5828_i)
    {
      {
        _ptr__5815_ri64[safe_add( _5819_rnidxs,_5828_i )] = _ptr__5798_wi64[safe_add( _5811_nidxs,_5828_i )];
        _ptr__5816_rf64[safe_add( _5820_rcof,_5828_i )] = (_ptr__5799_wf64[safe_add( _5812_cof,_5828_i )] * c);
      }
    }
    if (_5803_hassp)
    {
      {
        int32_t _11832_ = (int)0;
        int32_t _11833_ = _5801_nelem;
        for (int32_t _5829_i = _11832_; _5829_i < _11833_; ++_5829_i)
        {
          {
            _ptr__5815_ri64[safe_add( _5826_rsp,_5829_i )] = _ptr__5798_wi64[safe_add( _5810_sp,_5829_i )];
          }
        }
      }
    }
    {}
    int32_t _11834_ = (int)0;
    int32_t _11835_ = _5800_nd;
    for (int32_t _5830_i = _11834_; _5830_i < _11835_; ++_5830_i)
    {
      {
        _ptr__5817_ri32[safe_add( _5825_rshape,_5830_i )] = _ptr__5797_wi32[safe_add( _5809_shape,_5830_i )];
      }
    }
    if ((_5804_ncodeatom > (int)0))
    {
      {
        _ptr__5817_ri32[_5822_rcodeptr] = (int)0;
        int32_t _5831_codei = (int)0;
        int32_t _11836_ = (int)0;
        int32_t _11837_ = _5802_nnz;
        for (int32_t _5832_j = _11836_; _5832_j < _11837_; ++_5832_j)
        {
          {
            int32_t _11838_ = _ptr__5797_wi32[safe_add( _5808_codeptr,_5832_j )];
            int32_t _11839_ = _ptr__5797_wi32[safe_add( safe_add( _5808_codeptr,_5832_j ),(int)1 )];
            for (int32_t _5833_k = _11838_; _5833_k < _11839_; ++_5833_k)
            {
              {
                _ptr__5817_ri32[safe_add( _5821_rcode,_5831_codei )] = _ptr__5797_wi32[safe_add( _5806_code,_5833_k )];
                _ptr__5816_rf64[safe_add( _5823_rcconst,_5831_codei )] = _ptr__5799_wf64[safe_add( _5807_cconst,_5833_k )];
                ++ _5831_codei;
              }
            }
            _ptr__5817_ri32[safe_add( _5821_rcode,_5831_codei )] = 2;
            _ptr__5816_rf64[safe_add( _5823_rcconst,_5831_codei )] = c;
            ++ _5831_codei;
            _ptr__5817_ri32[safe_add( _5821_rcode,_5831_codei )] = 5;
            ++ _5831_codei;
            _ptr__5817_ri32[safe_add( safe_add( _5822_rcodeptr,_5832_j ),(int)1 )] = _5831_codei;
          }
        }
      }
    }
    {}
  }
}
// End mosek.fusion.ExprMulScalarConst.eval

// Begin mosek.fusion.ExprMulScalarConst.toString
// Method mosek.fusion.ExprMulScalarConst.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:1043:6-73
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulScalarConst::toString()
{
  return std::string ("ExprMulScalarConst()");
}
// End mosek.fusion.ExprMulScalarConst.toString

void mosek::fusion::p_ExprMulScalarConst::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }
// } class ExprMulScalarConst
// class ExprScalarMul { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:832:4-1025:5
mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }
mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprScalarMul::p_ExprScalarMul
  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprScalarMul.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:911:6-930:7
mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul
  (int32_t _5834_mdim0,
    int32_t _5835_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5836_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5837_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5838_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5839_expr,
    int32_t _5840_validated)
{ return new mosek::fusion::ExprScalarMul(_5834_mdim0,_5835_mdim1,_5836_msubi,_5837_msubj,_5838_mval,_5839_expr,_5840_validated); }
mosek::fusion::ExprScalarMul::ExprScalarMul
  (int32_t _5834_mdim0,
    int32_t _5835_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5836_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5837_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5838_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5839_expr,
    int32_t _5840_validated) : 
   ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this))
{ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5834_mdim0,_5835_mdim1,_5836_msubi,_5837_msubj,_5838_mval,_5839_expr,_5840_validated); }
void mosek::fusion::p_ExprScalarMul::_initialize  (int32_t _5834_mdim0,
    int32_t _5835_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5836_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5837_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5838_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5839_expr,
    int32_t _5840_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5836_msubi(_5836_msubi ? _5836_msubi->raw() : nullptr, _5836_msubi ? _5836_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5837_msubj(_5837_msubj ? _5837_msubj->raw() : nullptr, _5837_msubj ? _5837_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5838_mval(_5838_mval ? _5838_mval->raw() : nullptr, _5838_mval ? _5838_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5839_expr->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5834_mdim0),(int32_t)(_5835_mdim1)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _5834_mdim0;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _5835_mdim1;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _5836_msubi;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _5837_msubj;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _5838_mval;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _5839_expr;
  }
}
// mosek.fusion.ExprScalarMul.ctor

// mosek.fusion.ExprScalarMul.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:899:6-909:7
mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul
  (int32_t _5841_mdim0,
    int32_t _5842_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5843_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5844_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5845_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5846_expr)
{ return new mosek::fusion::ExprScalarMul(_5841_mdim0,_5842_mdim1,_5843_msubi,_5844_msubj,_5845_mval,_5846_expr); }
mosek::fusion::ExprScalarMul::ExprScalarMul
  (int32_t _5841_mdim0,
    int32_t _5842_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5843_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5844_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5845_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5846_expr) : 
   ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this))
{ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5841_mdim0,_5842_mdim1,_5843_msubi,_5844_msubj,_5845_mval,_5846_expr); }
void mosek::fusion::p_ExprScalarMul::_initialize  (int32_t _5841_mdim0,
    int32_t _5842_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5843_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5844_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5845_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5846_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5843_msubi(_5843_msubi ? _5843_msubi->raw() : nullptr, _5843_msubi ? _5843_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5844_msubj(_5844_msubj ? _5844_msubj->raw() : nullptr, _5844_msubj ? _5844_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5845_mval(_5845_mval ? _5845_mval->raw() : nullptr, _5845_mval ? _5845_mval->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_5841_mdim0,_5842_mdim1,_5843_msubi,_5844_msubj,_5845_mval,_5846_expr,::mosek::fusion::p_ExprScalarMul::validate(_5841_mdim0,_5842_mdim1,_5843_msubi,_5844_msubj,_5845_mval,_5846_expr));
  }
}
// mosek.fusion.ExprScalarMul.ctor

// Begin mosek.fusion.ExprScalarMul.eval
// Method mosek.fusion.ExprScalarMul.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:932:6-1024:7
void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5847_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5848_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5849_xs) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_5847_rs,_5848_ws,_5849_xs); }
void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5847_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5848_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5849_xs)
{
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_5848_ws,_5847_rs,_5849_xs);
  _5848_ws->pop_expr();
  int32_t _5850_nd = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->nd;
  int32_t _5851_nelem = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->nelem;
  int32_t _5852_nnz = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->nnz;
  bool _5853_hassp = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->hassp;
  int32_t _5854_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->ncodeatom;
  int32_t _5855_ptr = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->ptr_base;
  int32_t _5856_sp = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->sp_base;
  int32_t _5857_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->nidxs_base;
  int32_t _5858_cof = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->cof_base;
  int32_t _5859_code = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->code_base;
  int32_t _5860_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->codeptr_base;
  int32_t _5861_cconst = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5862_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5862_wi32(_5862_wi32 ? _5862_wi32->raw() : nullptr,_5862_wi32 ? _5862_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5863_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5863_wi64(_5863_wi64 ? _5863_wi64->raw() : nullptr,_5863_wi64 ? _5863_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5864_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5848_ws)->f64;
  _checked_ptr_1<double> _ptr__5864_wf64(_5864_wf64 ? _5864_wf64->raw() : nullptr,_5864_wf64 ? _5864_wf64->size(0) : 0);
  int32_t _5865_mnumnz = (int)((mval)->size(0));
  if ((_5850_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_5851_nelem == (int)0))
  {
    {
      _5847_rs->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      int32_t _11840_;
      bool _11841_ = (_5854_ncodeatom > (int)0);
      if (_11841_)
      {
        _11840_ = safe_mul( (int)2,_5852_nnz );
      }
      else
      {
        _11840_ = (int)0;
      }
      int32_t _5866_rncodeatom = safe_mul( _5865_mnumnz,safe_add( _5854_ncodeatom,_11840_ ) );
      _5847_rs->alloc_expr((int)2,_5865_mnumnz,safe_mul( _5865_mnumnz,_5852_nnz ),true,_5866_rncodeatom);
      int32_t _5867_rptr = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->ptr_base;
      int32_t _5868_rnidx = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->nidxs_base;
      int32_t _5869_rsp = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->sp_base;
      int32_t _5870_rcof = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->cof_base;
      int32_t _5871_rshape = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->shape_base;
      int32_t _5872_rcode = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->code_base;
      int32_t _5873_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->codeptr_base;
      int32_t _5874_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5875_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5875_ri32(_5875_ri32 ? _5875_ri32->raw() : nullptr,_5875_ri32 ? _5875_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5876_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5876_ri64(_5876_ri64 ? _5876_ri64->raw() : nullptr,_5876_ri64 ? _5876_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5877_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5847_rs)->f64;
      _checked_ptr_1<double> _ptr__5877_rf64(_5877_rf64 ? _5877_rf64->raw() : nullptr,_5877_rf64 ? _5877_rf64->size(0) : 0);
      _ptr__5875_ri32[_5871_rshape] = mdim0;
      _ptr__5875_ri32[safe_add( _5871_rshape,(int)1 )] = mdim1;
      int32_t _5878_codei = (int)0;
      int32_t _5879_nzi = (int)0;
      _ptr__5875_ri32[_5867_rptr] = (int)0;
      if ((_5854_ncodeatom > (int)0))
      {
        {
          _ptr__5875_ri32[_5873_rcodeptr] = (int)0;
          int32_t _11842_ = (int)0;
          int32_t _11843_ = _5865_mnumnz;
          for (int32_t _5880_i = _11842_; _5880_i < _11843_; ++_5880_i)
          {
            {
              int32_t _11844_ = (int)0;
              int32_t _11845_ = _5852_nnz;
              for (int32_t _5881_j = _11844_; _5881_j < _11845_; ++_5881_j)
              {
                {
                  _ptr__5876_ri64[safe_add( _5868_rnidx,_5879_nzi )] = _ptr__5863_wi64[safe_add( _5857_nidxs,_5881_j )];
                  _ptr__5877_rf64[safe_add( _5870_rcof,_5879_nzi )] = (_ptr__5864_wf64[safe_add( _5858_cof,_5881_j )] * ((*mval)(_5880_i)));
                  int32_t _11846_ = _ptr__5862_wi32[safe_add( _5860_codeptr,_5881_j )];
                  int32_t _11847_ = _ptr__5862_wi32[safe_add( safe_add( _5860_codeptr,_5881_j ),(int)1 )];
                  for (int32_t _5882_k = _11846_; _5882_k < _11847_; ++_5882_k)
                  {
                    {
                      _ptr__5875_ri32[safe_add( _5872_rcode,_5878_codei )] = _ptr__5862_wi32[safe_add( _5859_code,_5882_k )];
                      _ptr__5877_rf64[safe_add( _5874_rcconst,_5878_codei )] = _ptr__5864_wf64[safe_add( _5861_cconst,_5882_k )];
                      ++ _5878_codei;
                    }
                  }
                  _ptr__5875_ri32[safe_add( _5872_rcode,_5878_codei )] = 2;
                  _ptr__5877_rf64[safe_add( _5874_rcconst,_5878_codei )] = ((*mval)(_5880_i));
                  ++ _5878_codei;
                  _ptr__5875_ri32[safe_add( _5872_rcode,_5878_codei )] = 5;
                  ++ _5878_codei;
                  _ptr__5875_ri32[safe_add( safe_add( _5873_rcodeptr,_5879_nzi ),(int)1 )] = _5878_codei;
                  ++ _5879_nzi;
                }
              }
              _ptr__5876_ri64[safe_add( _5869_rsp,_5880_i )] = safe_add( safe_mul( ((*msubi)(_5880_i)),mdim1 ),((*msubj)(_5880_i)) );
              _ptr__5875_ri32[safe_add( safe_add( _5867_rptr,_5880_i ),(int)1 )] = _5879_nzi;
            }
          }
        }
      }
      else
      {
        {
          int32_t _11848_ = (int)0;
          int32_t _11849_ = _5865_mnumnz;
          for (int32_t _5883_i = _11848_; _5883_i < _11849_; ++_5883_i)
          {
            {
              int32_t _11850_ = (int)0;
              int32_t _11851_ = _5852_nnz;
              for (int32_t _5884_j = _11850_; _5884_j < _11851_; ++_5884_j)
              {
                {
                  _ptr__5876_ri64[safe_add( _5868_rnidx,_5879_nzi )] = _ptr__5863_wi64[safe_add( _5857_nidxs,_5884_j )];
                  _ptr__5877_rf64[safe_add( _5870_rcof,_5879_nzi )] = (_ptr__5864_wf64[safe_add( _5858_cof,_5884_j )] * ((*mval)(_5883_i)));
                  ++ _5879_nzi;
                }
              }
              _ptr__5876_ri64[safe_add( _5869_rsp,_5883_i )] = safe_add( safe_mul( ((*msubi)(_5883_i)),mdim1 ),((*msubj)(_5883_i)) );
              _ptr__5875_ri32[safe_add( safe_add( _5867_rptr,_5883_i ),(int)1 )] = _5879_nzi;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprScalarMul.eval

// Begin mosek.fusion.ExprScalarMul.validate
// Method mosek.fusion.ExprScalarMul.validate @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:845:6-884:7
int32_t mosek::fusion::p_ExprScalarMul::validate(int32_t _5885_mdim0,int32_t _5886_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5887_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5888_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5889_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5890_expr)
{
  _checked_ptr_1<int32_t> _ptr__5887_msubi(_5887_msubi ? _5887_msubi->raw() : nullptr, _5887_msubi ? _5887_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5888_msubj(_5888_msubj ? _5888_msubj->raw() : nullptr, _5888_msubj ? _5888_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5889_mval(_5889_mval ? _5889_mval->raw() : nullptr, _5889_mval ? _5889_mval->size(0) : 0);
  int32_t _5891_nd = _5890_expr->getND();
  if ((_5891_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5885_mdim0 < (int)0) || (_5886_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_5887_msubi)->size(0)) != (int)((_5888_msubj)->size(0))) || ((int)((_5887_msubi)->size(0)) != (int)((_5889_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5892_mnnz = (int)((_5887_msubi)->size(0));
  bool _5893_err_data = false;
  bool _5894_err_sorted = false;
  {
    int32_t _11852_ = (int)0;
    int32_t _11853_ = _5892_mnnz;
    for (int32_t _5895_i = _11852_; _5895_i < _11853_; ++_5895_i)
    {
      {
        if (((_ptr__5887_msubi[_5895_i] < (int)0) || ((_ptr__5887_msubi[_5895_i] >= _5885_mdim0) || ((_ptr__5888_msubj[_5895_i] < (int)0) || (_ptr__5888_msubj[_5895_i] >= _5886_mdim1)))))
        {
          {
            _5893_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11854_ = (int)0;
    int32_t _11855_ = (_5892_mnnz - (int)1);
    for (int32_t _5896_i = _11854_; _5896_i < _11855_; ++_5896_i)
    {
      {
        if (((_ptr__5887_msubi[_5896_i] > _ptr__5887_msubi[safe_add( _5896_i,(int)1 )]) || ((_ptr__5887_msubi[_5896_i] == _ptr__5887_msubi[safe_add( _5896_i,(int)1 )]) && (_ptr__5888_msubj[_5896_i] >= _ptr__5888_msubj[safe_add( _5896_i,(int)1 )]))))
        {
          {
            _5894_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5893_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5894_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprScalarMul.validate

// Begin mosek.fusion.ExprScalarMul.toString
// Method mosek.fusion.ExprScalarMul.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:843:6-134
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprScalarMul::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprScalarMul.toString

void mosek::fusion::p_ExprScalarMul::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }
// } class ExprScalarMul
// class ExprCrossDot { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:15:4-820:5
mosek::fusion::ExprCrossDot::ExprCrossDot(mosek::fusion::p_ExprCrossDot *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCrossDot()" << this << std::endl; */ }
mosek::fusion::ExprCrossDot::~ExprCrossDot() {  /* std::cout << "~ExprCrossDot()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprCrossDot::p_ExprCrossDot
  (::mosek::fusion::ExprCrossDot * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprCrossDot.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:143:6-166:7
mosek::fusion::ExprCrossDot::t mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot
  (monty::rc_ptr< ::mosek::fusion::Matrix > _5897_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _5898_expr)
{ return new mosek::fusion::ExprCrossDot(_5897_m,_5898_expr); }
mosek::fusion::ExprCrossDot::ExprCrossDot
  (monty::rc_ptr< ::mosek::fusion::Matrix > _5897_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _5898_expr) : 
   ExprCrossDot(new mosek::fusion::p_ExprCrossDot(this))
{ mosek::fusion::p_ExprCrossDot::_get_impl(this)->_initialize(_5897_m,_5898_expr); }
void mosek::fusion::p_ExprCrossDot::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5897_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _5898_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_5898_expr->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprCrossDot::computeshape(_5897_m->numRows(),_5897_m->numColumns(),_5898_expr->getShape()));
    int64_t _5899_nnz = _5897_m->numNonzeros();
    mdim0 = _5897_m->numRows();
    mdim1 = _5897_m->numColumns();
    if (_5897_m->isSparse())
    {
      {
        msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5899_nnz)));
        msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5899_nnz)));
        mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5899_nnz)));
        _5897_m->getDataAsTriplets(msubi,msubj,mval);
      }
    }
    else
    {
      {
        mval = _5897_m->getDataAsArray();
        msubi = nullptr;
        msubj = nullptr;
      }
    }
    ::mosek::fusion::p_ExprCrossDot::validate(mdim0,mdim1,msubi,msubj,mval,_5898_expr);
    mosek::fusion::p_ExprCrossDot::_get_impl(::mosek::fusion::ExprCrossDot::t(_pubthis))->expr = _5898_expr;
  }
}
// mosek.fusion.ExprCrossDot.ctor

// mosek.fusion.ExprCrossDot.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:122:6-141:7
mosek::fusion::ExprCrossDot::t mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot
  (int32_t _5900_mdim0,
    int32_t _5901_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5902_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5903_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5904_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5905_expr,
    int32_t _5906_validated)
{ return new mosek::fusion::ExprCrossDot(_5900_mdim0,_5901_mdim1,_5902_msubi,_5903_msubj,_5904_mval,_5905_expr,_5906_validated); }
mosek::fusion::ExprCrossDot::ExprCrossDot
  (int32_t _5900_mdim0,
    int32_t _5901_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5902_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5903_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5904_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5905_expr,
    int32_t _5906_validated) : 
   ExprCrossDot(new mosek::fusion::p_ExprCrossDot(this))
{ mosek::fusion::p_ExprCrossDot::_get_impl(this)->_initialize(_5900_mdim0,_5901_mdim1,_5902_msubi,_5903_msubj,_5904_mval,_5905_expr,_5906_validated); }
void mosek::fusion::p_ExprCrossDot::_initialize  (int32_t _5900_mdim0,
    int32_t _5901_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5902_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5903_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5904_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5905_expr,
    int32_t _5906_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5902_msubi(_5902_msubi ? _5902_msubi->raw() : nullptr, _5902_msubi ? _5902_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5903_msubj(_5903_msubj ? _5903_msubj->raw() : nullptr, _5903_msubj ? _5903_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5904_mval(_5904_mval ? _5904_mval->raw() : nullptr, _5904_mval ? _5904_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5905_expr->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprCrossDot::computeshape(_5900_mdim0,_5901_mdim1,_5905_expr->getShape()));
    mosek::fusion::p_ExprCrossDot::_get_impl(::mosek::fusion::ExprCrossDot::t(_pubthis))->mdim0 = _5900_mdim0;
    mosek::fusion::p_ExprCrossDot::_get_impl(::mosek::fusion::ExprCrossDot::t(_pubthis))->mdim1 = _5901_mdim1;
    mosek::fusion::p_ExprCrossDot::_get_impl(::mosek::fusion::ExprCrossDot::t(_pubthis))->msubi = _5902_msubi;
    mosek::fusion::p_ExprCrossDot::_get_impl(::mosek::fusion::ExprCrossDot::t(_pubthis))->msubj = _5903_msubj;
    mosek::fusion::p_ExprCrossDot::_get_impl(::mosek::fusion::ExprCrossDot::t(_pubthis))->mval = _5904_mval;
    mosek::fusion::p_ExprCrossDot::_get_impl(::mosek::fusion::ExprCrossDot::t(_pubthis))->expr = _5905_expr;
  }
}
// mosek.fusion.ExprCrossDot.ctor

// mosek.fusion.ExprCrossDot.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:104:6-112:7
mosek::fusion::ExprCrossDot::t mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot
  (int32_t _5907_mdim0__,
    int32_t _5908_mdim1__,
    std::shared_ptr< monty::ndarray< double,1 > > _5909_mval__,
    monty::rc_ptr< ::mosek::fusion::Expression > _5910_expr__)
{ return new mosek::fusion::ExprCrossDot(_5907_mdim0__,_5908_mdim1__,_5909_mval__,_5910_expr__); }
mosek::fusion::ExprCrossDot::ExprCrossDot
  (int32_t _5907_mdim0__,
    int32_t _5908_mdim1__,
    std::shared_ptr< monty::ndarray< double,1 > > _5909_mval__,
    monty::rc_ptr< ::mosek::fusion::Expression > _5910_expr__) : 
   ExprCrossDot(new mosek::fusion::p_ExprCrossDot(this))
{ mosek::fusion::p_ExprCrossDot::_get_impl(this)->_initialize(_5907_mdim0__,_5908_mdim1__,_5909_mval__,_5910_expr__); }
void mosek::fusion::p_ExprCrossDot::_initialize  (int32_t _5907_mdim0__,
    int32_t _5908_mdim1__,
    std::shared_ptr< monty::ndarray< double,1 > > _5909_mval__,
    monty::rc_ptr< ::mosek::fusion::Expression > _5910_expr__)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5909_mval__(_5909_mval__ ? _5909_mval__->raw() : nullptr, _5909_mval__ ? _5909_mval__->size(0) : 0);
    mosek::fusion::p_ExprCrossDot::_initialize(_5907_mdim0__,_5908_mdim1__,nullptr,nullptr,_5909_mval__,_5910_expr__,::mosek::fusion::p_ExprCrossDot::validate(_5907_mdim0__,_5908_mdim1__,nullptr,nullptr,_5909_mval__,_5910_expr__));
  }
}
// mosek.fusion.ExprCrossDot.ctor

// mosek.fusion.ExprCrossDot.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:89:6-102:7
mosek::fusion::ExprCrossDot::t mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot
  (int32_t _5911_mdim0_,
    int32_t _5912_mdim1_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5913_msubi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5914_msubj_,
    std::shared_ptr< monty::ndarray< double,1 > > _5915_mval_,
    monty::rc_ptr< ::mosek::fusion::Expression > _5916_expr_)
{ return new mosek::fusion::ExprCrossDot(_5911_mdim0_,_5912_mdim1_,_5913_msubi_,_5914_msubj_,_5915_mval_,_5916_expr_); }
mosek::fusion::ExprCrossDot::ExprCrossDot
  (int32_t _5911_mdim0_,
    int32_t _5912_mdim1_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5913_msubi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5914_msubj_,
    std::shared_ptr< monty::ndarray< double,1 > > _5915_mval_,
    monty::rc_ptr< ::mosek::fusion::Expression > _5916_expr_) : 
   ExprCrossDot(new mosek::fusion::p_ExprCrossDot(this))
{ mosek::fusion::p_ExprCrossDot::_get_impl(this)->_initialize(_5911_mdim0_,_5912_mdim1_,_5913_msubi_,_5914_msubj_,_5915_mval_,_5916_expr_); }
void mosek::fusion::p_ExprCrossDot::_initialize  (int32_t _5911_mdim0_,
    int32_t _5912_mdim1_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5913_msubi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5914_msubj_,
    std::shared_ptr< monty::ndarray< double,1 > > _5915_mval_,
    monty::rc_ptr< ::mosek::fusion::Expression > _5916_expr_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5913_msubi_(_5913_msubi_ ? _5913_msubi_->raw() : nullptr, _5913_msubi_ ? _5913_msubi_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5914_msubj_(_5914_msubj_ ? _5914_msubj_->raw() : nullptr, _5914_msubj_ ? _5914_msubj_->size(0) : 0);
    _checked_ptr_1<double> _ptr__5915_mval_(_5915_mval_ ? _5915_mval_->raw() : nullptr, _5915_mval_ ? _5915_mval_->size(0) : 0);
    mosek::fusion::p_ExprCrossDot::_initialize(_5911_mdim0_,_5912_mdim1_,_5913_msubi_,_5914_msubj_,_5915_mval_,_5916_expr_,(int)1);
  }
}
// mosek.fusion.ExprCrossDot.ctor

// Begin mosek.fusion.ExprCrossDot.eval
// Method mosek.fusion.ExprCrossDot.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:169:6-819:7
void mosek::fusion::ExprCrossDot :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5917_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5918_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5919_xs) { mosek::fusion::p_ExprCrossDot::_get_impl(this)->eval(_5917_rs,_5918_ws,_5919_xs); }
void mosek::fusion::p_ExprCrossDot::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5917_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5918_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5919_xs)
{
  mosek::fusion::p_ExprCrossDot::_get_impl(::mosek::fusion::ExprCrossDot::t(_pubthis))->expr->eval(_5918_ws,_5917_rs,_5919_xs);
  _5918_ws->pop_expr();
  int32_t _5920_nd = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->nd;
  int32_t _5921_nnz = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->nnz;
  int32_t _5922_nelem = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->nelem;
  int32_t _5923_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->ncodeatom;
  bool _5924_hassp = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->hassp;
  int32_t _5925_shape = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->shape_base;
  int32_t _5926_ptr = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->ptr_base;
  int32_t _5927_sp = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->sp_base;
  int32_t _5928_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->nidxs_base;
  int32_t _5929_cof = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->cof_base;
  int32_t _5930_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->codeptr_base;
  int32_t _5931_code = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->code_base;
  int32_t _5932_cconst = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5933_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5933_wi32(_5933_wi32 ? _5933_wi32->raw() : nullptr,_5933_wi32 ? _5933_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5934_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5934_wi64(_5934_wi64 ? _5934_wi64->raw() : nullptr,_5934_wi64 ? _5934_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5935_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5918_ws)->f64;
  _checked_ptr_1<double> _ptr__5935_wf64(_5935_wf64 ? _5935_wf64->raw() : nullptr,_5935_wf64 ? _5935_wf64->size(0) : 0);
  int32_t _5936_rnnz = (int)0;
  int32_t _5937_rnelm = (int)0;
  bool _5938_rhassp = false;
  int32_t _5939_rncodeatom = (int)0;
  int32_t _5940_edim0 = _ptr__5933_wi32[safe_add( _5925_shape,(int)0 )];
  int32_t _5941_edim1 = _ptr__5933_wi32[safe_add( _5925_shape,(int)1 )];
  int32_t _5942_mnnz = (int)((mval)->size(0));
  if (((NULL == msubi.get()) || (NULL == msubj.get())))
  {
    {
      if ((!_5924_hassp))
      {
        {
          _5936_rnnz = safe_mul( _5921_nnz,mdim0 );
          _5937_rnelm = safe_mul( mdim0,_5940_edim0 );
          int32_t _11856_;
          bool _11857_ = (_5923_ncodeatom > (int)0);
          if (_11857_)
          {
            _11856_ = safe_mul( safe_add( _5923_ncodeatom,safe_mul( _5921_nnz,(int)2 ) ),mdim0 );
          }
          else
          {
            _11856_ = (int)0;
          }
          _5939_rncodeatom = _11856_;
        }
      }
      else
      {
        {
          _5936_rnnz = safe_mul( _5921_nnz,mdim0 );
          int32_t _11858_;
          bool _11859_ = (_5923_ncodeatom > (int)0);
          if (_11859_)
          {
            _11858_ = safe_mul( safe_add( _5923_ncodeatom,safe_mul( _5921_nnz,(int)2 ) ),mdim0 );
          }
          else
          {
            _11858_ = (int)0;
          }
          _5939_rncodeatom = _11858_;
          int32_t _5943_ii = (-(int)1);
          {
            int32_t _5944_ei = (int)0;
            for(;(_5944_ei < _5922_nelem);)
            {
              {
                int64_t _5945_i1 = (_ptr__5934_wi64[safe_add( _5927_sp,_5944_ei )] / _5941_edim1);
                ++ _5944_ei;
                while ( ((_5944_ei < _5922_nelem) && ((_ptr__5934_wi64[safe_add( _5927_sp,_5944_ei )] / _5941_edim1) == _5945_i1)) )
                {
                  {
                    ++ _5944_ei;
                  }
                }
                ++ _5937_rnelm;
              }
            }
          }
          _5937_rnelm *= mdim0;
        }
      }
    }
  }
  else if((!_5924_hassp))
  {
    {
      {
        int32_t _5946_k = (int)0;
        for(;(_5946_k < _5942_mnnz);)
        {
          {
            _5937_rnelm += (int)1;
            int32_t _5947_mptrb = _5946_k;
            int32_t _5948_i0 = ((*msubi)(_5946_k));
            ++ _5946_k;
            while ( ((_5946_k < _5942_mnnz) && (((*msubi)(_5946_k)) == _5948_i0)) )
            {
              {
                ++ _5946_k;
              }
            }
            int32_t _5949_mptre = _5946_k;
            int32_t _11860_ = (int)0;
            int32_t _11861_ = _5940_edim0;
            for (int32_t _5950_i = _11860_; _5950_i < _11861_; ++_5950_i)
            {
              {
                int32_t _11862_ = _5947_mptrb;
                int32_t _11863_ = _5949_mptre;
                for (int32_t _5951_p = _11862_; _5951_p < _11863_; ++_5951_p)
                {
                  {
                    int32_t _5952_j = ((*msubj)(_5951_p));
                    int32_t _5953_pe = _ptr__5933_wi32[safe_add( safe_add( safe_add( _5926_ptr,safe_mul( _5950_i,_5941_edim1 ) ),_5952_j ),(int)1 )];
                    int32_t _5954_pb = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,safe_mul( _5950_i,_5941_edim1 ) ),_5952_j )];
                    int32_t _5955_nelmnz = (_5953_pe - _5954_pb);
                    _5936_rnnz += _5955_nelmnz;
                    int32_t _11864_;
                    bool _11865_ = (_5923_ncodeatom > (int)0);
                    if (_11865_)
                    {
                      _11864_ = safe_add( (_ptr__5933_wi32[safe_add( _5930_codeptr,_5953_pe )] - _ptr__5933_wi32[safe_add( _5930_codeptr,_5954_pb )]),safe_mul( _5955_nelmnz,(int)2 ) );
                    }
                    else
                    {
                      _11864_ = (int)0;
                    }
                    _5939_rncodeatom += _11864_;
                  }
                }
              }
            }
          }
        }
      }
      _5937_rnelm *= _5940_edim0;
    }
  }
  else
  {
    {
      {
        int32_t _5956_mi = (int)0;
        for(;(_5956_mi < _5942_mnnz);)
        {
          {
            int32_t _5957_mptrb = _5956_mi;
            int32_t _5958_i0 = ((*msubi)(_5956_mi));
            ++ _5956_mi;
            while ( ((_5956_mi < _5942_mnnz) && (((*msubi)(_5956_mi)) == _5958_i0)) )
            {
              {
                ++ _5956_mi;
              }
            }
            int32_t _5959_mptre = _5956_mi;
            {
              int32_t _5960_ei = (int)0;
              for(;(_5960_ei < _5922_nelem);)
              {
                {
                  int32_t _5961_eptrb = _5960_ei;
                  int64_t _5962_i1 = (_ptr__5934_wi64[safe_add( _5927_sp,_5960_ei )] / _5941_edim1);
                  ++ _5960_ei;
                  while ( ((_5960_ei < _5922_nelem) && ((_ptr__5934_wi64[safe_add( _5927_sp,_5960_ei )] / _5941_edim1) == _5962_i1)) )
                  {
                    {
                      ++ _5960_ei;
                    }
                  }
                  int32_t _5963_eptre = _5960_ei;
                  int32_t _5964_relmnnz = (int)0;
                  int32_t _5965_l1 = _5961_eptrb;
                  int32_t _5966_l0 = _5957_mptrb;
                  while ( ((_5966_l0 < _5959_mptre) && (_5965_l1 < _5963_eptre)) )
                  {
                    {
                      if ((((*msubj)(_5966_l0)) < (_ptr__5934_wi64[safe_add( _5927_sp,_5965_l1 )] % _5941_edim1)))
                      {
                        {
                          ++ _5966_l0;
                        }
                      }
                      else if((((*msubj)(_5966_l0)) > (_ptr__5934_wi64[safe_add( _5927_sp,_5965_l1 )] % _5941_edim1)))
                      {
                        {
                          ++ _5965_l1;
                        }
                      }
                      else
                      {
                        {
                          ++ _5964_relmnnz;
                          int32_t _5967_nzb = _ptr__5933_wi32[safe_add( _5926_ptr,_5965_l1 )];
                          int32_t _5968_nze = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,_5965_l1 ),(int)1 )];
                          int32_t _5969_elmnnz = (_5968_nze - _5967_nzb);
                          _5936_rnnz += _5969_elmnnz;
                          int32_t _11866_;
                          bool _11867_ = (_5923_ncodeatom > (int)0);
                          if (_11867_)
                          {
                            _11866_ = safe_add( (_ptr__5933_wi32[safe_add( _5930_codeptr,_5968_nze )] - _ptr__5933_wi32[safe_add( _5930_codeptr,_5967_nzb )]),safe_mul( _5969_elmnnz,(int)2 ) );
                          }
                          else
                          {
                            _11866_ = (int)0;
                          }
                          _5939_rncodeatom += _11866_;
                          ++ _5966_l0;
                          ++ _5965_l1;
                        }
                      }
                    }
                  }
                  if ((_5964_relmnnz > (int)0))
                  {
                    {
                      ++ _5937_rnelm;
                    }
                  }
                  {}
                }
              }
            }
          }
        }
      }
    }
  }
  bool _5970_rhassp = (_5937_rnelm < safe_mul( _5940_edim0,mdim0 ));
  _5917_rs->alloc_expr((int)2,_5937_rnelm,_5936_rnnz,_5970_rhassp,_5939_rncodeatom);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5971_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5971_ri32(_5971_ri32 ? _5971_ri32->raw() : nullptr,_5971_ri32 ? _5971_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5972_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5972_ri64(_5972_ri64 ? _5972_ri64->raw() : nullptr,_5972_ri64 ? _5972_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5973_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->f64;
  _checked_ptr_1<double> _ptr__5973_rf64(_5973_rf64 ? _5973_rf64->raw() : nullptr,_5973_rf64 ? _5973_rf64->size(0) : 0);
  int32_t _5974_rncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->ncodeatom;
  int32_t _5975_rshape = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->shape_base;
  int32_t _5976_rptr = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->ptr_base;
  int32_t _11868_;
  bool _11869_ = _5970_rhassp;
  if (_11869_)
  {
    _11868_ = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->sp_base;
  }
  else
  {
    _11868_ = (-(int)9999);
  }
  int32_t _5977_rsp = _11868_;
  int32_t _5978_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->nidxs_base;
  int32_t _5979_rcof = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->cof_base;
  int32_t _5980_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->codeptr_base;
  int32_t _5981_rcode = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->code_base;
  int32_t _5982_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5917_rs)->cconst_base;
  _ptr__5971_ri32[_5975_rshape] = mdim0;
  _ptr__5971_ri32[safe_add( _5975_rshape,(int)1 )] = _5940_edim0;
  _ptr__5971_ri32[_5976_rptr] = (int)0;
  if ((_5974_rncodeatom > (int)0))
  {
    {
      _ptr__5971_ri32[_5980_rcodeptr] = (int)0;
    }
  }
  {}
  if (((NULL == msubi.get()) || (NULL == msubj.get())))
  {
    {
      if ((!_5924_hassp))
      {
        {
          {
            int32_t _5983_nzi = (int)0;
            int32_t _5984_elmi = (int)0;
            int32_t _11870_ = (int)0;
            int32_t _11871_ = mdim0;
            for (int32_t _5985_i0 = _11870_; _5985_i0 < _11871_; ++_5985_i0)
            {
              {
                ::mosek::fusion::Utils::Tools::arraycopy(_5934_wi64,_5928_nidxs,_5972_ri64,safe_add( _5978_rnidxs,_5983_nzi ),_5921_nnz);
                int32_t _5986_ei = (int)0;
                int32_t _11872_ = (int)0;
                int32_t _11873_ = _5940_edim0;
                for (int32_t _5987_i1 = _11872_; _5987_i1 < _11873_; ++_5987_i1)
                {
                  {
                    int32_t _11874_ = (int)0;
                    int32_t _11875_ = mdim1;
                    for (int32_t _5988_j1 = _11874_; _5988_j1 < _11875_; ++_5988_j1)
                    {
                      {
                        int32_t _11876_ = _ptr__5933_wi32[safe_add( _5926_ptr,_5986_ei )];
                        int32_t _11877_ = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,_5986_ei ),(int)1 )];
                        for (int32_t _5989_l = _11876_; _5989_l < _11877_; ++_5989_l)
                        {
                          {
                            _ptr__5973_rf64[safe_add( _5979_rcof,_5983_nzi )] = (((*mval)(safe_add( safe_mul( _5985_i0,mdim1 ),_5988_j1 ))) * _ptr__5935_wf64[safe_add( _5929_cof,_5989_l )]);
                            ++ _5983_nzi;
                          }
                        }
                        ++ _5986_ei;
                      }
                    }
                    _ptr__5971_ri32[safe_add( safe_add( _5976_rptr,_5984_elmi ),(int)1 )] = _5983_nzi;
                    ++ _5984_elmi;
                  }
                }
              }
            }
          }
          if ((_5974_rncodeatom > (int)0))
          {
            {
              int32_t _5990_nzi = (int)0;
              int32_t _5991_codei = (int)0;
              int32_t _11878_ = (int)0;
              int32_t _11879_ = mdim0;
              for (int32_t _5992_i0 = _11878_; _5992_i0 < _11879_; ++_5992_i0)
              {
                {
                  int32_t _5993_ei = (int)0;
                  int32_t _11880_ = (int)0;
                  int32_t _11881_ = _5940_edim0;
                  for (int32_t _5994_i1 = _11880_; _5994_i1 < _11881_; ++_5994_i1)
                  {
                    {
                      int32_t _11882_ = (int)0;
                      int32_t _11883_ = mdim1;
                      for (int32_t _5995_j1 = _11882_; _5995_j1 < _11883_; ++_5995_j1)
                      {
                        {
                          int32_t _11884_ = _ptr__5933_wi32[safe_add( _5926_ptr,_5993_ei )];
                          int32_t _11885_ = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,_5993_ei ),(int)1 )];
                          for (int32_t _5996_l = _11884_; _5996_l < _11885_; ++_5996_l)
                          {
                            {
                              int32_t _11886_ = _ptr__5933_wi32[safe_add( _5930_codeptr,_5996_l )];
                              int32_t _11887_ = _ptr__5933_wi32[safe_add( safe_add( _5930_codeptr,_5996_l ),(int)1 )];
                              for (int32_t _5997_cl = _11886_; _5997_cl < _11887_; ++_5997_cl)
                              {
                                {
                                  _ptr__5971_ri32[safe_add( _5981_rcode,_5991_codei )] = _ptr__5933_wi32[safe_add( _5931_code,_5997_cl )];
                                  _ptr__5973_rf64[safe_add( _5982_rcconst,_5991_codei )] = _ptr__5935_wf64[safe_add( _5932_cconst,_5997_cl )];
                                  ++ _5991_codei;
                                }
                              }
                              _ptr__5971_ri32[safe_add( _5981_rcode,_5991_codei )] = 2;
                              _ptr__5973_rf64[safe_add( _5982_rcconst,_5991_codei )] = ((*mval)(safe_add( safe_mul( _5992_i0,mdim1 ),_5995_j1 )));
                              ++ _5991_codei;
                              _ptr__5971_ri32[safe_add( _5981_rcode,_5991_codei )] = 5;
                              ++ _5991_codei;
                              _ptr__5971_ri32[safe_add( safe_add( _5980_rcodeptr,_5990_nzi ),(int)1 )] = _5991_codei;
                              ++ _5990_nzi;
                            }
                          }
                          ++ _5993_ei;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      else
      {
        {
          {
            int32_t _5998_nzi = (int)0;
            int32_t _5999_elmi = (int)0;
            int32_t _11888_ = (int)0;
            int32_t _11889_ = mdim0;
            for (int32_t _6000_i0 = _11888_; _6000_i0 < _11889_; ++_6000_i0)
            {
              {
                ::mosek::fusion::Utils::Tools::arraycopy(_5934_wi64,_5928_nidxs,_5972_ri64,safe_add( _5978_rnidxs,_5998_nzi ),_5921_nnz);
                int32_t _6001_ei = (int)0;
                {
                  int32_t _6002_ei = (int)0;
                  for(;(_6002_ei < _5922_nelem);)
                  {
                    {
                      int64_t _6003_i1 = (_ptr__5934_wi64[safe_add( _5927_sp,_6002_ei )] / _5941_edim1);
                      int32_t _6004_ptrb = _6002_ei;
                      ++ _6002_ei;
                      while ( ((_6002_ei < _5922_nelem) && ((_ptr__5934_wi64[safe_add( _5927_sp,_6002_ei )] / _5941_edim1) == _6003_i1)) )
                      {
                        {
                          ++ _6002_ei;
                        }
                      }
                      int32_t _6005_ptre = _6002_ei;
                      int32_t _11890_ = _6004_ptrb;
                      int32_t _11891_ = _6005_ptre;
                      for (int32_t _6006_k = _11890_; _6006_k < _11891_; ++_6006_k)
                      {
                        {
                          int64_t _6007_j = (_ptr__5934_wi64[safe_add( _5927_sp,_6006_k )] % _5941_edim1);
                          int32_t _11892_ = _ptr__5933_wi32[safe_add( _5926_ptr,_6006_k )];
                          int32_t _11893_ = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,_6006_k ),(int)1 )];
                          for (int32_t _6008_l = _11892_; _6008_l < _11893_; ++_6008_l)
                          {
                            {
                              _ptr__5973_rf64[safe_add( _5979_rcof,_5998_nzi )] = (((*mval)(safe_add( safe_mul( _6000_i0,mdim1 ),_6007_j ))) * _ptr__5935_wf64[safe_add( _5929_cof,_6008_l )]);
                              ++ _5998_nzi;
                            }
                          }
                        }
                      }
                      if (_5970_rhassp)
                      {
                        {
                          _ptr__5972_ri64[safe_add( _5977_rsp,_5999_elmi )] = safe_add( safe_mul( _6000_i0,_5940_edim0 ),_6003_i1 );
                        }
                      }
                      {}
                      ++ _5999_elmi;
                      _ptr__5971_ri32[safe_add( _5976_rptr,_5999_elmi )] = _5998_nzi;
                    }
                  }
                }
              }
            }
          }
          if ((_5974_rncodeatom > (int)0))
          {
            {
              int32_t _6009_nzi = (int)0;
              int32_t _6010_codei = (int)0;
              int32_t _11894_ = (int)0;
              int32_t _11895_ = mdim0;
              for (int32_t _6011_i0 = _11894_; _6011_i0 < _11895_; ++_6011_i0)
              {
                {
                  int32_t _6012_ei = (int)0;
                  {
                    int32_t _6013_ei = (int)0;
                    for(;(_6013_ei < _5922_nelem);)
                    {
                      {
                        int64_t _6014_i1 = (_ptr__5934_wi64[safe_add( _5927_sp,_6013_ei )] / _5941_edim1);
                        int32_t _6015_ptrb = _6013_ei;
                        ++ _6013_ei;
                        while ( ((_6013_ei < _5922_nelem) && ((_ptr__5934_wi64[safe_add( _5927_sp,_6013_ei )] / _5941_edim1) == _6014_i1)) )
                        {
                          {
                            ++ _6013_ei;
                          }
                        }
                        int32_t _6016_ptre = _6013_ei;
                        int32_t _11896_ = _6015_ptrb;
                        int32_t _11897_ = _6016_ptre;
                        for (int32_t _6017_k = _11896_; _6017_k < _11897_; ++_6017_k)
                        {
                          {
                            int64_t _6018_j = (_ptr__5934_wi64[safe_add( _5927_sp,_6017_k )] % _5941_edim1);
                            int32_t _11898_ = _ptr__5933_wi32[safe_add( _5926_ptr,_6017_k )];
                            int32_t _11899_ = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,_6017_k ),(int)1 )];
                            for (int32_t _6019_l = _11898_; _6019_l < _11899_; ++_6019_l)
                            {
                              {
                                int32_t _11900_ = _ptr__5933_wi32[safe_add( _5930_codeptr,_6019_l )];
                                int32_t _11901_ = _ptr__5933_wi32[safe_add( safe_add( _5930_codeptr,_6019_l ),(int)1 )];
                                for (int32_t _6020_cl = _11900_; _6020_cl < _11901_; ++_6020_cl)
                                {
                                  {
                                    _ptr__5971_ri32[safe_add( _5981_rcode,_6010_codei )] = _ptr__5933_wi32[safe_add( _5931_code,_6020_cl )];
                                    _ptr__5973_rf64[safe_add( _5982_rcconst,_6010_codei )] = _ptr__5935_wf64[safe_add( _5932_cconst,_6020_cl )];
                                    ++ _6010_codei;
                                  }
                                }
                                _ptr__5971_ri32[safe_add( _5981_rcode,_6010_codei )] = 2;
                                _ptr__5973_rf64[safe_add( _5982_rcconst,_6010_codei )] = ((*mval)(safe_add( safe_mul( _6011_i0,_5940_edim0 ),_6018_j )));
                                ++ _6010_codei;
                                _ptr__5971_ri32[safe_add( _5981_rcode,_6010_codei )] = 5;
                                ++ _6010_codei;
                                _ptr__5971_ri32[safe_add( safe_add( _5980_rcodeptr,_6009_nzi ),(int)1 )] = _6010_codei;
                                ++ _6009_nzi;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
    }
  }
  else if((!_5924_hassp))
  {
    {
      int32_t _6021_nzi = (int)0;
      int32_t _6022_elmi = (int)0;
      int32_t _6023_codei = (int)0;
      {
        int32_t _6024_k = (int)0;
        for(;(_6024_k < _5942_mnnz);)
        {
          {
            int32_t _6025_mptrb = _6024_k;
            int32_t _6026_i0 = ((*msubi)(_6024_k));
            ++ _6024_k;
            while ( ((_6024_k < _5942_mnnz) && (((*msubi)(_6024_k)) == _6026_i0)) )
            {
              {
                ++ _6024_k;
              }
            }
            int32_t _6027_mptre = _6024_k;
            int32_t _11902_ = (int)0;
            int32_t _11903_ = _5940_edim0;
            for (int32_t _6028_i = _11902_; _6028_i < _11903_; ++_6028_i)
            {
              {
                int32_t _11904_ = _6025_mptrb;
                int32_t _11905_ = _6027_mptre;
                for (int32_t _6029_p = _11904_; _6029_p < _11905_; ++_6029_p)
                {
                  {
                    int32_t _6030_esubj = safe_add( safe_mul( _6028_i,_5941_edim1 ),((*msubj)(_6029_p)) );
                    int32_t _11906_ = _ptr__5933_wi32[safe_add( _5926_ptr,_6030_esubj )];
                    int32_t _11907_ = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,_6030_esubj ),(int)1 )];
                    for (int32_t _6031_l = _11906_; _6031_l < _11907_; ++_6031_l)
                    {
                      {
                        _ptr__5972_ri64[safe_add( _5978_rnidxs,_6021_nzi )] = _ptr__5934_wi64[safe_add( _5928_nidxs,_6031_l )];
                        _ptr__5973_rf64[safe_add( _5979_rcof,_6021_nzi )] = (_ptr__5935_wf64[safe_add( _5929_cof,_6031_l )] * ((*mval)(_6029_p)));
                        if ((_5974_rncodeatom > (int)0))
                        {
                          {
                            int32_t _11908_ = _ptr__5933_wi32[safe_add( _5930_codeptr,_6031_l )];
                            int32_t _11909_ = _ptr__5933_wi32[safe_add( safe_add( _5930_codeptr,_6031_l ),(int)1 )];
                            for (int32_t _6032_cl = _11908_; _6032_cl < _11909_; ++_6032_cl)
                            {
                              {
                                _ptr__5971_ri32[safe_add( _5981_rcode,_6023_codei )] = _ptr__5933_wi32[safe_add( _5931_code,_6032_cl )];
                                _ptr__5973_rf64[safe_add( _5982_rcconst,_6023_codei )] = _ptr__5935_wf64[safe_add( _5932_cconst,_6032_cl )];
                                ++ _6023_codei;
                              }
                            }
                            _ptr__5971_ri32[safe_add( _5981_rcode,_6023_codei )] = 2;
                            _ptr__5973_rf64[safe_add( _5982_rcconst,_6023_codei )] = ((*mval)(_6029_p));
                            ++ _6023_codei;
                            _ptr__5971_ri32[safe_add( _5981_rcode,_6023_codei )] = 5;
                            ++ _6023_codei;
                            _ptr__5971_ri32[safe_add( safe_add( _5980_rcodeptr,_6021_nzi ),(int)1 )] = _6023_codei;
                          }
                        }
                        {}
                        ++ _6021_nzi;
                      }
                    }
                  }
                }
                _ptr__5971_ri32[safe_add( safe_add( _5976_rptr,_6022_elmi ),(int)1 )] = _6021_nzi;
                if (_5970_rhassp)
                {
                  {
                    _ptr__5972_ri64[safe_add( _5977_rsp,_6022_elmi )] = safe_add( safe_mul( _6026_i0,_5940_edim0 ),_6028_i );
                  }
                }
                {}
                ++ _6022_elmi;
              }
            }
          }
        }
      }
      if ((_6021_nzi != _5936_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Error in evaluation: Incorrect number of nonzeros"));
        }
      }
      {}
      if ((_6022_elmi != _5937_rnelm))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Error in evaluation: Incorrect number of elements"));
        }
      }
      {}
      if ((_6023_codei != _5974_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Error in evaluation: Incorrect number of code elements"));
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        int32_t _6033_nzi = (int)0;
        int32_t _6034_elmi = (int)0;
        {
          int32_t _6035_k0 = (int)0;
          for(;(_6035_k0 < _5942_mnnz);)
          {
            {
              int32_t _6036_mptrb = _6035_k0;
              int32_t _6037_i0 = ((*msubi)(_6035_k0));
              ++ _6035_k0;
              while ( ((_6035_k0 < _5942_mnnz) && (((*msubi)(_6035_k0)) == _6037_i0)) )
              {
                {
                  ++ _6035_k0;
                }
              }
              int32_t _6038_mptre = _6035_k0;
              {
                int32_t _6039_k1 = (int)0;
                for(;(_6039_k1 < _5922_nelem);)
                {
                  {
                    int32_t _6040_eptrb = _6039_k1;
                    int64_t _6041_i1 = (_ptr__5934_wi64[safe_add( _5927_sp,_6039_k1 )] / _5941_edim1);
                    ++ _6039_k1;
                    while ( ((_6039_k1 < _5922_nelem) && ((_ptr__5934_wi64[safe_add( _5927_sp,_6039_k1 )] / _5941_edim1) == _6041_i1)) )
                    {
                      {
                        ++ _6039_k1;
                      }
                    }
                    int32_t _6042_eptre = _6039_k1;
                    int32_t _6043_relmnnz = (int)0;
                    int32_t _6044_l1 = _6040_eptrb;
                    int32_t _6045_l0 = _6036_mptrb;
                    while ( ((_6045_l0 < _6038_mptre) && (_6044_l1 < _6042_eptre)) )
                    {
                      {
                        if ((((*msubj)(_6045_l0)) < (_ptr__5934_wi64[safe_add( _5927_sp,_6044_l1 )] % _5941_edim1)))
                        {
                          {
                            ++ _6045_l0;
                          }
                        }
                        else if((((*msubj)(_6045_l0)) > (_ptr__5934_wi64[safe_add( _5927_sp,_6044_l1 )] % _5941_edim1)))
                        {
                          {
                            ++ _6044_l1;
                          }
                        }
                        else
                        {
                          {
                            ++ _6043_relmnnz;
                            int32_t _11910_ = _ptr__5933_wi32[safe_add( _5926_ptr,_6044_l1 )];
                            int32_t _11911_ = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,_6044_l1 ),(int)1 )];
                            for (int32_t _6046_l = _11910_; _6046_l < _11911_; ++_6046_l)
                            {
                              {
                                _ptr__5972_ri64[safe_add( _5978_rnidxs,_6033_nzi )] = _ptr__5934_wi64[safe_add( _5928_nidxs,_6046_l )];
                                _ptr__5973_rf64[safe_add( _5979_rcof,_6033_nzi )] = (_ptr__5935_wf64[safe_add( _5929_cof,_6046_l )] * ((*mval)(_6045_l0)));
                                ++ _6033_nzi;
                              }
                            }
                            ++ _6045_l0;
                            ++ _6044_l1;
                          }
                        }
                      }
                    }
                    if ((_6043_relmnnz > (int)0))
                    {
                      {
                        _ptr__5971_ri32[safe_add( safe_add( _5976_rptr,_6034_elmi ),(int)1 )] = _6033_nzi;
                        if (_5970_rhassp)
                        {
                          {
                            _ptr__5972_ri64[safe_add( _5977_rsp,_6034_elmi )] = safe_add( safe_mul( _6037_i0,_5940_edim0 ),_6041_i1 );
                          }
                        }
                        {}
                        ++ _6034_elmi;
                      }
                    }
                    {}
                  }
                }
              }
            }
          }
        }
        if ((_6033_nzi != _5936_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Error in evaluation: Incorrect number of nonzeros"));
          }
        }
        {}
        if ((_6034_elmi != _5937_rnelm))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Error in evaluation: Incorrect number of elements"));
          }
        }
        {}
      }
      if ((_5974_rncodeatom > (int)0))
      {
        {
          int32_t _6047_nzi = (int)0;
          int32_t _6048_codei = (int)0;
          {
            int32_t _6049_k0 = (int)0;
            for(;(_6049_k0 < _5942_mnnz);)
            {
              {
                int32_t _6050_mptrb = _6049_k0;
                int32_t _6051_i0 = ((*msubi)(_6049_k0));
                ++ _6049_k0;
                while ( ((_6049_k0 < _5942_mnnz) && (((*msubi)(_6049_k0)) == _6051_i0)) )
                {
                  {
                    ++ _6049_k0;
                  }
                }
                int32_t _6052_mptre = _6049_k0;
                {
                  int32_t _6053_k1 = (int)0;
                  for(;(_6053_k1 < _5922_nelem);)
                  {
                    {
                      int32_t _6054_eptrb = _6053_k1;
                      int64_t _6055_i1 = (_ptr__5934_wi64[safe_add( _5927_sp,_6053_k1 )] / _5941_edim1);
                      ++ _6053_k1;
                      while ( ((_6053_k1 < _5922_nelem) && ((_ptr__5934_wi64[safe_add( _5927_sp,_6053_k1 )] / _5941_edim1) == _6055_i1)) )
                      {
                        {
                          ++ _6053_k1;
                        }
                      }
                      int32_t _6056_eptre = _6053_k1;
                      int32_t _6057_relmnnz = (int)0;
                      int32_t _6058_l1 = _6054_eptrb;
                      int32_t _6059_l0 = _6050_mptrb;
                      while ( ((_6059_l0 < _6052_mptre) && (_6058_l1 < _6056_eptre)) )
                      {
                        {
                          if ((((*msubj)(_6059_l0)) < (_ptr__5934_wi64[safe_add( _5927_sp,_6058_l1 )] % _5941_edim1)))
                          {
                            {
                              ++ _6059_l0;
                            }
                          }
                          else if((((*msubj)(_6059_l0)) > (_ptr__5934_wi64[safe_add( _5927_sp,_6058_l1 )] % _5941_edim1)))
                          {
                            {
                              ++ _6058_l1;
                            }
                          }
                          else
                          {
                            {
                              ++ _6057_relmnnz;
                              int32_t _11912_ = _ptr__5933_wi32[safe_add( _5926_ptr,_6058_l1 )];
                              int32_t _11913_ = _ptr__5933_wi32[safe_add( safe_add( _5926_ptr,_6058_l1 ),(int)1 )];
                              for (int32_t _6060_l = _11912_; _6060_l < _11913_; ++_6060_l)
                              {
                                {
                                  int32_t _11914_ = _ptr__5933_wi32[safe_add( _5930_codeptr,_6060_l )];
                                  int32_t _11915_ = _ptr__5933_wi32[safe_add( safe_add( _5930_codeptr,_6060_l ),(int)1 )];
                                  for (int32_t _6061_cl = _11914_; _6061_cl < _11915_; ++_6061_cl)
                                  {
                                    {
                                      _ptr__5971_ri32[safe_add( _5981_rcode,_6048_codei )] = _ptr__5933_wi32[safe_add( _5931_code,_6061_cl )];
                                      _ptr__5973_rf64[safe_add( _5982_rcconst,_6048_codei )] = _ptr__5935_wf64[safe_add( _5932_cconst,_6061_cl )];
                                      ++ _6048_codei;
                                    }
                                  }
                                  _ptr__5971_ri32[safe_add( _5981_rcode,_6048_codei )] = 2;
                                  _ptr__5973_rf64[safe_add( _5982_rcconst,_6048_codei )] = ((*mval)(_6059_l0));
                                  ++ _6048_codei;
                                  _ptr__5971_ri32[safe_add( _5981_rcode,_6048_codei )] = 5;
                                  ++ _6048_codei;
                                  _ptr__5971_ri32[safe_add( safe_add( _5980_rcodeptr,_6047_nzi ),(int)1 )] = _6048_codei;
                                  ++ _6047_nzi;
                                }
                              }
                              ++ _6059_l0;
                              ++ _6058_l1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ((_6048_codei != _5974_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Error in evaluation: Incorrect number of code elements"));
            }
          }
          {}
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprCrossDot.eval

// Begin mosek.fusion.ExprCrossDot.computeshape
// Method mosek.fusion.ExprCrossDot.computeshape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:114:6-120:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprCrossDot::computeshape(int32_t _6062_d0,int32_t _6063_d1,std::shared_ptr< monty::ndarray< int32_t,1 > > _6064_ds)
{
  _checked_ptr_1<int32_t> _ptr__6064_ds(_6064_ds ? _6064_ds->raw() : nullptr, _6064_ds ? _6064_ds->size(0) : 0);
  if (((int)((_6064_ds)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_6063_d1 != _ptr__6064_ds[(int)1]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6062_d0),(int32_t)(_ptr__6064_ds[(int)0])});
}
// End mosek.fusion.ExprCrossDot.computeshape

// Begin mosek.fusion.ExprCrossDot.validate
// Method mosek.fusion.ExprCrossDot.validate @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:28:6-74:7
int32_t mosek::fusion::p_ExprCrossDot::validate(int32_t _6065_mdim0,int32_t _6066_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _6067_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _6068_msubj,std::shared_ptr< monty::ndarray< double,1 > > _6069_mval,monty::rc_ptr< ::mosek::fusion::Expression > _6070_expr)
{
  _checked_ptr_1<int32_t> _ptr__6067_msubi(_6067_msubi ? _6067_msubi->raw() : nullptr, _6067_msubi ? _6067_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__6068_msubj(_6068_msubj ? _6068_msubj->raw() : nullptr, _6068_msubj ? _6068_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__6069_mval(_6069_mval ? _6069_mval->raw() : nullptr, _6069_mval ? _6069_mval->size(0) : 0);
  if ((_6070_expr->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _6071_edim0 = _6070_expr->getDim((int)0);
  int32_t _6072_edim1 = _6070_expr->getDim((int)1);
  if (((_6065_mdim0 < (int)0) || (_6066_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_6066_mdim1 != _6072_edim1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if (((NULL != _6067_msubi.get()) && (NULL != _6068_msubj.get())))
  {
    {
      if ((((int)((_6067_msubi)->size(0)) != (int)((_6068_msubj)->size(0))) || ((int)((_6067_msubi)->size(0)) != (int)((_6069_mval)->size(0)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_6069_mval)->size(0)) != safe_mul( _6065_mdim0,_6066_mdim1 )))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
        }
      }
      {}
    }
  }
  int32_t _6073_mnnz = (int)((_6069_mval)->size(0));
  bool _6074_err_data = false;
  bool _6075_err_unsorted = false;
  if (((NULL != _6067_msubi.get()) && (NULL != _6068_msubj.get())))
  {
    {
      int32_t _11916_ = (int)0;
      int32_t _11917_ = _6073_mnnz;
      for (int32_t _6076_i = _11916_; _6076_i < _11917_; ++_6076_i)
      {
        {
          _6074_err_data = (_6074_err_data || ((_ptr__6067_msubi[_6076_i] < (int)0) || ((_ptr__6067_msubi[_6076_i] >= _6065_mdim0) || ((_ptr__6068_msubj[_6076_i] < (int)0) || (_ptr__6068_msubj[_6076_i] >= _6066_mdim1)))));
        }
      }
      if ((!_6074_err_data))
      {
        {
          int32_t _11918_ = (int)0;
          int32_t _11919_ = (_6073_mnnz - (int)1);
          for (int32_t _6077_i = _11918_; _6077_i < _11919_; ++_6077_i)
          {
            {
              _6075_err_unsorted = (_6075_err_unsorted || ((_ptr__6067_msubi[_6077_i] > _ptr__6067_msubi[safe_add( _6077_i,(int)1 )]) || ((_ptr__6067_msubi[_6077_i] == _ptr__6067_msubi[safe_add( _6077_i,(int)1 )]) && (_ptr__6068_msubj[_6077_i] >= _ptr__6068_msubj[safe_add( _6077_i,(int)1 )]))));
            }
          }
        }
      }
      {}
    }
  }
  {}
  if (_6074_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_6075_err_unsorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprCrossDot.validate

// Begin mosek.fusion.ExprCrossDot.toString
// Method mosek.fusion.ExprCrossDot.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMul.monty:24:6-26:7
std::string mosek::fusion::ExprCrossDot :: toString() { return mosek::fusion::p_ExprCrossDot::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprCrossDot::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCrossDot(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprCrossDot.toString

void mosek::fusion::p_ExprCrossDot::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprCrossDot::destroy() { mosek::fusion::p_ExprCrossDot::_get_impl(this)->destroy(); }
// } class ExprCrossDot
// class ExprMulVar { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:170:4-791:5
mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }
mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulVar::p_ExprMulVar
  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulVar.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:248:6-276:7
mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar
  (bool _6078_left,
    int32_t _6079_mdimi,
    int32_t _6080_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6081_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6082_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6083_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6084_x)
{ return new mosek::fusion::ExprMulVar(_6078_left,_6079_mdimi,_6080_mdimj,_6081_msubi,_6082_msubj,_6083_mcof,_6084_x); }
mosek::fusion::ExprMulVar::ExprMulVar
  (bool _6078_left,
    int32_t _6079_mdimi,
    int32_t _6080_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6081_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6082_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6083_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6084_x) : 
   ExprMulVar(new mosek::fusion::p_ExprMulVar(this))
{ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_6078_left,_6079_mdimi,_6080_mdimj,_6081_msubi,_6082_msubj,_6083_mcof,_6084_x); }
void mosek::fusion::p_ExprMulVar::_initialize  (bool _6078_left,
    int32_t _6079_mdimi,
    int32_t _6080_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6081_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6082_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6083_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6084_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6081_msubi(_6081_msubi ? _6081_msubi->raw() : nullptr, _6081_msubi ? _6081_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6082_msubj(_6082_msubj ? _6082_msubj->raw() : nullptr, _6082_msubj ? _6082_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6083_mcof(_6083_mcof ? _6083_mcof->raw() : nullptr, _6083_mcof ? _6083_mcof->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_6078_left,_6079_mdimi,_6080_mdimj,_6081_msubi,_6082_msubj,_6083_mcof,_6084_x,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6085_xshape = _6084_x->getShape();
    _checked_ptr_1<int32_t> _ptr__6085_xshape(_6085_xshape ? _6085_xshape->raw() : nullptr,_6085_xshape ? _6085_xshape->size(0) : 0);
    int32_t _6086_nd = (int)((_6085_xshape)->size(0));
    if ((_6086_nd != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_6078_left && (_ptr__6085_xshape[(int)0] != _6080_mdimj)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_6078_left) && (_ptr__6085_xshape[(int)1] != _6079_mdimi)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_6081_msubi)->size(0)) != (int)((_6082_msubj)->size(0))) || ((int)((_6081_msubi)->size(0)) != (int)((_6083_mcof)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_6079_mdimi,_6080_mdimj,_6081_msubi,_6082_msubj,_6083_mcof);
  }
}
// mosek.fusion.ExprMulVar.ctor

// mosek.fusion.ExprMulVar.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:196:6-220:7
mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar
  (bool _6087_left,
    int32_t _6088_mdimi,
    int32_t _6089_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6090_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6091_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6092_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6093_x,
    int32_t _6094_unchecked_)
{ return new mosek::fusion::ExprMulVar(_6087_left,_6088_mdimi,_6089_mdimj,_6090_msubi,_6091_msubj,_6092_mcof,_6093_x,_6094_unchecked_); }
mosek::fusion::ExprMulVar::ExprMulVar
  (bool _6087_left,
    int32_t _6088_mdimi,
    int32_t _6089_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6090_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6091_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6092_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6093_x,
    int32_t _6094_unchecked_) : 
   ExprMulVar(new mosek::fusion::p_ExprMulVar(this))
{ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_6087_left,_6088_mdimi,_6089_mdimj,_6090_msubi,_6091_msubj,_6092_mcof,_6093_x,_6094_unchecked_); }
void mosek::fusion::p_ExprMulVar::_initialize  (bool _6087_left,
    int32_t _6088_mdimi,
    int32_t _6089_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6090_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6091_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6092_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6093_x,
    int32_t _6094_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6090_msubi(_6090_msubi ? _6090_msubi->raw() : nullptr, _6090_msubi ? _6090_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6091_msubj(_6091_msubj ? _6091_msubj->raw() : nullptr, _6091_msubj ? _6091_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6092_mcof(_6092_mcof ? _6092_mcof->raw() : nullptr, _6092_mcof ? _6092_mcof->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_6093_x->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprMulVar::resshape(_6088_mdimi,_6089_mdimj,_6093_x->getShape(),_6087_left));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _6087_left;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _6093_x;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _6088_mdimi;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _6089_mdimj;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_6090_msubi);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_6091_msubj);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_6092_mcof);
  }
}
// mosek.fusion.ExprMulVar.ctor

// Begin mosek.fusion.ExprMulVar.eval
// Method mosek.fusion.ExprMulVar.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:754:6-759:7
void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6095_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6096_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6097_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_6095_rs,_6096_ws,_6097_xs); }
void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6095_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6096_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6097_xs)
{
  if (left)
  {
    {
      _pubthis->eval_left(_6095_rs,_6096_ws,_6097_xs);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_6095_rs,_6096_ws,_6097_xs);
    }
  }
}
// End mosek.fusion.ExprMulVar.eval

// Begin mosek.fusion.ExprMulVar.eval_right
// Method mosek.fusion.ExprMulVar.eval_right @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:460:6-751:7
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _6098_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6099_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6100_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_6098_rs,_6099_ws,_6100_xs); }
void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _6098_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6099_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6100_xs)
{
  int32_t _6101_base_pi32 = mosek::fusion::p_WorkStack::_get_impl(_6099_ws)->pi32;
  int32_t _6102_base_pi64 = mosek::fusion::p_WorkStack::_get_impl(_6099_ws)->pi64;
  int32_t _6103_nx = x->numInst();
  int32_t _6104_nidxs = _6099_ws->alloci64(_6103_nx);
  int32_t _6105_sp = _6099_ws->alloci64(_6103_nx);
  int32_t _6106_xsubi = _6099_ws->alloci32(_6103_nx);
  int32_t _6107_xsubj = _6099_ws->alloci32(_6103_nx);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6108_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6108_xshape(_6108_xshape ? _6108_xshape->raw() : nullptr,_6108_xshape ? _6108_xshape->size(0) : 0);
  int32_t _6109_nd = (int)((_6108_xshape)->size(0));
  int64_t _6110_x_total_size = safe_mul( _ptr__6108_xshape[(int)0],_ptr__6108_xshape[(int)1] );
  int32_t _6111_xdim1 = _ptr__6108_xshape[(int)1];
  int32_t _6112_xdim0 = _ptr__6108_xshape[(int)0];
  int32_t _6113_ptr = _6099_ws->alloci32(safe_add( _6112_xdim0,(int)1 ));
  int32_t _6114_numm = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6115_msubi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int32_t> _ptr__6115_msubi(_6115_msubi ? _6115_msubi->raw() : nullptr,_6115_msubi ? _6115_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6116_msubj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int32_t> _ptr__6116_msubj(_6116_msubj ? _6116_msubj->raw() : nullptr,_6116_msubj ? _6116_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6117_mcof = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__6117_mcof(_6117_mcof ? _6117_mcof->raw() : nullptr,_6117_mcof ? _6117_mcof->size(0) : 0);
  int32_t _6118_mdim0 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int32_t _6119_mdim1 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _6120_m_is_dense = ((_6114_numm / _6118_mdim0) == _6119_mdim1);
  int32_t _6121_perm = _6099_ws->alloci32(_6114_numm);
  int32_t _6122_mptr = _6099_ws->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6123_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6099_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6123_wi32(_6123_wi32 ? _6123_wi32->raw() : nullptr,_6123_wi32 ? _6123_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6124_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6099_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6124_wi64(_6124_wi64 ? _6124_wi64->raw() : nullptr,_6124_wi64 ? _6124_wi64->size(0) : 0);
  int32_t _6125_nnz = (int)0;
  int32_t _6126_nelem = (int)0;
  x->inst(_6105_sp,_6124_wi64,_6104_nidxs,_6124_wi64);
  if (_6120_m_is_dense)
  {
    {
      int32_t _6127_x_num_nonempty_rows = (int)0;
      if ((_6103_nx > (int)0))
      {
        {
          _6127_x_num_nonempty_rows = (int)1;
          if ((_6112_xdim0 > (int)1))
          {
            {
              if ((_6111_xdim1 == (int)1))
              {
                {
                  int32_t _11920_ = (int)1;
                  int32_t _11921_ = _6103_nx;
                  for (int32_t _6128_i = _11920_; _6128_i < _11921_; ++_6128_i)
                  {
                    {
                      if ((_ptr__6124_wi64[safe_add( _6105_sp,_6128_i )] > _ptr__6124_wi64[(safe_add( _6105_sp,_6128_i ) - (int)1)]))
                      {
                        {
                          ++ _6127_x_num_nonempty_rows;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _11922_ = (int)1;
                  int32_t _11923_ = _6103_nx;
                  for (int32_t _6129_i = _11922_; _6129_i < _11923_; ++_6129_i)
                  {
                    {
                      if (((_ptr__6124_wi64[safe_add( _6105_sp,_6129_i )] / _6111_xdim1) > (_ptr__6124_wi64[(safe_add( _6105_sp,_6129_i ) - (int)1)] / _6111_xdim1)))
                      {
                        {
                          ++ _6127_x_num_nonempty_rows;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _6126_nelem = safe_mul( _6127_x_num_nonempty_rows,_6119_mdim1 );
      _6125_nnz = safe_mul( _6103_nx,_6119_mdim1 );
      bool _6130_hassp = (_6127_x_num_nonempty_rows < _6112_xdim0);
      _6098_rs->alloc_expr((int)2,_6126_nelem,_6125_nnz,_6130_hassp);
      int32_t _6131_rptr = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->ptr_base;
      int32_t _6132_rshape = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->shape_base;
      int32_t _6133_rnidx = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->nidxs_base;
      int32_t _11924_;
      bool _11925_ = _6130_hassp;
      if (_11925_)
      {
        _11924_ = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->sp_base;
      }
      else
      {
        _11924_ = _6098_rs->alloci64(_6126_nelem);
      }
      int32_t _6134_rsp = _11924_;
      int32_t _6135_rcof = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->cof_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6136_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6136_ri32(_6136_ri32 ? _6136_ri32->raw() : nullptr,_6136_ri32 ? _6136_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6137_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6137_ri64(_6137_ri64 ? _6137_ri64->raw() : nullptr,_6137_ri64 ? _6137_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6138_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->f64;
      _checked_ptr_1<double> _ptr__6138_rf64(_6138_rf64 ? _6138_rf64->raw() : nullptr,_6138_rf64 ? _6138_rf64->size(0) : 0);
      _ptr__6136_ri32[_6132_rshape] = _6112_xdim0;
      _ptr__6136_ri32[safe_add( _6132_rshape,(int)1 )] = _6119_mdim1;
      {
        int32_t _6139_p = (int)0;
        int32_t _6140_relm = (int)0;
        int32_t _6141_rnz = (int)0;
        _ptr__6136_ri32[_6131_rptr] = (int)0;
        while ( (_6139_p < _6103_nx) )
        {
          {
            int32_t _6142_p0 = _6139_p;
            ++ _6139_p;
            while ( ((_6139_p < _6103_nx) && ((_ptr__6124_wi64[safe_add( _6105_sp,_6139_p )] / _6111_xdim1) == (_ptr__6124_wi64[safe_add( _6105_sp,_6142_p0 )] / _6111_xdim1))) )
            {
              {
                ++ _6139_p;
              }
            }
            int64_t _6143_i = (_ptr__6124_wi64[safe_add( _6105_sp,_6142_p0 )] / _6111_xdim1);
            int32_t _11926_ = (int)0;
            int32_t _11927_ = _6119_mdim1;
            for (int32_t _6144_j = _11926_; _6144_j < _11927_; ++_6144_j)
            {
              {
                int32_t _11928_ = _6142_p0;
                int32_t _11929_ = _6139_p;
                for (int32_t _6145_k = _11928_; _6145_k < _11929_; ++_6145_k)
                {
                  {
                    int64_t _6146_jj = (_ptr__6124_wi64[safe_add( _6105_sp,_6145_k )] % _6111_xdim1);
                    _ptr__6137_ri64[safe_add( _6133_rnidx,_6141_rnz )] = _ptr__6124_wi64[safe_add( _6104_nidxs,_6145_k )];
                    _ptr__6138_rf64[safe_add( _6135_rcof,_6141_rnz )] = _ptr__6117_mcof[safe_add( safe_mul( _6146_jj,_6119_mdim1 ),_6144_j )];
                    ++ _6141_rnz;
                  }
                }
                _ptr__6136_ri32[safe_add( safe_add( _6131_rptr,_6140_relm ),(int)1 )] = _6141_rnz;
                _ptr__6137_ri64[safe_add( _6134_rsp,_6140_relm )] = safe_add( safe_mul( _6143_i,_6119_mdim1 ),_6144_j );
                ++ _6140_relm;
              }
            }
          }
        }
      }
      if ((!_6130_hassp))
      {
        {
          _6098_rs->popi64(_6126_nelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_6119_mdim1 == (int)1))
        {
          {
            int32_t _11930_ = (int)0;
            int32_t _11931_ = _6114_numm;
            for (int32_t _6147_i = _11930_; _6147_i < _11931_; ++_6147_i)
            {
              {
                _ptr__6123_wi32[safe_add( _6121_perm,_6147_i )] = _6147_i;
              }
            }
            _ptr__6123_wi32[_6122_mptr] = (int)0;
            _ptr__6123_wi32[safe_add( _6122_mptr,(int)1 )] = _6114_numm;
          }
        }
        else
        {
          {
            _ptr__6123_wi32[_6122_mptr] = (int)0;
            int32_t _11932_ = (int)0;
            int32_t _11933_ = safe_add( _6119_mdim1,(int)1 );
            for (int32_t _6148_i = _11932_; _6148_i < _11933_; ++_6148_i)
            {
              {
                _ptr__6123_wi32[safe_add( _6122_mptr,_6148_i )] = (int)0;
              }
            }
            int32_t _11934_ = (int)0;
            int32_t _11935_ = _6114_numm;
            for (int32_t _6149_i = _11934_; _6149_i < _11935_; ++_6149_i)
            {
              {
                ++ _ptr__6123_wi32[safe_add( safe_add( _6122_mptr,_ptr__6116_msubj[_6149_i] ),(int)1 )];
              }
            }
            int32_t _11936_ = (int)0;
            int32_t _11937_ = mdimj;
            for (int32_t _6150_i = _11936_; _6150_i < _11937_; ++_6150_i)
            {
              {
                _ptr__6123_wi32[safe_add( safe_add( _6122_mptr,_6150_i ),(int)1 )] += _ptr__6123_wi32[safe_add( _6122_mptr,_6150_i )];
              }
            }
            int32_t _11938_ = (int)0;
            int32_t _11939_ = _6114_numm;
            for (int32_t _6151_i = _11938_; _6151_i < _11939_; ++_6151_i)
            {
              {
                _ptr__6123_wi32[safe_add( _6121_perm,_ptr__6123_wi32[safe_add( _6122_mptr,_ptr__6116_msubj[_6151_i] )] )] = _6151_i;
                ++ _ptr__6123_wi32[safe_add( _6122_mptr,_ptr__6116_msubj[_6151_i] )];
              }
            }
            int32_t _11940_ = (int)0;
            int32_t _11941_ = _6119_mdim1;
            for (int32_t _6152_i = _11940_; _6152_i < _11941_; ++_6152_i)
            {
              {
                _ptr__6123_wi32[(safe_add( _6122_mptr,_6119_mdim1 ) - _6152_i)] = _ptr__6123_wi32[((safe_add( _6122_mptr,_6119_mdim1 ) - _6152_i) - (int)1)];
              }
            }
            _ptr__6123_wi32[_6122_mptr] = (int)0;
          }
        }
      }
      if (((_6103_nx / _6112_xdim0) == _6111_xdim1))
      {
        {
          int32_t _6153_num_nz_cols = (int)0;
          {
            int32_t _6154_p = (int)0;
            while ( (_6154_p < _6114_numm) )
            {
              {
                ++ _6154_p;
                while ( ((_6154_p < _6114_numm) && (_ptr__6116_msubj[_ptr__6123_wi32[(safe_add( _6121_perm,_6154_p ) - (int)1)]] == _ptr__6116_msubj[_ptr__6123_wi32[safe_add( _6121_perm,_6154_p )]])) )
                {
                  {
                    ++ _6154_p;
                  }
                }
                ++ _6153_num_nz_cols;
              }
            }
          }
          _6126_nelem = safe_mul( _6153_num_nz_cols,_6112_xdim0 );
          _6125_nnz = safe_mul( _6114_numm,_6112_xdim0 );
          bool _6155_rhassp = (_6153_num_nz_cols < _6119_mdim1);
          _6098_rs->alloc_expr((int)2,_6126_nelem,_6125_nnz,_6155_rhassp);
          int32_t _6156_rptr = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->ptr_base;
          int32_t _6157_rshape = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->shape_base;
          int32_t _6158_rnidx = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->nidxs_base;
          int32_t _11942_;
          bool _11943_ = _6155_rhassp;
          if (_11943_)
          {
            _11942_ = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->sp_base;
          }
          else
          {
            _11942_ = _6098_rs->alloci64(_6126_nelem);
          }
          int32_t _6159_rsp = _11942_;
          int32_t _6160_rcof = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i32)(_6157_rshape)) = _6112_xdim0;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i32)(safe_add( _6157_rshape,(int)1 ))) = _6119_mdim1;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6161_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__6161_ri32(_6161_ri32 ? _6161_ri32->raw() : nullptr,_6161_ri32 ? _6161_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6162_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__6162_ri64(_6162_ri64 ? _6162_ri64->raw() : nullptr,_6162_ri64 ? _6162_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _6163_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->f64;
          _checked_ptr_1<double> _ptr__6163_rf64(_6163_rf64 ? _6163_rf64->raw() : nullptr,_6163_rf64 ? _6163_rf64->size(0) : 0);
          _ptr__6161_ri32[_6156_rptr] = (int)0;
          int32_t _6164_kelm = (int)0;
          int32_t _6165_knz = (int)0;
          int32_t _11944_ = (int)0;
          int32_t _11945_ = _6112_xdim0;
          for (int32_t _6166_i = _11944_; _6166_i < _11945_; ++_6166_i)
          {
            {
              int32_t _6167_p = (int)0;
              while ( (_6167_p < _6114_numm) )
              {
                {
                  int32_t _6168_p0 = _6167_p;
                  ++ _6167_p;
                  while ( ((_6167_p < _6114_numm) && (_ptr__6116_msubj[_ptr__6123_wi32[safe_add( _6121_perm,_6168_p0 )]] == _ptr__6116_msubj[_ptr__6123_wi32[safe_add( _6121_perm,_6167_p )]])) )
                  {
                    {
                      ++ _6167_p;
                    }
                  }
                  int32_t _6169_j = _ptr__6116_msubj[_ptr__6123_wi32[safe_add( _6121_perm,_6168_p0 )]];
                  int32_t _11946_ = _6168_p0;
                  int32_t _11947_ = _6167_p;
                  for (int32_t _6170_k = _11946_; _6170_k < _11947_; ++_6170_k)
                  {
                    {
                      int32_t _6171_ii = _ptr__6115_msubi[_ptr__6123_wi32[safe_add( _6121_perm,_6170_k )]];
                      _ptr__6162_ri64[safe_add( _6158_rnidx,_6165_knz )] = _ptr__6124_wi64[safe_add( safe_add( _6104_nidxs,safe_mul( _6166_i,_6111_xdim1 ) ),_6171_ii )];
                      _ptr__6163_rf64[safe_add( _6160_rcof,_6165_knz )] = _ptr__6117_mcof[_ptr__6123_wi32[safe_add( _6121_perm,_6170_k )]];
                      ++ _6165_knz;
                    }
                  }
                  _ptr__6162_ri64[safe_add( _6159_rsp,_6164_kelm )] = safe_add( safe_mul( _6166_i,_6119_mdim1 ),_6169_j );
                  _ptr__6161_ri32[safe_add( safe_add( _6156_rptr,_6164_kelm ),(int)1 )] = _6165_knz;
                  ++ _6164_kelm;
                }
              }
            }
          }
          if ((!_6155_rhassp))
          {
            {
              _6098_rs->popi64(_6126_nelem);
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _11948_ = (int)0;
          int32_t _11949_ = safe_add( _6112_xdim0,(int)1 );
          for (int32_t _6172_i = _11948_; _6172_i < _11949_; ++_6172_i)
          {
            {
              _ptr__6123_wi32[safe_add( _6113_ptr,_6172_i )] = (int)0;
            }
          }
          if ((_6109_nd == (int)1))
          {
            {
              int32_t _11950_ = (int)0;
              int32_t _11951_ = _6103_nx;
              for (int32_t _6173_i = _11950_; _6173_i < _11951_; ++_6173_i)
              {
                {
                  _ptr__6123_wi32[safe_add( _6106_xsubi,_6173_i )] = (int)0;
                }
              }
              int32_t _11952_ = (int)0;
              int32_t _11953_ = _6103_nx;
              for (int32_t _6174_i = _11952_; _6174_i < _11953_; ++_6174_i)
              {
                {
                  _ptr__6123_wi32[safe_add( _6107_xsubj,_6174_i )] = (int32_t)_ptr__6124_wi64[safe_add( _6105_sp,_6174_i )];
                }
              }
              _ptr__6123_wi32[_6113_ptr] = (int)0;
              _ptr__6123_wi32[safe_add( _6113_ptr,(int)1 )] = _6103_nx;
            }
          }
          else
          {
            {
              int32_t _11954_ = (int)0;
              int32_t _11955_ = _6103_nx;
              for (int32_t _6175_i = _11954_; _6175_i < _11955_; ++_6175_i)
              {
                {
                  _ptr__6123_wi32[safe_add( _6106_xsubi,_6175_i )] = (int32_t)(_ptr__6124_wi64[safe_add( _6105_sp,_6175_i )] / _ptr__6108_xshape[(int)1]);
                }
              }
              int32_t _11956_ = (int)0;
              int32_t _11957_ = _6103_nx;
              for (int32_t _6176_i = _11956_; _6176_i < _11957_; ++_6176_i)
              {
                {
                  _ptr__6123_wi32[safe_add( _6107_xsubj,_6176_i )] = (int32_t)(_ptr__6124_wi64[safe_add( _6105_sp,_6176_i )] % _ptr__6108_xshape[(int)1]);
                }
              }
              _ptr__6123_wi32[_6113_ptr] = (int)0;
              int32_t _11958_ = (int)0;
              int32_t _11959_ = _6103_nx;
              for (int32_t _6177_i = _11958_; _6177_i < _11959_; ++_6177_i)
              {
                {
                  ++ _ptr__6123_wi32[safe_add( safe_add( _6113_ptr,_ptr__6123_wi32[safe_add( _6106_xsubi,_6177_i )] ),(int)1 )];
                }
              }
              int32_t _11960_ = (int)0;
              int32_t _11961_ = _6112_xdim0;
              for (int32_t _6178_i = _11960_; _6178_i < _11961_; ++_6178_i)
              {
                {
                  _ptr__6123_wi32[safe_add( safe_add( _6113_ptr,_6178_i ),(int)1 )] += _ptr__6123_wi32[safe_add( _6113_ptr,_6178_i )];
                }
              }
            }
          }
          int32_t _11962_ = (int)0;
          int32_t _11963_ = _6112_xdim0;
          for (int32_t _6179_i = _11962_; _6179_i < _11963_; ++_6179_i)
          {
            {
              int32_t _11964_ = (int)0;
              int32_t _11965_ = mdimj;
              for (int32_t _6180_j = _11964_; _6180_j < _11965_; ++_6180_j)
              {
                {
                  int32_t _6181_nz = (int)0;
                  int32_t _6182_e1 = _ptr__6123_wi32[safe_add( safe_add( _6113_ptr,_6179_i ),(int)1 )];
                  int32_t _6183_e0 = _ptr__6123_wi32[safe_add( safe_add( _6122_mptr,_6180_j ),(int)1 )];
                  int32_t _6184_i1 = _ptr__6123_wi32[safe_add( _6113_ptr,_6179_i )];
                  int32_t _6185_i0 = _ptr__6123_wi32[safe_add( _6122_mptr,_6180_j )];
                  while ( ((_6185_i0 < _6183_e0) && (_6184_i1 < _6182_e1)) )
                  {
                    {
                      if ((_ptr__6115_msubi[_ptr__6123_wi32[safe_add( _6121_perm,_6185_i0 )]] < _ptr__6123_wi32[safe_add( _6107_xsubj,_6184_i1 )]))
                      {
                        {
                          ++ _6185_i0;
                        }
                      }
                      else if((_ptr__6115_msubi[_ptr__6123_wi32[safe_add( _6121_perm,_6185_i0 )]] > _ptr__6123_wi32[safe_add( _6107_xsubj,_6184_i1 )]))
                      {
                        {
                          ++ _6184_i1;
                        }
                      }
                      else
                      {
                        {
                          ++ _6181_nz;
                          ++ _6185_i0;
                          ++ _6184_i1;
                        }
                      }
                    }
                  }
                  if ((_6181_nz > (int)0))
                  {
                    {
                      _6125_nnz += _6181_nz;
                      ++ _6126_nelem;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _6186_rhassp = (_6126_nelem < safe_mul( _6111_xdim1,mdimi ));
          _6098_rs->alloc_expr((int)2,_6126_nelem,_6125_nnz,_6186_rhassp);
          int32_t _6187_rptr = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->ptr_base;
          int32_t _6188_rshape = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->shape_base;
          int32_t _6189_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->nidxs_base;
          int32_t _6190_rsp = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->sp_base;
          int32_t _6191_rcof = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i32)(_6188_rshape)) = _6112_xdim0;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i32)(safe_add( _6188_rshape,(int)1 ))) = mdimj;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6192_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__6192_ri32(_6192_ri32 ? _6192_ri32->raw() : nullptr,_6192_ri32 ? _6192_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6193_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__6193_ri64(_6193_ri64 ? _6193_ri64->raw() : nullptr,_6193_ri64 ? _6193_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _6194_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6098_rs)->f64;
          _checked_ptr_1<double> _ptr__6194_rf64(_6194_rf64 ? _6194_rf64->raw() : nullptr,_6194_rf64 ? _6194_rf64->size(0) : 0);
          {
            int32_t _6195_pi = (int)0;
            int32_t _6196_pe = (int)0;
            int32_t _6197_p = (int)0;
            _ptr__6192_ri32[_6187_rptr] = (int)0;
            int32_t _11966_ = (int)0;
            int32_t _11967_ = _6112_xdim0;
            for (int32_t _6198_i = _11966_; _6198_i < _11967_; ++_6198_i)
            {
              {
                int32_t _11968_ = (int)0;
                int32_t _11969_ = mdimj;
                for (int32_t _6199_j = _11968_; _6199_j < _11969_; ++_6199_j)
                {
                  {
                    int32_t _6200_nz = (int)0;
                    int32_t _6201_e1 = _ptr__6123_wi32[safe_add( safe_add( _6113_ptr,_6198_i ),(int)1 )];
                    int32_t _6202_e0 = _ptr__6123_wi32[safe_add( safe_add( _6122_mptr,_6199_j ),(int)1 )];
                    int32_t _6203_i1 = _ptr__6123_wi32[safe_add( _6113_ptr,_6198_i )];
                    int32_t _6204_i0 = _ptr__6123_wi32[safe_add( _6122_mptr,_6199_j )];
                    while ( ((_6204_i0 < _6202_e0) && (_6203_i1 < _6201_e1)) )
                    {
                      {
                        if ((_ptr__6115_msubi[_ptr__6123_wi32[safe_add( _6121_perm,_6204_i0 )]] < _ptr__6123_wi32[safe_add( _6107_xsubj,_6203_i1 )]))
                        {
                          {
                            ++ _6204_i0;
                          }
                        }
                        else if((_ptr__6115_msubi[_ptr__6123_wi32[safe_add( _6121_perm,_6204_i0 )]] > _ptr__6123_wi32[safe_add( _6107_xsubj,_6203_i1 )]))
                        {
                          {
                            ++ _6203_i1;
                          }
                        }
                        else
                        {
                          {
                            _ptr__6193_ri64[safe_add( _6189_rnidxs,_6197_p )] = _ptr__6124_wi64[safe_add( _6104_nidxs,_6203_i1 )];
                            _ptr__6194_rf64[safe_add( _6191_rcof,_6197_p )] = _ptr__6117_mcof[_ptr__6123_wi32[safe_add( _6121_perm,_6204_i0 )]];
                            ++ _6200_nz;
                            ++ _6197_p;
                            ++ _6204_i0;
                            ++ _6203_i1;
                          }
                        }
                      }
                    }
                    if ((_6200_nz > (int)0))
                    {
                      {
                        _ptr__6192_ri32[safe_add( safe_add( _6187_rptr,_6196_pe ),(int)1 )] = _6197_p;
                        if (_6186_rhassp)
                        {
                          {
                            _ptr__6193_ri64[safe_add( _6190_rsp,_6196_pe )] = _6195_pi;
                          }
                        }
                        {}
                        ++ _6196_pe;
                      }
                    }
                    {}
                    ++ _6195_pi;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_6099_ws)->pi32 = _6101_base_pi32;
  mosek::fusion::p_WorkStack::_get_impl(_6099_ws)->pi64 = _6102_base_pi64;
}
// End mosek.fusion.ExprMulVar.eval_right

// Begin mosek.fusion.ExprMulVar.eval_left
// Method mosek.fusion.ExprMulVar.eval_left @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:279:6-458:7
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _6205_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6206_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6207_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_6205_rs,_6206_ws,_6207_xs); }
void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _6205_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6206_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6207_xs)
{
  int32_t _6208_nx = x->numInst();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6209_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6209_xshape(_6209_xshape ? _6209_xshape->raw() : nullptr,_6209_xshape ? _6209_xshape->size(0) : 0);
  int32_t _6210_nd = (int)((_6209_xshape)->size(0));
  int32_t _6211_nidxs = _6207_xs->alloci64(_6208_nx);
  int32_t _6212_sp = _6207_xs->alloci64(_6208_nx);
  int32_t _6213_xsubi = _6207_xs->alloci32(_6208_nx);
  int32_t _6214_xsubj = _6207_xs->alloci32(_6208_nx);
  int32_t _6215_perm = _6207_xs->alloci32(_6208_nx);
  int32_t _6216_mptr = _6207_xs->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6217_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6217_xshape(_6217_xshape ? _6217_xshape->raw() : nullptr,_6217_xshape ? _6217_xshape->size(0) : 0);
  int32_t _6218_nd = (int)((_6217_xshape)->size(0));
  int32_t _11970_;
  bool _11971_ = (_6218_nd == (int)1);
  if (_11971_)
  {
    _11970_ = (int)1;
  }
  else
  {
    _11970_ = _ptr__6217_xshape[(int)1];
  }
  int32_t _6219_xdim1 = _11970_;
  int32_t _6220_xdim0 = _ptr__6217_xshape[(int)0];
  int32_t _6221_ptr = _6207_xs->alloci32(safe_add( _6219_xdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6222_msubi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int32_t> _ptr__6222_msubi(_6222_msubi ? _6222_msubi->raw() : nullptr,_6222_msubi ? _6222_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6223_msubj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int32_t> _ptr__6223_msubj(_6223_msubj ? _6223_msubj->raw() : nullptr,_6223_msubj ? _6223_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6224_mcof = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__6224_mcof(_6224_mcof ? _6224_mcof->raw() : nullptr,_6224_mcof ? _6224_mcof->size(0) : 0);
  int32_t _6225_mdimi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int32_t _6226_mdimj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int32_t _6227_rnnz = (int)0;
  int32_t _6228_rnelem = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6229_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6207_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6229_xi32(_6229_xi32 ? _6229_xi32->raw() : nullptr,_6229_xi32 ? _6229_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6230_xi64 = mosek::fusion::p_WorkStack::_get_impl(_6207_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__6230_xi64(_6230_xi64 ? _6230_xi64->raw() : nullptr,_6230_xi64 ? _6230_xi64->size(0) : 0);
  int32_t _6231_mnnz = (int)((_6224_mcof)->size(0));
  x->inst(_6212_sp,_6230_xi64,_6211_nidxs,_6230_xi64);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int32_t _11972_ = (int)0;
        int32_t _11973_ = safe_add( _6225_mdimi,(int)1 );
        for (int32_t _6232_i = _11972_; _6232_i < _11973_; ++_6232_i)
        {
          {
            _ptr__6229_xi32[safe_add( _6216_mptr,_6232_i )] = (int)0;
          }
        }
        int32_t _11974_ = (int)0;
        int32_t _11975_ = (int)((_6222_msubi)->size(0));
        for (int32_t _6233_i = _11974_; _6233_i < _11975_; ++_6233_i)
        {
          {
            ++ _ptr__6229_xi32[safe_add( safe_add( _6216_mptr,_ptr__6222_msubi[_6233_i] ),(int)1 )];
          }
        }
        int32_t _11976_ = (int)0;
        int32_t _11977_ = _6225_mdimi;
        for (int32_t _6234_i = _11976_; _6234_i < _11977_; ++_6234_i)
        {
          {
            _ptr__6229_xi32[safe_add( safe_add( _6216_mptr,_6234_i ),(int)1 )] += _ptr__6229_xi32[safe_add( _6216_mptr,_6234_i )];
          }
        }
        if ((_6218_nd == (int)1))
        {
          {
            int32_t _11978_ = (int)0;
            int32_t _11979_ = _6208_nx;
            for (int32_t _6235_i = _11978_; _6235_i < _11979_; ++_6235_i)
            {
              {
                _ptr__6229_xi32[safe_add( _6213_xsubi,_6235_i )] = (int32_t)_ptr__6230_xi64[safe_add( _6212_sp,_6235_i )];
              }
            }
            int32_t _11980_ = (int)0;
            int32_t _11981_ = _6208_nx;
            for (int32_t _6236_i = _11980_; _6236_i < _11981_; ++_6236_i)
            {
              {
                _ptr__6229_xi32[safe_add( _6214_xsubj,_6236_i )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int32_t _11982_ = (int)0;
            int32_t _11983_ = _6208_nx;
            for (int32_t _6237_i = _11982_; _6237_i < _11983_; ++_6237_i)
            {
              {
                _ptr__6229_xi32[safe_add( _6213_xsubi,_6237_i )] = (int32_t)(_ptr__6230_xi64[safe_add( _6212_sp,_6237_i )] / _6219_xdim1);
              }
            }
            int32_t _11984_ = (int)0;
            int32_t _11985_ = _6208_nx;
            for (int32_t _6238_i = _11984_; _6238_i < _11985_; ++_6238_i)
            {
              {
                _ptr__6229_xi32[safe_add( _6214_xsubj,_6238_i )] = (int32_t)(_ptr__6230_xi64[safe_add( _6212_sp,_6238_i )] % _6219_xdim1);
              }
            }
          }
        }
        if ((_6218_nd > (int)1))
        {
          {
            int32_t _11986_ = (int)0;
            int32_t _11987_ = safe_add( _6219_xdim1,(int)1 );
            for (int32_t _6239_i = _11986_; _6239_i < _11987_; ++_6239_i)
            {
              {
                _ptr__6229_xi32[safe_add( _6221_ptr,_6239_i )] = (int)0;
              }
            }
            int32_t _11988_ = (int)0;
            int32_t _11989_ = _6208_nx;
            for (int32_t _6240_i = _11988_; _6240_i < _11989_; ++_6240_i)
            {
              {
                ++ _ptr__6229_xi32[safe_add( safe_add( _6221_ptr,_ptr__6229_xi32[safe_add( _6214_xsubj,_6240_i )] ),(int)1 )];
              }
            }
            int32_t _11990_ = (int)0;
            int32_t _11991_ = _6219_xdim1;
            for (int32_t _6241_i = _11990_; _6241_i < _11991_; ++_6241_i)
            {
              {
                _ptr__6229_xi32[safe_add( safe_add( _6221_ptr,_6241_i ),(int)1 )] += _ptr__6229_xi32[safe_add( _6221_ptr,_6241_i )];
              }
            }
            int32_t _11992_ = (int)0;
            int32_t _11993_ = _6208_nx;
            for (int32_t _6242_i = _11992_; _6242_i < _11993_; ++_6242_i)
            {
              {
                _ptr__6229_xi32[safe_add( _6215_perm,_ptr__6229_xi32[safe_add( _6221_ptr,_ptr__6229_xi32[safe_add( _6214_xsubj,_6242_i )] )] )] = _6242_i;
                ++ _ptr__6229_xi32[safe_add( _6221_ptr,_ptr__6229_xi32[safe_add( _6214_xsubj,_6242_i )] )];
              }
            }
            int32_t _11994_ = (int)0;
            int32_t _11995_ = _6219_xdim1;
            for (int32_t _6243_i = _11994_; _6243_i < _11995_; ++_6243_i)
            {
              {
                _ptr__6229_xi32[(safe_add( _6221_ptr,_6219_xdim1 ) - _6243_i)] = _ptr__6229_xi32[((safe_add( _6221_ptr,_6219_xdim1 ) - _6243_i) - (int)1)];
              }
            }
            _ptr__6229_xi32[_6221_ptr] = (int)0;
          }
        }
        else
        {
          {
            _ptr__6229_xi32[_6221_ptr] = (int)0;
            _ptr__6229_xi32[safe_add( _6221_ptr,(int)1 )] = _6208_nx;
            int32_t _11996_ = (int)0;
            int32_t _11997_ = _6208_nx;
            for (int32_t _6244_i = _11996_; _6244_i < _11997_; ++_6244_i)
            {
              {
                _ptr__6229_xi32[safe_add( _6215_perm,_6244_i )] = _6244_i;
              }
            }
          }
        }
        int32_t _11998_ = (int)0;
        int32_t _11999_ = _6225_mdimi;
        for (int32_t _6245_i = _11998_; _6245_i < _11999_; ++_6245_i)
        {
          {
            int32_t _12000_ = (int)0;
            int32_t _12001_ = _6219_xdim1;
            for (int32_t _6246_j = _12000_; _6246_j < _12001_; ++_6246_j)
            {
              {
                int32_t _6247_nz = (int)0;
                int32_t _6248_e1 = _ptr__6229_xi32[safe_add( safe_add( _6221_ptr,_6246_j ),(int)1 )];
                int32_t _6249_e0 = _ptr__6229_xi32[safe_add( safe_add( _6216_mptr,_6245_i ),(int)1 )];
                int32_t _6250_i1 = _ptr__6229_xi32[safe_add( _6221_ptr,_6246_j )];
                int32_t _6251_i0 = _ptr__6229_xi32[safe_add( _6216_mptr,_6245_i )];
                while ( ((_6251_i0 < _6249_e0) && (_6250_i1 < _6248_e1)) )
                {
                  {
                    if ((_ptr__6223_msubj[_6251_i0] < _ptr__6229_xi32[safe_add( _6213_xsubi,_ptr__6229_xi32[safe_add( _6215_perm,_6250_i1 )] )]))
                    {
                      {
                        ++ _6251_i0;
                      }
                    }
                    else if((_ptr__6223_msubj[_6251_i0] > _ptr__6229_xi32[safe_add( _6213_xsubi,_ptr__6229_xi32[safe_add( _6215_perm,_6250_i1 )] )]))
                    {
                      {
                        ++ _6250_i1;
                      }
                    }
                    else
                    {
                      {
                        ++ _6247_nz;
                        ++ _6251_i0;
                        ++ _6250_i1;
                      }
                    }
                  }
                }
                if ((_6247_nz > (int)0))
                {
                  {
                    _6227_rnnz += _6247_nz;
                    ++ _6228_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _6227_rnnz = safe_mul( _6231_mnnz,_6219_xdim1 );
      int32_t _6252_i0 = (int)0;
      while ( (_6252_i0 < _6231_mnnz) )
      {
        {
          int32_t _6253_e0 = safe_add( _6252_i0,(int)1 );
          while ( ((_6253_e0 < _6231_mnnz) && (_ptr__6222_msubi[_6252_i0] == _ptr__6222_msubi[_6253_e0])) )
          {
            {
              ++ _6253_e0;
            }
          }
          ++ _6228_rnelem;
          _6252_i0 = _6253_e0;
        }
      }
      _6228_rnelem *= _6219_xdim1;
    }
  }
  bool _12002_;
  bool _12003_ = (_6228_rnelem < safe_mul( _6219_xdim1,_6225_mdimi ));
  if (_12003_)
  {
    _12002_ = true;
  }
  else
  {
    _12002_ = false;
  }
  bool _6254_rhassp = _12002_;
  int32_t _6255_rnd = _6218_nd;
  _6205_rs->alloc_expr(_6255_rnd,_6228_rnelem,_6227_rnnz,_6254_rhassp);
  int32_t _6256_rptr = mosek::fusion::p_WorkStack::_get_impl(_6205_rs)->ptr_base;
  int32_t _6257_rshape = mosek::fusion::p_WorkStack::_get_impl(_6205_rs)->shape_base;
  int32_t _6258_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6205_rs)->nidxs_base;
  int32_t _12004_;
  bool _12005_ = _6254_rhassp;
  if (_12005_)
  {
    _12004_ = mosek::fusion::p_WorkStack::_get_impl(_6205_rs)->sp_base;
  }
  else
  {
    _12004_ = _6205_rs->alloci64(_6228_rnelem);
  }
  int32_t _6259_rsp = _12004_;
  int32_t _6260_rcof = mosek::fusion::p_WorkStack::_get_impl(_6205_rs)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6261_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6205_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6261_ri32(_6261_ri32 ? _6261_ri32->raw() : nullptr,_6261_ri32 ? _6261_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6262_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6205_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6262_ri64(_6262_ri64 ? _6262_ri64->raw() : nullptr,_6262_ri64 ? _6262_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6263_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6205_rs)->f64;
  _checked_ptr_1<double> _ptr__6263_rf64(_6263_rf64 ? _6263_rf64->raw() : nullptr,_6263_rf64 ? _6263_rf64->size(0) : 0);
  _ptr__6261_ri32[_6257_rshape] = _6225_mdimi;
  if ((_6218_nd > (int)1))
  {
    {
      _ptr__6261_ri32[safe_add( _6257_rshape,(int)1 )] = _6219_xdim1;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int32_t _6264_pi = (int)0;
      int32_t _6265_pe = (int)0;
      int32_t _6266_p = (int)0;
      _ptr__6261_ri32[_6256_rptr] = (int)0;
      int32_t _12006_ = (int)0;
      int32_t _12007_ = _6225_mdimi;
      for (int32_t _6267_i = _12006_; _6267_i < _12007_; ++_6267_i)
      {
        {
          int32_t _12008_ = (int)0;
          int32_t _12009_ = _6219_xdim1;
          for (int32_t _6268_j = _12008_; _6268_j < _12009_; ++_6268_j)
          {
            {
              int32_t _6269_nz = (int)0;
              int32_t _6270_e1 = _ptr__6229_xi32[safe_add( safe_add( _6221_ptr,_6268_j ),(int)1 )];
              int32_t _6271_e0 = _ptr__6229_xi32[safe_add( safe_add( _6216_mptr,_6267_i ),(int)1 )];
              int32_t _6272_i1 = _ptr__6229_xi32[safe_add( _6221_ptr,_6268_j )];
              int32_t _6273_i0 = _ptr__6229_xi32[safe_add( _6216_mptr,_6267_i )];
              while ( ((_6273_i0 < _6271_e0) && (_6272_i1 < _6270_e1)) )
              {
                {
                  if ((_ptr__6223_msubj[_6273_i0] < _ptr__6229_xi32[safe_add( _6213_xsubi,_ptr__6229_xi32[safe_add( _6215_perm,_6272_i1 )] )]))
                  {
                    {
                      ++ _6273_i0;
                    }
                  }
                  else if((_ptr__6223_msubj[_6273_i0] > _ptr__6229_xi32[safe_add( _6213_xsubi,_ptr__6229_xi32[safe_add( _6215_perm,_6272_i1 )] )]))
                  {
                    {
                      ++ _6272_i1;
                    }
                  }
                  else
                  {
                    {
                      _ptr__6262_ri64[safe_add( _6258_rnidxs,_6266_p )] = _ptr__6230_xi64[safe_add( _6211_nidxs,_ptr__6229_xi32[safe_add( _6215_perm,_6272_i1 )] )];
                      _ptr__6263_rf64[safe_add( _6260_rcof,_6266_p )] = _ptr__6224_mcof[_6273_i0];
                      ++ _6269_nz;
                      ++ _6266_p;
                      ++ _6273_i0;
                      ++ _6272_i1;
                    }
                  }
                }
              }
              if ((_6269_nz > (int)0))
              {
                {
                  _ptr__6261_ri32[safe_add( safe_add( _6256_rptr,_6265_pe ),(int)1 )] = _6266_p;
                  _ptr__6262_ri64[safe_add( _6259_rsp,_6265_pe )] = _6264_pi;
                  ++ _6265_pe;
                }
              }
              {}
              ++ _6264_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _6274_rnzi = (int)0;
      int32_t _6275_relmi = (int)0;
      _ptr__6261_ri32[_6256_rptr] = (int)0;
      int32_t _6276_i0 = (int)0;
      while ( (_6276_i0 < _6231_mnnz) )
      {
        {
          int32_t _6277_e0 = safe_add( _6276_i0,(int)1 );
          while ( ((_6277_e0 < _6231_mnnz) && (_ptr__6222_msubi[_6277_e0] == _ptr__6222_msubi[_6276_i0])) )
          {
            {
              ++ _6277_e0;
            }
          }
          int32_t _12010_ = (int)0;
          int32_t _12011_ = _6219_xdim1;
          for (int32_t _6278_j = _12010_; _6278_j < _12011_; ++_6278_j)
          {
            {
              int32_t _12012_ = _6276_i0;
              int32_t _12013_ = _6277_e0;
              for (int32_t _6279_k = _12012_; _6279_k < _12013_; ++_6279_k)
              {
                {
                  _ptr__6262_ri64[safe_add( _6258_rnidxs,_6274_rnzi )] = _ptr__6230_xi64[safe_add( safe_add( _6211_nidxs,safe_mul( _ptr__6223_msubj[_6279_k],_6219_xdim1 ) ),_6278_j )];
                  _ptr__6263_rf64[safe_add( _6260_rcof,_6274_rnzi )] = _ptr__6224_mcof[_6279_k];
                  ++ _6274_rnzi;
                }
              }
              _ptr__6261_ri32[safe_add( safe_add( _6256_rptr,_6275_relmi ),(int)1 )] = _6274_rnzi;
              _ptr__6262_ri64[safe_add( _6259_rsp,_6275_relmi )] = safe_add( safe_mul( _ptr__6222_msubi[_6276_i0],_6219_xdim1 ),_6278_j );
              ++ _6275_relmi;
            }
          }
          _6276_i0 = _6277_e0;
        }
      }
    }
  }
  if ((!_6254_rhassp))
  {
    {
      _6205_rs->popi64(_6228_rnelem);
    }
  }
  {}
  _6207_xs->clear();
}
// End mosek.fusion.ExprMulVar.eval_left

// Begin mosek.fusion.ExprMulVar.validate
// Method mosek.fusion.ExprMulVar.validate @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:222:6-244:7
void mosek::fusion::p_ExprMulVar::validate(int32_t _6280_mdimi,int32_t _6281_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _6282_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _6283_msubj,std::shared_ptr< monty::ndarray< double,1 > > _6284_mcof)
{
  _checked_ptr_1<int32_t> _ptr__6282_msubi(_6282_msubi ? _6282_msubi->raw() : nullptr, _6282_msubi ? _6282_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__6283_msubj(_6283_msubj ? _6283_msubj->raw() : nullptr, _6283_msubj ? _6283_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__6284_mcof(_6284_mcof ? _6284_mcof->raw() : nullptr, _6284_mcof ? _6284_mcof->size(0) : 0);
  bool _6285_ok = true;
  {
    int32_t _12014_ = (int)0;
    int32_t _12015_ = (int)((_6282_msubi)->size(0));
    for (int32_t _6286_i = _12014_; _6286_i < _12015_; ++_6286_i)
    {
      {
        if (((_ptr__6282_msubi[_6286_i] < (int)0) || ((_ptr__6282_msubi[_6286_i] >= _6280_mdimi) || ((_ptr__6283_msubj[_6286_i] < (int)0) || (_ptr__6283_msubj[_6286_i] >= _6281_mdimj)))))
        {
          {
            _6285_ok = false;
          }
        }
        {}
      }
    }
    int32_t _12016_ = (int)1;
    int32_t _12017_ = (int)((_6282_msubi)->size(0));
    for (int32_t _6287_i = _12016_; _6287_i < _12017_; ++_6287_i)
    {
      {
        if (((_ptr__6282_msubi[(_6287_i - (int)1)] > _ptr__6282_msubi[_6287_i]) || ((_ptr__6282_msubi[(_6287_i - (int)1)] == _ptr__6282_msubi[_6287_i]) && (_ptr__6283_msubj[(_6287_i - (int)1)] >= _ptr__6283_msubj[_6287_i]))))
        {
          {
            _6285_ok = false;
          }
        }
        {}
      }
    }
  }
  if ((!_6285_ok))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
// End mosek.fusion.ExprMulVar.validate

// Begin mosek.fusion.ExprMulVar.resshape
// Method mosek.fusion.ExprMulVar.resshape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:189:6-194:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprMulVar::resshape(int32_t _6288_mdimi,int32_t _6289_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _6290_xshape,bool _6291_left)
{
  _checked_ptr_1<int32_t> _ptr__6290_xshape(_6290_xshape ? _6290_xshape->raw() : nullptr, _6290_xshape ? _6290_xshape->size(0) : 0);
  if (_6291_left)
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6288_mdimi),(int32_t)(_ptr__6290_xshape[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__6290_xshape[(int)0]),(int32_t)(_6289_mdimj)});
    }
  }
}
// End mosek.fusion.ExprMulVar.resshape

// Begin mosek.fusion.ExprMulVar.toString
// Method mosek.fusion.ExprMulVar.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:182:6-187:7
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulVar::toString()
{
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
// End mosek.fusion.ExprMulVar.toString

void mosek::fusion::p_ExprMulVar::destroy()
{
  x.reset();
  mcof.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }
// } class ExprMulVar
// class ExprMulScalarVar { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:53:4-167:5
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }
mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar
  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulScalarVar.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:89:6-126:7
mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar
  (int32_t _6292_mdimi,
    int32_t _6293_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6294_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6295_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6296_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6297_x)
{ return new mosek::fusion::ExprMulScalarVar(_6292_mdimi,_6293_mdimj,_6294_msubi,_6295_msubj,_6296_mcof,_6297_x); }
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar
  (int32_t _6292_mdimi,
    int32_t _6293_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6294_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6295_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6296_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6297_x) : 
   ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this))
{ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6292_mdimi,_6293_mdimj,_6294_msubi,_6295_msubj,_6296_mcof,_6297_x); }
void mosek::fusion::p_ExprMulScalarVar::_initialize  (int32_t _6292_mdimi,
    int32_t _6293_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6294_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6295_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6296_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6297_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6294_msubi(_6294_msubi ? _6294_msubi->raw() : nullptr, _6294_msubi ? _6294_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6295_msubj(_6295_msubj ? _6295_msubj->raw() : nullptr, _6295_msubj ? _6295_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6296_mcof(_6296_mcof ? _6296_mcof->raw() : nullptr, _6296_mcof ? _6296_mcof->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_6292_mdimi,_6293_mdimj,::mosek::fusion::Utils::Tools::arraycopy(_6294_msubi),::mosek::fusion::Utils::Tools::arraycopy(_6295_msubj),::mosek::fusion::Utils::Tools::arraycopy(_6296_mcof),_6297_x,(int)1);
    if ((_6297_x->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_6292_mdimi < (int)0) || ((_6293_mdimj < (int)0) || (((int)((_6294_msubi)->size(0)) != (int)((_6295_msubj)->size(0))) || ((int)((_6294_msubi)->size(0)) != (int)((_6296_mcof)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6298_err_data = false;
    int32_t _12018_ = (int)0;
    int32_t _12019_ = (int)((_6294_msubi)->size(0));
    for (int32_t _6299_i = _12018_; _6299_i < _12019_; ++_6299_i)
    {
      {
        if (((_ptr__6294_msubi[_6299_i] < (int)0) || ((_ptr__6294_msubi[_6299_i] >= _6292_mdimi) || ((_ptr__6295_msubj[_6299_i] < (int)0) || (_ptr__6295_msubj[_6299_i] >= _6293_mdimj)))))
        {
          {
            _6298_err_data = true;
          }
        }
        {}
      }
    }
    if (_6298_err_data)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6300_err_sorted = false;
    int32_t _12020_ = (int)1;
    int32_t _12021_ = (int)((_6294_msubi)->size(0));
    for (int32_t _6301_i = _12020_; _6301_i < _12021_; ++_6301_i)
    {
      {
        if (((_ptr__6294_msubi[_6301_i] < _ptr__6294_msubi[(_6301_i - (int)1)]) || ((_ptr__6294_msubi[_6301_i] == _ptr__6294_msubi[(_6301_i - (int)1)]) && (_ptr__6295_msubj[_6301_i] <= _ptr__6295_msubj[(_6301_i - (int)1)]))))
        {
          {
            _6300_err_sorted = true;
          }
        }
        {}
      }
    }
    if (_6300_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulScalarVar.ctor

// mosek.fusion.ExprMulScalarVar.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:68:6-87:7
mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar
  (int32_t _6302_mdimi,
    int32_t _6303_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6304_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6305_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6306_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6307_x,
    int32_t _6308_unchecked_)
{ return new mosek::fusion::ExprMulScalarVar(_6302_mdimi,_6303_mdimj,_6304_msubi,_6305_msubj,_6306_mcof,_6307_x,_6308_unchecked_); }
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar
  (int32_t _6302_mdimi,
    int32_t _6303_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6304_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6305_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6306_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6307_x,
    int32_t _6308_unchecked_) : 
   ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this))
{ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6302_mdimi,_6303_mdimj,_6304_msubi,_6305_msubj,_6306_mcof,_6307_x,_6308_unchecked_); }
void mosek::fusion::p_ExprMulScalarVar::_initialize  (int32_t _6302_mdimi,
    int32_t _6303_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6304_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6305_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6306_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6307_x,
    int32_t _6308_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6304_msubi(_6304_msubi ? _6304_msubi->raw() : nullptr, _6304_msubi ? _6304_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6305_msubj(_6305_msubj ? _6305_msubj->raw() : nullptr, _6305_msubj ? _6305_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6306_mcof(_6306_mcof ? _6306_mcof->raw() : nullptr, _6306_mcof ? _6306_mcof->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_6307_x->__mosek_2fusion_2Expression__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6302_mdimi),(int32_t)(_6303_mdimj)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _6302_mdimi;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _6303_mdimj;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _6304_msubi;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _6305_msubj;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _6306_mcof;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _6307_x;
  }
}
// mosek.fusion.ExprMulScalarVar.ctor

// Begin mosek.fusion.ExprMulScalarVar.eval
// Method mosek.fusion.ExprMulScalarVar.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:128:6-166:7
void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6309_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6310_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6311_xs) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_6309_rs,_6310_ws,_6311_xs); }
void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6309_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6310_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6311_xs)
{
  if ((x->numInst() == (int)0))
  {
    {
      _6309_rs->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6312_xidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)1)));
      _checked_ptr_1<int64_t> _ptr__6312_xidxs(_6312_xidxs ? _6312_xidxs->raw() : nullptr,_6312_xidxs ? _6312_xidxs->size(0) : 0);
      x->inst((int)0,_6312_xidxs);
      int64_t _6313_xi = _ptr__6312_xidxs[(int)0];
      int32_t _6314_nelem = (int)((msubi)->size(0));
      int32_t _6315_nnz = _6314_nelem;
      bool _6316_hassp = (_6314_nelem < safe_mul( mdimi,mdimj ));
      _6309_rs->alloc_expr((int)2,_6314_nelem,_6315_nnz,_6316_hassp);
      int32_t _6317_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->shape_base,(int)1 ))) = mdimj;
      int32_t _6318_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->nidxs_base;
      int32_t _6319_sp_base = mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->sp_base;
      int32_t _6320_cof_base = mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->cof_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6321_i32 = mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6321_i32(_6321_i32 ? _6321_i32->raw() : nullptr,_6321_i32 ? _6321_i32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6322_i64 = mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6322_i64(_6322_i64 ? _6322_i64->raw() : nullptr,_6322_i64 ? _6322_i64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6323_f64 = mosek::fusion::p_WorkStack::_get_impl(_6309_rs)->f64;
      _checked_ptr_1<double> _ptr__6323_f64(_6323_f64 ? _6323_f64->raw() : nullptr,_6323_f64 ? _6323_f64->size(0) : 0);
      {
        int32_t _12022_ = (int)0;
        int32_t _12023_ = _6315_nnz;
        for (int32_t _6324_i = _12022_; _6324_i < _12023_; ++_6324_i)
        {
          {
            _ptr__6323_f64[safe_add( _6320_cof_base,_6324_i )] = ((*mcof)(_6324_i));
          }
        }
        int32_t _12024_ = (int)0;
        int32_t _12025_ = _6315_nnz;
        for (int32_t _6325_i = _12024_; _6325_i < _12025_; ++_6325_i)
        {
          {
            _ptr__6322_i64[safe_add( _6318_nidxs_base,_6325_i )] = _6313_xi;
          }
        }
        if (_6316_hassp)
        {
          {
            int32_t _12026_ = (int)0;
            int32_t _12027_ = _6314_nelem;
            for (int32_t _6326_i = _12026_; _6326_i < _12027_; ++_6326_i)
            {
              {
                _ptr__6322_i64[safe_add( _6319_sp_base,_6326_i )] = safe_add( safe_mul( ((*msubi)(_6326_i)),mdimj ),((*msubj)(_6326_i)) );
              }
            }
          }
        }
        {}
        int32_t _12028_ = (int)0;
        int32_t _12029_ = safe_add( _6314_nelem,(int)1 );
        for (int32_t _6327_i = _12028_; _6327_i < _12029_; ++_6327_i)
        {
          {
            _ptr__6321_i32[safe_add( _6317_ptr_base,_6327_i )] = _6327_i;
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprMulScalarVar.eval

// Begin mosek.fusion.ExprMulScalarVar.toString
// Method mosek.fusion.ExprMulScalarVar.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:63:6-66:7
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulScalarVar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulScalarVar.toString

void mosek::fusion::p_ExprMulScalarVar::destroy()
{
  x.reset();
  mcof.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }
// } class ExprMulScalarVar
// class ExprMulVarScalarConst { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:4:4-50:5
mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }
mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst
  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulVarScalarConst.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:10:6-14:7
mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst
  (monty::rc_ptr< ::mosek::fusion::Variable > _6328_x,
    double _6329_c)
{ return new mosek::fusion::ExprMulVarScalarConst(_6328_x,_6329_c); }
mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst
  (monty::rc_ptr< ::mosek::fusion::Variable > _6328_x,
    double _6329_c) : 
   ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this))
{ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_6328_x,_6329_c); }
void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6328_x,
    double _6329_c)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6328_x->__mosek_2fusion_2Expression__getModel(),_6328_x->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _6328_x;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _6329_c;
  }
}
// mosek.fusion.ExprMulVarScalarConst.ctor

// Begin mosek.fusion.ExprMulVarScalarConst.eval
// Method mosek.fusion.ExprMulVarScalarConst.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:16:6-49:7
void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6330_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6331_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6332_xs) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_6330_rs,_6331_ws,_6332_xs); }
void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6330_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6331_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6332_xs)
{
  int32_t _6333_nnz = x->numInst();
  int32_t _6334_nelem = _6333_nnz;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6335_shape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6335_shape(_6335_shape ? _6335_shape->raw() : nullptr,_6335_shape ? _6335_shape->size(0) : 0);
  int32_t _6336_nd = (int)((_6335_shape)->size(0));
  bool _6337_hassp = (::mosek::fusion::p_Set::size(_6335_shape) > _6334_nelem);
  _6330_rs->alloc_expr(_6336_nd,_6334_nelem,_6333_nnz,_6337_hassp);
  int32_t _6338_ptrb = mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->ptr_base;
  int32_t _6339_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->nidxs_base;
  int32_t _6340_sp = mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->sp_base;
  int32_t _6341_cof = mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->cof_base;
  int32_t _6342_rshape = mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->shape_base;
  if (_6337_hassp)
  {
    {
      x->inst(_6340_sp,mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->i64,_6339_nidxs,mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->i64);
    }
  }
  else
  {
    {
      x->inst(_6339_nidxs,mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->i64);
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6343_i32 = mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6343_i32(_6343_i32 ? _6343_i32->raw() : nullptr,_6343_i32 ? _6343_i32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6344_i64 = mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6344_i64(_6344_i64 ? _6344_i64->raw() : nullptr,_6344_i64 ? _6344_i64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6345_f64 = mosek::fusion::p_WorkStack::_get_impl(_6330_rs)->f64;
  _checked_ptr_1<double> _ptr__6345_f64(_6345_f64 ? _6345_f64->raw() : nullptr,_6345_f64 ? _6345_f64->size(0) : 0);
  {
    int32_t _12030_ = (int)0;
    int32_t _12031_ = _6336_nd;
    for (int32_t _6346_i = _12030_; _6346_i < _12031_; ++_6346_i)
    {
      {
        _ptr__6343_i32[safe_add( _6342_rshape,_6346_i )] = _ptr__6335_shape[_6346_i];
      }
    }
    int32_t _12032_ = (int)0;
    int32_t _12033_ = safe_add( _6334_nelem,(int)1 );
    for (int32_t _6347_i = _12032_; _6347_i < _12033_; ++_6347_i)
    {
      {
        _ptr__6343_i32[safe_add( _6338_ptrb,_6347_i )] = _6347_i;
      }
    }
    int32_t _12034_ = (int)0;
    int32_t _12035_ = _6333_nnz;
    for (int32_t _6348_i = _12034_; _6348_i < _12035_; ++_6348_i)
    {
      {
        _ptr__6345_f64[safe_add( _6341_cof,_6348_i )] = 1.0;
      }
    }
  }
}
// End mosek.fusion.ExprMulVarScalarConst.eval

// Begin mosek.fusion.ExprMulVarScalarConst.toString
// Method mosek.fusion.ExprMulVarScalarConst.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprMulVar.monty:8:6-75
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulVarScalarConst::toString()
{
  return std::string ("ExprMulVarScalarConst()");
}
// End mosek.fusion.ExprMulVarScalarConst.toString

void mosek::fusion::p_ExprMulVarScalarConst::destroy()
{
  x.reset();
}
void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }
// } class ExprMulVarScalarConst
// class ExprSumReduceEnd { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:1755:4-2021:5
mosek::fusion::ExprSumReduceEnd::ExprSumReduceEnd(mosek::fusion::p_ExprSumReduceEnd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduceEnd()" << this << std::endl; */ }
mosek::fusion::ExprSumReduceEnd::~ExprSumReduceEnd() {  /* std::cout << "~ExprSumReduceEnd()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSumReduceEnd::p_ExprSumReduceEnd
  (::mosek::fusion::ExprSumReduceEnd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSumReduceEnd.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:1770:6-1774:7
mosek::fusion::ExprSumReduceEnd::t mosek::fusion::p_ExprSumReduceEnd::_new_ExprSumReduceEnd
  (int32_t _6349_ndim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6350_expr)
{ return new mosek::fusion::ExprSumReduceEnd(_6349_ndim,_6350_expr); }
mosek::fusion::ExprSumReduceEnd::ExprSumReduceEnd
  (int32_t _6349_ndim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6350_expr) : 
   ExprSumReduceEnd(new mosek::fusion::p_ExprSumReduceEnd(this))
{ mosek::fusion::p_ExprSumReduceEnd::_get_impl(this)->_initialize(_6349_ndim,_6350_expr); }
void mosek::fusion::p_ExprSumReduceEnd::_initialize  (int32_t _6349_ndim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6350_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6350_expr->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprSumReduceEnd::computeShape(_6349_ndim,_6350_expr->getShape()));
    mosek::fusion::p_ExprSumReduceEnd::_get_impl(::mosek::fusion::ExprSumReduceEnd::t(_pubthis))->expr = _6350_expr;
    mosek::fusion::p_ExprSumReduceEnd::_get_impl(::mosek::fusion::ExprSumReduceEnd::t(_pubthis))->ndim = _6349_ndim;
  }
}
// mosek.fusion.ExprSumReduceEnd.ctor

// Begin mosek.fusion.ExprSumReduceEnd.eval
// Method mosek.fusion.ExprSumReduceEnd.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:1776:6-1905:7
void mosek::fusion::ExprSumReduceEnd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6351_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6352_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6353_xs) { mosek::fusion::p_ExprSumReduceEnd::_get_impl(this)->eval(_6351_rs,_6352_ws,_6353_xs); }
void mosek::fusion::p_ExprSumReduceEnd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6351_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6352_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6353_xs)
{
  expr->eval(_6352_ws,_6351_rs,_6353_xs);
  _6352_ws->pop_expr();
  int32_t _6354_nd = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->nd;
  int32_t _6355_shape = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->shape_base;
  int32_t _6356_nelem = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->nelem;
  int32_t _6357_nnz = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->nnz;
  int32_t _6358_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->ncodeatom;
  bool _6359_hassp = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->hassp;
  int32_t _6360_ptr = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->ptr_base;
  int32_t _6361_sp = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->sp_base;
  int32_t _6362_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->nidxs_base;
  int32_t _6363_cof = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->cof_base;
  int32_t _6364_code = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->code_base;
  int32_t _6365_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->codeptr_base;
  int32_t _6366_cconst = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6367_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6367_wi32(_6367_wi32 ? _6367_wi32->raw() : nullptr,_6367_wi32 ? _6367_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6368_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6368_wi64(_6368_wi64 ? _6368_wi64->raw() : nullptr,_6368_wi64 ? _6368_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6369_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6352_ws)->f64;
  _checked_ptr_1<double> _ptr__6369_wf64(_6369_wf64 ? _6369_wf64->raw() : nullptr,_6369_wf64 ? _6369_wf64->size(0) : 0);
  int64_t _6370_dim1 = (int)1;
  int32_t _12036_ = (int)0;
  int32_t _12037_ = (_6354_nd - ndim);
  for (int32_t _6371_i = _12036_; _6371_i < _12037_; ++_6371_i)
  {
    {
      _6370_dim1 *= _ptr__6367_wi32[safe_add( _6355_shape,_6371_i )];
    }
  }
  int64_t _6372_dim2 = (int)1;
  int32_t _12038_ = (_6354_nd - ndim);
  int32_t _12039_ = _6354_nd;
  for (int32_t _6373_i = _12038_; _6373_i < _12039_; ++_6373_i)
  {
    {
      _6372_dim2 *= _ptr__6367_wi32[safe_add( _6355_shape,_6373_i )];
    }
  }
  if (_6359_hassp)
  {
    {
      int32_t _6374_rnelem = (int)0;
      if ((_6356_nelem > (int)0))
      {
        {
          int32_t _6375_si = (int)0;
          int64_t _6376_snext = (-(int)1);
          while ( (_6375_si < _6356_nelem) )
          {
            {
              ++ _6374_rnelem;
              _6376_snext = safe_mul( safe_add( (_ptr__6368_wi64[safe_add( _6361_sp,_6375_si )] / _6372_dim2),(int)1 ),_6372_dim2 );
              while ( ((_6375_si < _6356_nelem) && (_ptr__6368_wi64[safe_add( _6361_sp,_6375_si )] < _6376_snext)) )
              {
                {
                  ++ _6375_si;
                }
              }
            }
          }
        }
      }
      {}
      int32_t _6377_rnnz = _6357_nnz;
      int32_t _6378_rnd = (_6354_nd - ndim);
      int32_t _6379_rncodeatom = _6358_ncodeatom;
      int64_t _6380_rshapesize = (int)1;
      int32_t _12040_ = (int)0;
      int32_t _12041_ = (_6354_nd - ndim);
      for (int32_t _6381_i = _12040_; _6381_i < _12041_; ++_6381_i)
      {
        {
          _6380_rshapesize *= _ptr__6367_wi32[safe_add( _6355_shape,_6381_i )];
        }
      }
      bool _6382_rhassp = (_6374_rnelem < _6380_rshapesize);
      _6351_rs->alloc_expr(_6378_rnd,_6374_rnelem,_6377_rnnz,_6382_rhassp,_6379_rncodeatom);
      int32_t _6383_rptr = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->ptr_base;
      int32_t _6384_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->nidxs_base;
      int32_t _12042_;
      bool _12043_ = _6382_rhassp;
      if (_12043_)
      {
        _12042_ = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->sp_base;
      }
      else
      {
        _12042_ = _6351_rs->alloci64(_6374_rnelem);
      }
      int32_t _6385_rsp = _12042_;
      int32_t _6386_rcof = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->cof_base;
      int32_t _6387_rshape = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->shape_base;
      int32_t _6388_rcode = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->code_base;
      int32_t _6389_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->codeptr_base;
      int32_t _6390_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6391_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6391_ri32(_6391_ri32 ? _6391_ri32->raw() : nullptr,_6391_ri32 ? _6391_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6392_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6392_ri64(_6392_ri64 ? _6392_ri64->raw() : nullptr,_6392_ri64 ? _6392_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6393_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->f64;
      _checked_ptr_1<double> _ptr__6393_rf64(_6393_rf64 ? _6393_rf64->raw() : nullptr,_6393_rf64 ? _6393_rf64->size(0) : 0);
      int32_t _6394_nzi = (int)0;
      int32_t _6395_codei = (int)0;
      int64_t _6396_wi = (int)0;
      _ptr__6391_ri32[_6383_rptr] = (int)0;
      {
        int32_t _12044_ = (int)0;
        int32_t _12045_ = _6378_rnd;
        for (int32_t _6397_i = _12044_; _6397_i < _12045_; ++_6397_i)
        {
          {
            _ptr__6391_ri32[safe_add( _6387_rshape,_6397_i )] = _ptr__6367_wi32[safe_add( _6355_shape,_6397_i )];
          }
        }
        ::mosek::fusion::Utils::Tools::arraycopy(_6368_wi64,_6362_nidxs,_6392_ri64,_6384_rnidxs,_6357_nnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_6369_wf64,_6363_cof,_6393_rf64,_6386_rcof,_6357_nnz);
        if ((_6379_rncodeatom > (int)0))
        {
          {
            ::mosek::fusion::Utils::Tools::arraycopy(_6367_wi32,_6364_code,_6391_ri32,_6388_rcode,_6379_rncodeatom);
            ::mosek::fusion::Utils::Tools::arraycopy(_6369_wf64,_6366_cconst,_6393_rf64,_6390_rcconst,_6379_rncodeatom);
            ::mosek::fusion::Utils::Tools::arraycopy(_6367_wi32,_6365_codeptr,_6391_ri32,_6389_rcodeptr,safe_add( _6357_nnz,(int)1 ));
          }
        }
        {}
        int32_t _6398_si = (int)0;
        int32_t _12046_ = (int)0;
        int32_t _12047_ = _6374_rnelem;
        for (int32_t _6399_ri = _12046_; _6399_ri < _12047_; ++_6399_ri)
        {
          {
            int64_t _6400_rspi = (_ptr__6368_wi64[safe_add( _6361_sp,_6398_si )] / _6372_dim2);
            if (_6382_rhassp)
            {
              {
                _ptr__6392_ri64[safe_add( _6385_rsp,_6399_ri )] = _6400_rspi;
              }
            }
            {}
            ++ _6398_si;
            int64_t _6401_winext = safe_mul( safe_add( _6400_rspi,(int)1 ),_6372_dim2 );
            while ( ((_6398_si < _6356_nelem) && (_ptr__6368_wi64[safe_add( _6361_sp,_6398_si )] < _6401_winext)) )
            {
              {
                ++ _6398_si;
              }
            }
            _ptr__6391_ri32[safe_add( safe_add( _6383_rptr,_6399_ri ),(int)1 )] = _ptr__6367_wi32[safe_add( _6360_ptr,_6398_si )];
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _6402_rnelem = (int32_t)_6370_dim1;
      int32_t _6403_rnnz = _6357_nnz;
      int32_t _6404_rncodeatom = _6358_ncodeatom;
      int32_t _6405_rnd = (_6354_nd - ndim);
      _6351_rs->alloc_expr(_6405_rnd,_6402_rnelem,_6403_rnnz,false,_6404_rncodeatom);
      int32_t _6406_rptr = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->ptr_base;
      int32_t _6407_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->nidxs_base;
      int32_t _6408_rcof = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->cof_base;
      int32_t _6409_rshape = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->shape_base;
      int32_t _6410_rcode = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->code_base;
      int32_t _6411_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->codeptr_base;
      int32_t _6412_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6413_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6413_ri32(_6413_ri32 ? _6413_ri32->raw() : nullptr,_6413_ri32 ? _6413_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6414_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6414_ri64(_6414_ri64 ? _6414_ri64->raw() : nullptr,_6414_ri64 ? _6414_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6415_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6351_rs)->f64;
      _checked_ptr_1<double> _ptr__6415_rf64(_6415_rf64 ? _6415_rf64->raw() : nullptr,_6415_rf64 ? _6415_rf64->size(0) : 0);
      int64_t _6416_wi = (int)0;
      {
        int32_t _12048_ = (int)0;
        int32_t _12049_ = _6405_rnd;
        for (int32_t _6417_i = _12048_; _6417_i < _12049_; ++_6417_i)
        {
          {
            _ptr__6413_ri32[safe_add( _6409_rshape,_6417_i )] = _ptr__6367_wi32[safe_add( _6355_shape,_6417_i )];
          }
        }
        ::mosek::fusion::Utils::Tools::arraycopy(_6368_wi64,_6362_nidxs,_6414_ri64,_6407_rnidxs,_6357_nnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_6369_wf64,_6363_cof,_6415_rf64,_6408_rcof,_6357_nnz);
        if ((_6404_rncodeatom > (int)0))
        {
          {
            ::mosek::fusion::Utils::Tools::arraycopy(_6367_wi32,_6364_code,_6413_ri32,_6410_rcode,_6404_rncodeatom);
            ::mosek::fusion::Utils::Tools::arraycopy(_6369_wf64,_6366_cconst,_6415_rf64,_6412_rcconst,_6404_rncodeatom);
            ::mosek::fusion::Utils::Tools::arraycopy(_6367_wi32,_6365_codeptr,_6413_ri32,_6411_rcodeptr,safe_add( _6357_nnz,(int)1 ));
          }
        }
        {}
        _ptr__6413_ri32[_6406_rptr] = (int)0;
        int32_t _12050_ = (int)0;
        int32_t _12051_ = _6402_rnelem;
        for (int32_t _6418_ri = _12050_; _6418_ri < _12051_; ++_6418_ri)
        {
          {
            _ptr__6413_ri32[safe_add( safe_add( _6406_rptr,_6418_ri ),(int)1 )] = (int32_t)safe_mul( _6372_dim2,safe_add( _6418_ri,(int)1 ) );
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprSumReduceEnd.eval

// Begin mosek.fusion.ExprSumReduceEnd.computeShape
// Method mosek.fusion.ExprSumReduceEnd.computeShape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:1761:6-1768:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprSumReduceEnd::computeShape(int32_t _6419_ndim,std::shared_ptr< monty::ndarray< int32_t,1 > > _6420_shape)
{
  _checked_ptr_1<int32_t> _ptr__6420_shape(_6420_shape ? _6420_shape->raw() : nullptr, _6420_shape ? _6420_shape->size(0) : 0);
  if (((int)((_6420_shape)->size(0)) <= _6419_ndim))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6421_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_6420_shape)->size(0)) - _6419_ndim))));
  _checked_ptr_1<int32_t> _ptr__6421_rshape(_6421_rshape ? _6421_rshape->raw() : nullptr,_6421_rshape ? _6421_rshape->size(0) : 0);
  int32_t _12052_ = (int)0;
  int32_t _12053_ = (int)((_6421_rshape)->size(0));
  for (int32_t _6422_i = _12052_; _6422_i < _12053_; ++_6422_i)
  {
    {
      _ptr__6421_rshape[_6422_i] = _ptr__6420_shape[_6422_i];
    }
  }
  return _6421_rshape;
}
// End mosek.fusion.ExprSumReduceEnd.computeShape

// Begin mosek.fusion.ExprSumReduceEnd.toString
// Method mosek.fusion.ExprSumReduceEnd.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:1759:6-150
std::string mosek::fusion::ExprSumReduceEnd :: toString() { return mosek::fusion::p_ExprSumReduceEnd::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSumReduceEnd::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSumReduceEnd("))->__mosek_2fusion_2Utils_2StringBuffer__a(ndim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprSumReduceEnd.toString

void mosek::fusion::p_ExprSumReduceEnd::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprSumReduceEnd::destroy() { mosek::fusion::p_ExprSumReduceEnd::_get_impl(this)->destroy(); }
// } class ExprSumReduceEnd
// class ExprAdd { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:832:4-1743:5
mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }
mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprAdd::p_ExprAdd
  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprAdd.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:842:6-854:7
mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd
  (monty::rc_ptr< ::mosek::fusion::Expression > _6423_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6424_e2,
    double _6425_m1,
    double _6426_m2)
{ return new mosek::fusion::ExprAdd(_6423_e1,_6424_e2,_6425_m1,_6426_m2); }
mosek::fusion::ExprAdd::ExprAdd
  (monty::rc_ptr< ::mosek::fusion::Expression > _6423_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6424_e2,
    double _6425_m1,
    double _6426_m2) : 
   ExprAdd(new mosek::fusion::p_ExprAdd(this))
{ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_6423_e1,_6424_e2,_6425_m1,_6426_m2); }
void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6423_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6424_e2,
    double _6425_m1,
    double _6426_m2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_6423_e1,_6424_e2),_6423_e1->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _6423_e1;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _6424_e2;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _6425_m1;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _6426_m2;
    if ((_6423_e1->getND() != _6424_e2->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int32_t _12054_ = (int)0;
    int32_t _12055_ = _6423_e1->getND();
    for (int32_t _6427_i = _12054_; _6427_i < _12055_; ++_6427_i)
    {
      {
        if ((_6423_e1->getDim(_6427_i) != _6424_e2->getDim(_6427_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprAdd.ctor

// Begin mosek.fusion.ExprAdd.eval
// Method mosek.fusion.ExprAdd.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:856:6-1555:7
void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6428_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6429_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6430_xs) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_6428_rs,_6429_ws,_6430_xs); }
void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6428_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6429_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6430_xs)
{
  e1->eval(_6429_ws,_6428_rs,_6430_xs);
  e2->eval(_6429_ws,_6428_rs,_6430_xs);
  _6429_ws->pop_expr();
  int32_t _6431_nd2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->nd;
  int32_t _6432_shape2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->shape_base;
  int32_t _6433_nelem2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->nelem;
  int32_t _6434_nnz2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->nnz;
  int32_t _6435_ncodeatom2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->ncodeatom;
  bool _6436_hassp2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->hassp;
  int32_t _6437_ptr2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->ptr_base;
  int32_t _6438_sp2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->sp_base;
  int32_t _6439_nidxs2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->nidxs_base;
  int32_t _6440_cof2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->cof_base;
  int32_t _6441_code2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->code_base;
  int32_t _6442_codeptr2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->codeptr_base;
  int32_t _6443_cconst2 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->cconst_base;
  _6429_ws->pop_expr();
  int32_t _6444_nd1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->nd;
  int32_t _6445_shape1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->shape_base;
  int32_t _6446_nelem1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->nelem;
  int32_t _6447_nnz1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->nnz;
  int32_t _6448_ncodeatom1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->ncodeatom;
  bool _6449_hassp1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->hassp;
  int32_t _6450_ptr1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->ptr_base;
  int32_t _6451_sp1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->sp_base;
  int32_t _6452_nidxs1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->nidxs_base;
  int32_t _6453_cof1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->cof_base;
  int32_t _6454_code1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->code_base;
  int32_t _6455_codeptr1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->codeptr_base;
  int32_t _6456_cconst1 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6457_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6457_wi32(_6457_wi32 ? _6457_wi32->raw() : nullptr,_6457_wi32 ? _6457_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6458_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6458_wi64(_6458_wi64 ? _6458_wi64->raw() : nullptr,_6458_wi64 ? _6458_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6459_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6429_ws)->f64;
  _checked_ptr_1<double> _ptr__6459_wf64(_6459_wf64 ? _6459_wf64->raw() : nullptr,_6459_wf64 ? _6459_wf64->size(0) : 0);
  bool _6460_parameterized = ((_6448_ncodeatom1 > (int)0) || (_6435_ncodeatom2 > (int)0));
  if ((_6444_nd1 != _6431_nd2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int32_t _12056_ = (int)0;
  int32_t _12057_ = _6444_nd1;
  for (int32_t _6461_i = _12056_; _6461_i < _12057_; ++_6461_i)
  {
    {
      if ((_ptr__6457_wi32[safe_add( _6445_shape1,_6461_i )] != _ptr__6457_wi32[safe_add( _6432_shape2,_6461_i )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_6449_hassp1) && (!_6436_hassp2)))
  {
    {
      int32_t _6462_rnelem = _6446_nelem1;
      int32_t _6463_rnnz = safe_add( _6447_nnz1,_6434_nnz2 );
      int32_t _6464_rncodeatom = (int)0;
      if (_6460_parameterized)
      {
        {
          int32_t _12058_;
          bool _12059_ = (_6448_ncodeatom1 > (int)0);
          if (_12059_)
          {
            _12058_ = safe_add( _6448_ncodeatom1,safe_mul( _6447_nnz1,(int)2 ) );
          }
          else
          {
            _12058_ = _6447_nnz1;
          }
          _6464_rncodeatom += _12058_;
          int32_t _12060_;
          bool _12061_ = (_6435_ncodeatom2 > (int)0);
          if (_12061_)
          {
            _12060_ = safe_add( _6435_ncodeatom2,safe_mul( _6434_nnz2,(int)2 ) );
          }
          else
          {
            _12060_ = _6434_nnz2;
          }
          _6464_rncodeatom += _12060_;
        }
      }
      {}
      int32_t _6465_rnd = _6444_nd1;
      _6428_rs->alloc_expr(_6465_rnd,_6462_rnelem,_6463_rnnz,false,_6464_rncodeatom);
      int32_t _6466_rshape = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->shape_base;
      int32_t _6467_rptr = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->ptr_base;
      int32_t _6468_rsp = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->sp_base;
      int32_t _6469_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->nidxs_base;
      int32_t _6470_rcof = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->cof_base;
      int32_t _6471_rcode = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->code_base;
      int32_t _6472_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->codeptr_base;
      int32_t _6473_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6474_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6474_ri32(_6474_ri32 ? _6474_ri32->raw() : nullptr,_6474_ri32 ? _6474_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6475_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6475_ri64(_6475_ri64 ? _6475_ri64->raw() : nullptr,_6475_ri64 ? _6475_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6476_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->f64;
      _checked_ptr_1<double> _ptr__6476_rf64(_6476_rf64 ? _6476_rf64->raw() : nullptr,_6476_rf64 ? _6476_rf64->size(0) : 0);
      int32_t _12062_ = (int)0;
      int32_t _12063_ = _6465_rnd;
      for (int32_t _6477_i = _12062_; _6477_i < _12063_; ++_6477_i)
      {
        {
          _ptr__6474_ri32[safe_add( _6466_rshape,_6477_i )] = _ptr__6457_wi32[safe_add( _6445_shape1,_6477_i )];
        }
      }
      int32_t _6478_codei = (int)0;
      int32_t _6479_knz = (int)0;
      if ((_6464_rncodeatom > (int)0))
      {
        {
          _ptr__6474_ri32[_6472_rcodeptr] = (int)0;
        }
      }
      {}
      _ptr__6474_ri32[_6467_rptr] = (int)0;
      int32_t _12064_ = (int)0;
      int32_t _12065_ = _6462_rnelem;
      for (int32_t _6480_i = _12064_; _6480_i < _12065_; ++_6480_i)
      {
        {
          int32_t _12066_ = _ptr__6457_wi32[safe_add( _6450_ptr1,_6480_i )];
          int32_t _12067_ = _ptr__6457_wi32[safe_add( safe_add( _6450_ptr1,_6480_i ),(int)1 )];
          for (int32_t _6481_k = _12066_; _6481_k < _12067_; ++_6481_k)
          {
            {
              _ptr__6475_ri64[safe_add( _6469_rnidxs,_6479_knz )] = _ptr__6458_wi64[safe_add( _6452_nidxs1,_6481_k )];
              _ptr__6476_rf64[safe_add( _6470_rcof,_6479_knz )] = (_ptr__6459_wf64[safe_add( _6453_cof1,_6481_k )] * m1);
              if ((_6448_ncodeatom1 > (int)0))
              {
                {
                  int32_t _12068_ = _ptr__6457_wi32[safe_add( _6455_codeptr1,_6481_k )];
                  int32_t _12069_ = _ptr__6457_wi32[safe_add( safe_add( _6455_codeptr1,_6481_k ),(int)1 )];
                  for (int32_t _6482_l = _12068_; _6482_l < _12069_; ++_6482_l)
                  {
                    {
                      _ptr__6474_ri32[safe_add( _6471_rcode,_6478_codei )] = _ptr__6457_wi32[safe_add( _6454_code1,_6482_l )];
                      _ptr__6476_rf64[safe_add( _6473_rcconst,_6478_codei )] = _ptr__6459_wf64[safe_add( _6456_cconst1,_6482_l )];
                      ++ _6478_codei;
                    }
                  }
                  _ptr__6474_ri32[safe_add( _6471_rcode,_6478_codei )] = 2;
                  _ptr__6476_rf64[safe_add( _6473_rcconst,_6478_codei )] = m1;
                  ++ _6478_codei;
                  _ptr__6474_ri32[safe_add( _6471_rcode,_6478_codei )] = 5;
                  ++ _6478_codei;
                  _ptr__6474_ri32[safe_add( safe_add( _6472_rcodeptr,_6479_knz ),(int)1 )] = _6478_codei;
                }
              }
              else
              {
                {
                  if ((_6464_rncodeatom > (int)0))
                  {
                    {
                      _ptr__6474_ri32[safe_add( _6471_rcode,_6478_codei )] = 2;
                      _ptr__6476_rf64[safe_add( _6473_rcconst,_6478_codei )] = 0.0;
                      ++ _6478_codei;
                      _ptr__6474_ri32[safe_add( safe_add( _6472_rcodeptr,_6479_knz ),(int)1 )] = _6478_codei;
                    }
                  }
                  {}
                }
              }
              ++ _6479_knz;
            }
          }
          int32_t _12070_ = _ptr__6457_wi32[safe_add( _6437_ptr2,_6480_i )];
          int32_t _12071_ = _ptr__6457_wi32[safe_add( safe_add( _6437_ptr2,_6480_i ),(int)1 )];
          for (int32_t _6483_k = _12070_; _6483_k < _12071_; ++_6483_k)
          {
            {
              _ptr__6475_ri64[safe_add( _6469_rnidxs,_6479_knz )] = _ptr__6458_wi64[safe_add( _6439_nidxs2,_6483_k )];
              _ptr__6476_rf64[safe_add( _6470_rcof,_6479_knz )] = (_ptr__6459_wf64[safe_add( _6440_cof2,_6483_k )] * m2);
              if ((_6435_ncodeatom2 > (int)0))
              {
                {
                  int32_t _12072_ = _ptr__6457_wi32[safe_add( _6442_codeptr2,_6483_k )];
                  int32_t _12073_ = _ptr__6457_wi32[safe_add( safe_add( _6442_codeptr2,_6483_k ),(int)1 )];
                  for (int32_t _6484_l = _12072_; _6484_l < _12073_; ++_6484_l)
                  {
                    {
                      _ptr__6474_ri32[safe_add( _6471_rcode,_6478_codei )] = _ptr__6457_wi32[safe_add( _6441_code2,_6484_l )];
                      _ptr__6476_rf64[safe_add( _6473_rcconst,_6478_codei )] = _ptr__6459_wf64[safe_add( _6443_cconst2,_6484_l )];
                      ++ _6478_codei;
                    }
                  }
                  _ptr__6474_ri32[safe_add( _6471_rcode,_6478_codei )] = 2;
                  _ptr__6476_rf64[safe_add( _6473_rcconst,_6478_codei )] = m2;
                  ++ _6478_codei;
                  _ptr__6474_ri32[safe_add( _6471_rcode,_6478_codei )] = 5;
                  ++ _6478_codei;
                  _ptr__6474_ri32[safe_add( safe_add( _6472_rcodeptr,_6479_knz ),(int)1 )] = _6478_codei;
                }
              }
              else
              {
                {
                  if ((_6464_rncodeatom > (int)0))
                  {
                    {
                      _ptr__6474_ri32[safe_add( _6471_rcode,_6478_codei )] = 2;
                      _ptr__6476_rf64[safe_add( _6473_rcconst,_6478_codei )] = 0.0;
                      ++ _6478_codei;
                      _ptr__6474_ri32[safe_add( safe_add( _6472_rcodeptr,_6479_knz ),(int)1 )] = _6478_codei;
                    }
                  }
                  {}
                }
              }
              ++ _6479_knz;
            }
          }
          _ptr__6474_ri32[safe_add( safe_add( _6467_rptr,_6480_i ),(int)1 )] = _6479_knz;
        }
      }
    }
  }
  else if(((!_6449_hassp1) || (!_6436_hassp2)))
  {
    {
      if ((!_6436_hassp2))
      {
        {
          int32_t _6485_tnelem = _6433_nelem2;
          int32_t _6486_tnnz = _6434_nnz2;
          int32_t _6487_tptr = _6437_ptr2;
          int32_t _6488_tsp = _6438_sp2;
          int32_t _6489_tnidxs = _6439_nidxs2;
          int32_t _6490_tncodeatom = _6435_ncodeatom2;
          int32_t _6491_tcodeptr = _6442_codeptr2;
          int32_t _6492_tcode = _6441_code2;
          int32_t _6493_tcconst = _6443_cconst2;
          int32_t _6494_tcof = _6440_cof2;
          _6433_nelem2 = _6446_nelem1;
          _6434_nnz2 = _6447_nnz1;
          _6437_ptr2 = _6450_ptr1;
          _6438_sp2 = _6451_sp1;
          _6439_nidxs2 = _6452_nidxs1;
          _6435_ncodeatom2 = _6448_ncodeatom1;
          _6442_codeptr2 = _6455_codeptr1;
          _6441_code2 = _6454_code1;
          _6443_cconst2 = _6456_cconst1;
          _6440_cof2 = _6453_cof1;
          _6446_nelem1 = _6485_tnelem;
          _6447_nnz1 = _6486_tnnz;
          _6450_ptr1 = _6487_tptr;
          _6451_sp1 = _6488_tsp;
          _6452_nidxs1 = _6489_tnidxs;
          _6448_ncodeatom1 = _6490_tncodeatom;
          _6455_codeptr1 = _6491_tcodeptr;
          _6454_code1 = _6492_tcode;
          _6456_cconst1 = _6493_tcconst;
          _6453_cof1 = _6494_tcof;
        }
      }
      {}
      double _12074_;
      bool _12075_ = (!_6449_hassp1);
      if (_12075_)
      {
        _12074_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _12074_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _6495_m1 = _12074_;
      double _12076_;
      bool _12077_ = (!_6449_hassp1);
      if (_12077_)
      {
        _12076_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _12076_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _6496_m2 = _12076_;
      int32_t _6497_rnelem = _6446_nelem1;
      int32_t _6498_rnnz = safe_add( _6447_nnz1,_6434_nnz2 );
      int32_t _6499_rnd = _6444_nd1;
      int32_t _6500_rncodeatom = safe_add( _6448_ncodeatom1,_6435_ncodeatom2 );
      if (_6460_parameterized)
      {
        {
          int32_t _12078_;
          bool _12079_ = (_6448_ncodeatom1 > (int)0);
          if (_12079_)
          {
            _12078_ = safe_mul( (int)2,_6447_nnz1 );
          }
          else
          {
            _12078_ = _6447_nnz1;
          }
          _6500_rncodeatom += _12078_;
          int32_t _12080_;
          bool _12081_ = (_6435_ncodeatom2 > (int)0);
          if (_12081_)
          {
            _12080_ = safe_mul( (int)2,_6434_nnz2 );
          }
          else
          {
            _12080_ = _6434_nnz2;
          }
          _6500_rncodeatom += _12080_;
        }
      }
      {}
      _6428_rs->alloc_expr(_6499_rnd,_6497_rnelem,_6498_rnnz,false,_6500_rncodeatom);
      int32_t _6501_rshape = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->shape_base;
      int32_t _6502_rptr = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->ptr_base;
      int32_t _6503_rsp = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->sp_base;
      int32_t _6504_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->nidxs_base;
      int32_t _6505_rcof = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->cof_base;
      int32_t _6506_rcode = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->code_base;
      int32_t _6507_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->codeptr_base;
      int32_t _6508_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6509_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6509_ri32(_6509_ri32 ? _6509_ri32->raw() : nullptr,_6509_ri32 ? _6509_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6510_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6510_ri64(_6510_ri64 ? _6510_ri64->raw() : nullptr,_6510_ri64 ? _6510_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6511_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->f64;
      _checked_ptr_1<double> _ptr__6511_rf64(_6511_rf64 ? _6511_rf64->raw() : nullptr,_6511_rf64 ? _6511_rf64->size(0) : 0);
      {
        int32_t _6512_codei = (int)0;
        int32_t _6513_elmi = (int)0;
        int32_t _6514_nzi = (int)0;
        int32_t _12082_ = (int)0;
        int32_t _12083_ = _6499_rnd;
        for (int32_t _6515_i = _12082_; _6515_i < _12083_; ++_6515_i)
        {
          {
            _ptr__6509_ri32[safe_add( _6501_rshape,_6515_i )] = _ptr__6457_wi32[safe_add( _6445_shape1,_6515_i )];
          }
        }
        _ptr__6509_ri32[_6502_rptr] = (int)0;
        if ((_6500_rncodeatom > (int)0))
        {
          {
            _ptr__6509_ri32[_6507_rcodeptr] = (int)0;
          }
        }
        {}
        int32_t _6516_ii2 = (int)0;
        int32_t _12084_ = (int)0;
        int32_t _12085_ = _6446_nelem1;
        for (int32_t _6517_i1 = _12084_; _6517_i1 < _12085_; ++_6517_i1)
        {
          {
            int32_t _12086_ = _ptr__6457_wi32[safe_add( _6450_ptr1,_6517_i1 )];
            int32_t _12087_ = _ptr__6457_wi32[safe_add( safe_add( _6450_ptr1,_6517_i1 ),(int)1 )];
            for (int32_t _6518_j = _12086_; _6518_j < _12087_; ++_6518_j)
            {
              {
                _ptr__6510_ri64[safe_add( _6504_rnidxs,_6514_nzi )] = _ptr__6458_wi64[safe_add( _6452_nidxs1,_6518_j )];
                _ptr__6511_rf64[safe_add( _6505_rcof,_6514_nzi )] = (_ptr__6459_wf64[safe_add( _6453_cof1,_6518_j )] * _6495_m1);
                if ((_6448_ncodeatom1 > (int)0))
                {
                  {
                    int32_t _12088_ = _ptr__6457_wi32[safe_add( _6455_codeptr1,_6518_j )];
                    int32_t _12089_ = _ptr__6457_wi32[safe_add( safe_add( _6455_codeptr1,_6518_j ),(int)1 )];
                    for (int32_t _6519_k = _12088_; _6519_k < _12089_; ++_6519_k)
                    {
                      {
                        _ptr__6509_ri32[safe_add( _6506_rcode,_6512_codei )] = _ptr__6457_wi32[safe_add( _6454_code1,_6519_k )];
                        _ptr__6511_rf64[safe_add( _6508_rcconst,_6512_codei )] = _ptr__6459_wf64[safe_add( _6456_cconst1,_6519_k )];
                        ++ _6512_codei;
                      }
                    }
                    _ptr__6509_ri32[safe_add( _6506_rcode,_6512_codei )] = 2;
                    _ptr__6511_rf64[safe_add( _6508_rcconst,_6512_codei )] = _6495_m1;
                    ++ _6512_codei;
                    _ptr__6509_ri32[safe_add( _6506_rcode,_6512_codei )] = 5;
                    ++ _6512_codei;
                    _ptr__6509_ri32[safe_add( safe_add( _6507_rcodeptr,_6514_nzi ),(int)1 )] = _6512_codei;
                  }
                }
                else
                {
                  {
                    if ((_6500_rncodeatom > (int)0))
                    {
                      {
                        _ptr__6509_ri32[safe_add( _6506_rcode,_6512_codei )] = 2;
                        _ptr__6511_rf64[safe_add( _6508_rcconst,_6512_codei )] = 0.0;
                        ++ _6512_codei;
                        _ptr__6509_ri32[safe_add( safe_add( _6507_rcodeptr,_6514_nzi ),(int)1 )] = _6512_codei;
                      }
                    }
                    {}
                  }
                }
                ++ _6514_nzi;
              }
            }
            if (((_6516_ii2 < _6433_nelem2) && (_6517_i1 == _ptr__6458_wi64[safe_add( _6438_sp2,_6516_ii2 )])))
            {
              {
                int32_t _12090_ = _ptr__6457_wi32[safe_add( _6437_ptr2,_6516_ii2 )];
                int32_t _12091_ = _ptr__6457_wi32[safe_add( safe_add( _6437_ptr2,_6516_ii2 ),(int)1 )];
                for (int32_t _6520_j = _12090_; _6520_j < _12091_; ++_6520_j)
                {
                  {
                    _ptr__6510_ri64[safe_add( _6504_rnidxs,_6514_nzi )] = _ptr__6458_wi64[safe_add( _6439_nidxs2,_6520_j )];
                    _ptr__6511_rf64[safe_add( _6505_rcof,_6514_nzi )] = (_ptr__6459_wf64[safe_add( _6440_cof2,_6520_j )] * _6496_m2);
                    if ((_6435_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _12092_ = _ptr__6457_wi32[safe_add( _6442_codeptr2,_6520_j )];
                        int32_t _12093_ = _ptr__6457_wi32[safe_add( safe_add( _6442_codeptr2,_6520_j ),(int)1 )];
                        for (int32_t _6521_k = _12092_; _6521_k < _12093_; ++_6521_k)
                        {
                          {
                            _ptr__6509_ri32[safe_add( _6506_rcode,_6512_codei )] = _ptr__6457_wi32[safe_add( _6441_code2,_6521_k )];
                            _ptr__6511_rf64[safe_add( _6508_rcconst,_6512_codei )] = _ptr__6459_wf64[safe_add( _6443_cconst2,_6521_k )];
                            ++ _6512_codei;
                          }
                        }
                        _ptr__6509_ri32[safe_add( _6506_rcode,_6512_codei )] = 2;
                        _ptr__6511_rf64[safe_add( _6508_rcconst,_6512_codei )] = _6496_m2;
                        ++ _6512_codei;
                        _ptr__6509_ri32[safe_add( _6506_rcode,_6512_codei )] = 5;
                        ++ _6512_codei;
                        _ptr__6509_ri32[safe_add( safe_add( _6507_rcodeptr,_6514_nzi ),(int)1 )] = _6512_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6500_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6509_ri32[safe_add( _6506_rcode,_6512_codei )] = 2;
                            _ptr__6511_rf64[safe_add( _6508_rcconst,_6512_codei )] = 0.0;
                            ++ _6512_codei;
                            _ptr__6509_ri32[safe_add( safe_add( _6507_rcodeptr,_6514_nzi ),(int)1 )] = _6512_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6514_nzi;
                  }
                }
                ++ _6516_ii2;
              }
            }
            {}
            _ptr__6509_ri32[safe_add( safe_add( _6502_rptr,_6513_elmi ),(int)1 )] = _6514_nzi;
            ++ _6513_elmi;
          }
        }
        if ((_6513_elmi != _6497_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nelem"));
          }
        }
        {}
        if ((_6514_nzi != _6498_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
          }
        }
        {}
        if ((_6512_codei != _6500_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      int32_t _6522_rnnz = safe_add( _6447_nnz1,_6434_nnz2 );
      int32_t _6523_rnelem = (int)0;
      int32_t _6524_rnd = _6444_nd1;
      int32_t _6525_rncodeatom = safe_add( _6448_ncodeatom1,_6435_ncodeatom2 );
      if (_6460_parameterized)
      {
        {
          int32_t _12094_;
          bool _12095_ = (_6448_ncodeatom1 > (int)0);
          if (_12095_)
          {
            _12094_ = safe_mul( (int)2,_6447_nnz1 );
          }
          else
          {
            _12094_ = _6447_nnz1;
          }
          _6525_rncodeatom += _12094_;
          int32_t _12096_;
          bool _12097_ = (_6435_ncodeatom2 > (int)0);
          if (_12097_)
          {
            _12096_ = safe_mul( (int)2,_6434_nnz2 );
          }
          else
          {
            _12096_ = _6434_nnz2;
          }
          _6525_rncodeatom += _12096_;
        }
      }
      {}
      int64_t _6526_size = (int64_t)1;
      int32_t _12098_ = (int)0;
      int32_t _12099_ = _6524_rnd;
      for (int32_t _6527_i = _12098_; _6527_i < _12099_; ++_6527_i)
      {
        {
          _6526_size *= _ptr__6457_wi32[safe_add( _6445_shape1,_6527_i )];
        }
      }
      {
        int32_t _6528_i2 = (int)0;
        int32_t _6529_i1 = (int)0;
        while ( ((_6529_i1 < _6446_nelem1) && (_6528_i2 < _6433_nelem2)) )
        {
          {
            if ((_ptr__6458_wi64[safe_add( _6451_sp1,_6529_i1 )] < _ptr__6458_wi64[safe_add( _6438_sp2,_6528_i2 )]))
            {
              {
                ++ _6523_rnelem;
                ++ _6529_i1;
              }
            }
            else if((_ptr__6458_wi64[safe_add( _6451_sp1,_6529_i1 )] > _ptr__6458_wi64[safe_add( _6438_sp2,_6528_i2 )]))
            {
              {
                ++ _6523_rnelem;
                ++ _6528_i2;
              }
            }
            else
            {
              {
                ++ _6523_rnelem;
                ++ _6529_i1;
                ++ _6528_i2;
              }
            }
          }
        }
        _6523_rnelem += (safe_add( (_6446_nelem1 - _6529_i1),_6433_nelem2 ) - _6528_i2);
      }
      bool _6530_rhassp = (_6523_rnelem < _6526_size);
      _6428_rs->alloc_expr(_6524_rnd,_6523_rnelem,_6522_rnnz,_6530_rhassp,_6525_rncodeatom);
      int32_t _6531_rshape = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->shape_base;
      int32_t _6532_rptr = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->ptr_base;
      int32_t _12100_;
      bool _12101_ = _6530_rhassp;
      if (_12101_)
      {
        _12100_ = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->sp_base;
      }
      else
      {
        _12100_ = _6428_rs->alloci64(_6523_rnelem);
      }
      int32_t _6533_rsp = _12100_;
      int32_t _6534_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->nidxs_base;
      int32_t _6535_rcof = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->cof_base;
      int32_t _6536_rcode = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->code_base;
      int32_t _6537_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->codeptr_base;
      int32_t _6538_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6539_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6539_ri32(_6539_ri32 ? _6539_ri32->raw() : nullptr,_6539_ri32 ? _6539_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6540_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6540_ri64(_6540_ri64 ? _6540_ri64->raw() : nullptr,_6540_ri64 ? _6540_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6541_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6428_rs)->f64;
      _checked_ptr_1<double> _ptr__6541_rf64(_6541_rf64 ? _6541_rf64->raw() : nullptr,_6541_rf64 ? _6541_rf64->size(0) : 0);
      int32_t _12102_ = (int)0;
      int32_t _12103_ = _6524_rnd;
      for (int32_t _6542_i = _12102_; _6542_i < _12103_; ++_6542_i)
      {
        {
          _ptr__6539_ri32[safe_add( _6531_rshape,_6542_i )] = _ptr__6457_wi32[safe_add( _6445_shape1,_6542_i )];
        }
      }
      {
        _ptr__6539_ri32[_6532_rptr] = (int)0;
        if ((_6525_rncodeatom > (int)0))
        {
          {
            _ptr__6539_ri32[_6537_rcodeptr] = (int)0;
          }
        }
        {}
        int32_t _6543_codei = (int)0;
        int32_t _6544_pe = (int)0;
        int32_t _6545_p = (int)0;
        int32_t _6546_i2 = (int)0;
        int32_t _6547_i1 = (int)0;
        while ( ((_6547_i1 < _6446_nelem1) && (_6546_i2 < _6433_nelem2)) )
        {
          {
            if ((_ptr__6458_wi64[safe_add( _6451_sp1,_6547_i1 )] < _ptr__6458_wi64[safe_add( _6438_sp2,_6546_i2 )]))
            {
              {
                int32_t _12104_ = _ptr__6457_wi32[safe_add( _6450_ptr1,_6547_i1 )];
                int32_t _12105_ = _ptr__6457_wi32[safe_add( safe_add( _6450_ptr1,_6547_i1 ),(int)1 )];
                for (int32_t _6548_j = _12104_; _6548_j < _12105_; ++_6548_j)
                {
                  {
                    _ptr__6540_ri64[safe_add( _6534_rnidxs,_6545_p )] = _ptr__6458_wi64[safe_add( _6452_nidxs1,_6548_j )];
                    _ptr__6541_rf64[safe_add( _6535_rcof,_6545_p )] = (m1 * _ptr__6459_wf64[safe_add( _6453_cof1,_6548_j )]);
                    if ((_6448_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _12106_ = _ptr__6457_wi32[safe_add( _6455_codeptr1,_6548_j )];
                        int32_t _12107_ = _ptr__6457_wi32[safe_add( safe_add( _6455_codeptr1,_6548_j ),(int)1 )];
                        for (int32_t _6549_k = _12106_; _6549_k < _12107_; ++_6549_k)
                        {
                          {
                            _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = _ptr__6457_wi32[safe_add( _6454_code1,_6549_k )];
                            _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = _ptr__6459_wf64[safe_add( _6456_cconst1,_6549_k )];
                            ++ _6543_codei;
                          }
                        }
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                        _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = m1;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 5;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6525_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                            _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = (int)0;
                            ++ _6543_codei;
                            _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6545_p;
                  }
                }
                _ptr__6540_ri64[safe_add( _6533_rsp,_6544_pe )] = _ptr__6458_wi64[safe_add( _6451_sp1,_6547_i1 )];
                _ptr__6539_ri32[safe_add( safe_add( _6532_rptr,_6544_pe ),(int)1 )] = _6545_p;
                ++ _6544_pe;
                ++ _6547_i1;
              }
            }
            else if((_ptr__6458_wi64[safe_add( _6438_sp2,_6546_i2 )] < _ptr__6458_wi64[safe_add( _6451_sp1,_6547_i1 )]))
            {
              {
                int32_t _12108_ = _ptr__6457_wi32[safe_add( _6437_ptr2,_6546_i2 )];
                int32_t _12109_ = _ptr__6457_wi32[safe_add( safe_add( _6437_ptr2,_6546_i2 ),(int)1 )];
                for (int32_t _6550_j = _12108_; _6550_j < _12109_; ++_6550_j)
                {
                  {
                    _ptr__6540_ri64[safe_add( _6534_rnidxs,_6545_p )] = _ptr__6458_wi64[safe_add( _6439_nidxs2,_6550_j )];
                    _ptr__6541_rf64[safe_add( _6535_rcof,_6545_p )] = (m2 * _ptr__6459_wf64[safe_add( _6440_cof2,_6550_j )]);
                    if ((_6435_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _12110_ = _ptr__6457_wi32[safe_add( _6442_codeptr2,_6550_j )];
                        int32_t _12111_ = _ptr__6457_wi32[safe_add( safe_add( _6442_codeptr2,_6550_j ),(int)1 )];
                        for (int32_t _6551_k = _12110_; _6551_k < _12111_; ++_6551_k)
                        {
                          {
                            _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = _ptr__6457_wi32[safe_add( _6441_code2,_6551_k )];
                            _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = _ptr__6459_wf64[safe_add( _6443_cconst2,_6551_k )];
                            ++ _6543_codei;
                          }
                        }
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                        _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = m2;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 5;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6525_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                            _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = (int)0;
                            ++ _6543_codei;
                            _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6545_p;
                  }
                }
                _ptr__6540_ri64[safe_add( _6533_rsp,_6544_pe )] = _ptr__6458_wi64[safe_add( _6438_sp2,_6546_i2 )];
                _ptr__6539_ri32[safe_add( safe_add( _6532_rptr,_6544_pe ),(int)1 )] = _6545_p;
                ++ _6544_pe;
                ++ _6546_i2;
              }
            }
            else
            {
              {
                int32_t _12112_ = _ptr__6457_wi32[safe_add( _6450_ptr1,_6547_i1 )];
                int32_t _12113_ = _ptr__6457_wi32[safe_add( safe_add( _6450_ptr1,_6547_i1 ),(int)1 )];
                for (int32_t _6552_j = _12112_; _6552_j < _12113_; ++_6552_j)
                {
                  {
                    _ptr__6540_ri64[safe_add( _6534_rnidxs,_6545_p )] = _ptr__6458_wi64[safe_add( _6452_nidxs1,_6552_j )];
                    _ptr__6541_rf64[safe_add( _6535_rcof,_6545_p )] = (m1 * _ptr__6459_wf64[safe_add( _6453_cof1,_6552_j )]);
                    if ((_6448_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _12114_ = _ptr__6457_wi32[safe_add( _6455_codeptr1,_6552_j )];
                        int32_t _12115_ = _ptr__6457_wi32[safe_add( safe_add( _6455_codeptr1,_6552_j ),(int)1 )];
                        for (int32_t _6553_k = _12114_; _6553_k < _12115_; ++_6553_k)
                        {
                          {
                            _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = _ptr__6457_wi32[safe_add( _6454_code1,_6553_k )];
                            _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = _ptr__6459_wf64[safe_add( _6456_cconst1,_6553_k )];
                            ++ _6543_codei;
                          }
                        }
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                        _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = m1;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 5;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6525_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                            _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = (int)0;
                            ++ _6543_codei;
                            _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6545_p;
                  }
                }
                int32_t _12116_ = _ptr__6457_wi32[safe_add( _6437_ptr2,_6546_i2 )];
                int32_t _12117_ = _ptr__6457_wi32[safe_add( safe_add( _6437_ptr2,_6546_i2 ),(int)1 )];
                for (int32_t _6554_j = _12116_; _6554_j < _12117_; ++_6554_j)
                {
                  {
                    _ptr__6540_ri64[safe_add( _6534_rnidxs,_6545_p )] = _ptr__6458_wi64[safe_add( _6439_nidxs2,_6554_j )];
                    _ptr__6541_rf64[safe_add( _6535_rcof,_6545_p )] = (m2 * _ptr__6459_wf64[safe_add( _6440_cof2,_6554_j )]);
                    if ((_6435_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _12118_ = _ptr__6457_wi32[safe_add( _6442_codeptr2,_6554_j )];
                        int32_t _12119_ = _ptr__6457_wi32[safe_add( safe_add( _6442_codeptr2,_6554_j ),(int)1 )];
                        for (int32_t _6555_k = _12118_; _6555_k < _12119_; ++_6555_k)
                        {
                          {
                            _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = _ptr__6457_wi32[safe_add( _6441_code2,_6555_k )];
                            _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = _ptr__6459_wf64[safe_add( _6443_cconst2,_6555_k )];
                            ++ _6543_codei;
                          }
                        }
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                        _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = m2;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 5;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6525_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                            _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = (int)0;
                            ++ _6543_codei;
                            _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6545_p;
                  }
                }
                _ptr__6540_ri64[safe_add( _6533_rsp,_6544_pe )] = _ptr__6458_wi64[safe_add( _6451_sp1,_6547_i1 )];
                _ptr__6539_ri32[safe_add( safe_add( _6532_rptr,_6544_pe ),(int)1 )] = _6545_p;
                ++ _6544_pe;
                ++ _6547_i1;
                ++ _6546_i2;
              }
            }
          }
        }
        while ( (_6547_i1 < _6446_nelem1) )
        {
          {
            int32_t _12120_ = _ptr__6457_wi32[safe_add( _6450_ptr1,_6547_i1 )];
            int32_t _12121_ = _ptr__6457_wi32[safe_add( safe_add( _6450_ptr1,_6547_i1 ),(int)1 )];
            for (int32_t _6556_j = _12120_; _6556_j < _12121_; ++_6556_j)
            {
              {
                _ptr__6540_ri64[safe_add( _6534_rnidxs,_6545_p )] = _ptr__6458_wi64[safe_add( _6452_nidxs1,_6556_j )];
                _ptr__6541_rf64[safe_add( _6535_rcof,_6545_p )] = (m1 * _ptr__6459_wf64[safe_add( _6453_cof1,_6556_j )]);
                if ((_6448_ncodeatom1 > (int)0))
                {
                  {
                    int32_t _12122_ = _ptr__6457_wi32[safe_add( _6455_codeptr1,_6556_j )];
                    int32_t _12123_ = _ptr__6457_wi32[safe_add( safe_add( _6455_codeptr1,_6556_j ),(int)1 )];
                    for (int32_t _6557_k = _12122_; _6557_k < _12123_; ++_6557_k)
                    {
                      {
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = _ptr__6457_wi32[safe_add( _6454_code1,_6557_k )];
                        _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = _ptr__6459_wf64[safe_add( _6456_cconst1,_6557_k )];
                        ++ _6543_codei;
                      }
                    }
                    _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                    _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = m1;
                    ++ _6543_codei;
                    _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 5;
                    ++ _6543_codei;
                    _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                  }
                }
                else
                {
                  {
                    if ((_6525_rncodeatom > (int)0))
                    {
                      {
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                        _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = (int)0;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                      }
                    }
                    {}
                  }
                }
                ++ _6545_p;
              }
            }
            _ptr__6540_ri64[safe_add( _6533_rsp,_6544_pe )] = _ptr__6458_wi64[safe_add( _6451_sp1,_6547_i1 )];
            _ptr__6539_ri32[safe_add( safe_add( _6532_rptr,_6544_pe ),(int)1 )] = _6545_p;
            ++ _6544_pe;
            ++ _6547_i1;
          }
        }
        while ( (_6546_i2 < _6433_nelem2) )
        {
          {
            int32_t _12124_ = _ptr__6457_wi32[safe_add( _6437_ptr2,_6546_i2 )];
            int32_t _12125_ = _ptr__6457_wi32[safe_add( safe_add( _6437_ptr2,_6546_i2 ),(int)1 )];
            for (int32_t _6558_j = _12124_; _6558_j < _12125_; ++_6558_j)
            {
              {
                _ptr__6540_ri64[safe_add( _6534_rnidxs,_6545_p )] = _ptr__6458_wi64[safe_add( _6439_nidxs2,_6558_j )];
                _ptr__6541_rf64[safe_add( _6535_rcof,_6545_p )] = (m2 * _ptr__6459_wf64[safe_add( _6440_cof2,_6558_j )]);
                if ((_6435_ncodeatom2 > (int)0))
                {
                  {
                    int32_t _12126_ = _ptr__6457_wi32[safe_add( _6442_codeptr2,_6558_j )];
                    int32_t _12127_ = _ptr__6457_wi32[safe_add( safe_add( _6442_codeptr2,_6558_j ),(int)1 )];
                    for (int32_t _6559_k = _12126_; _6559_k < _12127_; ++_6559_k)
                    {
                      {
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = _ptr__6457_wi32[safe_add( _6441_code2,_6559_k )];
                        _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = _ptr__6459_wf64[safe_add( _6443_cconst2,_6559_k )];
                        ++ _6543_codei;
                      }
                    }
                    _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                    _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = m2;
                    ++ _6543_codei;
                    _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 5;
                    ++ _6543_codei;
                    _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                  }
                }
                else
                {
                  {
                    if ((_6525_rncodeatom > (int)0))
                    {
                      {
                        _ptr__6539_ri32[safe_add( _6536_rcode,_6543_codei )] = 2;
                        _ptr__6541_rf64[safe_add( _6538_rcconst,_6543_codei )] = (int)0;
                        ++ _6543_codei;
                        _ptr__6539_ri32[safe_add( safe_add( _6537_rcodeptr,_6545_p ),(int)1 )] = _6543_codei;
                      }
                    }
                    {}
                  }
                }
                ++ _6545_p;
              }
            }
            _ptr__6540_ri64[safe_add( _6533_rsp,_6544_pe )] = _ptr__6458_wi64[safe_add( _6438_sp2,_6546_i2 )];
            _ptr__6539_ri32[safe_add( safe_add( _6532_rptr,_6544_pe ),(int)1 )] = _6545_p;
            ++ _6544_pe;
            ++ _6546_i2;
          }
        }
      }
      if ((!_6530_rhassp))
      {
        {
          _6428_rs->popi64(_6523_rnelem);
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprAdd.eval

// Begin mosek.fusion.ExprAdd.toString
// Method mosek.fusion.ExprAdd.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:838:6-840:7
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprAdd::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("; "))->__mosek_2fusion_2Utils_2StringBuffer__a(m1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(m2)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprAdd.toString

void mosek::fusion::p_ExprAdd::destroy()
{
  e2.reset();
  e1.reset();
}
void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }
// } class ExprAdd
// class ExprWSum { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:367:4-829:5
mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }
mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprWSum::p_ExprWSum
  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprWSum.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:382:6-403:7
mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6560_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6561_w)
{ return new mosek::fusion::ExprWSum(_6560_es,_6561_w); }
mosek::fusion::ExprWSum::ExprWSum
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6560_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6561_w) : 
   ExprWSum(new mosek::fusion::p_ExprWSum(this))
{ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_6560_es,_6561_w); }
void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6560_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6561_w)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__6561_w(_6561_w ? _6561_w->raw() : nullptr, _6561_w ? _6561_w->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_BaseExpression::modelFrom(_6560_es),((*_6560_es)((int)0))->getShape());
    if (((int)((_6561_w)->size(0)) != (int)((_6560_es)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_6561_w);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6562_shape = ((*_6560_es)((int)0))->getShape();
    _checked_ptr_1<int32_t> _ptr__6562_shape(_6562_shape ? _6562_shape->raw() : nullptr,_6562_shape ? _6562_shape->size(0) : 0);
    int32_t _6563_nd = (int)((_6562_shape)->size(0));
    int32_t _12128_ = (int)1;
    int32_t _12129_ = (int)((_6560_es)->size(0));
    for (int32_t _6564_i = _12128_; _6564_i < _12129_; ++_6564_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _6565_eshape = ((*_6560_es)(_6564_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__6565_eshape(_6565_eshape ? _6565_eshape->raw() : nullptr,_6565_eshape ? _6565_eshape->size(0) : 0);
        if ((_6563_nd != (int)((_6565_eshape)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int32_t _12130_ = (int)0;
            int32_t _12131_ = _6563_nd;
            for (int32_t _6566_j = _12130_; _6566_j < _12131_; ++_6566_j)
            {
              {
                if ((_ptr__6562_shape[_6566_j] != _ptr__6565_eshape[_6566_j]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _12132_;
    for (int32_t _6567_i = (int)0, _12133_ = (int)((_6560_es)->size(0)); _6567_i < _12133_ ; ++_6567_i)
    {
      _12132_.push_back(((*_6560_es)(_6567_i)));
    }
    auto _12134_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_12132_.size()),_12132_.begin(),_12132_.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _12134_;
  }
}
// mosek.fusion.ExprWSum.ctor

// Begin mosek.fusion.ExprWSum.eval
// Method mosek.fusion.ExprWSum.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:405:6-702:7
void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6568_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6569_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6570_xs) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_6568_rs,_6569_ws,_6570_xs); }
void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6568_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6569_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6570_xs)
{
  int32_t _6571_n = (int)((es)->size(0));
  int32_t _12135_ = (int)0;
  int32_t _12136_ = _6571_n;
  for (int32_t _6572_i = _12135_; _6572_i < _12136_; ++_6572_i)
  {
    {
      ((*es)(_6572_i))->eval(_6569_ws,_6568_rs,_6570_xs);
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6573_nd = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6573_nd(_6573_nd ? _6573_nd->raw() : nullptr,_6573_nd ? _6573_nd->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6574_nelem = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6574_nelem(_6574_nelem ? _6574_nelem->raw() : nullptr,_6574_nelem ? _6574_nelem->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6575_nnz = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6575_nnz(_6575_nnz ? _6575_nnz->raw() : nullptr,_6575_nnz ? _6575_nnz->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6576_ncodeatom = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6576_ncodeatom(_6576_ncodeatom ? _6576_ncodeatom->raw() : nullptr,_6576_ncodeatom ? _6576_ncodeatom->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6577_ptr_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6577_ptr_base(_6577_ptr_base ? _6577_ptr_base->raw() : nullptr,_6577_ptr_base ? _6577_ptr_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6578_nidxs_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6578_nidxs_base(_6578_nidxs_base ? _6578_nidxs_base->raw() : nullptr,_6578_nidxs_base ? _6578_nidxs_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6579_sp_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6579_sp_base(_6579_sp_base ? _6579_sp_base->raw() : nullptr,_6579_sp_base ? _6579_sp_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6580_cof_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6580_cof_base(_6580_cof_base ? _6580_cof_base->raw() : nullptr,_6580_cof_base ? _6580_cof_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6581_shape_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6581_shape_base(_6581_shape_base ? _6581_shape_base->raw() : nullptr,_6581_shape_base ? _6581_shape_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6582_code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6582_code(_6582_code ? _6582_code->raw() : nullptr,_6582_code ? _6582_code->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6583_codeptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6583_codeptr(_6583_codeptr ? _6583_codeptr->raw() : nullptr,_6583_codeptr ? _6583_codeptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6584_cconst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
  _checked_ptr_1<int32_t> _ptr__6584_cconst(_6584_cconst ? _6584_cconst->raw() : nullptr,_6584_cconst ? _6584_cconst->size(0) : 0);
  std::shared_ptr< monty::ndarray< bool,1 > > _6585_hassp = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6571_n)));
  int32_t _12137_ = (int)0;
  int32_t _12138_ = _6571_n;
  for (int32_t _6586_i = _12137_; _6586_i < _12138_; ++_6586_i)
  {
    {
      _6569_ws->pop_expr();
      _ptr__6573_nd[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->nd;
      _ptr__6574_nelem[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->nelem;
      _ptr__6575_nnz[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->nnz;
      _ptr__6576_ncodeatom[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->ncodeatom;
      _ptr__6577_ptr_base[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->ptr_base;
      _ptr__6579_sp_base[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->sp_base;
      _ptr__6578_nidxs_base[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->nidxs_base;
      _ptr__6580_cof_base[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->cof_base;
      _ptr__6581_shape_base[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->shape_base;
      _ptr__6582_code[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->code_base;
      _ptr__6583_codeptr[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->codeptr_base;
      _ptr__6584_cconst[((_6571_n - (int)1) - _6586_i)] = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->cconst_base;
      ((*_6585_hassp)(((_6571_n - (int)1) - _6586_i))) = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->hassp;
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6587_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6587_wi32(_6587_wi32 ? _6587_wi32->raw() : nullptr,_6587_wi32 ? _6587_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6588_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6588_wi64(_6588_wi64 ? _6588_wi64->raw() : nullptr,_6588_wi64 ? _6588_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6589_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6569_ws)->f64;
  _checked_ptr_1<double> _ptr__6589_wf64(_6589_wf64 ? _6589_wf64->raw() : nullptr,_6589_wf64 ? _6589_wf64->size(0) : 0);
  {
    bool _6590_ok = true;
    int32_t _12139_ = (int)1;
    int32_t _12140_ = _6571_n;
    for (int32_t _6591_i = _12139_; _6591_i < _12140_; ++_6591_i)
    {
      {
        _6590_ok = (_6590_ok && (_ptr__6573_nd[(int)0] == _ptr__6573_nd[_6591_i]));
        int32_t _12141_ = (int)0;
        int32_t _12142_ = _ptr__6573_nd[(int)0];
        for (int32_t _6592_j = _12141_; _6592_j < _12142_; ++_6592_j)
        {
          {
            _6590_ok = (_6590_ok && (_ptr__6587_wi32[safe_add( _ptr__6581_shape_base[(int)0],_6592_j )] == _ptr__6587_wi32[safe_add( _ptr__6581_shape_base[_6591_i],_6592_j )]));
          }
        }
      }
    }
    if ((!_6590_ok))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
  }
  std::vector<int32_t> _12143_;
  for (int32_t _6594_j = (int)0, _12144_ = _ptr__6573_nd[(int)0]; _6594_j < _12144_ ; ++_6594_j)
  {
    _12143_.push_back(_ptr__6587_wi32[safe_add( _ptr__6581_shape_base[(int)0],_6594_j )]);
  }
  auto _12145_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12143_.size()),_12143_.begin(),_12143_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6593_wshape = _12145_;
  _checked_ptr_1<int32_t> _ptr__6593_wshape(_6593_wshape ? _6593_wshape->raw() : nullptr,_6593_wshape ? _6593_wshape->size(0) : 0);
  bool _6595_anydense = false;
  int32_t _12146_ = (int)0;
  int32_t _12147_ = _6571_n;
  for (int32_t _6596_i = _12146_; _6596_i < _12147_; ++_6596_i)
  {
    {
      if ((!((*_6585_hassp)(_6596_i))))
      {
        {
          _6595_anydense = true;
        }
      }
      {}
    }
  }
  bool _6597_anycodeatom = false;
  int32_t _12148_ = (int)0;
  int32_t _12149_ = _6571_n;
  for (int32_t _6598_i = _12148_; _6598_i < _12149_; ++_6598_i)
  {
    {
      if ((_ptr__6576_ncodeatom[_6598_i] > (int)0))
      {
        {
          _6597_anycodeatom = true;
        }
      }
      {}
    }
  }
  int32_t _6599_rncodeatom = (int)0;
  int32_t _6600_rnelem = (int)0;
  int32_t _6601_rnnz = (int)0;
  if (_6595_anydense)
  {
    {
      _6600_rnelem = (int32_t)::mosek::fusion::p_Set::size(_6593_wshape);
      int32_t _12150_ = (int)0;
      int32_t _12151_ = _6571_n;
      for (int32_t _6602_i = _12150_; _6602_i < _12151_; ++_6602_i)
      {
        {
          _6601_rnnz += _ptr__6575_nnz[_6602_i];
          if (_6597_anycodeatom)
          {
            {
              int32_t _12152_;
              bool _12153_ = (_ptr__6576_ncodeatom[_6602_i] > (int)0);
              if (_12153_)
              {
                _12152_ = safe_add( _ptr__6576_ncodeatom[_6602_i],safe_mul( (int)2,_ptr__6575_nnz[_6602_i] ) );
              }
              else
              {
                _12152_ = _ptr__6575_nnz[_6602_i];
              }
              _6599_rncodeatom += _12152_;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      bool _6603_done = false;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6604_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
      _checked_ptr_1<int32_t> _ptr__6604_ii(_6604_ii ? _6604_ii->raw() : nullptr,_6604_ii ? _6604_ii->size(0) : 0);
      int32_t _12154_ = (int)0;
      int32_t _12155_ = _6571_n;
      for (int32_t _6605_i = _12154_; _6605_i < _12155_; ++_6605_i)
      {
        {
          _6601_rnnz += _ptr__6575_nnz[_6605_i];
          if (_6597_anycodeatom)
          {
            {
              int32_t _12156_;
              bool _12157_ = (_ptr__6576_ncodeatom[_6605_i] > (int)0);
              if (_12157_)
              {
                _12156_ = safe_add( _ptr__6576_ncodeatom[_6605_i],safe_mul( (int)2,_ptr__6575_nnz[_6605_i] ) );
              }
              else
              {
                _12156_ = _ptr__6575_nnz[_6605_i];
              }
              _6599_rncodeatom += _12156_;
            }
          }
          {}
        }
      }
      while ( (!_6603_done) )
      {
        {
          int64_t _6606_min_i = (-(int)1);
          int32_t _12158_ = (int)0;
          int32_t _12159_ = _6571_n;
          for (int32_t _6607_j = _12158_; _6607_j < _12159_; ++_6607_j)
          {
            {
              if (((_ptr__6604_ii[_6607_j] < _ptr__6574_nelem[_6607_j]) && ((_6606_min_i < (int)0) || (_ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6607_j],_ptr__6604_ii[_6607_j] )] < _6606_min_i))))
              {
                {
                  _6606_min_i = _ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6607_j],_ptr__6604_ii[_6607_j] )];
                }
              }
              {}
            }
          }
          if ((_6606_min_i < (int)0))
          {
            {
              _6603_done = true;
            }
          }
          else
          {
            {
              int32_t _12160_ = (int)0;
              int32_t _12161_ = _6571_n;
              for (int32_t _6608_j = _12160_; _6608_j < _12161_; ++_6608_j)
              {
                {
                  if (((_ptr__6604_ii[_6608_j] < _ptr__6574_nelem[_6608_j]) && (_6606_min_i == _ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6608_j],_ptr__6604_ii[_6608_j] )])))
                  {
                    {
                      ++ _ptr__6604_ii[_6608_j];
                    }
                  }
                  {}
                }
              }
              ++ _6600_rnelem;
            }
          }
        }
      }
    }
  }
  _6568_rs->alloc_expr(_ptr__6573_nd[(int)0],_6600_rnelem,_6601_rnnz,(!_6595_anydense),_6599_rncodeatom);
  int32_t _6609_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->ptr_base;
  int32_t _6610_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->nidxs_base;
  int32_t _6611_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->sp_base;
  int32_t _6612_rshape = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->shape_base;
  int32_t _6613_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->cof_base;
  int32_t _6614_rcode = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->code_base;
  int32_t _6615_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->codeptr_base;
  int32_t _6616_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6617_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6617_ri32(_6617_ri32 ? _6617_ri32->raw() : nullptr,_6617_ri32 ? _6617_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6618_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6618_ri64(_6618_ri64 ? _6618_ri64->raw() : nullptr,_6618_ri64 ? _6618_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6619_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6568_rs)->f64;
  _checked_ptr_1<double> _ptr__6619_rf64(_6619_rf64 ? _6619_rf64->raw() : nullptr,_6619_rf64 ? _6619_rf64->size(0) : 0);
  int32_t _12162_ = (int)0;
  int32_t _12163_ = _ptr__6573_nd[(int)0];
  for (int32_t _6620_i = _12162_; _6620_i < _12163_; ++_6620_i)
  {
    {
      _ptr__6617_ri32[safe_add( _6612_rshape,_6620_i )] = _ptr__6587_wi32[safe_add( _ptr__6581_shape_base[(int)0],_6620_i )];
    }
  }
  if ((_6599_rncodeatom > (int)0))
  {
    {
      _ptr__6617_ri32[_6615_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _12164_ = (int)0;
  int32_t _12165_ = safe_add( _6600_rnelem,(int)1 );
  for (int32_t _6621_i = _12164_; _6621_i < _12165_; ++_6621_i)
  {
    {
      _ptr__6617_ri32[safe_add( _6609_rptr_base,_6621_i )] = (int)0;
    }
  }
  if (_6595_anydense)
  {
    {
      int32_t _6622_xcodeptr = (-(int)9999);
      if ((_6599_rncodeatom > (int)0))
      {
        {
          _6622_xcodeptr = _6570_xs->alloci32(safe_add( _6600_rnelem,(int)1 ));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6623_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6570_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__6623_xi32(_6623_xi32 ? _6623_xi32->raw() : nullptr,_6623_xi32 ? _6623_xi32->size(0) : 0);
      if ((_6599_rncodeatom > (int)0))
      {
        {
          int32_t _12166_ = (int)0;
          int32_t _12167_ = safe_add( _6600_rnelem,(int)1 );
          for (int32_t _6624_i = _12166_; _6624_i < _12167_; ++_6624_i)
          {
            {
              _ptr__6623_xi32[safe_add( _6622_xcodeptr,_6624_i )] = (int)0;
            }
          }
        }
      }
      {}
      int32_t _12168_ = (int)0;
      int32_t _12169_ = _6571_n;
      for (int32_t _6625_i = _12168_; _6625_i < _12169_; ++_6625_i)
      {
        {
          if (((*_6585_hassp)(_6625_i)))
          {
            {
              int32_t _12170_ = (int)0;
              int32_t _12171_ = _ptr__6574_nelem[_6625_i];
              for (int32_t _6626_j = _12170_; _6626_j < _12171_; ++_6626_j)
              {
                {
                  _ptr__6617_ri32[safe_add( safe_add( _6609_rptr_base,_ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6625_i],_6626_j )] ),(int)1 )] += (_ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6625_i],_6626_j ),(int)1 )] - _ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6625_i],_6626_j )]);
                }
              }
              if ((_ptr__6576_ncodeatom[_6625_i] > (int)0))
              {
                {
                  int32_t _12172_ = (int)0;
                  int32_t _12173_ = _ptr__6574_nelem[_6625_i];
                  for (int32_t _6627_j = _12172_; _6627_j < _12173_; ++_6627_j)
                  {
                    {
                      _ptr__6623_xi32[safe_add( safe_add( _6622_xcodeptr,_ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6625_i],_6627_j )] ),(int)1 )] += safe_add( (_ptr__6587_wi32[safe_add( _ptr__6583_codeptr[_6625_i],_ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6625_i],_6627_j ),(int)1 )] )] - _ptr__6587_wi32[safe_add( _ptr__6583_codeptr[_6625_i],_ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6625_i],_6627_j )] )]),safe_mul( (int)2,(_ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6625_i],_6627_j ),(int)1 )] - _ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6625_i],_6627_j )]) ) );
                    }
                  }
                }
              }
              else if(_6597_anycodeatom)
              {
                {
                  int32_t _12174_ = (int)0;
                  int32_t _12175_ = _ptr__6574_nelem[_6625_i];
                  for (int32_t _6628_j = _12174_; _6628_j < _12175_; ++_6628_j)
                  {
                    {
                      _ptr__6623_xi32[safe_add( safe_add( _6622_xcodeptr,_ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6625_i],_6628_j )] ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
          else
          {
            {
              int32_t _12176_ = (int)0;
              int32_t _12177_ = _ptr__6574_nelem[_6625_i];
              for (int32_t _6629_j = _12176_; _6629_j < _12177_; ++_6629_j)
              {
                {
                  _ptr__6617_ri32[safe_add( safe_add( _6609_rptr_base,_6629_j ),(int)1 )] += (_ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6625_i],_6629_j ),(int)1 )] - _ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6625_i],_6629_j )]);
                }
              }
              if ((_ptr__6576_ncodeatom[_6625_i] > (int)0))
              {
                {
                  int32_t _12178_ = (int)0;
                  int32_t _12179_ = _ptr__6574_nelem[_6625_i];
                  for (int32_t _6630_j = _12178_; _6630_j < _12179_; ++_6630_j)
                  {
                    {
                      _ptr__6623_xi32[safe_add( safe_add( _6622_xcodeptr,_6630_j ),(int)1 )] += safe_add( (_ptr__6587_wi32[safe_add( _ptr__6583_codeptr[_6625_i],_ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6625_i],_6630_j ),(int)1 )] )] - _ptr__6587_wi32[safe_add( _ptr__6583_codeptr[_6625_i],_ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6625_i],_6630_j )] )]),safe_mul( (int)2,(_ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6625_i],_6630_j ),(int)1 )] - _ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6625_i],_6630_j )]) ) );
                    }
                  }
                }
              }
              else if(_6597_anycodeatom)
              {
                {
                  int32_t _12180_ = (int)0;
                  int32_t _12181_ = _ptr__6574_nelem[_6625_i];
                  for (int32_t _6631_j = _12180_; _6631_j < _12181_; ++_6631_j)
                  {
                    {
                      _ptr__6623_xi32[safe_add( safe_add( _6622_xcodeptr,_6631_j ),(int)1 )] += (_ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6625_i],_6631_j ),(int)1 )] - _ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6625_i],_6631_j )]);
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      int32_t _12182_ = (int)0;
      int32_t _12183_ = _6600_rnelem;
      for (int32_t _6632_i = _12182_; _6632_i < _12183_; ++_6632_i)
      {
        {
          _ptr__6617_ri32[safe_add( safe_add( _6609_rptr_base,_6632_i ),(int)1 )] += _ptr__6617_ri32[safe_add( _6609_rptr_base,_6632_i )];
        }
      }
      if ((_6599_rncodeatom > (int)0))
      {
        {
          int32_t _12184_ = (int)0;
          int32_t _12185_ = _6600_rnelem;
          for (int32_t _6633_i = _12184_; _6633_i < _12185_; ++_6633_i)
          {
            {
              _ptr__6623_xi32[safe_add( safe_add( _6622_xcodeptr,_6633_i ),(int)1 )] += _ptr__6623_xi32[safe_add( _6622_xcodeptr,_6633_i )];
            }
          }
        }
      }
      {}
      int32_t _12186_ = (int)0;
      int32_t _12187_ = _6571_n;
      for (int32_t _6634_i = _12186_; _6634_i < _12187_; ++_6634_i)
      {
        {
          if (((*_6585_hassp)(_6634_i)))
          {
            {
              int32_t _12188_ = (int)0;
              int32_t _12189_ = _ptr__6574_nelem[_6634_i];
              for (int32_t _6635_j = _12188_; _6635_j < _12189_; ++_6635_j)
              {
                {
                  int32_t _6636_p0 = _ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6634_i],_6635_j )];
                  int32_t _6637_p1 = _ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6634_i],_6635_j ),(int)1 )];
                  int64_t _6638_rii = _ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6634_i],_6635_j )];
                  int32_t _6639_b = _ptr__6617_ri32[safe_add( _6609_rptr_base,_6638_rii )];
                  int32_t _12190_;
                  bool _12191_ = _6597_anycodeatom;
                  if (_12191_)
                  {
                    _12190_ = _ptr__6623_xi32[safe_add( _6622_xcodeptr,_6638_rii )];
                  }
                  else
                  {
                    _12190_ = (-(int)10000);
                  }
                  int32_t _6640_codei = _12190_;
                  int32_t _12192_ = _6636_p0;
                  int32_t _12193_ = _6637_p1;
                  for (int32_t _6641_k = _12192_; _6641_k < _12193_; ++_6641_k)
                  {
                    {
                      _ptr__6618_ri64[safe_add( _6610_rnidxs_base,_6639_b )] = _ptr__6588_wi64[safe_add( _ptr__6578_nidxs_base[_6634_i],_6641_k )];
                      _ptr__6619_rf64[safe_add( _6613_rcof_base,_6639_b )] = (((*w)(_6634_i)) * _ptr__6589_wf64[safe_add( _ptr__6580_cof_base[_6634_i],_6641_k )]);
                      if (_6597_anycodeatom)
                      {
                        {
                          if ((_ptr__6576_ncodeatom[_6634_i] > (int)0))
                          {
                            {
                              int32_t _12194_ = _ptr__6587_wi32[safe_add( _ptr__6583_codeptr[_6634_i],_6641_k )];
                              int32_t _12195_ = _ptr__6587_wi32[safe_add( safe_add( _ptr__6583_codeptr[_6634_i],_6641_k ),(int)1 )];
                              for (int32_t _6642_l = _12194_; _6642_l < _12195_; ++_6642_l)
                              {
                                {
                                  _ptr__6617_ri32[safe_add( _6614_rcode,_6640_codei )] = _ptr__6587_wi32[safe_add( _ptr__6582_code[_6634_i],_6642_l )];
                                  _ptr__6619_rf64[safe_add( _6616_rcconst,_6640_codei )] = _ptr__6589_wf64[safe_add( _ptr__6584_cconst[_6634_i],_6642_l )];
                                  ++ _6640_codei;
                                }
                              }
                              _ptr__6617_ri32[safe_add( _6614_rcode,_6640_codei )] = 2;
                              _ptr__6619_rf64[safe_add( _6616_rcconst,_6640_codei )] = ((*w)(_6634_i));
                              ++ _6640_codei;
                              _ptr__6617_ri32[safe_add( _6614_rcode,_6640_codei )] = 5;
                              ++ _6640_codei;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6617_ri32[safe_add( _6614_rcode,_6640_codei )] = 2;
                              _ptr__6619_rf64[safe_add( _6616_rcconst,_6640_codei )] = 0.0;
                              ++ _6640_codei;
                            }
                          }
                          _ptr__6617_ri32[safe_add( safe_add( _6615_rcodeptr,_6639_b ),(int)1 )] = _6640_codei;
                        }
                      }
                      {}
                      ++ _6639_b;
                    }
                  }
                  if (_6597_anycodeatom)
                  {
                    {
                      _ptr__6623_xi32[safe_add( _6622_xcodeptr,_6638_rii )] = _6640_codei;
                    }
                  }
                  {}
                  _ptr__6617_ri32[safe_add( _6609_rptr_base,_6638_rii )] += (_6637_p1 - _6636_p0);
                }
              }
            }
          }
          else
          {
            {
              int32_t _12196_ = (int)0;
              int32_t _12197_ = _ptr__6574_nelem[_6634_i];
              for (int32_t _6643_j = _12196_; _6643_j < _12197_; ++_6643_j)
              {
                {
                  int32_t _6644_p0 = _ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6634_i],_6643_j )];
                  int32_t _6645_p1 = _ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6634_i],_6643_j ),(int)1 )];
                  int32_t _6646_rii = _6643_j;
                  int32_t _6647_b = _ptr__6617_ri32[safe_add( _6609_rptr_base,_6646_rii )];
                  int32_t _12198_;
                  bool _12199_ = _6597_anycodeatom;
                  if (_12199_)
                  {
                    _12198_ = _ptr__6623_xi32[safe_add( _6622_xcodeptr,_6646_rii )];
                  }
                  else
                  {
                    _12198_ = (-(int)10000);
                  }
                  int32_t _6648_codei = _12198_;
                  int32_t _12200_ = _6644_p0;
                  int32_t _12201_ = _6645_p1;
                  for (int32_t _6649_k = _12200_; _6649_k < _12201_; ++_6649_k)
                  {
                    {
                      _ptr__6618_ri64[safe_add( _6610_rnidxs_base,_6647_b )] = _ptr__6588_wi64[safe_add( _ptr__6578_nidxs_base[_6634_i],_6649_k )];
                      _ptr__6619_rf64[safe_add( _6613_rcof_base,_6647_b )] = (((*w)(_6634_i)) * _ptr__6589_wf64[safe_add( _ptr__6580_cof_base[_6634_i],_6649_k )]);
                      if (_6597_anycodeatom)
                      {
                        {
                          if ((_ptr__6576_ncodeatom[_6634_i] > (int)0))
                          {
                            {
                              int32_t _12202_ = _ptr__6587_wi32[safe_add( _ptr__6583_codeptr[_6634_i],_6649_k )];
                              int32_t _12203_ = _ptr__6587_wi32[safe_add( safe_add( _ptr__6583_codeptr[_6634_i],_6649_k ),(int)1 )];
                              for (int32_t _6650_l = _12202_; _6650_l < _12203_; ++_6650_l)
                              {
                                {
                                  _ptr__6617_ri32[safe_add( _6614_rcode,_6648_codei )] = _ptr__6587_wi32[safe_add( _ptr__6582_code[_6634_i],_6650_l )];
                                  _ptr__6619_rf64[safe_add( _6616_rcconst,_6648_codei )] = _ptr__6589_wf64[safe_add( _ptr__6584_cconst[_6634_i],_6650_l )];
                                  ++ _6648_codei;
                                }
                              }
                              _ptr__6617_ri32[safe_add( _6614_rcode,_6648_codei )] = 2;
                              _ptr__6619_rf64[safe_add( _6616_rcconst,_6648_codei )] = ((*w)(_6634_i));
                              ++ _6648_codei;
                              _ptr__6617_ri32[safe_add( _6614_rcode,_6648_codei )] = 5;
                              ++ _6648_codei;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6617_ri32[safe_add( _6614_rcode,_6648_codei )] = 2;
                              _ptr__6619_rf64[safe_add( _6616_rcconst,_6648_codei )] = 0.0;
                              ++ _6648_codei;
                            }
                          }
                          _ptr__6617_ri32[safe_add( safe_add( _6615_rcodeptr,_6647_b ),(int)1 )] = _6648_codei;
                        }
                      }
                      {}
                      ++ _6647_b;
                    }
                  }
                  if (_6597_anycodeatom)
                  {
                    {
                      _ptr__6623_xi32[safe_add( _6622_xcodeptr,_6646_rii )] = _6648_codei;
                    }
                  }
                  {}
                  _ptr__6617_ri32[safe_add( _6609_rptr_base,_6646_rii )] += (_6645_p1 - _6644_p0);
                }
              }
            }
          }
        }
      }
      int32_t _12204_ = (int)0;
      int32_t _12205_ = _6600_rnelem;
      for (int32_t _6651_i = _12204_; _6651_i < _12205_; ++_6651_i)
      {
        {
          _ptr__6617_ri32[(safe_add( _6609_rptr_base,_6600_rnelem ) - _6651_i)] = _ptr__6617_ri32[((safe_add( _6609_rptr_base,_6600_rnelem ) - _6651_i) - (int)1)];
        }
      }
      _ptr__6617_ri32[_6609_rptr_base] = (int)0;
    }
  }
  else
  {
    {
      bool _6652_done = false;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6653_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6571_n)));
      _checked_ptr_1<int32_t> _ptr__6653_ii(_6653_ii ? _6653_ii->raw() : nullptr,_6653_ii ? _6653_ii->size(0) : 0);
      int32_t _6654_codei = (int)0;
      int32_t _6655_kelm = (int)0;
      int32_t _6656_knz = (int)0;
      while ( (!_6652_done) )
      {
        {
          int64_t _6657_idx = (-(int)1);
          int32_t _12206_ = (int)0;
          int32_t _12207_ = _6571_n;
          for (int32_t _6658_j = _12206_; _6658_j < _12207_; ++_6658_j)
          {
            {
              if (((_ptr__6653_ii[_6658_j] < _ptr__6574_nelem[_6658_j]) && ((_6657_idx < (int)0) || (_ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6658_j],_ptr__6653_ii[_6658_j] )] < _6657_idx))))
              {
                {
                  _6657_idx = _ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6658_j],_ptr__6653_ii[_6658_j] )];
                }
              }
              {}
            }
          }
          if ((_6657_idx < (int)0))
          {
            {
              _6652_done = true;
            }
          }
          else
          {
            {
              int32_t _12208_ = (int)0;
              int32_t _12209_ = _6571_n;
              for (int32_t _6659_j = _12208_; _6659_j < _12209_; ++_6659_j)
              {
                {
                  if (((_ptr__6653_ii[_6659_j] < _ptr__6574_nelem[_6659_j]) && (_6657_idx == _ptr__6588_wi64[safe_add( _ptr__6579_sp_base[_6659_j],_ptr__6653_ii[_6659_j] )])))
                  {
                    {
                      int32_t _12210_ = _ptr__6587_wi32[safe_add( _ptr__6577_ptr_base[_6659_j],_ptr__6653_ii[_6659_j] )];
                      int32_t _12211_ = _ptr__6587_wi32[safe_add( safe_add( _ptr__6577_ptr_base[_6659_j],_ptr__6653_ii[_6659_j] ),(int)1 )];
                      for (int32_t _6660_k = _12210_; _6660_k < _12211_; ++_6660_k)
                      {
                        {
                          _ptr__6618_ri64[safe_add( _6610_rnidxs_base,_6656_knz )] = _ptr__6588_wi64[safe_add( _ptr__6578_nidxs_base[_6659_j],_6660_k )];
                          _ptr__6619_rf64[safe_add( _6613_rcof_base,_6656_knz )] = (((*w)(_6659_j)) * _ptr__6589_wf64[safe_add( _ptr__6580_cof_base[_6659_j],_6660_k )]);
                          if (_6597_anycodeatom)
                          {
                            {
                              if ((_ptr__6576_ncodeatom[_6659_j] > (int)0))
                              {
                                {
                                  int32_t _12212_ = _ptr__6587_wi32[safe_add( _ptr__6583_codeptr[_6659_j],_6660_k )];
                                  int32_t _12213_ = _ptr__6587_wi32[safe_add( safe_add( _ptr__6583_codeptr[_6659_j],_6660_k ),(int)1 )];
                                  for (int32_t _6661_l = _12212_; _6661_l < _12213_; ++_6661_l)
                                  {
                                    {
                                      _ptr__6617_ri32[safe_add( _6614_rcode,_6654_codei )] = _ptr__6587_wi32[safe_add( _ptr__6582_code[_6659_j],_6661_l )];
                                      _ptr__6619_rf64[safe_add( _6616_rcconst,_6654_codei )] = _ptr__6589_wf64[safe_add( _ptr__6584_cconst[_6659_j],_6661_l )];
                                      ++ _6654_codei;
                                    }
                                  }
                                  _ptr__6617_ri32[safe_add( _6614_rcode,_6654_codei )] = 2;
                                  _ptr__6619_rf64[safe_add( _6616_rcconst,_6654_codei )] = ((*w)(_6659_j));
                                  ++ _6654_codei;
                                  _ptr__6617_ri32[safe_add( _6614_rcode,_6654_codei )] = 5;
                                  ++ _6654_codei;
                                }
                              }
                              else
                              {
                                {
                                  _ptr__6617_ri32[safe_add( _6614_rcode,_6654_codei )] = 2;
                                  _ptr__6619_rf64[safe_add( _6616_rcconst,_6654_codei )] = 0.0;
                                  ++ _6654_codei;
                                }
                              }
                              _ptr__6617_ri32[safe_add( safe_add( _6615_rcodeptr,_6656_knz ),(int)1 )] = _6654_codei;
                            }
                          }
                          {}
                          ++ _6656_knz;
                        }
                      }
                      ++ _ptr__6653_ii[_6659_j];
                    }
                  }
                  {}
                }
              }
              _ptr__6617_ri32[safe_add( safe_add( _6609_rptr_base,_6655_kelm ),(int)1 )] = _6656_knz;
              _ptr__6618_ri64[safe_add( _6611_rsp_base,_6655_kelm )] = _6657_idx;
            }
          }
          ++ _6655_kelm;
        }
      }
    }
  }
  _6570_xs->clear();
}
// End mosek.fusion.ExprWSum.eval

// Begin mosek.fusion.ExprWSum.toString
// Method mosek.fusion.ExprWSum.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:371:6-380:7
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprWSum::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6662_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprWSum(["));
  _6662_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)((int)0))->toString());
  int32_t _12214_ = (int)1;
  int32_t _12215_ = (int)((es)->size(0));
  for (int32_t _6663_i = _12214_; _6663_i < _12215_; ++_6663_i)
  {
    {
      _6662_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)(_6663_i))->toString());
    }
  }
  _6662_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _6662_sb->toString();
}
// End mosek.fusion.ExprWSum.toString

void mosek::fusion::p_ExprWSum::destroy()
{
  w.reset();
  es.reset();
}
void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }
// } class ExprWSum
// class ExprSumReduce { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:9:4-352:5
mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }
mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSumReduce::p_ExprSumReduce
  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSumReduce.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:22:6-30:7
mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce
  (int32_t _6664_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6665_expr)
{ return new mosek::fusion::ExprSumReduce(_6664_dim,_6665_expr); }
mosek::fusion::ExprSumReduce::ExprSumReduce
  (int32_t _6664_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6665_expr) : 
   ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this))
{ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_6664_dim,_6665_expr); }
void mosek::fusion::p_ExprSumReduce::_initialize  (int32_t _6664_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6665_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6665_expr->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::p_ExprSumReduce::computeShape(_6664_dim,_6665_expr->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _6665_expr;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _6664_dim;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6666_shape = _6665_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__6666_shape(_6666_shape ? _6666_shape->raw() : nullptr,_6666_shape ? _6666_shape->size(0) : 0);
    if (((int)((_6666_shape)->size(0)) <= _6664_dim))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprSumReduce.ctor

// Begin mosek.fusion.ExprSumReduce.eval
// Method mosek.fusion.ExprSumReduce.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:32:6-235:7
void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6667_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6668_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6669_xs) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_6667_rs,_6668_ws,_6669_xs); }
void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6667_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6668_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6669_xs)
{
  expr->eval(_6668_ws,_6667_rs,_6669_xs);
  _6668_ws->pop_expr();
  int32_t _6670_nd = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->nd;
  int32_t _6671_shape_base = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->shape_base;
  int32_t _6672_nelem = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->nelem;
  int32_t _6673_nnz = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->nnz;
  int32_t _6674_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->ncodeatom;
  bool _6675_hassp = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->hassp;
  int32_t _6676_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->ptr_base;
  int32_t _6677_sp_base = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->sp_base;
  int32_t _6678_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->nidxs_base;
  int32_t _6679_cof_base = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->cof_base;
  int32_t _6680_code = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->code_base;
  int32_t _6681_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->codeptr_base;
  int32_t _6682_cconst = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6683_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6683_wi32(_6683_wi32 ? _6683_wi32->raw() : nullptr,_6683_wi32 ? _6683_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6684_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6684_wi64(_6684_wi64 ? _6684_wi64->raw() : nullptr,_6684_wi64 ? _6684_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6685_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6668_ws)->f64;
  _checked_ptr_1<double> _ptr__6685_wf64(_6685_wf64 ? _6685_wf64->raw() : nullptr,_6685_wf64 ? _6685_wf64->size(0) : 0);
  int32_t _6686_ptr = (int)99999;
  int32_t _6687_perm1 = (int)99999;
  int32_t _6688_perm2 = (int)99999;
  if (_6675_hassp)
  {
    {
      int32_t _6689_dimmax = (int)0;
      int32_t _12216_ = (int)0;
      int32_t _12217_ = _6670_nd;
      for (int32_t _6690_i = _12216_; _6690_i < _12217_; ++_6690_i)
      {
        {
          if ((_6689_dimmax < _ptr__6683_wi32[safe_add( _6671_shape_base,_6690_i )]))
          {
            {
              _6689_dimmax = _ptr__6683_wi32[safe_add( _6671_shape_base,_6690_i )];
            }
          }
          {}
        }
      }
      _6686_ptr = _6669_xs->alloci32(safe_add( _6689_dimmax,(int)1 ));
      _6687_perm1 = _6669_xs->alloci32(_6672_nelem);
      _6688_perm2 = _6669_xs->alloci32(_6672_nelem);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6691_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6669_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6691_xi32(_6691_xi32 ? _6691_xi32->raw() : nullptr,_6691_xi32 ? _6691_xi32->size(0) : 0);
  if (_6675_hassp)
  {
    {
      int32_t _6692_curperm = _6687_perm1;
      int32_t _6693_tgtperm = _6688_perm2;
      int32_t _12218_ = (int)0;
      int32_t _12219_ = _6672_nelem;
      for (int32_t _6694_i = _12218_; _6694_i < _12219_; ++_6694_i)
      {
        {
          _ptr__6691_xi32[safe_add( _6692_curperm,_6694_i )] = _6694_i;
        }
      }
      if ((dim < (_6670_nd - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6695_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_6670_nd)));
          _checked_ptr_1<int64_t> _ptr__6695_s(_6695_s ? _6695_s->raw() : nullptr,_6695_s ? _6695_s->size(0) : 0);
          _ptr__6695_s[(_6670_nd - (int)1)] = (int)1;
          int32_t _12220_ = (int)1;
          int32_t _12221_ = _6670_nd;
          for (int32_t _6696_i = _12220_; _6696_i < _12221_; ++_6696_i)
          {
            {
              _ptr__6695_s[((_6670_nd - _6696_i) - (int)1)] = safe_mul( _ptr__6695_s[(_6670_nd - _6696_i)],_ptr__6683_wi32[(safe_add( _6671_shape_base,_6670_nd ) - _6696_i)] );
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6697_sortdims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((_6670_nd - (int)1))));
          _checked_ptr_1<int32_t> _ptr__6697_sortdims(_6697_sortdims ? _6697_sortdims->raw() : nullptr,_6697_sortdims ? _6697_sortdims->size(0) : 0);
          int32_t _12222_ = (int)0;
          int32_t _12223_ = dim;
          for (int32_t _6698_i = _12222_; _6698_i < _12223_; ++_6698_i)
          {
            {
              _ptr__6697_sortdims[((_6670_nd - _6698_i) - (int)2)] = _6698_i;
            }
          }
          int32_t _12224_ = safe_add( dim,(int)1 );
          int32_t _12225_ = _6670_nd;
          for (int32_t _6699_i = _12224_; _6699_i < _12225_; ++_6699_i)
          {
            {
              _ptr__6697_sortdims[((_6670_nd - _6699_i) - (int)1)] = _6699_i;
            }
          }
          int32_t _12226_ = (int)0;
          int32_t _12227_ = (_6670_nd - (int)1);
          for (int32_t _6700_ii = _12226_; _6700_ii < _12227_; ++_6700_ii)
          {
            {
              int32_t _6701_k = _ptr__6697_sortdims[_6700_ii];
              int32_t _6702_dk = _ptr__6683_wi32[safe_add( _6671_shape_base,_6701_k )];
              int32_t _12228_ = (int)0;
              int32_t _12229_ = safe_add( _6702_dk,(int)1 );
              for (int32_t _6703_i = _12228_; _6703_i < _12229_; ++_6703_i)
              {
                {
                  _ptr__6691_xi32[safe_add( _6686_ptr,_6703_i )] = (int)0;
                }
              }
              int32_t _12230_ = (int)0;
              int32_t _12231_ = _6672_nelem;
              for (int32_t _6704_i = _12230_; _6704_i < _12231_; ++_6704_i)
              {
                {
                  ++ _ptr__6691_xi32[safe_add( safe_add( _6686_ptr,(int)1 ),((_ptr__6684_wi64[safe_add( _6677_sp_base,_6704_i )] / _ptr__6695_s[_6701_k]) % _6702_dk) )];
                }
              }
              int32_t _12232_ = (int)0;
              int32_t _12233_ = _6702_dk;
              for (int32_t _6705_i = _12232_; _6705_i < _12233_; ++_6705_i)
              {
                {
                  _ptr__6691_xi32[safe_add( safe_add( _6686_ptr,_6705_i ),(int)1 )] += _ptr__6691_xi32[safe_add( _6686_ptr,_6705_i )];
                }
              }
              int32_t _12234_ = (int)0;
              int32_t _12235_ = _6672_nelem;
              for (int32_t _6706_ii = _12234_; _6706_ii < _12235_; ++_6706_ii)
              {
                {
                  int32_t _6707_i = _ptr__6691_xi32[safe_add( _6692_curperm,_6706_ii )];
                  int64_t _6708_sub = ((_ptr__6684_wi64[safe_add( _6677_sp_base,_6707_i )] / _ptr__6695_s[_6701_k]) % _6702_dk);
                  _ptr__6691_xi32[safe_add( _6693_tgtperm,_ptr__6691_xi32[safe_add( _6686_ptr,_6708_sub )] )] = _6707_i;
                  ++ _ptr__6691_xi32[safe_add( _6686_ptr,_6708_sub )];
                }
              }
              int32_t _6709_tmp = _6693_tgtperm;
              _6693_tgtperm = _6692_curperm;
              _6692_curperm = _6709_tmp;
            }
          }
        }
      }
      {}
      int32_t _6710_d0 = (int)1;
      int32_t _12236_ = (int)0;
      int32_t _12237_ = dim;
      for (int32_t _6711_i = _12236_; _6711_i < _12237_; ++_6711_i)
      {
        {
          _6710_d0 *= _ptr__6683_wi32[safe_add( _6671_shape_base,_6711_i )];
        }
      }
      int32_t _6712_d1 = _ptr__6683_wi32[safe_add( _6671_shape_base,dim )];
      int32_t _6713_d2 = (int)1;
      int32_t _12238_ = safe_add( dim,(int)1 );
      int32_t _12239_ = _6670_nd;
      for (int32_t _6714_i = _12238_; _6714_i < _12239_; ++_6714_i)
      {
        {
          _6713_d2 *= _ptr__6683_wi32[safe_add( _6671_shape_base,_6714_i )];
        }
      }
      int32_t _6715_s0 = safe_mul( _6713_d2,_6712_d1 );
      int32_t _6716_s1 = _6713_d2;
      int32_t _6717_s2 = (int)1;
      int32_t _6718_rnelem = (int)0;
      int64_t _6719_p2 = (-(int)1);
      int64_t _6720_p0 = (-(int)1);
      int32_t _12240_ = (int)0;
      int32_t _12241_ = _6672_nelem;
      for (int32_t _6721_ii = _12240_; _6721_ii < _12241_; ++_6721_ii)
      {
        {
          int32_t _6722_i = _ptr__6691_xi32[safe_add( _6692_curperm,_6721_ii )];
          int64_t _6723_k0 = ((_ptr__6684_wi64[safe_add( _6677_sp_base,_6722_i )] / _6715_s0) % _6710_d0);
          int64_t _6724_k2 = (_ptr__6684_wi64[safe_add( _6677_sp_base,_6722_i )] % _6713_d2);
          if (((_6720_p0 != _6723_k0) || (_6719_p2 != _6724_k2)))
          {
            {
              _6720_p0 = _6723_k0;
              _6719_p2 = _6724_k2;
              ++ _6718_rnelem;
            }
          }
          {}
        }
      }
      int32_t _6725_rnd = (_6670_nd - (int)1);
      bool _6726_rhassp = (_6718_rnelem < safe_mul( _6710_d0,_6713_d2 ));
      int32_t _6727_rnnz = _6673_nnz;
      int32_t _6728_rncodeatom = _6674_ncodeatom;
      _6667_rs->alloc_expr(_6725_rnd,_6718_rnelem,_6727_rnnz,_6726_rhassp,_6728_rncodeatom);
      int32_t _6729_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->ptr_base;
      int32_t _6730_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->nidxs_base;
      int32_t _12242_;
      bool _12243_ = _6726_rhassp;
      if (_12243_)
      {
        _12242_ = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->sp_base;
      }
      else
      {
        _12242_ = _6667_rs->alloci64(_6718_rnelem);
      }
      int32_t _6731_rsp_base = _12242_;
      int32_t _6732_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->cof_base;
      int32_t _6733_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->shape_base;
      int32_t _6734_rcode = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->code_base;
      int32_t _6735_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->codeptr_base;
      int32_t _6736_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6737_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6737_ri32(_6737_ri32 ? _6737_ri32->raw() : nullptr,_6737_ri32 ? _6737_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6738_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6738_ri64(_6738_ri64 ? _6738_ri64->raw() : nullptr,_6738_ri64 ? _6738_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6739_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->f64;
      _checked_ptr_1<double> _ptr__6739_rf64(_6739_rf64 ? _6739_rf64->raw() : nullptr,_6739_rf64 ? _6739_rf64->size(0) : 0);
      int32_t _12244_ = (int)0;
      int32_t _12245_ = dim;
      for (int32_t _6740_i = _12244_; _6740_i < _12245_; ++_6740_i)
      {
        {
          _ptr__6737_ri32[safe_add( _6733_rshape_base,_6740_i )] = _ptr__6683_wi32[safe_add( _6671_shape_base,_6740_i )];
        }
      }
      int32_t _12246_ = safe_add( dim,(int)1 );
      int32_t _12247_ = _6670_nd;
      for (int32_t _6741_i = _12246_; _6741_i < _12247_; ++_6741_i)
      {
        {
          _ptr__6737_ri32[(safe_add( _6733_rshape_base,_6741_i ) - (int)1)] = _ptr__6683_wi32[safe_add( _6671_shape_base,_6741_i )];
        }
      }
      _ptr__6737_ri32[_6729_rptr_base] = (int)0;
      if ((_6728_rncodeatom > (int)0))
      {
        {
          _ptr__6737_ri32[_6735_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _6742_codei = (int)0;
      int32_t _6743_kelm = (int)0;
      int32_t _6744_knz = (int)0;
      int32_t _6745_ii = (int)0;
      while ( (_6745_ii < _6672_nelem) )
      {
        {
          int32_t _6746_b = _6745_ii;
          int64_t _6747_p0 = ((_ptr__6684_wi64[safe_add( _6677_sp_base,_ptr__6691_xi32[safe_add( _6692_curperm,_6746_b )] )] / _6715_s0) % _6710_d0);
          int64_t _6748_p2 = (_ptr__6684_wi64[safe_add( _6677_sp_base,_ptr__6691_xi32[safe_add( _6692_curperm,_6746_b )] )] % _6713_d2);
          ++ _6745_ii;
          while ( ((_6745_ii < _6672_nelem) && ((_6747_p0 == ((_ptr__6684_wi64[safe_add( _6677_sp_base,_ptr__6691_xi32[safe_add( _6692_curperm,_6745_ii )] )] / _6715_s0) % _6710_d0)) && (_6748_p2 == (_ptr__6684_wi64[safe_add( _6677_sp_base,_ptr__6691_xi32[safe_add( _6692_curperm,_6745_ii )] )] % _6713_d2)))) )
          {
            {
              ++ _6745_ii;
            }
          }
          int32_t _12248_ = _6746_b;
          int32_t _12249_ = _6745_ii;
          for (int32_t _6749_kk = _12248_; _6749_kk < _12249_; ++_6749_kk)
          {
            {
              int32_t _6750_k = _ptr__6691_xi32[safe_add( _6692_curperm,_6749_kk )];
              int32_t _12250_ = _ptr__6683_wi32[safe_add( _6676_ptr_base,_6750_k )];
              int32_t _12251_ = _ptr__6683_wi32[safe_add( safe_add( _6676_ptr_base,_6750_k ),(int)1 )];
              for (int32_t _6751_j = _12250_; _6751_j < _12251_; ++_6751_j)
              {
                {
                  _ptr__6738_ri64[safe_add( _6730_rnidxs_base,_6744_knz )] = _ptr__6684_wi64[safe_add( _6678_nidxs_base,_6751_j )];
                  _ptr__6739_rf64[safe_add( _6732_rcof_base,_6744_knz )] = _ptr__6685_wf64[safe_add( _6679_cof_base,_6751_j )];
                  if ((_6728_rncodeatom > (int)0))
                  {
                    {
                      int32_t _12252_ = _ptr__6683_wi32[safe_add( _6681_codeptr,_6751_j )];
                      int32_t _12253_ = _ptr__6683_wi32[safe_add( safe_add( _6681_codeptr,_6751_j ),(int)1 )];
                      for (int32_t _6752_l = _12252_; _6752_l < _12253_; ++_6752_l)
                      {
                        {
                          _ptr__6737_ri32[safe_add( _6734_rcode,_6742_codei )] = _ptr__6683_wi32[safe_add( _6680_code,_6752_l )];
                          _ptr__6739_rf64[safe_add( _6736_rcconst,_6742_codei )] = _ptr__6685_wf64[safe_add( _6682_cconst,_6752_l )];
                          ++ _6742_codei;
                        }
                      }
                      _ptr__6737_ri32[safe_add( safe_add( _6735_rcodeptr,_6744_knz ),(int)1 )] = _6742_codei;
                    }
                  }
                  {}
                  ++ _6744_knz;
                }
              }
            }
          }
          _ptr__6738_ri64[safe_add( _6731_rsp_base,_6743_kelm )] = safe_add( safe_mul( _6747_p0,_6713_d2 ),_6748_p2 );
          _ptr__6737_ri32[safe_add( safe_add( _6729_rptr_base,_6743_kelm ),(int)1 )] = _6744_knz;
          ++ _6743_kelm;
        }
      }
      if ((!_6726_rhassp))
      {
        {
          _6667_rs->popi64(_6718_rnelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _6753_d0 = (int)1;
      int32_t _12254_ = (int)0;
      int32_t _12255_ = dim;
      for (int32_t _6754_i = _12254_; _6754_i < _12255_; ++_6754_i)
      {
        {
          _6753_d0 *= _ptr__6683_wi32[safe_add( _6671_shape_base,_6754_i )];
        }
      }
      int32_t _6755_d1 = _ptr__6683_wi32[safe_add( _6671_shape_base,dim )];
      int32_t _6756_d2 = (int)1;
      int32_t _12256_ = safe_add( dim,(int)1 );
      int32_t _12257_ = _6670_nd;
      for (int32_t _6757_i = _12256_; _6757_i < _12257_; ++_6757_i)
      {
        {
          _6756_d2 *= _ptr__6683_wi32[safe_add( _6671_shape_base,_6757_i )];
        }
      }
      int32_t _6758_s0 = safe_mul( _6756_d2,_6755_d1 );
      int32_t _6759_s1 = _6756_d2;
      int32_t _6760_s2 = (int)1;
      int32_t _6761_rnelem = safe_mul( _6753_d0,_6756_d2 );
      int32_t _6762_rnnz = _6673_nnz;
      int32_t _6763_rncodeatom = _6674_ncodeatom;
      _6667_rs->alloc_expr((_6670_nd - (int)1),_6761_rnelem,_6762_rnnz,false,_6763_rncodeatom);
      int32_t _6764_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->ptr_base;
      int32_t _6765_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->nidxs_base;
      int32_t _6766_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->cof_base;
      int32_t _6767_rshape = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->shape_base;
      int32_t _6768_rcode = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->code_base;
      int32_t _6769_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->codeptr_base;
      int32_t _6770_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6771_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6771_ri32(_6771_ri32 ? _6771_ri32->raw() : nullptr,_6771_ri32 ? _6771_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6772_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6772_ri64(_6772_ri64 ? _6772_ri64->raw() : nullptr,_6772_ri64 ? _6772_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6773_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6667_rs)->f64;
      _checked_ptr_1<double> _ptr__6773_rf64(_6773_rf64 ? _6773_rf64->raw() : nullptr,_6773_rf64 ? _6773_rf64->size(0) : 0);
      int32_t _12258_ = (int)0;
      int32_t _12259_ = dim;
      for (int32_t _6774_i = _12258_; _6774_i < _12259_; ++_6774_i)
      {
        {
          _ptr__6771_ri32[safe_add( _6767_rshape,_6774_i )] = _ptr__6683_wi32[safe_add( _6671_shape_base,_6774_i )];
        }
      }
      int32_t _12260_ = safe_add( dim,(int)1 );
      int32_t _12261_ = _6670_nd;
      for (int32_t _6775_i = _12260_; _6775_i < _12261_; ++_6775_i)
      {
        {
          _ptr__6771_ri32[(safe_add( _6767_rshape,_6775_i ) - (int)1)] = _ptr__6683_wi32[safe_add( _6671_shape_base,_6775_i )];
        }
      }
      int32_t _6776_kelm = (int)0;
      int32_t _6777_knz = (int)0;
      _ptr__6771_ri32[_6764_rptr_base] = (int)0;
      if ((_6763_rncodeatom > (int)0))
      {
        {
          _ptr__6771_ri32[_6769_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _6778_codei = (int)0;
      int32_t _12262_ = (int)0;
      int32_t _12263_ = _6753_d0;
      for (int32_t _6779_i0 = _12262_; _6779_i0 < _12263_; ++_6779_i0)
      {
        {
          int32_t _12264_ = (int)0;
          int32_t _12265_ = _6756_d2;
          for (int32_t _6780_i2 = _12264_; _6780_i2 < _12265_; ++_6780_i2)
          {
            {
              int32_t _12266_ = (int)0;
              int32_t _12267_ = _6755_d1;
              for (int32_t _6781_i1 = _12266_; _6781_i1 < _12267_; ++_6781_i1)
              {
                {
                  int32_t _6782_i = safe_add( safe_add( safe_mul( _6779_i0,_6758_s0 ),safe_mul( _6781_i1,_6759_s1 ) ),_6780_i2 );
                  int32_t _12268_ = _ptr__6683_wi32[safe_add( _6676_ptr_base,_6782_i )];
                  int32_t _12269_ = _ptr__6683_wi32[safe_add( safe_add( _6676_ptr_base,_6782_i ),(int)1 )];
                  for (int32_t _6783_k = _12268_; _6783_k < _12269_; ++_6783_k)
                  {
                    {
                      _ptr__6772_ri64[safe_add( _6765_rnidxs_base,_6777_knz )] = _ptr__6684_wi64[safe_add( _6678_nidxs_base,_6783_k )];
                      _ptr__6773_rf64[safe_add( _6766_rcof_base,_6777_knz )] = _ptr__6685_wf64[safe_add( _6679_cof_base,_6783_k )];
                      if ((_6763_rncodeatom > (int)0))
                      {
                        {
                          int32_t _12270_ = _ptr__6683_wi32[safe_add( _6681_codeptr,_6783_k )];
                          int32_t _12271_ = _ptr__6683_wi32[safe_add( safe_add( _6681_codeptr,_6783_k ),(int)1 )];
                          for (int32_t _6784_l = _12270_; _6784_l < _12271_; ++_6784_l)
                          {
                            {
                              _ptr__6771_ri32[safe_add( _6768_rcode,_6778_codei )] = _ptr__6683_wi32[safe_add( _6680_code,_6784_l )];
                              _ptr__6773_rf64[safe_add( _6770_rcconst,_6778_codei )] = _ptr__6685_wf64[safe_add( _6682_cconst,_6784_l )];
                              ++ _6778_codei;
                            }
                          }
                          _ptr__6771_ri32[safe_add( safe_add( _6769_rcodeptr,_6777_knz ),(int)1 )] = _6778_codei;
                        }
                      }
                      {}
                      ++ _6777_knz;
                    }
                  }
                }
              }
              _ptr__6771_ri32[safe_add( safe_add( _6764_rptr_base,_6776_kelm ),(int)1 )] = _6777_knz;
              ++ _6776_kelm;
            }
          }
        }
      }
    }
  }
  _6669_xs->clear();
}
// End mosek.fusion.ExprSumReduce.eval

// Begin mosek.fusion.ExprSumReduce.computeShape
// Method mosek.fusion.ExprSumReduce.computeShape @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:15:6-20:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int32_t _6785_dim,std::shared_ptr< monty::ndarray< int32_t,1 > > _6786_shape)
{
  _checked_ptr_1<int32_t> _ptr__6786_shape(_6786_shape ? _6786_shape->raw() : nullptr, _6786_shape ? _6786_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6787_r = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_6786_shape)->size(0)) - (int)1))));
  _checked_ptr_1<int32_t> _ptr__6787_r(_6787_r ? _6787_r->raw() : nullptr,_6787_r ? _6787_r->size(0) : 0);
  int32_t _12272_ = (int)0;
  int32_t _12273_ = _6785_dim;
  for (int32_t _6788_i = _12272_; _6788_i < _12273_; ++_6788_i)
  {
    {
      _ptr__6787_r[_6788_i] = _ptr__6786_shape[_6788_i];
    }
  }
  int32_t _12274_ = safe_add( _6785_dim,(int)1 );
  int32_t _12275_ = (int)((_6786_shape)->size(0));
  for (int32_t _6789_i = _12274_; _6789_i < _12275_; ++_6789_i)
  {
    {
      _ptr__6787_r[(_6789_i - (int)1)] = _ptr__6786_shape[_6789_i];
    }
  }
  return _6787_r;
}
// End mosek.fusion.ExprSumReduce.computeShape

// Begin mosek.fusion.ExprSumReduce.toString
// Method mosek.fusion.ExprSumReduce.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprAdd.monty:13:6-146
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSumReduce::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSumReduce("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprSumReduce.toString

void mosek::fusion::p_ExprSumReduce::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }
// } class ExprSumReduce
// class ExprScaleVecPSD { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:1563:4-1889:5
mosek::fusion::ExprScaleVecPSD::ExprScaleVecPSD(mosek::fusion::p_ExprScaleVecPSD *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScaleVecPSD()" << this << std::endl; */ }
mosek::fusion::ExprScaleVecPSD::~ExprScaleVecPSD() {  /* std::cout << "~ExprScaleVecPSD()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprScaleVecPSD::p_ExprScaleVecPSD
  (::mosek::fusion::ExprScaleVecPSD * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprScaleVecPSD.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:1568:6-1575:7
mosek::fusion::ExprScaleVecPSD::t mosek::fusion::p_ExprScaleVecPSD::_new_ExprScaleVecPSD
  (int32_t _6790_dim0,
    int32_t _6791_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6792_expr)
{ return new mosek::fusion::ExprScaleVecPSD(_6790_dim0,_6791_dim1,_6792_expr); }
mosek::fusion::ExprScaleVecPSD::ExprScaleVecPSD
  (int32_t _6790_dim0,
    int32_t _6791_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6792_expr) : 
   ExprScaleVecPSD(new mosek::fusion::p_ExprScaleVecPSD(this))
{ mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->_initialize(_6790_dim0,_6791_dim1,_6792_expr); }
void mosek::fusion::p_ExprScaleVecPSD::_initialize  (int32_t _6790_dim0,
    int32_t _6791_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6792_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6792_expr->__mosek_2fusion_2Expression__getModel(),_6792_expr->getShape());
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->expr = _6792_expr;
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->dim0 = _6790_dim0;
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->dim1 = _6791_dim1;
    if (((_6790_dim0 < (int)0) || ((_6791_dim1 < (int)0) || (_6790_dim0 == _6791_dim1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprScaleVecPSD.ctor

// Begin mosek.fusion.ExprScaleVecPSD.eval
// Method mosek.fusion.ExprScaleVecPSD.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:1577:6-1768:7
void mosek::fusion::ExprScaleVecPSD :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6793_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6794_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6795_xs) { mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->eval(_6793_rs,_6794_ws,_6795_xs); }
void mosek::fusion::p_ExprScaleVecPSD::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6793_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6794_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6795_xs)
{
  expr->eval(_6794_ws,_6793_rs,_6795_xs);
  _6794_ws->pop_expr();
  int32_t _6796_nd = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->nd;
  int32_t _6797_nnz = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->nnz;
  int32_t _6798_nelem = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->nelem;
  int32_t _6799_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->ncodeatom;
  bool _6800_hassp = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->hassp;
  int32_t _6801_shape = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->shape_base;
  int32_t _6802_ptr = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->ptr_base;
  int32_t _6803_code = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->code_base;
  int32_t _6804_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->codeptr_base;
  int32_t _6805_cconst = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->cconst_base;
  int32_t _6806_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->nidxs_base;
  int32_t _6807_sp = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->sp_base;
  int32_t _6808_cof = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6809_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6809_wi32(_6809_wi32 ? _6809_wi32->raw() : nullptr,_6809_wi32 ? _6809_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6810_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6810_wi64(_6810_wi64 ? _6810_wi64->raw() : nullptr,_6810_wi64 ? _6810_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6811_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6794_ws)->f64;
  _checked_ptr_1<double> _ptr__6811_wf64(_6811_wf64 ? _6811_wf64->raw() : nullptr,_6811_wf64 ? _6811_wf64->size(0) : 0);
  if (((dim0 >= _6796_nd) || (dim1 >= _6796_nd)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6809_wi32[safe_add( _6801_shape,dim0 )] != _ptr__6809_wi32[safe_add( _6801_shape,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  int64_t _6812_d4 = (int)1;
  int64_t _6813_d3 = (int)1;
  int64_t _6814_d2 = (int)1;
  int64_t _6815_d1 = (int)1;
  int64_t _6816_d0 = (int)1;
  int32_t _12276_;
  bool _12277_ = (dim0 < dim1);
  if (_12277_)
  {
    _12276_ = dim0;
  }
  else
  {
    _12276_ = dim1;
  }
  int32_t _6817_xdim0 = _12276_;
  int32_t _12278_;
  bool _12279_ = (dim0 < dim1);
  if (_12279_)
  {
    _12278_ = dim1;
  }
  else
  {
    _12278_ = dim0;
  }
  int32_t _6818_xdim1 = _12278_;
  int32_t _12280_ = (int)0;
  int32_t _12281_ = _6817_xdim0;
  for (int32_t _6819_i = _12280_; _6819_i < _12281_; ++_6819_i)
  {
    {
      _6816_d0 *= _ptr__6809_wi32[safe_add( _6801_shape,_6819_i )];
    }
  }
  int32_t _12282_ = safe_add( _6817_xdim0,(int)1 );
  int32_t _12283_ = _6818_xdim1;
  for (int32_t _6820_i = _12282_; _6820_i < _12283_; ++_6820_i)
  {
    {
      _6814_d2 *= _ptr__6809_wi32[safe_add( _6801_shape,_6820_i )];
    }
  }
  int32_t _12284_ = safe_add( _6818_xdim1,(int)1 );
  int32_t _12285_ = _6796_nd;
  for (int32_t _6821_i = _12284_; _6821_i < _12285_; ++_6821_i)
  {
    {
      _6812_d4 *= _ptr__6809_wi32[safe_add( _6801_shape,_6821_i )];
    }
  }
  _6815_d1 = _ptr__6809_wi32[safe_add( _6801_shape,dim0 )];
  _6813_d3 = _6815_d1;
  int32_t _12286_;
  bool _12287_ = (_6799_ncodeatom == (int)0);
  if (_12287_)
  {
    _12286_ = (int)0;
  }
  else
  {
    _12286_ = safe_add( _6799_ncodeatom,safe_mul( _6797_nnz,(int)2 ) );
  }
  int32_t _6822_rncodeatom = _12286_;
  _6793_rs->alloc_expr(_6796_nd,_6798_nelem,_6797_nnz,_6800_hassp,_6822_rncodeatom);
  int32_t _6823_rptr = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->ptr_base;
  int32_t _6824_rshape = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->shape_base;
  int32_t _6825_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->nidxs_base;
  int32_t _6826_rsp = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->sp_base;
  int32_t _6827_rcof = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->cof_base;
  int32_t _6828_rcode = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->code_base;
  int32_t _6829_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->codeptr_base;
  int32_t _6830_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6831_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6831_ri32(_6831_ri32 ? _6831_ri32->raw() : nullptr,_6831_ri32 ? _6831_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6832_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6832_ri64(_6832_ri64 ? _6832_ri64->raw() : nullptr,_6832_ri64 ? _6832_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6833_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6793_rs)->f64;
  _checked_ptr_1<double> _ptr__6833_rf64(_6833_rf64 ? _6833_rf64->raw() : nullptr,_6833_rf64 ? _6833_rf64->size(0) : 0);
  {
    ::mosek::fusion::Utils::Tools::arraycopy(_6809_wi32,_6802_ptr,_6831_ri32,_6823_rptr,safe_add( _6798_nelem,(int)1 ));
    ::mosek::fusion::Utils::Tools::arraycopy(_6809_wi32,_6801_shape,_6831_ri32,_6824_rshape,_6796_nd);
    ::mosek::fusion::Utils::Tools::arraycopy(_6810_wi64,_6806_nidxs,_6832_ri64,_6825_rnidxs,_6797_nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_6811_wf64,_6808_cof,_6833_rf64,_6827_rcof,_6797_nnz);
    if (_6800_hassp)
    {
      {
        ::mosek::fusion::Utils::Tools::arraycopy(_6810_wi64,_6807_sp,_6832_ri64,_6826_rsp,_6798_nelem);
      }
    }
    {}
  }
  double _6834_scale = ::mosek::fusion::Utils::Tools::sqrt((double)((int)2));
  if ((!_6800_hassp))
  {
    {
      int32_t _6835_k = (int)0;
      int32_t _12288_ = (int)0;
      int64_t _12289_ = _6816_d0;
      for (int64_t _6836_i0 = _12288_; _6836_i0 < _12289_; ++_6836_i0)
      {
        {
          int32_t _12290_ = (int)0;
          int64_t _12291_ = _6815_d1;
          for (int64_t _6837_i1 = _12290_; _6837_i1 < _12291_; ++_6837_i1)
          {
            {
              int32_t _12292_ = (int)0;
              int64_t _12293_ = _6814_d2;
              for (int64_t _6838_i2 = _12292_; _6838_i2 < _12293_; ++_6838_i2)
              {
                {
                  int32_t _12294_ = (int)0;
                  int64_t _12295_ = _6813_d3;
                  for (int64_t _6839_i3 = _12294_; _6839_i3 < _12295_; ++_6839_i3)
                  {
                    {
                      int32_t _12296_ = (int)0;
                      int64_t _12297_ = _6812_d4;
                      for (int64_t _6840_i4 = _12296_; _6840_i4 < _12297_; ++_6840_i4)
                      {
                        {
                          if ((_6837_i1 != _6839_i3))
                          {
                            {
                              int32_t _12298_ = _ptr__6831_ri32[safe_add( _6823_rptr,_6835_k )];
                              int32_t _12299_ = _ptr__6831_ri32[safe_add( safe_add( _6823_rptr,_6835_k ),(int)1 )];
                              for (int32_t _6841_j = _12298_; _6841_j < _12299_; ++_6841_j)
                              {
                                {
                                  _ptr__6833_rf64[safe_add( _6827_rcof,_6841_j )] *= _6834_scale;
                                }
                              }
                            }
                          }
                          {}
                          ++ _6835_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _6842_k = (int)0;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6843_d = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
      _checked_ptr_1<int64_t> _ptr__6843_d(_6843_d ? _6843_d->raw() : nullptr,_6843_d ? _6843_d->size(0) : 0);
      _ptr__6843_d[(int)4] = (int)1;
      _ptr__6843_d[(int)3] = safe_mul( _ptr__6843_d[(int)4],_6812_d4 );
      _ptr__6843_d[(int)2] = safe_mul( _ptr__6843_d[(int)3],_6813_d3 );
      _ptr__6843_d[(int)1] = safe_mul( _ptr__6843_d[(int)2],_6814_d2 );
      _ptr__6843_d[(int)0] = safe_mul( _ptr__6843_d[(int)1],_6815_d1 );
      int32_t _12300_ = (int)0;
      int32_t _12301_ = _6798_nelem;
      for (int32_t _6844_k = _12300_; _6844_k < _12301_; ++_6844_k)
      {
        {
          int64_t _6845_idx = _ptr__6810_wi64[safe_add( _6807_sp,_6844_k )];
          int64_t _6846_d3 = ((_6845_idx / _ptr__6843_d[(int)3]) % _6813_d3);
          int64_t _6847_d1 = ((_6845_idx / _ptr__6843_d[(int)1]) % _6815_d1);
          if ((_6847_d1 != _6846_d3))
          {
            {
              int32_t _12302_ = _ptr__6831_ri32[safe_add( _6823_rptr,_6844_k )];
              int32_t _12303_ = _ptr__6831_ri32[safe_add( safe_add( _6823_rptr,_6844_k ),(int)1 )];
              for (int32_t _6848_j = _12302_; _6848_j < _12303_; ++_6848_j)
              {
                {
                  _ptr__6833_rf64[safe_add( _6827_rcof,_6848_j )] *= _6834_scale;
                }
              }
            }
          }
          {}
        }
      }
    }
  }
  if ((_6799_ncodeatom != (int)0))
  {
    {
      int32_t _6849_nzi = (int)0;
      int32_t _6850_codei = (int)0;
      _ptr__6831_ri32[_6829_rcodeptr] = (int)0;
      if ((!_6800_hassp))
      {
        {
          int32_t _6851_k = (int)0;
          int32_t _12304_ = (int)0;
          int64_t _12305_ = _6816_d0;
          for (int64_t _6852_i0 = _12304_; _6852_i0 < _12305_; ++_6852_i0)
          {
            {
              int32_t _12306_ = (int)0;
              int64_t _12307_ = _6815_d1;
              for (int64_t _6853_i1 = _12306_; _6853_i1 < _12307_; ++_6853_i1)
              {
                {
                  int32_t _12308_ = (int)0;
                  int64_t _12309_ = _6814_d2;
                  for (int64_t _6854_i2 = _12308_; _6854_i2 < _12309_; ++_6854_i2)
                  {
                    {
                      int32_t _12310_ = (int)0;
                      int64_t _12311_ = _6813_d3;
                      for (int64_t _6855_i3 = _12310_; _6855_i3 < _12311_; ++_6855_i3)
                      {
                        {
                          int32_t _12312_ = (int)0;
                          int64_t _12313_ = _6812_d4;
                          for (int64_t _6856_i4 = _12312_; _6856_i4 < _12313_; ++_6856_i4)
                          {
                            {
                              double _12314_;
                              bool _12315_ = (_6853_i1 != _6855_i3);
                              if (_12315_)
                              {
                                _12314_ = _6834_scale;
                              }
                              else
                              {
                                _12314_ = 1.0;
                              }
                              double _6857_s = _12314_;
                              int32_t _12316_ = _ptr__6809_wi32[safe_add( _6802_ptr,_6851_k )];
                              int32_t _12317_ = _ptr__6809_wi32[safe_add( safe_add( _6802_ptr,_6851_k ),(int)1 )];
                              for (int32_t _6858_j = _12316_; _6858_j < _12317_; ++_6858_j)
                              {
                                {
                                  int32_t _12318_ = _ptr__6809_wi32[safe_add( _6804_codeptr,_6858_j )];
                                  int32_t _12319_ = _ptr__6809_wi32[safe_add( safe_add( _6804_codeptr,_6858_j ),(int)1 )];
                                  for (int32_t _6859_l = _12318_; _6859_l < _12319_; ++_6859_l)
                                  {
                                    {
                                      _ptr__6831_ri32[safe_add( _6828_rcode,_6850_codei )] = _ptr__6809_wi32[safe_add( _6803_code,_6859_l )];
                                      _ptr__6833_rf64[safe_add( _6830_rcconst,_6850_codei )] = _ptr__6811_wf64[safe_add( _6805_cconst,_6859_l )];
                                      ++ _6850_codei;
                                    }
                                  }
                                  _ptr__6831_ri32[safe_add( _6828_rcode,_6850_codei )] = 2;
                                  _ptr__6833_rf64[safe_add( _6830_rcconst,_6850_codei )] = _6857_s;
                                  ++ _6850_codei;
                                  _ptr__6831_ri32[safe_add( _6828_rcode,_6850_codei )] = 5;
                                  ++ _6850_codei;
                                  _ptr__6831_ri32[safe_add( safe_add( _6829_rcodeptr,_6849_nzi ),(int)1 )] = _6850_codei;
                                  ++ _6849_nzi;
                                }
                              }
                              ++ _6851_k;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _6860_k = (int)0;
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6861_d = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
          _checked_ptr_1<int64_t> _ptr__6861_d(_6861_d ? _6861_d->raw() : nullptr,_6861_d ? _6861_d->size(0) : 0);
          _ptr__6861_d[(int)4] = (int)1;
          _ptr__6861_d[(int)3] = safe_mul( _ptr__6861_d[(int)4],_6812_d4 );
          _ptr__6861_d[(int)2] = safe_mul( _ptr__6861_d[(int)3],_6813_d3 );
          _ptr__6861_d[(int)1] = safe_mul( _ptr__6861_d[(int)2],_6814_d2 );
          _ptr__6861_d[(int)0] = safe_mul( _ptr__6861_d[(int)1],_6815_d1 );
          int32_t _12320_ = (int)0;
          int32_t _12321_ = _6798_nelem;
          for (int32_t _6862_k = _12320_; _6862_k < _12321_; ++_6862_k)
          {
            {
              int64_t _6863_idx = _ptr__6810_wi64[safe_add( _6807_sp,_6862_k )];
              int64_t _6864_i3 = ((_6863_idx / _ptr__6861_d[(int)3]) % _6813_d3);
              int64_t _6865_i1 = ((_6863_idx / _ptr__6861_d[(int)1]) % _6815_d1);
              double _12322_;
              bool _12323_ = (_6865_i1 != _6864_i3);
              if (_12323_)
              {
                _12322_ = _6834_scale;
              }
              else
              {
                _12322_ = 1.0;
              }
              double _6866_s = _12322_;
              int32_t _12324_ = _ptr__6809_wi32[safe_add( _6802_ptr,_6862_k )];
              int32_t _12325_ = _ptr__6809_wi32[safe_add( safe_add( _6802_ptr,_6862_k ),(int)1 )];
              for (int32_t _6867_j = _12324_; _6867_j < _12325_; ++_6867_j)
              {
                {
                  int32_t _12326_ = _ptr__6809_wi32[safe_add( _6804_codeptr,_6867_j )];
                  int32_t _12327_ = _ptr__6809_wi32[safe_add( safe_add( _6804_codeptr,_6867_j ),(int)1 )];
                  for (int32_t _6868_l = _12326_; _6868_l < _12327_; ++_6868_l)
                  {
                    {
                      _ptr__6831_ri32[safe_add( _6828_rcode,_6850_codei )] = _ptr__6809_wi32[safe_add( _6803_code,_6868_l )];
                      _ptr__6833_rf64[safe_add( _6830_rcconst,_6850_codei )] = _ptr__6811_wf64[safe_add( _6805_cconst,_6868_l )];
                      ++ _6850_codei;
                    }
                  }
                  _ptr__6831_ri32[safe_add( _6828_rcode,_6850_codei )] = 2;
                  _ptr__6833_rf64[safe_add( _6830_rcconst,_6850_codei )] = _6866_s;
                  ++ _6850_codei;
                  _ptr__6831_ri32[safe_add( _6828_rcode,_6850_codei )] = 5;
                  ++ _6850_codei;
                  _ptr__6831_ri32[safe_add( safe_add( _6829_rcodeptr,_6849_nzi ),(int)1 )] = _6850_codei;
                  ++ _6849_nzi;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
}
// End mosek.fusion.ExprScaleVecPSD.eval

void mosek::fusion::p_ExprScaleVecPSD::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprScaleVecPSD::destroy() { mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->destroy(); }
// } class ExprScaleVecPSD
// class ExprDenseTril { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:1044:4-1554:5
mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }
mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDenseTril::p_ExprDenseTril
  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDenseTril.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:1064:6-1071:7
mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril
  (int32_t _6869_dim0,
    int32_t _6870_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6871_expr,
    int32_t _6872_unchecked_)
{ return new mosek::fusion::ExprDenseTril(_6869_dim0,_6870_dim1,_6871_expr,_6872_unchecked_); }
mosek::fusion::ExprDenseTril::ExprDenseTril
  (int32_t _6869_dim0,
    int32_t _6870_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6871_expr,
    int32_t _6872_unchecked_) : 
   ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this))
{ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6869_dim0,_6870_dim1,_6871_expr,_6872_unchecked_); }
void mosek::fusion::p_ExprDenseTril::_initialize  (int32_t _6869_dim0,
    int32_t _6870_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6871_expr,
    int32_t _6872_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6871_expr->__mosek_2fusion_2Expression__getModel(),_6871_expr->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _6871_expr;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _6869_dim0;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _6870_dim1;
  }
}
// mosek.fusion.ExprDenseTril.ctor

// mosek.fusion.ExprDenseTril.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:1051:6-1062:7
mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril
  (int32_t _6873_dim0_,
    int32_t _6874_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6875_expr)
{ return new mosek::fusion::ExprDenseTril(_6873_dim0_,_6874_dim1_,_6875_expr); }
mosek::fusion::ExprDenseTril::ExprDenseTril
  (int32_t _6873_dim0_,
    int32_t _6874_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6875_expr) : 
   ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this))
{ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6873_dim0_,_6874_dim1_,_6875_expr); }
void mosek::fusion::p_ExprDenseTril::_initialize  (int32_t _6873_dim0_,
    int32_t _6874_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6875_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprDenseTril::_initialize(_6873_dim0_,_6874_dim1_,_6875_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6876_shape = _6875_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__6876_shape(_6876_shape ? _6876_shape->raw() : nullptr,_6876_shape ? _6876_shape->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_6876_shape)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_6876_shape)->size(0))) || (_ptr__6876_shape[dim0] != _ptr__6876_shape[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprDenseTril.ctor

// Begin mosek.fusion.ExprDenseTril.eval
// Method mosek.fusion.ExprDenseTril.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:1073:6-1301:7
void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6877_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6878_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6879_xs) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_6877_rs,_6878_ws,_6879_xs); }
void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6877_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6878_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6879_xs)
{
  expr->eval(_6878_ws,_6877_rs,_6879_xs);
  _6878_ws->pop_expr();
  int32_t _6880_nd = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->nd;
  int32_t _6881_nnz = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->nnz;
  int32_t _6882_nelem = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->nelem;
  int32_t _6883_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->ncodeatom;
  bool _6884_hassp = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->hassp;
  int32_t _6885_shape = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->shape_base;
  int32_t _6886_ptr = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->ptr_base;
  int32_t _6887_code = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->code_base;
  int32_t _6888_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->codeptr_base;
  int32_t _6889_cconst = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->cconst_base;
  int32_t _6890_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->nidxs_base;
  int32_t _6891_sp = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->sp_base;
  int32_t _6892_cof = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6893_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6893_wi32(_6893_wi32 ? _6893_wi32->raw() : nullptr,_6893_wi32 ? _6893_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6894_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6894_wi64(_6894_wi64 ? _6894_wi64->raw() : nullptr,_6894_wi64 ? _6894_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6895_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6878_ws)->f64;
  _checked_ptr_1<double> _ptr__6895_wf64(_6895_wf64 ? _6895_wf64->raw() : nullptr,_6895_wf64 ? _6895_wf64->size(0) : 0);
  int32_t _12328_;
  bool _12329_ = (dim0 < dim1);
  if (_12329_)
  {
    _12328_ = dim0;
  }
  else
  {
    _12328_ = dim1;
  }
  int32_t _6896_xdim0 = _12328_;
  int32_t _12330_;
  bool _12331_ = (dim0 > dim1);
  if (_12331_)
  {
    _12330_ = dim0;
  }
  else
  {
    _12330_ = dim1;
  }
  int32_t _6897_xdim1 = _12330_;
  bool _6898_tril = (dim0 < dim1);
  if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= _6880_nd) || ((dim1 < (int)0) || (dim1 >= _6880_nd))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6893_wi32[safe_add( _6885_shape,dim0 )] != _ptr__6893_wi32[safe_add( _6885_shape,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  std::vector<int32_t> _12332_;
  for (int32_t _6900_i = (int)0, _12333_ = (int)5; _6900_i < _12333_ ; ++_6900_i)
  {
    _12332_.push_back((int)1);
  }
  auto _12334_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12332_.size()),_12332_.begin(),_12332_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6899_dim = _12334_;
  _checked_ptr_1<int32_t> _ptr__6899_dim(_6899_dim ? _6899_dim->raw() : nullptr,_6899_dim ? _6899_dim->size(0) : 0);
  int32_t _12335_ = (int)0;
  int32_t _12336_ = _6896_xdim0;
  for (int32_t _6901_i = _12335_; _6901_i < _12336_; ++_6901_i)
  {
    {
      _ptr__6899_dim[(int)0] *= _ptr__6893_wi32[safe_add( _6885_shape,_6901_i )];
    }
  }
  _ptr__6899_dim[(int)1] = _ptr__6893_wi32[safe_add( _6885_shape,dim0 )];
  int32_t _12337_ = safe_add( _6896_xdim0,(int)1 );
  int32_t _12338_ = _6897_xdim1;
  for (int32_t _6902_i = _12337_; _6902_i < _12338_; ++_6902_i)
  {
    {
      _ptr__6899_dim[(int)2] *= _ptr__6893_wi32[safe_add( _6885_shape,_6902_i )];
    }
  }
  _ptr__6899_dim[(int)3] = _ptr__6893_wi32[safe_add( _6885_shape,dim1 )];
  int32_t _12339_ = safe_add( _6897_xdim1,(int)1 );
  int32_t _12340_ = _6880_nd;
  for (int32_t _6903_i = _12339_; _6903_i < _12340_; ++_6903_i)
  {
    {
      _ptr__6899_dim[(int)4] *= _ptr__6893_wi32[safe_add( _6885_shape,_6903_i )];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6904_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int32_t> _ptr__6904_stride(_6904_stride ? _6904_stride->raw() : nullptr,_6904_stride ? _6904_stride->size(0) : 0);
  _ptr__6904_stride[(int)4] = (int)1;
  int32_t _12341_ = (int)1;
  int32_t _12342_ = (int)5;
  for (int32_t _6905_i = _12341_; _6905_i < _12342_; ++_6905_i)
  {
    {
      _ptr__6904_stride[(((int)5 - _6905_i) - (int)1)] = safe_mul( _ptr__6904_stride[((int)5 - _6905_i)],_ptr__6899_dim[((int)5 - _6905_i)] );
    }
  }
  int32_t _6906_rnnz = (int)0;
  int32_t _6907_rnelem = safe_mul( safe_mul( safe_mul( _ptr__6899_dim[(int)0],_ptr__6899_dim[(int)2] ),_ptr__6899_dim[(int)4] ),(safe_mul( _ptr__6899_dim[(int)1],safe_add( _ptr__6899_dim[(int)1],(int)1 ) ) / (int)2) );
  int32_t _6908_rncodeatom = (int)0;
  {
    if (_6884_hassp)
    {
      {
        int32_t _6909_d = _ptr__6899_dim[(int)1];
        if (_6898_tril)
        {
          {
            int32_t _12343_ = (int)0;
            int32_t _12344_ = _6882_nelem;
            for (int32_t _6910_i = _12343_; _6910_i < _12344_; ++_6910_i)
            {
              {
                int64_t _6911_subi = ((_ptr__6894_wi64[safe_add( _6891_sp,_6910_i )] / _ptr__6904_stride[(int)1]) % _6909_d);
                int64_t _6912_subj = ((_ptr__6894_wi64[safe_add( _6891_sp,_6910_i )] / _ptr__6904_stride[(int)3]) % _6909_d);
                if ((_6911_subi >= _6912_subj))
                {
                  {
                    _6906_rnnz += (_ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6910_i ),(int)1 )] - _ptr__6893_wi32[safe_add( _6886_ptr,_6910_i )]);
                    if ((_6883_ncodeatom > (int)0))
                    {
                      {
                        _6908_rncodeatom += (_ptr__6893_wi32[safe_add( _6888_codeptr,_ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6910_i ),(int)1 )] )] - _ptr__6893_wi32[safe_add( _6888_codeptr,_ptr__6893_wi32[safe_add( _6886_ptr,_6910_i )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int32_t _12345_ = (int)0;
            int32_t _12346_ = _6882_nelem;
            for (int32_t _6913_i = _12345_; _6913_i < _12346_; ++_6913_i)
            {
              {
                int64_t _6914_subi = ((_ptr__6894_wi64[safe_add( _6891_sp,_6913_i )] / _ptr__6904_stride[(int)1]) % _ptr__6899_dim[(int)1]);
                int64_t _6915_subj = ((_ptr__6894_wi64[safe_add( _6891_sp,_6913_i )] / _ptr__6904_stride[(int)3]) % _ptr__6899_dim[(int)3]);
                if ((_6914_subi <= _6915_subj))
                {
                  {
                    _6906_rnnz += (_ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6913_i ),(int)1 )] - _ptr__6893_wi32[safe_add( _6886_ptr,_6913_i )]);
                    if ((_6883_ncodeatom > (int)0))
                    {
                      {
                        _6908_rncodeatom += (_ptr__6893_wi32[safe_add( _6888_codeptr,_ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6913_i ),(int)1 )] )] - _ptr__6893_wi32[safe_add( _6888_codeptr,_ptr__6893_wi32[safe_add( _6886_ptr,_6913_i )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        if (_6898_tril)
        {
          {
            int32_t _12347_ = (int)0;
            int32_t _12348_ = _ptr__6899_dim[(int)0];
            for (int32_t _6916_i0 = _12347_; _6916_i0 < _12348_; ++_6916_i0)
            {
              {
                int32_t _12349_ = (int)0;
                int32_t _12350_ = _ptr__6899_dim[(int)1];
                for (int32_t _6917_i1 = _12349_; _6917_i1 < _12350_; ++_6917_i1)
                {
                  {
                    int32_t _12351_ = (int)0;
                    int32_t _12352_ = _ptr__6899_dim[(int)2];
                    for (int32_t _6918_i2 = _12351_; _6918_i2 < _12352_; ++_6918_i2)
                    {
                      {
                        int32_t _12353_ = (int)0;
                        int32_t _12354_ = safe_add( _6917_i1,(int)1 );
                        for (int32_t _6919_i3 = _12353_; _6919_i3 < _12354_; ++_6919_i3)
                        {
                          {
                            int32_t _12355_ = (int)0;
                            int32_t _12356_ = _ptr__6899_dim[(int)4];
                            for (int32_t _6920_i4 = _12355_; _6920_i4 < _12356_; ++_6920_i4)
                            {
                              {
                                int32_t _6921_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _6916_i0,_ptr__6904_stride[(int)0] ),safe_mul( _6917_i1,_ptr__6904_stride[(int)1] ) ),safe_mul( _6918_i2,_ptr__6904_stride[(int)2] ) ),safe_mul( _6919_i3,_ptr__6904_stride[(int)3] ) ),safe_mul( _6920_i4,_ptr__6904_stride[(int)4] ) );
                                _6906_rnnz += (_ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6921_p ),(int)1 )] - _ptr__6893_wi32[safe_add( _6886_ptr,_6921_p )]);
                                if ((_6883_ncodeatom > (int)0))
                                {
                                  {
                                    _6908_rncodeatom += (_ptr__6893_wi32[safe_add( _6888_codeptr,_ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6921_p ),(int)1 )] )] - _ptr__6893_wi32[safe_add( _6888_codeptr,_ptr__6893_wi32[safe_add( _6886_ptr,_6921_p )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int32_t _12357_ = (int)0;
            int32_t _12358_ = _ptr__6899_dim[(int)0];
            for (int32_t _6922_i0 = _12357_; _6922_i0 < _12358_; ++_6922_i0)
            {
              {
                int32_t _12359_ = (int)0;
                int32_t _12360_ = _ptr__6899_dim[(int)1];
                for (int32_t _6923_i1 = _12359_; _6923_i1 < _12360_; ++_6923_i1)
                {
                  {
                    int32_t _12361_ = (int)0;
                    int32_t _12362_ = _ptr__6899_dim[(int)2];
                    for (int32_t _6924_i2 = _12361_; _6924_i2 < _12362_; ++_6924_i2)
                    {
                      {
                        int32_t _12363_ = _6923_i1;
                        int32_t _12364_ = _ptr__6899_dim[(int)3];
                        for (int32_t _6925_i3 = _12363_; _6925_i3 < _12364_; ++_6925_i3)
                        {
                          {
                            int32_t _12365_ = (int)0;
                            int32_t _12366_ = _ptr__6899_dim[(int)4];
                            for (int32_t _6926_i4 = _12365_; _6926_i4 < _12366_; ++_6926_i4)
                            {
                              {
                                int32_t _6927_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _6922_i0,_ptr__6904_stride[(int)0] ),safe_mul( _6923_i1,_ptr__6904_stride[(int)1] ) ),safe_mul( _6924_i2,_ptr__6904_stride[(int)2] ) ),safe_mul( _6925_i3,_ptr__6904_stride[(int)3] ) ),safe_mul( _6926_i4,_ptr__6904_stride[(int)4] ) );
                                _6906_rnnz += (_ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6927_p ),(int)1 )] - _ptr__6893_wi32[safe_add( _6886_ptr,_6927_p )]);
                                if ((_6883_ncodeatom > (int)0))
                                {
                                  {
                                    _6908_rncodeatom += (_ptr__6893_wi32[safe_add( _6888_codeptr,_ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6927_p ),(int)1 )] )] - _ptr__6893_wi32[safe_add( _6888_codeptr,_ptr__6893_wi32[safe_add( _6886_ptr,_6927_p )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int32_t _6928_fullnelem = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__6899_dim[(int)0],_ptr__6899_dim[(int)2] ),_ptr__6899_dim[(int)4] ),_ptr__6899_dim[(int)1] ),safe_add( _ptr__6899_dim[(int)1],(int)1 ) ) / (int)2);
  _6877_rs->alloc_expr(_6880_nd,_6907_rnelem,_6906_rnnz,true,_6908_rncodeatom);
  int32_t _6929_rptr = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->ptr_base;
  int32_t _6930_rshape = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->shape_base;
  int32_t _6931_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->nidxs_base;
  int32_t _6932_rsp = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->sp_base;
  int32_t _6933_rcof = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->cof_base;
  int32_t _6934_rcode = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->code_base;
  int32_t _6935_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->codeptr_base;
  int32_t _6936_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6937_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6937_ri32(_6937_ri32 ? _6937_ri32->raw() : nullptr,_6937_ri32 ? _6937_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6938_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6938_ri64(_6938_ri64 ? _6938_ri64->raw() : nullptr,_6938_ri64 ? _6938_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6939_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6877_rs)->f64;
  _checked_ptr_1<double> _ptr__6939_rf64(_6939_rf64 ? _6939_rf64->raw() : nullptr,_6939_rf64 ? _6939_rf64->size(0) : 0);
  _ptr__6937_ri32[_6929_rptr] = (int)0;
  if ((_6908_rncodeatom > (int)0))
  {
    {
      _ptr__6937_ri32[_6935_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _12367_ = (int)0;
  int32_t _12368_ = _6880_nd;
  for (int32_t _6940_i = _12367_; _6940_i < _12368_; ++_6940_i)
  {
    {
      _ptr__6937_ri32[safe_add( _6930_rshape,_6940_i )] = _ptr__6893_wi32[safe_add( _6885_shape,_6940_i )];
    }
  }
  if (_6898_tril)
  {
    {
      int32_t _6941_k = (int)0;
      int32_t _12369_ = (int)0;
      int32_t _12370_ = _ptr__6899_dim[(int)0];
      for (int32_t _6942_i0 = _12369_; _6942_i0 < _12370_; ++_6942_i0)
      {
        {
          int32_t _12371_ = (int)0;
          int32_t _12372_ = _ptr__6899_dim[(int)1];
          for (int32_t _6943_i1 = _12371_; _6943_i1 < _12372_; ++_6943_i1)
          {
            {
              int32_t _12373_ = (int)0;
              int32_t _12374_ = _ptr__6899_dim[(int)2];
              for (int32_t _6944_i2 = _12373_; _6944_i2 < _12374_; ++_6944_i2)
              {
                {
                  int32_t _12375_ = (int)0;
                  int32_t _12376_ = safe_add( _6943_i1,(int)1 );
                  for (int32_t _6945_i3 = _12375_; _6945_i3 < _12376_; ++_6945_i3)
                  {
                    {
                      int32_t _12377_ = (int)0;
                      int32_t _12378_ = _ptr__6899_dim[(int)4];
                      for (int32_t _6946_i4 = _12377_; _6946_i4 < _12378_; ++_6946_i4)
                      {
                        {
                          _ptr__6938_ri64[safe_add( _6932_rsp,_6941_k )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6942_i0,_ptr__6904_stride[(int)0] ),safe_mul( _6943_i1,_ptr__6904_stride[(int)1] ) ),safe_mul( _6944_i2,_ptr__6904_stride[(int)2] ) ),safe_mul( _6945_i3,_ptr__6904_stride[(int)3] ) ),safe_mul( _6946_i4,_ptr__6904_stride[(int)4] ) );
                          ++ _6941_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6941_k != _6907_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _6947_k = (int)0;
      int32_t _12379_ = (int)0;
      int32_t _12380_ = _ptr__6899_dim[(int)0];
      for (int32_t _6948_i0 = _12379_; _6948_i0 < _12380_; ++_6948_i0)
      {
        {
          int32_t _12381_ = (int)0;
          int32_t _12382_ = _ptr__6899_dim[(int)1];
          for (int32_t _6949_i1 = _12381_; _6949_i1 < _12382_; ++_6949_i1)
          {
            {
              int32_t _12383_ = (int)0;
              int32_t _12384_ = _ptr__6899_dim[(int)2];
              for (int32_t _6950_i2 = _12383_; _6950_i2 < _12384_; ++_6950_i2)
              {
                {
                  int32_t _12385_ = _6949_i1;
                  int32_t _12386_ = _ptr__6899_dim[(int)3];
                  for (int32_t _6951_i3 = _12385_; _6951_i3 < _12386_; ++_6951_i3)
                  {
                    {
                      int32_t _12387_ = (int)0;
                      int32_t _12388_ = _ptr__6899_dim[(int)4];
                      for (int32_t _6952_i4 = _12387_; _6952_i4 < _12388_; ++_6952_i4)
                      {
                        {
                          _ptr__6938_ri64[safe_add( _6932_rsp,_6947_k )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6948_i0,_ptr__6904_stride[(int)0] ),safe_mul( _6949_i1,_ptr__6904_stride[(int)1] ) ),safe_mul( _6950_i2,_ptr__6904_stride[(int)2] ) ),safe_mul( _6951_i3,_ptr__6904_stride[(int)3] ) ),safe_mul( _6952_i4,_ptr__6904_stride[(int)4] ) );
                          ++ _6947_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6947_k != _6907_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  {
    int32_t _6953_nzi = (int)0;
    int32_t _6954_codei = (int)0;
    if (_6884_hassp)
    {
      {
        int32_t _6955_i1 = (int)0;
        int32_t _6956_i0 = (int)0;
        while ( ((_6956_i0 < _6882_nelem) && (_6955_i1 < _6928_fullnelem)) )
        {
          {
            if ((_ptr__6894_wi64[safe_add( _6891_sp,_6956_i0 )] < _ptr__6938_ri64[safe_add( _6932_rsp,_6955_i1 )]))
            {
              {
                ++ _6956_i0;
              }
            }
            else if((_ptr__6894_wi64[safe_add( _6891_sp,_6956_i0 )] > _ptr__6938_ri64[safe_add( _6932_rsp,_6955_i1 )]))
            {
              {
                _ptr__6937_ri32[safe_add( safe_add( _6929_rptr,_6955_i1 ),(int)1 )] = _6953_nzi;
                ++ _6955_i1;
              }
            }
            else
            {
              {
                int32_t _12389_ = _ptr__6893_wi32[safe_add( _6886_ptr,_6956_i0 )];
                int32_t _12390_ = _ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6956_i0 ),(int)1 )];
                for (int32_t _6957_j = _12389_; _6957_j < _12390_; ++_6957_j)
                {
                  {
                    _ptr__6938_ri64[safe_add( _6931_rnidxs,_6953_nzi )] = _ptr__6894_wi64[safe_add( _6890_nidxs,_6957_j )];
                    _ptr__6939_rf64[safe_add( _6933_rcof,_6953_nzi )] = _ptr__6895_wf64[safe_add( _6892_cof,_6957_j )];
                    if ((_6908_rncodeatom > (int)0))
                    {
                      {
                        int32_t _12391_ = _ptr__6893_wi32[safe_add( _6888_codeptr,_6957_j )];
                        int32_t _12392_ = _ptr__6893_wi32[safe_add( safe_add( _6888_codeptr,_6957_j ),(int)1 )];
                        for (int32_t _6958_k = _12391_; _6958_k < _12392_; ++_6958_k)
                        {
                          {
                            _ptr__6937_ri32[safe_add( _6934_rcode,_6954_codei )] = _ptr__6893_wi32[safe_add( _6887_code,_6958_k )];
                            _ptr__6939_rf64[safe_add( _6936_rcconst,_6954_codei )] = _ptr__6895_wf64[safe_add( _6889_cconst,_6958_k )];
                            ++ _6954_codei;
                          }
                        }
                        _ptr__6937_ri32[safe_add( safe_add( _6935_rcodeptr,_6953_nzi ),(int)1 )] = _6954_codei;
                      }
                    }
                    {}
                    ++ _6953_nzi;
                  }
                }
                _ptr__6937_ri32[safe_add( safe_add( _6929_rptr,_6955_i1 ),(int)1 )] = _6953_nzi;
                ++ _6956_i0;
                ++ _6955_i1;
              }
            }
          }
        }
        while ( (_6955_i1 < _6928_fullnelem) )
        {
          {
            _ptr__6937_ri32[safe_add( safe_add( _6929_rptr,_6955_i1 ),(int)1 )] = _6953_nzi;
            ++ _6955_i1;
          }
        }
      }
    }
    else
    {
      {
        int32_t _12393_ = (int)0;
        int32_t _12394_ = _6928_fullnelem;
        for (int32_t _6959_i = _12393_; _6959_i < _12394_; ++_6959_i)
        {
          {
            int64_t _6960_i0 = _ptr__6938_ri64[safe_add( _6932_rsp,_6959_i )];
            int32_t _12395_ = _ptr__6893_wi32[safe_add( _6886_ptr,_6960_i0 )];
            int32_t _12396_ = _ptr__6893_wi32[safe_add( safe_add( _6886_ptr,_6960_i0 ),(int)1 )];
            for (int32_t _6961_j = _12395_; _6961_j < _12396_; ++_6961_j)
            {
              {
                _ptr__6938_ri64[safe_add( _6931_rnidxs,_6953_nzi )] = _ptr__6894_wi64[safe_add( _6890_nidxs,_6961_j )];
                _ptr__6939_rf64[safe_add( _6933_rcof,_6953_nzi )] = _ptr__6895_wf64[safe_add( _6892_cof,_6961_j )];
                if ((_6908_rncodeatom > (int)0))
                {
                  {
                    int32_t _12397_ = _ptr__6893_wi32[safe_add( _6888_codeptr,_6961_j )];
                    int32_t _12398_ = _ptr__6893_wi32[safe_add( safe_add( _6888_codeptr,_6961_j ),(int)1 )];
                    for (int32_t _6962_k = _12397_; _6962_k < _12398_; ++_6962_k)
                    {
                      {
                        _ptr__6937_ri32[safe_add( _6934_rcode,_6954_codei )] = _ptr__6893_wi32[safe_add( _6887_code,_6962_k )];
                        _ptr__6939_rf64[safe_add( _6936_rcconst,_6954_codei )] = _ptr__6895_wf64[safe_add( _6889_cconst,_6962_k )];
                        ++ _6954_codei;
                      }
                    }
                    _ptr__6937_ri32[safe_add( safe_add( _6935_rcodeptr,_6953_nzi ),(int)1 )] = _6954_codei;
                  }
                }
                {}
                ++ _6953_nzi;
              }
            }
            _ptr__6937_ri32[safe_add( safe_add( _6929_rptr,_6959_i ),(int)1 )] = _6953_nzi;
          }
        }
      }
    }
    if ((_6953_nzi != _6906_rnnz))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
      }
    }
    {}
  }
}
// End mosek.fusion.ExprDenseTril.eval

// Begin mosek.fusion.ExprDenseTril.toString
// Method mosek.fusion.ExprDenseTril.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:1048:6-1050:7
std::string mosek::fusion::ExprDenseTril :: toString() { return mosek::fusion::p_ExprDenseTril::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDenseTril::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDenseTril(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDenseTril.toString

void mosek::fusion::p_ExprDenseTril::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }
// } class ExprDenseTril
// class ExprDense { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:955:4-1036:5
mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }
mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDense::p_ExprDense
  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDense.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:958:6-961:7
mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense
  (monty::rc_ptr< ::mosek::fusion::Expression > _6963_expr)
{ return new mosek::fusion::ExprDense(_6963_expr); }
mosek::fusion::ExprDense::ExprDense
  (monty::rc_ptr< ::mosek::fusion::Expression > _6963_expr) : 
   ExprDense(new mosek::fusion::p_ExprDense(this))
{ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_6963_expr); }
void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6963_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6963_expr->__mosek_2fusion_2Expression__getModel(),_6963_expr->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _6963_expr;
  }
}
// mosek.fusion.ExprDense.ctor

// Begin mosek.fusion.ExprDense.eval
// Method mosek.fusion.ExprDense.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:965:6-1032:7
void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6964_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6965_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6966_xs) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_6964_rs,_6965_ws,_6966_xs); }
void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6964_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6965_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6966_xs)
{
  expr->eval(_6965_ws,_6964_rs,_6966_xs);
  _6965_ws->pop_expr();
  int32_t _6967_nd = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->nd;
  int32_t _6968_nnz = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->nnz;
  int32_t _6969_nelem = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->nelem;
  int32_t _6970_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->ncodeatom;
  bool _6971_hassp = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->hassp;
  int32_t _6972_shape = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->shape_base;
  int32_t _6973_ptr = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->ptr_base;
  int32_t _6974_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->nidxs_base;
  int32_t _6975_cof = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->cof_base;
  int32_t _6976_sp = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->sp_base;
  int32_t _6977_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->codeptr_base;
  int32_t _6978_code = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->code_base;
  int32_t _6979_cconst = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6980_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6980_wi32(_6980_wi32 ? _6980_wi32->raw() : nullptr,_6980_wi32 ? _6980_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6981_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6981_wi64(_6981_wi64 ? _6981_wi64->raw() : nullptr,_6981_wi64 ? _6981_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6982_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6965_ws)->f64;
  _checked_ptr_1<double> _ptr__6982_wf64(_6982_wf64 ? _6982_wf64->raw() : nullptr,_6982_wf64 ? _6982_wf64->size(0) : 0);
  int32_t _6983_rnelem = (int)1;
  if (_6971_hassp)
  {
    {
      bool _6984_ok = true;
      int32_t _12399_ = (int)0;
      int32_t _12400_ = _6967_nd;
      for (int32_t _6985_i = _12399_; _6985_i < _12400_; ++_6985_i)
      {
        {
          int32_t _6986_szx = safe_mul( _6983_rnelem,_ptr__6980_wi32[safe_add( _6972_shape,_6985_i )] );
          _6984_ok = (_6984_ok && ((_ptr__6980_wi32[safe_add( _6972_shape,_6985_i )] == (int)0) || ((_6986_szx / _ptr__6980_wi32[safe_add( _6972_shape,_6985_i )]) == _6983_rnelem)));
          _6983_rnelem = _6986_szx;
        }
      }
      if ((!_6984_ok))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("The domain is too large"));
        }
      }
      {}
    }
  }
  else
  {
    {
      _6983_rnelem = _6969_nelem;
    }
  }
  _6964_rs->alloc_expr(_6967_nd,_6983_rnelem,_6968_nnz,false,_6970_ncodeatom);
  int32_t _6987_rshape = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->shape_base;
  int32_t _6988_rptr = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->ptr_base;
  int32_t _6989_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->nidxs_base;
  int32_t _6990_rcof = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->cof_base;
  int32_t _6991_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->codeptr_base;
  int32_t _6992_rcode = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->code_base;
  int32_t _6993_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6994_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6994_ri32(_6994_ri32 ? _6994_ri32->raw() : nullptr,_6994_ri32 ? _6994_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6995_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6995_ri64(_6995_ri64 ? _6995_ri64->raw() : nullptr,_6995_ri64 ? _6995_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6996_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6964_rs)->f64;
  _checked_ptr_1<double> _ptr__6996_rf64(_6996_rf64 ? _6996_rf64->raw() : nullptr,_6996_rf64 ? _6996_rf64->size(0) : 0);
  {
    int32_t _12401_ = (int)0;
    int32_t _12402_ = _6967_nd;
    for (int32_t _6997_i = _12401_; _6997_i < _12402_; ++_6997_i)
    {
      {
        _ptr__6994_ri32[safe_add( _6987_rshape,_6997_i )] = _ptr__6980_wi32[safe_add( _6972_shape,_6997_i )];
      }
    }
    int32_t _12403_ = (int)0;
    int32_t _12404_ = _6968_nnz;
    for (int32_t _6998_i = _12403_; _6998_i < _12404_; ++_6998_i)
    {
      {
        _ptr__6995_ri64[safe_add( _6989_rnidxs,_6998_i )] = _ptr__6981_wi64[safe_add( _6974_nidxs,_6998_i )];
      }
    }
    int32_t _12405_ = (int)0;
    int32_t _12406_ = _6968_nnz;
    for (int32_t _6999_i = _12405_; _6999_i < _12406_; ++_6999_i)
    {
      {
        _ptr__6996_rf64[safe_add( _6990_rcof,_6999_i )] = _ptr__6982_wf64[safe_add( _6975_cof,_6999_i )];
      }
    }
    if ((_6970_ncodeatom > (int)0))
    {
      {
        int32_t _12407_ = (int)0;
        int32_t _12408_ = safe_add( _6968_nnz,(int)1 );
        for (int32_t _7000_i = _12407_; _7000_i < _12408_; ++_7000_i)
        {
          {
            _ptr__6994_ri32[safe_add( _6991_rcodeptr,_7000_i )] = _ptr__6980_wi32[safe_add( _6977_codeptr,_7000_i )];
          }
        }
        int32_t _12409_ = (int)0;
        int32_t _12410_ = _6970_ncodeatom;
        for (int32_t _7001_i = _12409_; _7001_i < _12410_; ++_7001_i)
        {
          {
            _ptr__6994_ri32[safe_add( _6992_rcode,_7001_i )] = _ptr__6980_wi32[safe_add( _6978_code,_7001_i )];
          }
        }
        int32_t _12411_ = (int)0;
        int32_t _12412_ = _6970_ncodeatom;
        for (int32_t _7002_i = _12411_; _7002_i < _12412_; ++_7002_i)
        {
          {
            _ptr__6996_rf64[safe_add( _6993_rcconst,_7002_i )] = _ptr__6982_wf64[safe_add( _6979_cconst,_7002_i )];
          }
        }
      }
    }
    {}
    if ((!_6971_hassp))
    {
      {
        int32_t _12413_ = (int)0;
        int32_t _12414_ = safe_add( _6983_rnelem,(int)1 );
        for (int32_t _7003_i = _12413_; _7003_i < _12414_; ++_7003_i)
        {
          {
            _ptr__6994_ri32[safe_add( _6988_rptr,_7003_i )] = _ptr__6980_wi32[safe_add( _6973_ptr,_7003_i )];
          }
        }
      }
    }
    else
    {
      {
        int32_t _12415_ = (int)0;
        int32_t _12416_ = safe_add( _6983_rnelem,(int)1 );
        for (int32_t _7004_i = _12415_; _7004_i < _12416_; ++_7004_i)
        {
          {
            _ptr__6994_ri32[safe_add( _6988_rptr,_7004_i )] = (int)0;
          }
        }
        int32_t _12417_ = (int)0;
        int32_t _12418_ = _6969_nelem;
        for (int32_t _7005_i = _12417_; _7005_i < _12418_; ++_7005_i)
        {
          {
            _ptr__6994_ri32[safe_add( safe_add( _6988_rptr,_ptr__6981_wi64[safe_add( _6976_sp,_7005_i )] ),(int)1 )] = (_ptr__6980_wi32[safe_add( safe_add( _6973_ptr,_7005_i ),(int)1 )] - _ptr__6980_wi32[safe_add( _6973_ptr,_7005_i )]);
          }
        }
        int32_t _12419_ = (int)0;
        int32_t _12420_ = _6983_rnelem;
        for (int32_t _7006_i = _12419_; _7006_i < _12420_; ++_7006_i)
        {
          {
            _ptr__6994_ri32[safe_add( safe_add( _6988_rptr,_7006_i ),(int)1 )] += _ptr__6994_ri32[safe_add( _6988_rptr,_7006_i )];
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprDense.eval

// Begin mosek.fusion.ExprDense.toString
// Method mosek.fusion.ExprDense.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:963:6-127
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDense::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDense.toString

void mosek::fusion::p_ExprDense::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }
// } class ExprDense
// class ExprSymmetrize { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:224:4-948:5
mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }
mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize
  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSymmetrize.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:241:6-254:7
mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize
  (int32_t _7007_dim0,
    int32_t _7008_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7009_expr,
    int32_t _7010_unchecked_)
{ return new mosek::fusion::ExprSymmetrize(_7007_dim0,_7008_dim1,_7009_expr,_7010_unchecked_); }
mosek::fusion::ExprSymmetrize::ExprSymmetrize
  (int32_t _7007_dim0,
    int32_t _7008_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7009_expr,
    int32_t _7010_unchecked_) : 
   ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this))
{ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_7007_dim0,_7008_dim1,_7009_expr,_7010_unchecked_); }
void mosek::fusion::p_ExprSymmetrize::_initialize  (int32_t _7007_dim0,
    int32_t _7008_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7009_expr,
    int32_t _7010_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7009_expr->__mosek_2fusion_2Expression__getModel(),_7009_expr->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _7009_expr;
    if ((_7007_dim0 < _7008_dim1))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _7007_dim0;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _7008_dim1;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _7008_dim1;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _7007_dim0;
      }
    }
  }
}
// mosek.fusion.ExprSymmetrize.ctor

// mosek.fusion.ExprSymmetrize.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:233:6-239:7
mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize
  (int32_t _7011_dim0_,
    int32_t _7012_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _7013_expr)
{ return new mosek::fusion::ExprSymmetrize(_7011_dim0_,_7012_dim1_,_7013_expr); }
mosek::fusion::ExprSymmetrize::ExprSymmetrize
  (int32_t _7011_dim0_,
    int32_t _7012_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _7013_expr) : 
   ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this))
{ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_7011_dim0_,_7012_dim1_,_7013_expr); }
void mosek::fusion::p_ExprSymmetrize::_initialize  (int32_t _7011_dim0_,
    int32_t _7012_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _7013_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprSymmetrize::_initialize(_7011_dim0_,_7012_dim1_,_7013_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7014_shape = _7013_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__7014_shape(_7014_shape ? _7014_shape->raw() : nullptr,_7014_shape ? _7014_shape->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_7014_shape)->size(0))) || (_ptr__7014_shape[dim0] != _ptr__7014_shape[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprSymmetrize.ctor

// Begin mosek.fusion.ExprSymmetrize.eval
// Method mosek.fusion.ExprSymmetrize.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:256:6-788:7
void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7015_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7016_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7017_xs) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_7015_rs,_7016_ws,_7017_xs); }
void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7015_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7016_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7017_xs)
{
  expr->eval(_7016_ws,_7015_rs,_7017_xs);
  _7016_ws->pop_expr();
  int32_t _7018_dimmax = (int)0;
  int32_t _7019_nd = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->nd;
  int32_t _7020_nnz = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->nnz;
  int32_t _7021_nelem = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->nelem;
  int32_t _7022_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->ncodeatom;
  bool _7023_hassp = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->hassp;
  int32_t _7024_shape = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->shape_base;
  int32_t _7025_ptr = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->ptr_base;
  int32_t _7026_code = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->code_base;
  int32_t _7027_codeptr = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->codeptr_base;
  int32_t _7028_cconst = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->cconst_base;
  int32_t _7029_nidxs = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->nidxs_base;
  int32_t _7030_sp = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->sp_base;
  int32_t _7031_cof = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7032_wi32 = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__7032_wi32(_7032_wi32 ? _7032_wi32->raw() : nullptr,_7032_wi32 ? _7032_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7033_wi64 = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__7033_wi64(_7033_wi64 ? _7033_wi64->raw() : nullptr,_7033_wi64 ? _7033_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7034_wf64 = mosek::fusion::p_WorkStack::_get_impl(_7016_ws)->f64;
  _checked_ptr_1<double> _ptr__7034_wf64(_7034_wf64 ? _7034_wf64->raw() : nullptr,_7034_wf64 ? _7034_wf64->size(0) : 0);
  int32_t _12421_ = (int)0;
  int32_t _12422_ = _7019_nd;
  for (int32_t _7035_i = _12421_; _7035_i < _12422_; ++_7035_i)
  {
    {
      int32_t _7036_d = _ptr__7032_wi32[safe_add( _7024_shape,_7035_i )];
      if ((_7036_d > _7018_dimmax))
      {
        {
          _7018_dimmax = _7036_d;
        }
      }
      {}
    }
  }
  int32_t _7037_xperm1 = _7017_xs->alloci32(_7021_nelem);
  int32_t _7038_xperm2 = _7017_xs->alloci32(_7021_nelem);
  int32_t _7039_xptr = _7017_xs->alloci32(safe_add( _7018_dimmax,(int)1 ));
  int32_t _7040_xsp = _7017_xs->alloci64(_7021_nelem);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7041_xi32 = mosek::fusion::p_WorkStack::_get_impl(_7017_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__7041_xi32(_7041_xi32 ? _7041_xi32->raw() : nullptr,_7041_xi32 ? _7041_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7042_xi64 = mosek::fusion::p_WorkStack::_get_impl(_7017_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__7042_xi64(_7042_xi64 ? _7042_xi64->raw() : nullptr,_7042_xi64 ? _7042_xi64->size(0) : 0);
  int32_t _7043_rnelem = (int)0;
  int32_t _7044_rnnz = (int)0;
  int32_t _7045_rncodeatom = (int)0;
  if ((_ptr__7032_wi32[safe_add( _7024_shape,dim0 )] != _ptr__7032_wi32[safe_add( _7024_shape,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Symmetry dimensions are no the same"));
    }
  }
  {}
  int32_t _7046_d = _ptr__7032_wi32[safe_add( _7024_shape,dim0 )];
  std::vector<int32_t> _12423_;
  for (int32_t _7048_i = (int)0, _12424_ = (int)5; _7048_i < _12424_ ; ++_7048_i)
  {
    _12423_.push_back((int)1);
  }
  auto _12425_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12423_.size()),_12423_.begin(),_12423_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7047_dim = _12425_;
  _checked_ptr_1<int32_t> _ptr__7047_dim(_7047_dim ? _7047_dim->raw() : nullptr,_7047_dim ? _7047_dim->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7049_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int64_t> _ptr__7049_stride(_7049_stride ? _7049_stride->raw() : nullptr,_7049_stride ? _7049_stride->size(0) : 0);
  int32_t _12426_ = (int)0;
  int32_t _12427_ = dim0;
  for (int32_t _7050_i = _12426_; _7050_i < _12427_; ++_7050_i)
  {
    {
      _ptr__7047_dim[(int)0] *= _ptr__7032_wi32[safe_add( _7024_shape,_7050_i )];
    }
  }
  _ptr__7047_dim[(int)1] = _ptr__7032_wi32[safe_add( _7024_shape,dim0 )];
  int32_t _12428_ = safe_add( dim0,(int)1 );
  int32_t _12429_ = dim1;
  for (int32_t _7051_i = _12428_; _7051_i < _12429_; ++_7051_i)
  {
    {
      _ptr__7047_dim[(int)2] *= _ptr__7032_wi32[safe_add( _7024_shape,_7051_i )];
    }
  }
  _ptr__7047_dim[(int)3] = _ptr__7032_wi32[safe_add( _7024_shape,dim1 )];
  int32_t _12430_ = safe_add( dim1,(int)1 );
  int32_t _12431_ = _7019_nd;
  for (int32_t _7052_i = _12430_; _7052_i < _12431_; ++_7052_i)
  {
    {
      _ptr__7047_dim[(int)4] *= _ptr__7032_wi32[safe_add( _7024_shape,_7052_i )];
    }
  }
  _ptr__7049_stride[(int)4] = (int)1;
  int32_t _12432_ = (int)1;
  int32_t _12433_ = (int)5;
  for (int32_t _7053_i = _12432_; _7053_i < _12433_; ++_7053_i)
  {
    {
      _ptr__7049_stride[(((int)5 - _7053_i) - (int)1)] = safe_mul( _ptr__7049_stride[((int)5 - _7053_i)],_ptr__7047_dim[((int)5 - _7053_i)] );
    }
  }
  if (_7023_hassp)
  {
    {
      int32_t _7054_curperm = _7037_xperm1;
      int32_t _12434_ = (int)0;
      int32_t _12435_ = _7021_nelem;
      for (int32_t _7055_i = _12434_; _7055_i < _12435_; ++_7055_i)
      {
        {
          _ptr__7041_xi32[safe_add( _7054_curperm,_7055_i )] = _7055_i;
        }
      }
      int32_t _7056_tgtperm = _7038_xperm2;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7057_sortidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)2),(int32_t)((int)3),(int32_t)((int)0)});
      _checked_ptr_1<int32_t> _ptr__7057_sortidx(_7057_sortidx ? _7057_sortidx->raw() : nullptr,_7057_sortidx ? _7057_sortidx->size(0) : 0);
      int32_t _12436_ = (int)0;
      int32_t _12437_ = (int)4;
      for (int32_t _7058_k = _12436_; _7058_k < _12437_; ++_7058_k)
      {
        {
          int64_t _7059_s = _ptr__7049_stride[_ptr__7057_sortidx[_7058_k]];
          int32_t _7060_d = _ptr__7047_dim[_ptr__7057_sortidx[_7058_k]];
          if ((_7060_d > (int)1))
          {
            {
              int32_t _12438_ = (int)0;
              int32_t _12439_ = safe_add( _7060_d,(int)1 );
              for (int32_t _7061_i = _12438_; _7061_i < _12439_; ++_7061_i)
              {
                {
                  _ptr__7041_xi32[safe_add( _7039_xptr,_7061_i )] = (int)0;
                }
              }
              int32_t _12440_ = (int)0;
              int32_t _12441_ = _7021_nelem;
              for (int32_t _7062_i = _12440_; _7062_i < _12441_; ++_7062_i)
              {
                {
                  ++ _ptr__7041_xi32[safe_add( safe_add( _7039_xptr,((_ptr__7033_wi64[safe_add( _7030_sp,_ptr__7041_xi32[safe_add( _7054_curperm,_7062_i )] )] / _7059_s) % _7060_d) ),(int)1 )];
                }
              }
              int32_t _12442_ = (int)0;
              int32_t _12443_ = _ptr__7047_dim[(int)3];
              for (int32_t _7063_i = _12442_; _7063_i < _12443_; ++_7063_i)
              {
                {
                  _ptr__7041_xi32[safe_add( safe_add( _7039_xptr,_7063_i ),(int)1 )] += _ptr__7041_xi32[safe_add( _7039_xptr,_7063_i )];
                }
              }
              int32_t _12444_ = (int)0;
              int32_t _12445_ = _7021_nelem;
              for (int32_t _7064_i = _12444_; _7064_i < _12445_; ++_7064_i)
              {
                {
                  int32_t _7065_ii = _ptr__7041_xi32[safe_add( _7054_curperm,_7064_i )];
                  int64_t _7066_idx = ((_ptr__7033_wi64[safe_add( _7030_sp,_7065_ii )] / _7059_s) % _7060_d);
                  _ptr__7041_xi32[safe_add( _7056_tgtperm,_ptr__7041_xi32[safe_add( _7039_xptr,_7066_idx )] )] = _7065_ii;
                  ++ _ptr__7041_xi32[safe_add( _7039_xptr,_7066_idx )];
                }
              }
              int32_t _7067_tmpperm = _7054_curperm;
              _7054_curperm = _7056_tgtperm;
              _7056_tgtperm = _7067_tmpperm;
            }
          }
          {}
        }
      }
      int32_t _12446_ = (int)0;
      int32_t _12447_ = _7021_nelem;
      for (int32_t _7068_i = _12446_; _7068_i < _12447_; ++_7068_i)
      {
        {
          int32_t _7069_p0 = _ptr__7032_wi32[safe_add( _7025_ptr,_7068_i )];
          int32_t _7070_p1 = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7068_i ),(int)1 )];
          int64_t _7071_spi0 = _ptr__7033_wi64[safe_add( _7030_sp,_7068_i )];
          if ((((_7071_spi0 % _ptr__7049_stride[(int)0]) / _ptr__7049_stride[(int)1]) == ((_7071_spi0 % _ptr__7049_stride[(int)2]) / _ptr__7049_stride[(int)3])))
          {
            {
              _7044_rnnz += (_7070_p1 - _7069_p0);
              if ((_7022_ncodeatom > (int)0))
              {
                {
                  _7045_rncodeatom += (_ptr__7032_wi32[safe_add( _7027_codeptr,_7070_p1 )] - _ptr__7032_wi32[safe_add( _7027_codeptr,_7069_p0 )]);
                }
              }
              {}
            }
          }
          else
          {
            {
              _7044_rnnz += safe_mul( (_7070_p1 - _7069_p0),(int)2 );
              if ((_7022_ncodeatom > (int)0))
              {
                {
                  _7045_rncodeatom += safe_mul( safe_add( (_ptr__7032_wi32[safe_add( _7027_codeptr,_7070_p1 )] - _ptr__7032_wi32[safe_add( _7027_codeptr,_7069_p0 )]),safe_mul( (int)2,(_7070_p1 - _7069_p0) ) ),(int)2 );
                }
              }
              {}
            }
          }
        }
      }
      int32_t _12448_ = (int)0;
      int32_t _12449_ = _7021_nelem;
      for (int32_t _7072_i = _12448_; _7072_i < _12449_; ++_7072_i)
      {
        {
          int64_t _7073_k = _ptr__7033_wi64[safe_add( _7030_sp,_ptr__7041_xi32[safe_add( _7054_curperm,_7072_i )] )];
          int64_t _7074_i0 = (_7073_k / _ptr__7049_stride[(int)0]);
          _7073_k %= _ptr__7049_stride[(int)0];
          int64_t _7075_i1 = (_7073_k / _ptr__7049_stride[(int)1]);
          _7073_k %= _ptr__7049_stride[(int)1];
          int64_t _7076_i2 = (_7073_k / _ptr__7049_stride[(int)2]);
          _7073_k %= _ptr__7049_stride[(int)2];
          int64_t _7077_i3 = (_7073_k / _ptr__7049_stride[(int)3]);
          _7073_k %= _ptr__7049_stride[(int)3];
          int64_t _7078_i4 = _7073_k;
          _ptr__7042_xi64[safe_add( _7040_xsp,_7072_i )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _7074_i0,_ptr__7049_stride[(int)0] ),safe_mul( _7077_i3,_ptr__7049_stride[(int)1] ) ),safe_mul( _7076_i2,_ptr__7049_stride[(int)2] ) ),safe_mul( _7075_i1,_ptr__7049_stride[(int)3] ) ),_7078_i4 );
        }
      }
      {
        int32_t _7079_i1 = (int)0;
        int32_t _7080_i0 = (int)0;
        while ( ((_7080_i0 < _7021_nelem) || (_7079_i1 < _7021_nelem)) )
        {
          {
            int64_t _12450_;
            bool _12451_ = (_7080_i0 < _7021_nelem);
            if (_12451_)
            {
              _12450_ = _ptr__7033_wi64[safe_add( _7030_sp,_7080_i0 )];
            }
            else
            {
              _12450_ = (-(int)1);
            }
            int64_t _7081_spi0 = _12450_;
            int64_t _12452_;
            bool _12453_ = (_7079_i1 < _7021_nelem);
            if (_12453_)
            {
              _12452_ = _ptr__7042_xi64[safe_add( _7040_xsp,_7079_i1 )];
            }
            else
            {
              _12452_ = (-(int)1);
            }
            int64_t _7082_spi1 = _12452_;
            if (((_7080_i0 < _7021_nelem) && ((_7079_i1 >= _7021_nelem) || (_7081_spi0 < _7082_spi1))))
            {
              {
                ++ _7043_rnelem;
                ++ _7080_i0;
              }
            }
            else if(((_7079_i1 < _7021_nelem) && ((_7080_i0 >= _7021_nelem) || (_7081_spi0 > _7082_spi1))))
            {
              {
                ++ _7043_rnelem;
                ++ _7079_i1;
              }
            }
            else
            {
              {
                int64_t _7083_idx2_0 = ((_ptr__7033_wi64[safe_add( _7030_sp,_7080_i0 )] % _ptr__7049_stride[(int)0]) / _ptr__7049_stride[(int)1]);
                int64_t _7084_idx2_1 = ((_ptr__7033_wi64[safe_add( _7030_sp,_7080_i0 )] % _ptr__7049_stride[(int)2]) / _ptr__7049_stride[(int)3]);
                if ((((_7081_spi0 % _ptr__7049_stride[(int)0]) / _ptr__7049_stride[(int)1]) != ((_7081_spi0 % _ptr__7049_stride[(int)2]) / _ptr__7049_stride[(int)3])))
                {
                  {
                    ++ _7043_rnelem;
                    ++ _7079_i1;
                    ++ _7080_i0;
                  }
                }
                else
                {
                  {
                    ++ _7043_rnelem;
                    ++ _7079_i1;
                    ++ _7080_i0;
                  }
                }
              }
            }
          }
        }
      }
      _7015_rs->alloc_expr(_7019_nd,_7043_rnelem,_7044_rnnz,true,_7045_rncodeatom);
      int32_t _7085_rnd = _7019_nd;
      int32_t _7086_rptr = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->ptr_base;
      int32_t _7087_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->nidxs_base;
      int32_t _7088_rshape = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->shape_base;
      int32_t _7089_rsp = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->sp_base;
      int32_t _7090_rcof = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->cof_base;
      int32_t _7091_rcode = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->code_base;
      int32_t _7092_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->codeptr_base;
      int32_t _7093_rcconst = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7094_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__7094_ri32(_7094_ri32 ? _7094_ri32->raw() : nullptr,_7094_ri32 ? _7094_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7095_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__7095_ri64(_7095_ri64 ? _7095_ri64->raw() : nullptr,_7095_ri64 ? _7095_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7096_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->f64;
      _checked_ptr_1<double> _ptr__7096_rf64(_7096_rf64 ? _7096_rf64->raw() : nullptr,_7096_rf64 ? _7096_rf64->size(0) : 0);
      int32_t _12454_ = (int)0;
      int32_t _12455_ = _7019_nd;
      for (int32_t _7097_i = _12454_; _7097_i < _12455_; ++_7097_i)
      {
        {
          _ptr__7094_ri32[safe_add( _7088_rshape,_7097_i )] = _ptr__7032_wi32[safe_add( _7024_shape,_7097_i )];
        }
      }
      _ptr__7094_ri32[_7086_rptr] = (int)0;
      if ((_7045_rncodeatom > (int)0))
      {
        {
          _ptr__7094_ri32[_7092_rcodeptr] = (int)0;
        }
      }
      {}
      {
        int32_t _7098_nzi = (int)0;
        int32_t _7099_codei = (int)0;
        int32_t _7100_elmi = (int)0;
        int32_t _7101_ii1 = (int)0;
        int32_t _7102_i0 = (int)0;
        _ptr__7094_ri32[_7086_rptr] = (int)0;
        while ( ((_7102_i0 < _7021_nelem) || (_7101_ii1 < _7021_nelem)) )
        {
          {
            int32_t _12456_;
            bool _12457_ = (_7101_ii1 < _7021_nelem);
            if (_12457_)
            {
              _12456_ = _ptr__7041_xi32[safe_add( _7054_curperm,_7101_ii1 )];
            }
            else
            {
              _12456_ = (-(int)1);
            }
            int32_t _7103_i1 = _12456_;
            int64_t _12458_;
            bool _12459_ = (_7102_i0 < _7021_nelem);
            if (_12459_)
            {
              _12458_ = _ptr__7033_wi64[safe_add( _7030_sp,_7102_i0 )];
            }
            else
            {
              _12458_ = (-(int)1);
            }
            int64_t _7104_spi0 = _12458_;
            int64_t _12460_;
            bool _12461_ = (_7101_ii1 < _7021_nelem);
            if (_12461_)
            {
              _12460_ = _ptr__7042_xi64[safe_add( _7040_xsp,_7101_ii1 )];
            }
            else
            {
              _12460_ = (-(int)1);
            }
            int64_t _7105_spi1 = _12460_;
            if (((_7102_i0 < _7021_nelem) && ((_7101_ii1 >= _7021_nelem) || (_7104_spi0 < _7105_spi1))))
            {
              {
                if ((_7045_rncodeatom == (int)0))
                {
                  {
                    int32_t _12462_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7102_i0 )];
                    int32_t _12463_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7102_i0 ),(int)1 )];
                    for (int32_t _7106_j = _12462_; _7106_j < _12463_; ++_7106_j)
                    {
                      {
                        _ptr__7095_ri64[safe_add( _7087_rnidxs,_7098_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7106_j )];
                        _ptr__7096_rf64[safe_add( _7090_rcof,_7098_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7106_j )] * 0.5);
                        ++ _7098_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12464_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7102_i0 )];
                    int32_t _12465_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7102_i0 ),(int)1 )];
                    for (int32_t _7107_j = _12464_; _7107_j < _12465_; ++_7107_j)
                    {
                      {
                        _ptr__7095_ri64[safe_add( _7087_rnidxs,_7098_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7107_j )];
                        _ptr__7096_rf64[safe_add( _7090_rcof,_7098_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7107_j )] * 0.5);
                        int32_t _12466_ = _ptr__7032_wi32[safe_add( _7027_codeptr,_7107_j )];
                        int32_t _12467_ = _ptr__7032_wi32[safe_add( safe_add( _7027_codeptr,_7107_j ),(int)1 )];
                        for (int32_t _7108_k = _12466_; _7108_k < _12467_; ++_7108_k)
                        {
                          {
                            _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = _ptr__7032_wi32[safe_add( _7026_code,_7108_k )];
                            _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = _ptr__7034_wf64[safe_add( _7028_cconst,_7108_k )];
                            ++ _7099_codei;
                          }
                        }
                        _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = 2;
                        _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = 0.5;
                        ++ _7099_codei;
                        _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = 5;
                        ++ _7099_codei;
                        _ptr__7094_ri32[safe_add( safe_add( _7092_rcodeptr,_7098_nzi ),(int)1 )] = _7099_codei;
                        ++ _7098_nzi;
                      }
                    }
                  }
                }
                _ptr__7095_ri64[safe_add( _7089_rsp,_7100_elmi )] = _7104_spi0;
                _ptr__7094_ri32[safe_add( safe_add( _7086_rptr,_7100_elmi ),(int)1 )] = _7098_nzi;
                ++ _7100_elmi;
                ++ _7102_i0;
              }
            }
            else if(((_7101_ii1 < _7021_nelem) && ((_7102_i0 >= _7021_nelem) || (_7104_spi0 > _7105_spi1))))
            {
              {
                if ((_7045_rncodeatom == (int)0))
                {
                  {
                    int32_t _12468_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7103_i1 )];
                    int32_t _12469_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7103_i1 ),(int)1 )];
                    for (int32_t _7109_j = _12468_; _7109_j < _12469_; ++_7109_j)
                    {
                      {
                        _ptr__7095_ri64[safe_add( _7087_rnidxs,_7098_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7109_j )];
                        _ptr__7096_rf64[safe_add( _7090_rcof,_7098_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7109_j )] * 0.5);
                        ++ _7098_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12470_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7103_i1 )];
                    int32_t _12471_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7103_i1 ),(int)1 )];
                    for (int32_t _7110_j = _12470_; _7110_j < _12471_; ++_7110_j)
                    {
                      {
                        _ptr__7095_ri64[safe_add( _7087_rnidxs,_7098_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7110_j )];
                        _ptr__7096_rf64[safe_add( _7090_rcof,_7098_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7110_j )] * 0.5);
                        int32_t _12472_ = _ptr__7032_wi32[safe_add( _7027_codeptr,_7110_j )];
                        int32_t _12473_ = _ptr__7032_wi32[safe_add( safe_add( _7027_codeptr,_7110_j ),(int)1 )];
                        for (int32_t _7111_k = _12472_; _7111_k < _12473_; ++_7111_k)
                        {
                          {
                            _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = _ptr__7032_wi32[safe_add( _7026_code,_7111_k )];
                            _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = _ptr__7034_wf64[safe_add( _7028_cconst,_7111_k )];
                            ++ _7099_codei;
                          }
                        }
                        _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = 2;
                        _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = 0.5;
                        ++ _7099_codei;
                        _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = 5;
                        ++ _7099_codei;
                        _ptr__7094_ri32[safe_add( safe_add( _7092_rcodeptr,_7098_nzi ),(int)1 )] = _7099_codei;
                        ++ _7098_nzi;
                      }
                    }
                  }
                }
                _ptr__7095_ri64[safe_add( _7089_rsp,_7100_elmi )] = _7105_spi1;
                _ptr__7094_ri32[safe_add( safe_add( _7086_rptr,_7100_elmi ),(int)1 )] = _7098_nzi;
                ++ _7100_elmi;
                ++ _7101_ii1;
              }
            }
            else if((((_7104_spi0 % _ptr__7049_stride[(int)0]) / _ptr__7049_stride[(int)1]) != ((_7104_spi0 % _ptr__7049_stride[(int)2]) / _ptr__7049_stride[(int)3])))
            {
              {
                int32_t _7112_nzi_ = _7098_nzi;
                int32_t _12474_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7102_i0 )];
                int32_t _12475_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7102_i0 ),(int)1 )];
                for (int32_t _7113_j = _12474_; _7113_j < _12475_; ++_7113_j)
                {
                  {
                    _ptr__7095_ri64[safe_add( _7087_rnidxs,_7098_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7113_j )];
                    _ptr__7096_rf64[safe_add( _7090_rcof,_7098_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7113_j )] * 0.5);
                    ++ _7098_nzi;
                  }
                }
                int32_t _12476_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7103_i1 )];
                int32_t _12477_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7103_i1 ),(int)1 )];
                for (int32_t _7114_j = _12476_; _7114_j < _12477_; ++_7114_j)
                {
                  {
                    _ptr__7095_ri64[safe_add( _7087_rnidxs,_7098_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7114_j )];
                    _ptr__7096_rf64[safe_add( _7090_rcof,_7098_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7114_j )] * 0.5);
                    ++ _7098_nzi;
                  }
                }
                if ((_7045_rncodeatom > (int)0))
                {
                  {
                    int32_t _12478_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7102_i0 )];
                    int32_t _12479_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7102_i0 ),(int)1 )];
                    for (int32_t _7115_j = _12478_; _7115_j < _12479_; ++_7115_j)
                    {
                      {
                        int32_t _12480_ = _ptr__7032_wi32[safe_add( _7027_codeptr,_7115_j )];
                        int32_t _12481_ = _ptr__7032_wi32[safe_add( safe_add( _7027_codeptr,_7115_j ),(int)1 )];
                        for (int32_t _7116_k = _12480_; _7116_k < _12481_; ++_7116_k)
                        {
                          {
                            _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = _ptr__7032_wi32[safe_add( _7026_code,_7116_k )];
                            _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = _ptr__7034_wf64[safe_add( _7028_cconst,_7116_k )];
                            ++ _7099_codei;
                          }
                        }
                        _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = 2;
                        _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = 0.5;
                        ++ _7099_codei;
                        _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = 5;
                        ++ _7099_codei;
                        _ptr__7094_ri32[safe_add( safe_add( _7092_rcodeptr,_7112_nzi_ ),(int)1 )] = _7099_codei;
                        ++ _7112_nzi_;
                      }
                    }
                    int32_t _12482_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7103_i1 )];
                    int32_t _12483_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7103_i1 ),(int)1 )];
                    for (int32_t _7117_j = _12482_; _7117_j < _12483_; ++_7117_j)
                    {
                      {
                        int32_t _12484_ = _ptr__7032_wi32[safe_add( _7027_codeptr,_7117_j )];
                        int32_t _12485_ = _ptr__7032_wi32[safe_add( safe_add( _7027_codeptr,_7117_j ),(int)1 )];
                        for (int32_t _7118_k = _12484_; _7118_k < _12485_; ++_7118_k)
                        {
                          {
                            _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = _ptr__7032_wi32[safe_add( _7026_code,_7118_k )];
                            _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = _ptr__7034_wf64[safe_add( _7028_cconst,_7118_k )];
                            ++ _7099_codei;
                          }
                        }
                        _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = 2;
                        _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = 0.5;
                        ++ _7099_codei;
                        _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = 5;
                        ++ _7099_codei;
                        _ptr__7094_ri32[safe_add( safe_add( _7092_rcodeptr,_7112_nzi_ ),(int)1 )] = _7099_codei;
                        ++ _7112_nzi_;
                      }
                    }
                  }
                }
                {}
                _ptr__7095_ri64[safe_add( _7089_rsp,_7100_elmi )] = _7104_spi0;
                _ptr__7094_ri32[safe_add( safe_add( _7086_rptr,_7100_elmi ),(int)1 )] = _7098_nzi;
                ++ _7100_elmi;
                ++ _7101_ii1;
                ++ _7102_i0;
              }
            }
            else
            {
              {
                int32_t _7119_nzi_ = _7098_nzi;
                int32_t _12486_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7102_i0 )];
                int32_t _12487_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7102_i0 ),(int)1 )];
                for (int32_t _7120_j = _12486_; _7120_j < _12487_; ++_7120_j)
                {
                  {
                    _ptr__7095_ri64[safe_add( _7087_rnidxs,_7098_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7120_j )];
                    _ptr__7096_rf64[safe_add( _7090_rcof,_7098_nzi )] = _ptr__7034_wf64[safe_add( _7031_cof,_7120_j )];
                    ++ _7098_nzi;
                  }
                }
                if ((_7045_rncodeatom > (int)0))
                {
                  {
                    int32_t _12488_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7102_i0 )];
                    int32_t _12489_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7102_i0 ),(int)1 )];
                    for (int32_t _7121_j = _12488_; _7121_j < _12489_; ++_7121_j)
                    {
                      {
                        int32_t _12490_ = _ptr__7032_wi32[safe_add( _7027_codeptr,_7121_j )];
                        int32_t _12491_ = _ptr__7032_wi32[safe_add( safe_add( _7027_codeptr,_7121_j ),(int)1 )];
                        for (int32_t _7122_k = _12490_; _7122_k < _12491_; ++_7122_k)
                        {
                          {
                            _ptr__7094_ri32[safe_add( _7091_rcode,_7099_codei )] = _ptr__7032_wi32[safe_add( _7026_code,_7122_k )];
                            _ptr__7096_rf64[safe_add( _7093_rcconst,_7099_codei )] = _ptr__7034_wf64[safe_add( _7028_cconst,_7122_k )];
                            ++ _7099_codei;
                          }
                        }
                        _ptr__7094_ri32[safe_add( safe_add( _7092_rcodeptr,_7119_nzi_ ),(int)1 )] = _7099_codei;
                        ++ _7119_nzi_;
                      }
                    }
                  }
                }
                {}
                _ptr__7095_ri64[safe_add( _7089_rsp,_7100_elmi )] = _ptr__7033_wi64[safe_add( _7030_sp,_7102_i0 )];
                _ptr__7094_ri32[safe_add( safe_add( _7086_rptr,_7100_elmi ),(int)1 )] = _7098_nzi;
                ++ _7100_elmi;
                ++ _7101_ii1;
                ++ _7102_i0;
              }
            }
          }
        }
        if ((_7098_nzi != _7044_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nzi"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      _7043_rnelem = _7021_nelem;
      _7044_rnnz = safe_mul( _7020_nnz,(int)2 );
      int32_t _12492_;
      bool _12493_ = (_7022_ncodeatom > (int)0);
      if (_12493_)
      {
        _12492_ = safe_add( safe_mul( (int)2,_7022_ncodeatom ),safe_mul( safe_mul( (int)2,(int)2 ),_7020_nnz ) );
      }
      else
      {
        _12492_ = (int)0;
      }
      _7045_rncodeatom = _12492_;
      int32_t _12494_ = (int)0;
      int32_t _12495_ = _ptr__7047_dim[(int)0];
      for (int32_t _7123_i0 = _12494_; _7123_i0 < _12495_; ++_7123_i0)
      {
        {
          int32_t _12496_ = (int)0;
          int32_t _12497_ = _ptr__7047_dim[(int)2];
          for (int32_t _7124_i2 = _12496_; _7124_i2 < _12497_; ++_7124_i2)
          {
            {
              int32_t _12498_ = (int)0;
              int32_t _12499_ = _ptr__7047_dim[(int)4];
              for (int32_t _7125_i4 = _12498_; _7125_i4 < _12499_; ++_7125_i4)
              {
                {
                  int32_t _12500_ = (int)0;
                  int32_t _12501_ = _ptr__7047_dim[(int)1];
                  for (int32_t _7126_i = _12500_; _7126_i < _12501_; ++_7126_i)
                  {
                    {
                      int64_t _7127_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__7049_stride[(int)0],_7123_i0 ),safe_mul( _ptr__7049_stride[(int)1],_7126_i ) ),safe_mul( _ptr__7049_stride[(int)2],_7124_i2 ) ),safe_mul( _ptr__7049_stride[(int)3],_7126_i ) ),safe_mul( _ptr__7049_stride[(int)4],_7125_i4 ) );
                      _7044_rnnz -= (_ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7127_p ),(int)1 )] - _ptr__7032_wi32[safe_add( _7025_ptr,_7127_p )]);
                      if ((_7022_ncodeatom > (int)0))
                      {
                        {
                          _7045_rncodeatom -= safe_add( (_ptr__7032_wi32[safe_add( _7027_codeptr,_ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7127_p ),(int)1 )] )] - _ptr__7032_wi32[safe_add( _7027_codeptr,_ptr__7032_wi32[safe_add( _7025_ptr,_7127_p )] )]),safe_mul( safe_mul( (int)2,(int)2 ),(_ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7127_p ),(int)1 )] - _ptr__7032_wi32[safe_add( _7025_ptr,_7127_p )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
      _7015_rs->alloc_expr(_7019_nd,_7043_rnelem,_7044_rnnz,false,_7045_rncodeatom);
      int32_t _7128_rptr = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->ptr_base;
      int32_t _7129_rshape = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->shape_base;
      int32_t _7130_rcode = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->code_base;
      int32_t _7131_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->codeptr_base;
      int32_t _7132_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->nidxs_base;
      int32_t _7133_rsp = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->sp_base;
      int32_t _7134_rcof = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->cof_base;
      int32_t _7135_rcconst = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7136_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__7136_ri32(_7136_ri32 ? _7136_ri32->raw() : nullptr,_7136_ri32 ? _7136_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7137_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__7137_ri64(_7137_ri64 ? _7137_ri64->raw() : nullptr,_7137_ri64 ? _7137_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7138_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->f64;
      _checked_ptr_1<double> _ptr__7138_rf64(_7138_rf64 ? _7138_rf64->raw() : nullptr,_7138_rf64 ? _7138_rf64->size(0) : 0);
      int32_t _7139_nzi = (int)0;
      int32_t _7140_relmi = (int)0;
      int32_t _7141_codei = (int)0;
      int32_t _12502_ = (int)0;
      int32_t _12503_ = _7019_nd;
      for (int32_t _7142_i = _12502_; _7142_i < _12503_; ++_7142_i)
      {
        {
          _ptr__7136_ri32[safe_add( _7129_rshape,_7142_i )] = _ptr__7032_wi32[safe_add( _7024_shape,_7142_i )];
        }
      }
      _ptr__7136_ri32[_7128_rptr] = (int)0;
      if ((_7045_rncodeatom > (int)0))
      {
        {
          _ptr__7136_ri32[_7131_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _7143_k = (int)0;
      int32_t _12504_ = (int)0;
      int32_t _12505_ = _ptr__7047_dim[(int)0];
      for (int32_t _7144_i0 = _12504_; _7144_i0 < _12505_; ++_7144_i0)
      {
        {
          int32_t _12506_ = (int)0;
          int32_t _12507_ = _7046_d;
          for (int32_t _7145_i1 = _12506_; _7145_i1 < _12507_; ++_7145_i1)
          {
            {
              int32_t _12508_ = (int)0;
              int32_t _12509_ = _ptr__7047_dim[(int)2];
              for (int32_t _7146_i2 = _12508_; _7146_i2 < _12509_; ++_7146_i2)
              {
                {
                  int32_t _12510_ = (int)0;
                  int32_t _12511_ = _7046_d;
                  for (int32_t _7147_i3 = _12510_; _7147_i3 < _12511_; ++_7147_i3)
                  {
                    {
                      int32_t _12512_ = (int)0;
                      int32_t _12513_ = _ptr__7047_dim[(int)4];
                      for (int32_t _7148_i4 = _12512_; _7148_i4 < _12513_; ++_7148_i4)
                      {
                        {
                          if ((_7145_i1 == _7147_i3))
                          {
                            {
                              if ((_7045_rncodeatom == (int)0))
                              {
                                {
                                  int32_t _12514_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7143_k )];
                                  int32_t _12515_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7143_k ),(int)1 )];
                                  for (int32_t _7149_j = _12514_; _7149_j < _12515_; ++_7149_j)
                                  {
                                    {
                                      _ptr__7137_ri64[safe_add( _7132_rnidxs,_7139_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7149_j )];
                                      _ptr__7138_rf64[safe_add( _7134_rcof,_7139_nzi )] = _ptr__7034_wf64[safe_add( _7031_cof,_7149_j )];
                                      ++ _7139_nzi;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int32_t _12516_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7143_k )];
                                  int32_t _12517_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7143_k ),(int)1 )];
                                  for (int32_t _7150_j = _12516_; _7150_j < _12517_; ++_7150_j)
                                  {
                                    {
                                      _ptr__7137_ri64[safe_add( _7132_rnidxs,_7139_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7150_j )];
                                      _ptr__7138_rf64[safe_add( _7134_rcof,_7139_nzi )] = _ptr__7034_wf64[safe_add( _7031_cof,_7150_j )];
                                      int32_t _12518_ = _ptr__7032_wi32[safe_add( _7027_codeptr,_7150_j )];
                                      int32_t _12519_ = _ptr__7032_wi32[safe_add( safe_add( _7027_codeptr,_7150_j ),(int)1 )];
                                      for (int32_t _7151_l = _12518_; _7151_l < _12519_; ++_7151_l)
                                      {
                                        {
                                          _ptr__7136_ri32[safe_add( _7130_rcode,_7141_codei )] = _ptr__7032_wi32[safe_add( _7026_code,_7151_l )];
                                          _ptr__7138_rf64[safe_add( _7135_rcconst,_7141_codei )] = _ptr__7034_wf64[safe_add( _7028_cconst,_7151_l )];
                                          ++ _7141_codei;
                                        }
                                      }
                                      _ptr__7136_ri32[safe_add( safe_add( _7131_rcodeptr,_7139_nzi ),(int)1 )] = _7141_codei;
                                      ++ _7139_nzi;
                                    }
                                  }
                                }
                              }
                              _ptr__7136_ri32[safe_add( safe_add( _7128_rptr,_7140_relmi ),(int)1 )] = _7139_nzi;
                              ++ _7143_k;
                            }
                          }
                          else
                          {
                            {
                              int64_t _7152_k2 = safe_add( safe_add( safe_add( safe_add( safe_mul( _7144_i0,_ptr__7049_stride[(int)0] ),safe_mul( _7147_i3,_ptr__7049_stride[(int)1] ) ),safe_mul( _7146_i2,_ptr__7049_stride[(int)2] ) ),safe_mul( _7145_i1,_ptr__7049_stride[(int)3] ) ),_7148_i4 );
                              if ((_7045_rncodeatom == (int)0))
                              {
                                {
                                  int32_t _12520_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7143_k )];
                                  int32_t _12521_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7143_k ),(int)1 )];
                                  for (int32_t _7153_j = _12520_; _7153_j < _12521_; ++_7153_j)
                                  {
                                    {
                                      _ptr__7137_ri64[safe_add( _7132_rnidxs,_7139_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7153_j )];
                                      _ptr__7138_rf64[safe_add( _7134_rcof,_7139_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7153_j )] * 0.5);
                                      ++ _7139_nzi;
                                    }
                                  }
                                  int32_t _12522_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7152_k2 )];
                                  int32_t _12523_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7152_k2 ),(int)1 )];
                                  for (int32_t _7154_j = _12522_; _7154_j < _12523_; ++_7154_j)
                                  {
                                    {
                                      _ptr__7137_ri64[safe_add( _7132_rnidxs,_7139_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7154_j )];
                                      _ptr__7138_rf64[safe_add( _7134_rcof,_7139_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7154_j )] * 0.5);
                                      ++ _7139_nzi;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int32_t _12524_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7143_k )];
                                  int32_t _12525_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7143_k ),(int)1 )];
                                  for (int32_t _7155_j = _12524_; _7155_j < _12525_; ++_7155_j)
                                  {
                                    {
                                      _ptr__7137_ri64[safe_add( _7132_rnidxs,_7139_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7155_j )];
                                      _ptr__7138_rf64[safe_add( _7134_rcof,_7139_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7155_j )] * 0.5);
                                      int32_t _12526_ = _ptr__7032_wi32[safe_add( _7027_codeptr,_7155_j )];
                                      int32_t _12527_ = _ptr__7032_wi32[safe_add( safe_add( _7027_codeptr,_7155_j ),(int)1 )];
                                      for (int32_t _7156_l = _12526_; _7156_l < _12527_; ++_7156_l)
                                      {
                                        {
                                          _ptr__7136_ri32[safe_add( _7130_rcode,_7141_codei )] = _ptr__7032_wi32[safe_add( _7026_code,_7156_l )];
                                          _ptr__7138_rf64[safe_add( _7135_rcconst,_7141_codei )] = _ptr__7034_wf64[safe_add( _7028_cconst,_7156_l )];
                                          ++ _7141_codei;
                                        }
                                      }
                                      _ptr__7136_ri32[safe_add( _7130_rcode,_7141_codei )] = 2;
                                      _ptr__7138_rf64[safe_add( _7135_rcconst,_7141_codei )] = 0.5;
                                      ++ _7141_codei;
                                      _ptr__7136_ri32[safe_add( _7130_rcode,_7141_codei )] = 5;
                                      ++ _7141_codei;
                                      _ptr__7136_ri32[safe_add( safe_add( _7131_rcodeptr,_7139_nzi ),(int)1 )] = _7141_codei;
                                      ++ _7139_nzi;
                                    }
                                  }
                                  int32_t _12528_ = _ptr__7032_wi32[safe_add( _7025_ptr,_7152_k2 )];
                                  int32_t _12529_ = _ptr__7032_wi32[safe_add( safe_add( _7025_ptr,_7152_k2 ),(int)1 )];
                                  for (int32_t _7157_j = _12528_; _7157_j < _12529_; ++_7157_j)
                                  {
                                    {
                                      _ptr__7137_ri64[safe_add( _7132_rnidxs,_7139_nzi )] = _ptr__7033_wi64[safe_add( _7029_nidxs,_7157_j )];
                                      _ptr__7138_rf64[safe_add( _7134_rcof,_7139_nzi )] = (_ptr__7034_wf64[safe_add( _7031_cof,_7157_j )] * 0.5);
                                      int32_t _12530_ = _ptr__7032_wi32[safe_add( _7027_codeptr,_7157_j )];
                                      int32_t _12531_ = _ptr__7032_wi32[safe_add( safe_add( _7027_codeptr,_7157_j ),(int)1 )];
                                      for (int32_t _7158_l = _12530_; _7158_l < _12531_; ++_7158_l)
                                      {
                                        {
                                          _ptr__7136_ri32[safe_add( _7130_rcode,_7141_codei )] = _ptr__7032_wi32[safe_add( _7026_code,_7158_l )];
                                          _ptr__7138_rf64[safe_add( _7135_rcconst,_7141_codei )] = _ptr__7034_wf64[safe_add( _7028_cconst,_7158_l )];
                                          ++ _7141_codei;
                                        }
                                      }
                                      _ptr__7136_ri32[safe_add( _7130_rcode,_7141_codei )] = 2;
                                      _ptr__7138_rf64[safe_add( _7135_rcconst,_7141_codei )] = 0.5;
                                      ++ _7141_codei;
                                      _ptr__7136_ri32[safe_add( _7130_rcode,_7141_codei )] = 5;
                                      ++ _7141_codei;
                                      _ptr__7136_ri32[safe_add( safe_add( _7131_rcodeptr,_7139_nzi ),(int)1 )] = _7141_codei;
                                      ++ _7139_nzi;
                                    }
                                  }
                                }
                              }
                              _ptr__7136_ri32[safe_add( safe_add( _7128_rptr,_7140_relmi ),(int)1 )] = _7139_nzi;
                              ++ _7143_k;
                            }
                          }
                          ++ _7140_relmi;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_7139_nzi != _7044_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
        }
      }
      {}
      if ((_7140_relmi != _7043_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  _7017_xs->clear();
  _7015_rs->peek_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->nnz != ((*mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->ptr_base,mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->nelem )))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
  if ((((*mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_7015_rs)->ptr_base)) != (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
}
// End mosek.fusion.ExprSymmetrize.eval

// Begin mosek.fusion.ExprSymmetrize.toString
// Method mosek.fusion.ExprSymmetrize.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:229:6-231:7
std::string mosek::fusion::ExprSymmetrize :: toString() { return mosek::fusion::p_ExprSymmetrize::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSymmetrize::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSymmetrize(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprSymmetrize.toString

void mosek::fusion::p_ExprSymmetrize::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }
// } class ExprSymmetrize
// class ExprCondense { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:154:4-211:5
mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }
mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprCondense::p_ExprCondense
  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprCondense.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:156:6-159:7
mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense
  (monty::rc_ptr< ::mosek::fusion::Expression > _7159_expr)
{ return new mosek::fusion::ExprCondense(_7159_expr); }
mosek::fusion::ExprCondense::ExprCondense
  (monty::rc_ptr< ::mosek::fusion::Expression > _7159_expr) : 
   ExprCondense(new mosek::fusion::p_ExprCondense(this))
{ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_7159_expr); }
void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7159_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7159_expr->__mosek_2fusion_2Expression__getModel(),_7159_expr->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _7159_expr;
  }
}
// mosek.fusion.ExprCondense.ctor

// Begin mosek.fusion.ExprCondense.eval
// Method mosek.fusion.ExprCondense.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:165:6-185:7
void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7160_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7161_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7162_xs) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_7160_rs,_7161_ws,_7162_xs); }
void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7160_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7161_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7162_xs)
{
  expr->eval(_7160_rs,_7161_ws,_7162_xs);
  _7160_rs->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_7160_rs)->hassp)
  {
    {
      int32_t _7163_nd = _7160_rs->popi32();
      _7160_rs->popi32(_7163_nd);
      int32_t _7164_nelem = _7160_rs->popi32();
      int32_t _7165_nnz = _7160_rs->popi32();
      _7160_rs->popi32();
      _7160_rs->popi64(_7164_nelem);
      _7160_rs->pushi32((int)0);
      _7160_rs->pushi32(_7165_nnz);
      _7160_rs->pushi32(_7164_nelem);
      _7160_rs->pushi32(_7164_nelem);
      _7160_rs->pushi32((int)1);
      _7160_rs->peek_expr();
    }
  }
  {}
}
// End mosek.fusion.ExprCondense.eval

// Begin mosek.fusion.ExprCondense.toString
// Method mosek.fusion.ExprCondense.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:161:6-163:7
std::string mosek::fusion::ExprCondense :: toString() { return mosek::fusion::p_ExprCondense::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprCondense::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCondense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprCondense.toString

void mosek::fusion::p_ExprCondense::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }
// } class ExprCondense
// class ExprFromVar { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:103:4-143:5
mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }
mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprFromVar::p_ExprFromVar
  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprFromVar.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:105:6-108:7
mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar
  (monty::rc_ptr< ::mosek::fusion::Variable > _7166_x)
{ return new mosek::fusion::ExprFromVar(_7166_x); }
mosek::fusion::ExprFromVar::ExprFromVar
  (monty::rc_ptr< ::mosek::fusion::Variable > _7166_x) : 
   ExprFromVar(new mosek::fusion::p_ExprFromVar(this))
{ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_7166_x); }
void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _7166_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7166_x->__mosek_2fusion_2Expression__getModel(),_7166_x->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _7166_x;
  }
}
// mosek.fusion.ExprFromVar.ctor

// Begin mosek.fusion.ExprFromVar.eval
// Method mosek.fusion.ExprFromVar.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:114:6-142:7
void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7167_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7168_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7169_xs) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_7167_rs,_7168_ws,_7169_xs); }
void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7167_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7168_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7169_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7170_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__7170_shape(_7170_shape ? _7170_shape->raw() : nullptr,_7170_shape ? _7170_shape->size(0) : 0);
  int64_t _7171_size = ::mosek::fusion::p_Set::size(_7170_shape);
  int32_t _7172_nelm = x->numInst();
  int32_t _7173_nnz = _7172_nelm;
  bool _7174_hassp = (_7171_size > _7172_nelm);
  _7167_rs->alloc_expr((int)((_7170_shape)->size(0)),_7172_nelm,_7173_nnz,_7174_hassp);
  int32_t _7175_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_7167_rs)->ptr_base;
  int32_t _7176_nidx_base = mosek::fusion::p_WorkStack::_get_impl(_7167_rs)->nidxs_base;
  int32_t _7177_nsp_base = mosek::fusion::p_WorkStack::_get_impl(_7167_rs)->sp_base;
  int32_t _7178_cof_base = mosek::fusion::p_WorkStack::_get_impl(_7167_rs)->cof_base;
  int32_t _7179_shape_base = mosek::fusion::p_WorkStack::_get_impl(_7167_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7180_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7167_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__7180_ri32(_7180_ri32 ? _7180_ri32->raw() : nullptr,_7180_ri32 ? _7180_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7181_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7167_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__7181_ri64(_7181_ri64 ? _7181_ri64->raw() : nullptr,_7181_ri64 ? _7181_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7182_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7167_rs)->f64;
  _checked_ptr_1<double> _ptr__7182_rf64(_7182_rf64 ? _7182_rf64->raw() : nullptr,_7182_rf64 ? _7182_rf64->size(0) : 0);
  int32_t _12532_ = (int)0;
  int32_t _12533_ = (int)((_7170_shape)->size(0));
  for (int32_t _7183_i = _12532_; _7183_i < _12533_; ++_7183_i)
  {
    {
      _ptr__7180_ri32[safe_add( _7179_shape_base,_7183_i )] = _ptr__7170_shape[_7183_i];
    }
  }
  {
    int32_t _12534_ = (int)0;
    int32_t _12535_ = safe_add( _7172_nelm,(int)1 );
    for (int32_t _7184_i = _12534_; _7184_i < _12535_; ++_7184_i)
    {
      {
        _ptr__7180_ri32[safe_add( _7175_ptr_base,_7184_i )] = _7184_i;
      }
    }
    int32_t _12536_ = (int)0;
    int32_t _12537_ = _7173_nnz;
    for (int32_t _7185_i = _12536_; _7185_i < _12537_; ++_7185_i)
    {
      {
        _ptr__7182_rf64[safe_add( _7178_cof_base,_7185_i )] = 1.0;
      }
    }
  }
  if (_7174_hassp)
  {
    {
      x->inst(_7177_nsp_base,_7181_ri64,_7176_nidx_base,_7181_ri64);
    }
  }
  else
  {
    {
      x->inst(_7176_nidx_base,_7181_ri64);
    }
  }
}
// End mosek.fusion.ExprFromVar.eval

// Begin mosek.fusion.ExprFromVar.toString
// Method mosek.fusion.ExprFromVar.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:110:6-112:7
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprFromVar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprFromVar.toString

void mosek::fusion::p_ExprFromVar::destroy()
{
  x.reset();
}
void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }
// } class ExprFromVar
// class ExprReshape { // @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:5:4-95:5
mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }
mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprReshape::p_ExprReshape
  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprReshape.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:7:6-14:7
mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7186_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7187_e)
{ return new mosek::fusion::ExprReshape(_7186_shape,_7187_e); }
mosek::fusion::ExprReshape::ExprReshape
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7186_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7187_e) : 
   ExprReshape(new mosek::fusion::p_ExprReshape(this))
{ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_7186_shape,_7187_e); }
void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7186_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7187_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7186_shape(_7186_shape ? _7186_shape->raw() : nullptr, _7186_shape ? _7186_shape->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_7187_e->__mosek_2fusion_2Expression__getModel(),::mosek::fusion::Utils::Tools::arraycopy(_7186_shape));
    int64_t _7188_esize = _7187_e->getSize();
    if ((::mosek::fusion::p_Set::size(_7186_shape) != _7187_e->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _7187_e;
  }
}
// mosek.fusion.ExprReshape.ctor

// Begin mosek.fusion.ExprReshape.eval
// Method mosek.fusion.ExprReshape.eval @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:27:6-43:7
void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7189_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7190_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7191_xs) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_7189_rs,_7190_ws,_7191_xs); }
void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7189_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7190_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7191_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7192_eshape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__7192_eshape(_7192_eshape ? _7192_eshape->raw() : nullptr,_7192_eshape ? _7192_eshape->size(0) : 0);
  e->eval(_7189_rs,_7190_ws,_7191_xs);
  _7189_rs->peek_expr();
  int32_t _7193_nd = _7189_rs->popi32();
  int64_t _7194_sz = (int)1;
  int32_t _12538_ = (int)0;
  int32_t _12539_ = _7193_nd;
  for (int32_t _7195_i = _12538_; _7195_i < _12539_; ++_7195_i)
  {
    {
      _7194_sz *= _7189_rs->popi32();
    }
  }
  if ((_7194_sz != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int32_t _12540_ = (int)0;
  int32_t _12541_ = (int)((_7192_eshape)->size(0));
  for (int32_t _7196_i = _12540_; _7196_i < _12541_; ++_7196_i)
  {
    {
      _7189_rs->pushi32(_ptr__7192_eshape[_7196_i]);
    }
  }
  _7189_rs->pushi32((int)((_7192_eshape)->size(0)));
}
// End mosek.fusion.ExprReshape.eval

// Begin mosek.fusion.ExprReshape.toString
// Method mosek.fusion.ExprReshape.toString @ bld/docker-rockylinux-8/final/default/src/fusion/ExprShape.monty:16:6-25:7
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprReshape::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7197_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _7197_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int32_t _12542_ = (int)1;
      int32_t _12543_ = _pubthis->getND();
      for (int32_t _7198_i = _12542_; _7198_i < _12543_; ++_7198_i)
      {
        {
          _7197_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_7198_i));
        }
      }
    }
  }
  {}
  _7197_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _7197_sb->toString();
}
// End mosek.fusion.ExprReshape.toString

void mosek::fusion::p_ExprReshape::destroy()
{
  e.reset();
}
void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }
// } class ExprReshape
// class ExprRangeDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:637:4-642:5
mosek::fusion::ExprRangeDomain::ExprRangeDomain(mosek::fusion::p_ExprRangeDomain *_impl) : _impl(_impl) { /*std::cout << "ExprRangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ExprRangeDomain::~ExprRangeDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ExprRangeDomain::p_ExprRangeDomain
  (::mosek::fusion::ExprRangeDomain * _pubthis) :     _pubthis(_pubthis)
{}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::ExprRangeDomain::get_dom() { return _impl->dom; }
void mosek::fusion::ExprRangeDomain::set_dom(monty::rc_ptr< ::mosek::fusion::RangeDomain > _val) { _impl->dom = _val; }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprRangeDomain::get_expr() { return _impl->expr; }
void mosek::fusion::ExprRangeDomain::set_expr(monty::rc_ptr< ::mosek::fusion::Expression > _val) { _impl->expr = _val; }
// mosek.fusion.ExprRangeDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:640:6-89
mosek::fusion::ExprRangeDomain::t mosek::fusion::p_ExprRangeDomain::_new_ExprRangeDomain
  (monty::rc_ptr< ::mosek::fusion::Expression > _7199_expr,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _7200_dom)
{ return new mosek::fusion::ExprRangeDomain(_7199_expr,_7200_dom); }
mosek::fusion::ExprRangeDomain::ExprRangeDomain
  (monty::rc_ptr< ::mosek::fusion::Expression > _7199_expr,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _7200_dom) : 
   ExprRangeDomain(new mosek::fusion::p_ExprRangeDomain(this))
{ mosek::fusion::p_ExprRangeDomain::_get_impl(this)->_initialize(_7199_expr,_7200_dom); }
void mosek::fusion::p_ExprRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7199_expr,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _7200_dom)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprRangeDomain::_get_impl(::mosek::fusion::ExprRangeDomain::t(_pubthis))->expr = _7199_expr;
    mosek::fusion::p_ExprRangeDomain::_get_impl(::mosek::fusion::ExprRangeDomain::t(_pubthis))->dom = _7200_dom;
  }
}
// mosek.fusion.ExprRangeDomain.ctor

// Begin mosek.fusion.ExprRangeDomain.toDJCTerm
// Method mosek.fusion.ExprRangeDomain.toDJCTerm @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:641:6-67
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::ExprRangeDomain :: __mosek_2fusion_2ExprRangeDomain__toDJCTerm() { return mosek::fusion::p_ExprRangeDomain::_get_impl(this)->__mosek_2fusion_2ExprRangeDomain__toDJCTerm(); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::ExprRangeDomain::toDJCTerm() { return __mosek_2fusion_2ExprRangeDomain__toDJCTerm(); }
/* override: mosek.fusion.ExprDomain.toDJCTerm*/
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::ExprRangeDomain::__mosek_2fusion_2ExprDomain__toDJCTerm() { return __mosek_2fusion_2ExprRangeDomain__toDJCTerm(); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_ExprRangeDomain::__mosek_2fusion_2ExprRangeDomain__toDJCTerm()
{
  return (::mosek::fusion::p_DJC::term(expr,dom)).as<::mosek::fusion::Term>();
}
// End mosek.fusion.ExprRangeDomain.toDJCTerm

void mosek::fusion::p_ExprRangeDomain::destroy()
{
  dom.reset();
  expr.reset();
}
void mosek::fusion::ExprRangeDomain::destroy() { mosek::fusion::p_ExprRangeDomain::_get_impl(this)->destroy(); }
// } class ExprRangeDomain
// class ExprPSDDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:627:4-631:5
mosek::fusion::ExprPSDDomain::ExprPSDDomain(mosek::fusion::p_ExprPSDDomain *_impl) : _impl(_impl) { /*std::cout << "ExprPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ExprPSDDomain::~ExprPSDDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ExprPSDDomain::p_ExprPSDDomain
  (::mosek::fusion::ExprPSDDomain * _pubthis) :     _pubthis(_pubthis)
{}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::ExprPSDDomain::get_dom() { return _impl->dom; }
void mosek::fusion::ExprPSDDomain::set_dom(monty::rc_ptr< ::mosek::fusion::PSDDomain > _val) { _impl->dom = _val; }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprPSDDomain::get_expr() { return _impl->expr; }
void mosek::fusion::ExprPSDDomain::set_expr(monty::rc_ptr< ::mosek::fusion::Expression > _val) { _impl->expr = _val; }
// mosek.fusion.ExprPSDDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:630:6-87
mosek::fusion::ExprPSDDomain::t mosek::fusion::p_ExprPSDDomain::_new_ExprPSDDomain
  (monty::rc_ptr< ::mosek::fusion::Expression > _7201_expr,
    monty::rc_ptr< ::mosek::fusion::PSDDomain > _7202_dom)
{ return new mosek::fusion::ExprPSDDomain(_7201_expr,_7202_dom); }
mosek::fusion::ExprPSDDomain::ExprPSDDomain
  (monty::rc_ptr< ::mosek::fusion::Expression > _7201_expr,
    monty::rc_ptr< ::mosek::fusion::PSDDomain > _7202_dom) : 
   ExprPSDDomain(new mosek::fusion::p_ExprPSDDomain(this))
{ mosek::fusion::p_ExprPSDDomain::_get_impl(this)->_initialize(_7201_expr,_7202_dom); }
void mosek::fusion::p_ExprPSDDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7201_expr,
    monty::rc_ptr< ::mosek::fusion::PSDDomain > _7202_dom)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprPSDDomain::_get_impl(::mosek::fusion::ExprPSDDomain::t(_pubthis))->expr = _7201_expr;
    mosek::fusion::p_ExprPSDDomain::_get_impl(::mosek::fusion::ExprPSDDomain::t(_pubthis))->dom = _7202_dom;
  }
}
// mosek.fusion.ExprPSDDomain.ctor

void mosek::fusion::p_ExprPSDDomain::destroy()
{
  dom.reset();
  expr.reset();
}
void mosek::fusion::ExprPSDDomain::destroy() { mosek::fusion::p_ExprPSDDomain::_get_impl(this)->destroy(); }
// } class ExprPSDDomain
// class ExprConicDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:617:4-621:5
mosek::fusion::ExprConicDomain::ExprConicDomain(mosek::fusion::p_ExprConicDomain *_impl) : _impl(_impl) { /*std::cout << "ExprConicDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ExprConicDomain::~ExprConicDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ExprConicDomain::p_ExprConicDomain
  (::mosek::fusion::ExprConicDomain * _pubthis) :     _pubthis(_pubthis)
{}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ExprConicDomain::get_dom() { return _impl->dom; }
void mosek::fusion::ExprConicDomain::set_dom(monty::rc_ptr< ::mosek::fusion::ConeDomain > _val) { _impl->dom = _val; }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprConicDomain::get_expr() { return _impl->expr; }
void mosek::fusion::ExprConicDomain::set_expr(monty::rc_ptr< ::mosek::fusion::Expression > _val) { _impl->expr = _val; }
// mosek.fusion.ExprConicDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:620:6-88
mosek::fusion::ExprConicDomain::t mosek::fusion::p_ExprConicDomain::_new_ExprConicDomain
  (monty::rc_ptr< ::mosek::fusion::Expression > _7203_expr,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _7204_dom)
{ return new mosek::fusion::ExprConicDomain(_7203_expr,_7204_dom); }
mosek::fusion::ExprConicDomain::ExprConicDomain
  (monty::rc_ptr< ::mosek::fusion::Expression > _7203_expr,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _7204_dom) : 
   ExprConicDomain(new mosek::fusion::p_ExprConicDomain(this))
{ mosek::fusion::p_ExprConicDomain::_get_impl(this)->_initialize(_7203_expr,_7204_dom); }
void mosek::fusion::p_ExprConicDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7203_expr,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _7204_dom)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprConicDomain::_get_impl(::mosek::fusion::ExprConicDomain::t(_pubthis))->expr = _7203_expr;
    mosek::fusion::p_ExprConicDomain::_get_impl(::mosek::fusion::ExprConicDomain::t(_pubthis))->dom = _7204_dom;
  }
}
// mosek.fusion.ExprConicDomain.ctor

void mosek::fusion::p_ExprConicDomain::destroy()
{
  dom.reset();
  expr.reset();
}
void mosek::fusion::ExprConicDomain::destroy() { mosek::fusion::p_ExprConicDomain::_get_impl(this)->destroy(); }
// } class ExprConicDomain
// class ExprLinearDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:606:4-611:5
mosek::fusion::ExprLinearDomain::ExprLinearDomain(mosek::fusion::p_ExprLinearDomain *_impl) : _impl(_impl) { /*std::cout << "ExprLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ExprLinearDomain::~ExprLinearDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ExprLinearDomain::p_ExprLinearDomain
  (::mosek::fusion::ExprLinearDomain * _pubthis) :     _pubthis(_pubthis)
{}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::ExprLinearDomain::get_dom() { return _impl->dom; }
void mosek::fusion::ExprLinearDomain::set_dom(monty::rc_ptr< ::mosek::fusion::LinearDomain > _val) { _impl->dom = _val; }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprLinearDomain::get_expr() { return _impl->expr; }
void mosek::fusion::ExprLinearDomain::set_expr(monty::rc_ptr< ::mosek::fusion::Expression > _val) { _impl->expr = _val; }
// mosek.fusion.ExprLinearDomain.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:609:6-90
mosek::fusion::ExprLinearDomain::t mosek::fusion::p_ExprLinearDomain::_new_ExprLinearDomain
  (monty::rc_ptr< ::mosek::fusion::Expression > _7205_expr,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _7206_dom)
{ return new mosek::fusion::ExprLinearDomain(_7205_expr,_7206_dom); }
mosek::fusion::ExprLinearDomain::ExprLinearDomain
  (monty::rc_ptr< ::mosek::fusion::Expression > _7205_expr,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _7206_dom) : 
   ExprLinearDomain(new mosek::fusion::p_ExprLinearDomain(this))
{ mosek::fusion::p_ExprLinearDomain::_get_impl(this)->_initialize(_7205_expr,_7206_dom); }
void mosek::fusion::p_ExprLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7205_expr,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _7206_dom)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprLinearDomain::_get_impl(::mosek::fusion::ExprLinearDomain::t(_pubthis))->expr = _7205_expr;
    mosek::fusion::p_ExprLinearDomain::_get_impl(::mosek::fusion::ExprLinearDomain::t(_pubthis))->dom = _7206_dom;
  }
}
// mosek.fusion.ExprLinearDomain.ctor

// Begin mosek.fusion.ExprLinearDomain.toDJCTerm
// Method mosek.fusion.ExprLinearDomain.toDJCTerm @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:610:6-67
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::ExprLinearDomain :: __mosek_2fusion_2ExprLinearDomain__toDJCTerm() { return mosek::fusion::p_ExprLinearDomain::_get_impl(this)->__mosek_2fusion_2ExprLinearDomain__toDJCTerm(); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::ExprLinearDomain::toDJCTerm() { return __mosek_2fusion_2ExprLinearDomain__toDJCTerm(); }
/* override: mosek.fusion.ExprDomain.toDJCTerm*/
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::ExprLinearDomain::__mosek_2fusion_2ExprDomain__toDJCTerm() { return __mosek_2fusion_2ExprLinearDomain__toDJCTerm(); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_ExprLinearDomain::__mosek_2fusion_2ExprLinearDomain__toDJCTerm()
{
  return (::mosek::fusion::p_DJC::term(expr,dom)).as<::mosek::fusion::Term>();
}
// End mosek.fusion.ExprLinearDomain.toDJCTerm

void mosek::fusion::p_ExprLinearDomain::destroy()
{
  dom.reset();
  expr.reset();
}
void mosek::fusion::ExprLinearDomain::destroy() { mosek::fusion::p_ExprLinearDomain::_get_impl(this)->destroy(); }
// } class ExprLinearDomain
// class ExprDomain { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:596:4-599:5
// Begin mosek.fusion.ExprDomain.toDJCTerm
monty::rc_ptr< mosek::fusion::Term > mosek::fusion::ExprDomain::toDJCTerm() { return __mosek_2fusion_2ExprDomain__toDJCTerm(); }
// End mosek.fusion.ExprDomain.toDJCTerm

// } class ExprDomain
// class BaseExpression { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:477:4-589:5
mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }
mosek::fusion::p_BaseExpression::p_BaseExpression
  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.BaseExpression.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:505:6-508:7
void mosek::fusion::p_BaseExpression::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _7207_owner,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7208_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7208_shape(_7208_shape ? _7208_shape->raw() : nullptr, _7208_shape ? _7208_shape->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _7208_shape;
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->owner = _7207_owner;
  }
}
// mosek.fusion.BaseExpression.ctor

// Begin mosek.fusion.BaseExpression.toString
// Method mosek.fusion.BaseExpression.toString @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:588:6-64
std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }
std::string mosek::fusion::p_BaseExpression::toString()
{
  return std::string ("Expression()");
}
// End mosek.fusion.BaseExpression.toString

// Begin mosek.fusion.BaseExpression.printStack
// Method mosek.fusion.BaseExpression.printStack @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:541:6-586:7
void mosek::fusion::p_BaseExpression::printStack(monty::rc_ptr< ::mosek::fusion::WorkStack > _7209_rs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7210_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__7210_ri32(_7210_ri32 ? _7210_ri32->raw() : nullptr,_7210_ri32 ? _7210_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7211_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__7211_ri64(_7211_ri64 ? _7211_ri64->raw() : nullptr,_7211_ri64 ? _7211_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7212_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->f64;
  _checked_ptr_1<double> _ptr__7212_rf64(_7212_rf64 ? _7212_rf64->raw() : nullptr,_7212_rf64 ? _7212_rf64->size(0) : 0);
  int32_t _7213_rptr = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->ptr_base;
  int32_t _7214_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->nidxs_base;
  int32_t _7215_rcof = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->cof_base;
  int32_t _7216_rshape = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->shape_base;
  int32_t _7217_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->codeptr_base;
  int32_t _7218_rcode = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->code_base;
  int32_t _7219_rcconst = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->cconst_base;
  int32_t _7220_rsp = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->sp_base;
  int32_t _7221_rnelem = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->nelem;
  int32_t _7222_rnnz = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->nnz;
  int32_t _7223_rncodeatom = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->ncodeatom;
  int32_t _7224_rnd = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->nd;
  bool _7225_rhassp = mosek::fusion::p_WorkStack::_get_impl(_7209_rs)->hassp;
}
// End mosek.fusion.BaseExpression.printStack

// Begin mosek.fusion.BaseExpression.eval
// End mosek.fusion.BaseExpression.eval

// Begin mosek.fusion.BaseExpression.pick
// Method mosek.fusion.BaseExpression.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:534:6-536:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7229_indexrows) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_7229_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7229_indexrows) { return __mosek_2fusion_2BaseExpression__pick(_7229_indexrows); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7229_indexrows) { return __mosek_2fusion_2BaseExpression__pick(_7229_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7229_indexrows)
{
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7229_indexrows)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.pick

// Begin mosek.fusion.BaseExpression.pick
// Method mosek.fusion.BaseExpression.pick @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:530:6-533:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7230_indexes) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_7230_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7230_indexes) { return __mosek_2fusion_2BaseExpression__pick(_7230_indexes); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7230_indexes) { return __mosek_2fusion_2BaseExpression__pick(_7230_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7230_indexes)
{
  _checked_ptr_1<int32_t> _ptr__7230_indexes(_7230_indexes ? _7230_indexes->raw() : nullptr, _7230_indexes ? _7230_indexes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7231_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_7230_indexes)->size(0)),(int)1)));
  int32_t _12544_ = (int)0;
  int32_t _12545_ = (int)((_7230_indexes)->size(0));
  for (int32_t _7232_i = _12544_; _7232_i < _12545_; ++_7232_i)
  {
    {
      ((*_7231_idxs)(_7232_i,(int)0)) = _ptr__7230_indexes[_7232_i];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7231_idxs)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.pick

// Begin mosek.fusion.BaseExpression.index
// Method mosek.fusion.BaseExpression.index @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:526:6-529:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7233_indexes) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_7233_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7233_indexes) { return __mosek_2fusion_2BaseExpression__index(_7233_indexes); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7233_indexes) { return __mosek_2fusion_2BaseExpression__index(_7233_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7233_indexes)
{
  _checked_ptr_1<int32_t> _ptr__7233_indexes(_7233_indexes ? _7233_indexes->raw() : nullptr, _7233_indexes ? _7233_indexes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7234_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)((_7233_indexes)->size(0)))));
  int32_t _12546_ = (int)0;
  int32_t _12547_ = (int)((_7233_indexes)->size(0));
  for (int32_t _7235_i = _12546_; _7235_i < _12547_; ++_7235_i)
  {
    {
      ((*_7234_idxs)((int)0,_7235_i)) = _ptr__7233_indexes[_7235_i];
    }
  }
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),(::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7234_idxs)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.index

// Begin mosek.fusion.BaseExpression.index
// Method mosek.fusion.BaseExpression.index @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:522:6-525:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int32_t _7236_i) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_7236_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int32_t _7236_i) { return __mosek_2fusion_2BaseExpression__index(_7236_i); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int32_t _7236_i) { return __mosek_2fusion_2BaseExpression__index(_7236_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int32_t _7236_i)
{
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7237_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)1)));
  ((*_7237_idxs)((int)0,(int)0)) = _7236_i;
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),(::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7237_idxs)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.index

// Begin mosek.fusion.BaseExpression.slice
// Method mosek.fusion.BaseExpression.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:519:6-521:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7238_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7239_lasta) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_7238_firsta,_7239_lasta); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7238_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7239_lasta) { return __mosek_2fusion_2BaseExpression__slice(_7238_firsta,_7239_lasta); }
/* override: mosek.fusion.Expression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7238_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7239_lasta) { return __mosek_2fusion_2BaseExpression__slice(_7238_firsta,_7239_lasta); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7238_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7239_lasta)
{
  _checked_ptr_1<int32_t> _ptr__7238_firsta(_7238_firsta ? _7238_firsta->raw() : nullptr, _7238_firsta ? _7238_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7239_lasta(_7239_lasta ? _7239_lasta->raw() : nullptr, _7239_lasta ? _7239_lasta->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7238_firsta,_7239_lasta)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.slice

// Begin mosek.fusion.BaseExpression.slice
// Method mosek.fusion.BaseExpression.slice @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:516:6-518:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int32_t _7240_first,int32_t _7241_last) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_7240_first,_7241_last); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int32_t _7240_first,int32_t _7241_last) { return __mosek_2fusion_2BaseExpression__slice(_7240_first,_7241_last); }
/* override: mosek.fusion.Expression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int32_t _7240_first,int32_t _7241_last) { return __mosek_2fusion_2BaseExpression__slice(_7240_first,_7241_last); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int32_t _7240_first,int32_t _7241_last)
{
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7240_first)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7241_last)}))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.slice

// Begin mosek.fusion.BaseExpression.getSize
// Method mosek.fusion.BaseExpression.getSize @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:514:6-64
int64_t mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_BaseExpression::getSize()
{
  return ::mosek::fusion::p_Set::size(shape);
}
// End mosek.fusion.BaseExpression.getSize

// Begin mosek.fusion.BaseExpression.getND
// Method mosek.fusion.BaseExpression.getND @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:513:6-59
int32_t mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_BaseExpression::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.BaseExpression.getND

// Begin mosek.fusion.BaseExpression.getDim
// Method mosek.fusion.BaseExpression.getDim @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:512:6-64
int32_t mosek::fusion::BaseExpression :: getDim(int32_t _7242_d) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_7242_d); }
int32_t mosek::fusion::p_BaseExpression::getDim(int32_t _7242_d)
{
  return ((*shape)(_7242_d));
}
// End mosek.fusion.BaseExpression.getDim

// Begin mosek.fusion.BaseExpression.getShape
// Method mosek.fusion.BaseExpression.getShape @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:511:6-79
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_BaseExpression::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.BaseExpression.getShape

// Begin mosek.fusion.BaseExpression.getModel
// Method mosek.fusion.BaseExpression.getModel @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:510:6-54
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__getModel() { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseExpression::getModel() { return __mosek_2fusion_2BaseExpression__getModel(); }
/* override: mosek.fusion.Expression.getModel*/
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__getModel() { return __mosek_2fusion_2BaseExpression__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__getModel()
{
  return owner;
}
// End mosek.fusion.BaseExpression.getModel

// Begin mosek.fusion.BaseExpression.modelFrom
// Method mosek.fusion.BaseExpression.modelFrom @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:495:6-503:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseExpression::modelFrom(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7243_es)
{
  if (((int)((_7243_es)->size(0)) == (int)0))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _7244_m = ((*_7243_es)((int)0))->__mosek_2fusion_2Expression__getModel();
      int32_t _12548_ = (int)1;
      int32_t _12549_ = (int)((_7243_es)->size(0));
      for (int32_t _7245_i = _12548_; _7245_i < _12549_; ++_7245_i)
      {
        {
          _7244_m = ::mosek::fusion::p_BaseExpression::modelFrom(_7244_m,((*_7243_es)(_7245_i)));
        }
      }
      return _7244_m;
    }
  }
}
// End mosek.fusion.BaseExpression.modelFrom

// Begin mosek.fusion.BaseExpression.modelFrom
// Method mosek.fusion.BaseExpression.modelFrom @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:492:6-494:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseExpression::modelFrom(monty::rc_ptr< ::mosek::fusion::Model > _7246_m1,monty::rc_ptr< ::mosek::fusion::Expression > _7247_e2)
{
  return ::mosek::fusion::p_BaseExpression::modelFrom(_7246_m1,_7247_e2->__mosek_2fusion_2Expression__getModel());
}
// End mosek.fusion.BaseExpression.modelFrom

// Begin mosek.fusion.BaseExpression.modelFrom
// Method mosek.fusion.BaseExpression.modelFrom @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:489:6-491:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseExpression::modelFrom(monty::rc_ptr< ::mosek::fusion::Expression > _7248_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7249_e2)
{
  return ::mosek::fusion::p_BaseExpression::modelFrom(_7248_e1->__mosek_2fusion_2Expression__getModel(),_7249_e2->__mosek_2fusion_2Expression__getModel());
}
// End mosek.fusion.BaseExpression.modelFrom

// Begin mosek.fusion.BaseExpression.modelFrom
// Method mosek.fusion.BaseExpression.modelFrom @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:481:6-488:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseExpression::modelFrom(monty::rc_ptr< ::mosek::fusion::Model > _7250_m1,monty::rc_ptr< ::mosek::fusion::Model > _7251_m2)
{
  if ((NULL == _7250_m1.get()))
  {
    {
      return _7251_m2;
    }
  }
  else if(((NULL != _7251_m2.get()) && (_7250_m1 != _7251_m2)))
  {
    {
      throw ::mosek::fusion::ModelError(std::string ("Mixing different models"));
    }
  }
  else
  {
    {
      return _7250_m1;
    }
  }
}
// End mosek.fusion.BaseExpression.modelFrom

void mosek::fusion::p_BaseExpression::destroy()
{
  owner.reset();
  shape.reset();
}
void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }
// } class BaseExpression
// class WorkStack { // @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:46:4-472:5
mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }
mosek::fusion::p_WorkStack::p_WorkStack
  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis)
{}
int32_t mosek::fusion::WorkStack::get_code_base() { return _impl->code_base; }
void mosek::fusion::WorkStack::set_code_base(int32_t _val) { _impl->code_base = _val; }
int32_t mosek::fusion::WorkStack::get_cconst_base() { return _impl->cconst_base; }
void mosek::fusion::WorkStack::set_cconst_base(int32_t _val) { _impl->cconst_base = _val; }
int32_t mosek::fusion::WorkStack::get_codeptr_base() { return _impl->codeptr_base; }
void mosek::fusion::WorkStack::set_codeptr_base(int32_t _val) { _impl->codeptr_base = _val; }
int32_t mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int32_t _val) { _impl->cof_base = _val; }
int32_t mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int32_t _val) { _impl->nidxs_base = _val; }
int32_t mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int32_t _val) { _impl->sp_base = _val; }
int32_t mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int32_t _val) { _impl->shape_base = _val; }
int32_t mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int32_t _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int32_t mosek::fusion::WorkStack::get_ncodeatom() { return _impl->ncodeatom; }
void mosek::fusion::WorkStack::set_ncodeatom(int32_t _val) { _impl->ncodeatom = _val; }
int32_t mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int32_t _val) { _impl->nelem = _val; }
int32_t mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int32_t _val) { _impl->nnz = _val; }
int32_t mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int32_t _val) { _impl->nd = _val; }
int32_t mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int32_t _val) { _impl->pf64 = _val; }
int32_t mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int32_t _val) { _impl->pi64 = _val; }
int32_t mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int32_t _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< int64_t,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->i32 = _val; }
// mosek.fusion.WorkStack.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:212:6-236:7
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack
  ()
{ return new mosek::fusion::WorkStack(); }
mosek::fusion::WorkStack::WorkStack
  () : 
   WorkStack(new mosek::fusion::p_WorkStack(this))
{ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }
void mosek::fusion::p_WorkStack::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    i32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)128)));
    i64 = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)128)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)128)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ncodeatom = (int)0;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    cof_base = (int)0;
    cconst_base = (int)0;
    code_base = (int)0;
    codeptr_base = (int)0;
  }
}
// mosek.fusion.WorkStack.ctor

// Begin mosek.fusion.WorkStack.validate
// Method mosek.fusion.WorkStack.validate @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:471:6-72
void mosek::fusion::WorkStack :: validate() { mosek::fusion::p_WorkStack::_get_impl(this)->validate(); }
void mosek::fusion::p_WorkStack::validate()
{
  validate_from(pi32,pi64,pf64,false);
}
// End mosek.fusion.WorkStack.validate

// Begin mosek.fusion.WorkStack.validate_all
// Method mosek.fusion.WorkStack.validate_all @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:468:6-75
void mosek::fusion::WorkStack :: validate_all() { mosek::fusion::p_WorkStack::_get_impl(this)->validate_all(); }
void mosek::fusion::p_WorkStack::validate_all()
{
  validate_from(pi32,pi64,pf64,true);
}
// End mosek.fusion.WorkStack.validate_all

// Begin mosek.fusion.WorkStack.validate_from
// Method mosek.fusion.WorkStack.validate_from @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:399:6-465:7
void mosek::fusion::p_WorkStack::validate_from(int32_t _7252_fi32,int32_t _7253_fi64,int32_t _7254_ff64,bool _7255_rec)
{
  int32_t _7256_nd = ((*i32)((_7252_fi32 - (int)1)));
  int32_t _7257_nelem = ((*i32)(((_7252_fi32 - _7256_nd) - (int)2)));
  int32_t _7258_nnz = ((*i32)(((_7252_fi32 - _7256_nd) - (int)3)));
  bool _7259_hassp = (((*i32)(((_7252_fi32 - _7256_nd) - (int)4))) != (int)0);
  int32_t _7260_ncodeatom = ((*i32)(((_7252_fi32 - _7256_nd) - (int)5)));
  int32_t _7261_ptr_base = (((_7252_fi32 - _7256_nd) - (int)6) - _7257_nelem);
  int32_t _12550_;
  bool _12551_ = (_7260_ncodeatom > (int)0);
  if (_12551_)
  {
    _12550_ = (_7261_ptr_base - safe_add( _7258_nnz,(int)1 ));
  }
  else
  {
    _12550_ = _7261_ptr_base;
  }
  int32_t _7262_codeptr_base = _12550_;
  int32_t _7263_code_base = (_7262_codeptr_base - _7260_ncodeatom);
  int32_t _12552_;
  bool _12553_ = _7259_hassp;
  if (_12553_)
  {
    _12552_ = (_7253_fi64 - _7257_nelem);
  }
  else
  {
    _12552_ = _7253_fi64;
  }
  int32_t _7264_sp_base = _12552_;
  int32_t _7265_nidxs_base = (_7264_sp_base - _7258_nnz);
  int32_t _7266_cof_base = (_7254_ff64 - _7258_nnz);
  int32_t _7267_cconst_base = (_7266_cof_base - _7260_ncodeatom);
  int64_t _7268_shapesize = (int)1;
  {
    int32_t _7269_i = (int)0;
    for(;(_7269_i < _7256_nd);++ _7269_i)
    {
      {
        _7268_shapesize *= ((*i32)(safe_add( ((_7252_fi32 - _7256_nd) - (int)1),_7269_i )));
      }
    }
  }
  if ((_7268_shapesize < _7257_nelem))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Invalid shape/nelem"));
    }
  }
  {}
  if (((_7268_shapesize > _7257_nelem) && (!_7259_hassp)))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Invalid hassp/nelem/shape"));
    }
  }
  {}
  if ((_7258_nnz < ((*i32)(safe_add( _7261_ptr_base,_7257_nelem )))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Invalid ptr/nnz"));
    }
  }
  {}
  int32_t _12554_ = (int)0;
  int32_t _12555_ = _7257_nelem;
  for (int32_t _7270_i = _12554_; _7270_i < _12555_; ++_7270_i)
  {
    {
      if ((((*i32)(safe_add( _7261_ptr_base,_7270_i ))) > ((*i32)(safe_add( safe_add( _7261_ptr_base,_7270_i ),(int)1 )))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Invalid ptr, not ascending"));
        }
      }
      {}
    }
  }
  if (_7259_hassp)
  {
    {
      int32_t _12556_ = (int)0;
      int32_t _12557_ = (_7257_nelem - (int)1);
      for (int32_t _7271_i = _12556_; _7271_i < _12557_; ++_7271_i)
      {
        {
          if ((((*i64)(safe_add( _7264_sp_base,_7271_i ))) > ((*i64)(safe_add( safe_add( _7264_sp_base,_7271_i ),(int)1 )))))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Invalid sp - not sorted"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  if ((_7260_ncodeatom > (int)0))
  {
    {
      int32_t _12558_ = (int)0;
      int32_t _12559_ = _7258_nnz;
      for (int32_t _7272_i = _12558_; _7272_i < _12559_; ++_7272_i)
      {
        {
          if ((((*i32)(safe_add( _7262_codeptr_base,_7272_i ))) > ((*i32)(safe_add( safe_add( _7262_codeptr_base,_7272_i ),(int)1 )))))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Invalid codeptr - not ascending"));
            }
          }
          {}
        }
      }
      int32_t _12560_ = (int)0;
      int32_t _12561_ = _7258_nnz;
      for (int32_t _7273_i = _12560_; _7273_i < _12561_; ++_7273_i)
      {
        {
          int32_t _7274_stackpos = (int)0;
          int32_t _12562_ = ((*i32)(safe_add( _7262_codeptr_base,_7273_i )));
          int32_t _12563_ = ((*i32)(safe_add( safe_add( _7262_codeptr_base,_7273_i ),(int)1 )));
          for (int32_t _7275_j = _12562_; _7275_j < _12563_; ++_7275_j)
          {
            {
              int32_t _7276_op = ((*i32)(safe_add( _7263_code_base,_7275_j )));
              if ((_7276_op == 0))
              {
                {
                }
              }
              else if(((_7276_op == 1) || ((_7276_op == 2) || (_7276_op == 10))))
              {
                {
                  ++ _7274_stackpos;
                }
              }
              else if(((_7276_op == 3) || (_7276_op == 5)))
              {
                {
                  if ((_7274_stackpos < (int)2))
                  {
                    {
                      throw ::mosek::fusion::UnexpectedError(std::string ("Code stack underflow"));
                    }
                  }
                  {}
                  -- _7274_stackpos;
                }
              }
              else if(((_7276_op == 4) || (_7276_op == 6)))
              {
                {
                  if ((_7274_stackpos < (int)1))
                  {
                    {
                      throw ::mosek::fusion::UnexpectedError(std::string ("Code stack underflow"));
                    }
                  }
                  {}
                }
              }
              else if((_7276_op == 8))
              {
                {
                  int32_t _7277_n = (int32_t)((*f64)(safe_add( _7267_cconst_base,_7275_j )));
                  if ((_7277_n > _7274_stackpos))
                  {
                    {
                      throw ::mosek::fusion::UnexpectedError(std::string ("Code stack underflow in SUM"));
                    }
                  }
                  {}
                  _7274_stackpos -= (_7277_n - (int)1);
                }
              }
              else
              {
                {
                  throw ::mosek::fusion::UnexpectedError(std::string ("Invalid code list opcode"));
                }
              }
            }
          }
          if ((_7274_stackpos != (int)1))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Invalid code list result"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  if (_7255_rec)
  {
    {
      validate_from(_7263_code_base,_7265_nidxs_base,_7267_cconst_base,_7255_rec);
    }
  }
  {}
}
// End mosek.fusion.WorkStack.validate_from

// Begin mosek.fusion.WorkStack.formatCurrent
// Method mosek.fusion.WorkStack.formatCurrent @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:369:6-397:7
std::string mosek::fusion::WorkStack :: formatCurrent() { return mosek::fusion::p_WorkStack::_get_impl(this)->formatCurrent(); }
std::string mosek::fusion::p_WorkStack::formatCurrent()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7278_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  std::vector<int32_t> _12564_;
  for (int32_t _7279_i = (int)0, _12565_ = nd; _7279_i < _12565_ ; ++_7279_i)
  {
    _12564_.push_back(((*i32)(safe_add( shape_base,_7279_i ))));
  }
  auto _12566_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12564_.size()),_12564_.begin(),_12564_.end()));
  std::vector<int32_t> _12567_;
  for (int32_t _7280_i = (int)0, _12568_ = safe_add( nelem,(int)1 ); _7280_i < _12568_ ; ++_7280_i)
  {
    _12567_.push_back(((*i32)(safe_add( ptr_base,_7280_i ))));
  }
  auto _12569_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12567_.size()),_12567_.begin(),_12567_.end()));
  _7278_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nelem     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nelem)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nnz       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nnz)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  hassp     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" / "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  shape     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12566_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  ptr       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12569_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
  if ((ncodeatom > (int)0))
  {
    {
      std::vector<int32_t> _12570_;
      for (int32_t _7281_i = (int)0, _12571_ = safe_add( nnz,(int)1 ); _7281_i < _12571_ ; ++_7281_i)
      {
        _12570_.push_back(((*i32)(safe_add( codeptr_base,_7281_i ))));
      }
      auto _12572_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12570_.size()),_12570_.begin(),_12570_.end()));
      _7278_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  codeptr   = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12572_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  if (hassp)
  {
    {
      std::vector<int64_t> _12573_;
      for (int32_t _7282_i = (int)0, _12574_ = nelem; _7282_i < _12574_ ; ++_7282_i)
      {
        _12573_.push_back(((*i64)(safe_add( sp_base,_7282_i ))));
      }
      auto _12575_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12573_.size()),_12573_.begin(),_12573_.end()));
      _7278_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  sp        = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12575_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  int32_t _12576_ = (int)0;
  int32_t _12577_ = nelem;
  for (int32_t _7283_i = _12576_; _7283_i < _12577_; ++_7283_i)
  {
    {
      std::vector<int64_t> _12578_;
      for (int32_t _7284_j = ((*i32)(safe_add( ptr_base,_7283_i ))), _12579_ = ((*i32)(safe_add( safe_add( ptr_base,_7283_i ),(int)1 ))); _7284_j < _12579_ ; ++_7284_j)
      {
        _12578_.push_back(((*i64)(safe_add( nidxs_base,_7284_j ))));
      }
      auto _12580_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12578_.size()),_12578_.begin(),_12578_.end()));
      std::vector<double> _12581_;
      for (int32_t _7285_j = ((*i32)(safe_add( ptr_base,_7283_i ))), _12582_ = ((*i32)(safe_add( safe_add( ptr_base,_7283_i ),(int)1 ))); _7285_j < _12582_ ; ++_7285_j)
      {
        _12581_.push_back(((*f64)(safe_add( cof_base,_7285_j ))));
      }
      auto _12583_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12581_.size()),_12581_.begin(),_12581_.end()));
      _7278_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  row["))->__mosek_2fusion_2Utils_2StringBuffer__a(_7283_i)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    nidx : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12580_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    cof  : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12583_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
      if ((ncodeatom > (int)0))
      {
        {
          int32_t _12584_ = ((*i32)(safe_add( ptr_base,_7283_i )));
          int32_t _12585_ = ((*i32)(safe_add( safe_add( ptr_base,_7283_i ),(int)1 )));
          for (int32_t _7286_j = _12584_; _7286_j < _12585_; ++_7286_j)
          {
            {
              std::vector<int32_t> _12586_;
              for (int32_t _7287_k = ((*i32)(safe_add( codeptr_base,_7286_j ))), _12587_ = ((*i32)(safe_add( safe_add( codeptr_base,_7286_j ),(int)1 ))); _7287_k < _12587_ ; ++_7287_k)
              {
                _12586_.push_back(((*i32)(safe_add( code_base,_7287_k ))));
              }
              auto _12588_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12586_.size()),_12586_.begin(),_12586_.end()));
              std::vector<double> _12589_;
              for (int32_t _7288_k = ((*i32)(safe_add( codeptr_base,_7286_j ))), _12590_ = ((*i32)(safe_add( safe_add( codeptr_base,_7286_j ),(int)1 ))); _7288_k < _12590_ ; ++_7288_k)
              {
                _12589_.push_back(((*f64)(safe_add( cconst_base,_7288_k ))));
              }
              auto _12591_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12589_.size()),_12589_.begin(),_12589_.end()));
              _7278_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("      code["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*i64)(safe_add( nidxs_base,_7286_j ))))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12588_)->__mosek_2fusion_2Utils_2StringBuffer__a(_12591_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
            }
          }
        }
      }
      {}
    }
  }
  return _7278_sb->toString();
}
// End mosek.fusion.WorkStack.formatCurrent

// Begin mosek.fusion.WorkStack.peek_hassp
// Method mosek.fusion.WorkStack.peek_hassp @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:367:6-77
bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }
bool mosek::fusion::p_WorkStack::peek_hassp()
{
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
// End mosek.fusion.WorkStack.peek_hassp

// Begin mosek.fusion.WorkStack.peek_nnz
// Method mosek.fusion.WorkStack.peek_nnz @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:365:6-72
int32_t mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }
int32_t mosek::fusion::p_WorkStack::peek_nnz()
{
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
// End mosek.fusion.WorkStack.peek_nnz

// Begin mosek.fusion.WorkStack.peek_nelem
// Method mosek.fusion.WorkStack.peek_nelem @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:363:6-72
int32_t mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }
int32_t mosek::fusion::p_WorkStack::peek_nelem()
{
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
// End mosek.fusion.WorkStack.peek_nelem

// Begin mosek.fusion.WorkStack.peek_dim
// Method mosek.fusion.WorkStack.peek_dim @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:361:6-71
int32_t mosek::fusion::WorkStack :: peek_dim(int32_t _7289_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_7289_i); }
int32_t mosek::fusion::p_WorkStack::peek_dim(int32_t _7289_i)
{
  return _pubthis->peeki32(safe_add( _7289_i,(int)1 ));
}
// End mosek.fusion.WorkStack.peek_dim

// Begin mosek.fusion.WorkStack.peek_nd
// Method mosek.fusion.WorkStack.peek_nd @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:359:6-68
int32_t mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }
int32_t mosek::fusion::p_WorkStack::peek_nd()
{
  return _pubthis->peeki32();
}
// End mosek.fusion.WorkStack.peek_nd

// Begin mosek.fusion.WorkStack.alloc_expr
// Method mosek.fusion.WorkStack.alloc_expr @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:354:6-356:7
void mosek::fusion::WorkStack :: alloc_expr(int32_t _7290_nd,int32_t _7291_nelem,int32_t _7292_nnz,bool _7293_hassp) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_7290_nd,_7291_nelem,_7292_nnz,_7293_hassp); }
void mosek::fusion::p_WorkStack::alloc_expr(int32_t _7290_nd,int32_t _7291_nelem,int32_t _7292_nnz,bool _7293_hassp)
{
  _pubthis->alloc_expr(_7290_nd,_7291_nelem,_7292_nnz,_7293_hassp,(int)0);
}
// End mosek.fusion.WorkStack.alloc_expr

// Begin mosek.fusion.WorkStack.alloc_expr
// Method mosek.fusion.WorkStack.alloc_expr @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:323:6-351:7
void mosek::fusion::WorkStack :: alloc_expr(int32_t _7294_nd,int32_t _7295_nelem,int32_t _7296_nnz,bool _7297_hassp,int32_t _7298_ncodeatom) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_7294_nd,_7295_nelem,_7296_nnz,_7297_hassp,_7298_ncodeatom); }
void mosek::fusion::p_WorkStack::alloc_expr(int32_t _7294_nd,int32_t _7295_nelem,int32_t _7296_nnz,bool _7297_hassp,int32_t _7298_ncodeatom)
{
  if (((_7294_nd < (int)0) || ((_7295_nelem < (int)0) || ((_7296_nnz < (int)0) || (_7298_ncodeatom < (int)0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Attempted to allocate negative amount on work stack"));
    }
  }
  {}
  cof_base = _pubthis->allocf64(_7296_nnz);
  cconst_base = _pubthis->allocf64(_7298_ncodeatom);
  nidxs_base = _pubthis->alloci64(_7296_nnz);
  int32_t _12592_;
  bool _12593_ = _7297_hassp;
  if (_12593_)
  {
    _12592_ = _pubthis->alloci64(_7295_nelem);
  }
  else
  {
    _12592_ = (-(int)9999);
  }
  sp_base = _12592_;
  code_base = _pubthis->alloci32(_7298_ncodeatom);
  int32_t _12594_;
  bool _12595_ = (_7298_ncodeatom > (int)0);
  if (_12595_)
  {
    _12594_ = _pubthis->alloci32(safe_add( _7296_nnz,(int)1 ));
  }
  else
  {
    _12594_ = (-(int)9999);
  }
  codeptr_base = _12594_;
  ptr_base = _pubthis->alloci32(safe_add( _7295_nelem,(int)1 ));
  _pubthis->pushi32(_7298_ncodeatom);
  int32_t _12596_;
  bool _12597_ = _7297_hassp;
  if (_12597_)
  {
    _12596_ = (int)1;
  }
  else
  {
    _12596_ = (int)0;
  }
  _pubthis->pushi32(_12596_);
  _pubthis->pushi32(_7296_nnz);
  _pubthis->pushi32(_7295_nelem);
  shape_base = _pubthis->alloci32(_7294_nd);
  _pubthis->pushi32(_7294_nd);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->ncodeatom = _7298_ncodeatom;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _7294_nd;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _7295_nelem;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _7296_nnz;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _7297_hassp;
}
// End mosek.fusion.WorkStack.alloc_expr

// Begin mosek.fusion.WorkStack.pop_expr
// Method mosek.fusion.WorkStack.pop_expr @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:301:6-320:7
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }
void mosek::fusion::p_WorkStack::pop_expr()
{
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ncodeatom = _pubthis->popi32();
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int32_t _12598_;
  bool _12599_ = (ncodeatom > (int)0);
  if (_12599_)
  {
    _12598_ = _pubthis->popi32(safe_add( nnz,(int)1 ));
  }
  else
  {
    _12598_ = (-(int)9999);
  }
  codeptr_base = _12598_;
  code_base = _pubthis->popi32(ncodeatom);
  int32_t _12600_;
  bool _12601_ = hassp;
  if (_12601_)
  {
    _12600_ = _pubthis->popi64(nelem);
  }
  else
  {
    _12600_ = (-(int)9999);
  }
  sp_base = _12600_;
  nidxs_base = _pubthis->popi64(nnz);
  cconst_base = _pubthis->popf64(ncodeatom);
  cof_base = _pubthis->popf64(nnz);
}
// End mosek.fusion.WorkStack.pop_expr

// Begin mosek.fusion.WorkStack.move_expr
// Method mosek.fusion.WorkStack.move_expr @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:284:6-298:7
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _7299_to) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_7299_to); }
void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _7299_to)
{
  int32_t _7300_tmp_pi32 = pi32;
  int32_t _7301_tmp_pi64 = pi64;
  int32_t _7302_tmp_pf64 = pf64;
  _pubthis->pop_expr();
  int32_t _7303_ti32 = _7299_to->alloci32((_7300_tmp_pi32 - pi32));
  int32_t _7304_ti64 = _7299_to->alloci64((_7301_tmp_pi64 - pi64));
  int32_t _7305_tf64 = _7299_to->allocf64((_7302_tmp_pf64 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_7299_to)->i32,_7303_ti32,(_7300_tmp_pi32 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_7299_to)->i64,_7304_ti64,(_7301_tmp_pi64 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_7299_to)->f64,_7305_tf64,(_7302_tmp_pf64 - pf64));
}
// End mosek.fusion.WorkStack.move_expr

// Begin mosek.fusion.WorkStack.peek_expr
// Method mosek.fusion.WorkStack.peek_expr @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:272:6-281:7
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }
void mosek::fusion::p_WorkStack::peek_expr()
{
  int32_t _7306_tmp_pi32 = pi32;
  int32_t _7307_tmp_pi64 = pi64;
  int32_t _7308_tmp_pf64 = pf64;
  _pubthis->pop_expr();
  pi32 = _7306_tmp_pi32;
  pi64 = _7307_tmp_pi64;
  pf64 = _7308_tmp_pf64;
}
// End mosek.fusion.WorkStack.peek_expr

// Begin mosek.fusion.WorkStack.ensure_sparsity
// Method mosek.fusion.WorkStack.ensure_sparsity @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:258:6-268:7
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }
void mosek::fusion::p_WorkStack::ensure_sparsity()
{
  int32_t _7309_nd = ((*i32)((pi32 - (int)1)));
  bool _7310_hassp = (((*i32)(((pi32 - _7309_nd) - (int)3))) != (int)0);
  int32_t _7311_nelem = ((*i32)(((pi32 - _7309_nd) - (int)1)));
  if ((!_7310_hassp))
  {
    {
      ((*i32)(((pi32 - _7309_nd) - (int)3))) = (int)1;
      int32_t _7312_sp = _pubthis->alloci64(_7311_nelem);
      int32_t _12602_ = (int)0;
      int32_t _12603_ = _7311_nelem;
      for (int32_t _7313_i = _12602_; _7313_i < _12603_; ++_7313_i)
      {
        {
          ((*i64)(_7312_sp)) = _7313_i;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensure_sparsity

// Begin mosek.fusion.WorkStack.clear
// Method mosek.fusion.WorkStack.clear @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:210:6-61
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }
void mosek::fusion::p_WorkStack::clear()
{
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
// End mosek.fusion.WorkStack.clear

// Begin mosek.fusion.WorkStack.allocf64
// Method mosek.fusion.WorkStack.allocf64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:201:6-207:7
int32_t mosek::fusion::WorkStack :: allocf64(int32_t _7314_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_7314_n); }
int32_t mosek::fusion::p_WorkStack::allocf64(int32_t _7314_n)
{
  _pubthis->ensuref64(_7314_n);
  int32_t _7315_r = pf64;
  pf64 += _7314_n;
  return _7315_r;
}
// End mosek.fusion.WorkStack.allocf64

// Begin mosek.fusion.WorkStack.alloci64
// Method mosek.fusion.WorkStack.alloci64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:191:6-197:7
int32_t mosek::fusion::WorkStack :: alloci64(int32_t _7316_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_7316_n); }
int32_t mosek::fusion::p_WorkStack::alloci64(int32_t _7316_n)
{
  _pubthis->ensurei64(_7316_n);
  int32_t _7317_r = pi64;
  pi64 += _7316_n;
  return _7317_r;
}
// End mosek.fusion.WorkStack.alloci64

// Begin mosek.fusion.WorkStack.alloci32
// Method mosek.fusion.WorkStack.alloci32 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:177:6-187:7
int32_t mosek::fusion::WorkStack :: alloci32(int32_t _7318_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_7318_n); }
int32_t mosek::fusion::p_WorkStack::alloci32(int32_t _7318_n)
{
  if ((_7318_n > (int)0))
  {
    {
      _pubthis->ensurei32(_7318_n);
      int32_t _7319_r = pi32;
      pi32 += _7318_n;
      return _7319_r;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
// End mosek.fusion.WorkStack.alloci32

// Begin mosek.fusion.WorkStack.pushf64
// Method mosek.fusion.WorkStack.pushf64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:168:6-172:7
void mosek::fusion::WorkStack :: pushf64(double _7320_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_7320_v); }
void mosek::fusion::p_WorkStack::pushf64(double _7320_v)
{
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _7320_v;
  ++ pf64;
}
// End mosek.fusion.WorkStack.pushf64

// Begin mosek.fusion.WorkStack.pushi64
// Method mosek.fusion.WorkStack.pushi64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:160:6-164:7
void mosek::fusion::WorkStack :: pushi64(int64_t _7321_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_7321_v); }
void mosek::fusion::p_WorkStack::pushi64(int64_t _7321_v)
{
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _7321_v;
  ++ pi64;
}
// End mosek.fusion.WorkStack.pushi64

// Begin mosek.fusion.WorkStack.pushi32
// Method mosek.fusion.WorkStack.pushi32 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:152:6-156:7
void mosek::fusion::WorkStack :: pushi32(int32_t _7322_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_7322_v); }
void mosek::fusion::p_WorkStack::pushi32(int32_t _7322_v)
{
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _7322_v;
  ++ pi32;
}
// End mosek.fusion.WorkStack.pushi32

// Begin mosek.fusion.WorkStack.ensuref64
// Method mosek.fusion.WorkStack.ensuref64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:141:6-147:7
void mosek::fusion::WorkStack :: ensuref64(int32_t _7323_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_7323_n); }
void mosek::fusion::p_WorkStack::ensuref64(int32_t _7323_n)
{
  if ((safe_add( pf64,_7323_n ) > (int)((f64)->size(0))))
  {
    {
      int32_t _12604_;
      bool _12605_ = ((_7323_n < (int)((f64)->size(0))) && ((int)((f64)->size(0)) < (int)0x3FFFFFFF));
      if (_12605_)
      {
        _12604_ = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _12604_ = safe_add( (int)((f64)->size(0)),_7323_n );
      }
      int32_t _7324_newsz = _12604_;
      std::shared_ptr< monty::ndarray< double,1 > > _7325_tmp = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7324_newsz)));
      _checked_ptr_1<double> _ptr__7325_tmp(_7325_tmp ? _7325_tmp->raw() : nullptr,_7325_tmp ? _7325_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_7325_tmp,(int)0,pf64);
      f64 = _7325_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensuref64

// Begin mosek.fusion.WorkStack.ensurei64
// Method mosek.fusion.WorkStack.ensurei64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:131:6-137:7
void mosek::fusion::WorkStack :: ensurei64(int32_t _7326_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_7326_n); }
void mosek::fusion::p_WorkStack::ensurei64(int32_t _7326_n)
{
  if ((safe_add( pi64,_7326_n ) > (int)((i64)->size(0))))
  {
    {
      int32_t _12606_;
      bool _12607_ = ((_7326_n < (int)((i64)->size(0))) && ((int)((i64)->size(0)) < (int)0x3FFFFFFF));
      if (_12607_)
      {
        _12606_ = (int)((i64)->size(0));
      }
      else
      {
        _12606_ = _7326_n;
      }
      int32_t _7327_newsz = safe_add( (int)((i64)->size(0)),_12606_ );
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7328_tmp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7327_newsz)));
      _checked_ptr_1<int64_t> _ptr__7328_tmp(_7328_tmp ? _7328_tmp->raw() : nullptr,_7328_tmp ? _7328_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_7328_tmp,(int)0,pi64);
      i64 = _7328_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensurei64

// Begin mosek.fusion.WorkStack.ensurei32
// Method mosek.fusion.WorkStack.ensurei32 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:121:6-127:7
void mosek::fusion::WorkStack :: ensurei32(int32_t _7329_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_7329_n); }
void mosek::fusion::p_WorkStack::ensurei32(int32_t _7329_n)
{
  if ((safe_add( pi32,_7329_n ) > (int)((i32)->size(0))))
  {
    {
      int32_t _12608_;
      bool _12609_ = ((_7329_n < (int)((i32)->size(0))) && ((int)((i32)->size(0)) < (int)0x3FFFFFFF));
      if (_12609_)
      {
        _12608_ = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _12608_ = safe_add( (int)((i32)->size(0)),_7329_n );
      }
      int32_t _7330_newsz = _12608_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7331_tmp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7330_newsz)));
      _checked_ptr_1<int32_t> _ptr__7331_tmp(_7331_tmp ? _7331_tmp->raw() : nullptr,_7331_tmp ? _7331_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_7331_tmp,(int)0,pi32);
      i32 = _7331_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensurei32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:112:6-116:7
int32_t mosek::fusion::WorkStack :: popf64(int32_t _7332_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_7332_n); }
int32_t mosek::fusion::p_WorkStack::popf64(int32_t _7332_n)
{
  pf64 -= _7332_n;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pf64;
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:107:6-111:7
int32_t mosek::fusion::WorkStack :: popi64(int32_t _7333_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_7333_n); }
int32_t mosek::fusion::p_WorkStack::popi64(int32_t _7333_n)
{
  pi64 -= _7333_n;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi64;
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:102:6-106:7
int32_t mosek::fusion::WorkStack :: popi32(int32_t _7334_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_7334_n); }
int32_t mosek::fusion::p_WorkStack::popi32(int32_t _7334_n)
{
  pi32 -= _7334_n;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi32;
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:97:6-101:7
void mosek::fusion::WorkStack :: popf64(int32_t _7335_n,std::shared_ptr< monty::ndarray< double,1 > > _7336_r,int32_t _7337_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_7335_n,_7336_r,_7337_ofs); }
void mosek::fusion::p_WorkStack::popf64(int32_t _7335_n,std::shared_ptr< monty::ndarray< double,1 > > _7336_r,int32_t _7337_ofs)
{
  _checked_ptr_1<double> _ptr__7336_r(_7336_r ? _7336_r->raw() : nullptr, _7336_r ? _7336_r->size(0) : 0);
  pf64 -= _7335_n;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_7336_r,_7337_ofs,_7335_n);
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:92:6-96:7
void mosek::fusion::WorkStack :: popi64(int32_t _7338_n,std::shared_ptr< monty::ndarray< int64_t,1 > > _7339_r,int32_t _7340_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_7338_n,_7339_r,_7340_ofs); }
void mosek::fusion::p_WorkStack::popi64(int32_t _7338_n,std::shared_ptr< monty::ndarray< int64_t,1 > > _7339_r,int32_t _7340_ofs)
{
  _checked_ptr_1<int64_t> _ptr__7339_r(_7339_r ? _7339_r->raw() : nullptr, _7339_r ? _7339_r->size(0) : 0);
  pi64 -= _7338_n;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_7339_r,_7340_ofs,_7338_n);
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:87:6-91:7
void mosek::fusion::WorkStack :: popi32(int32_t _7341_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _7342_r,int32_t _7343_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_7341_n,_7342_r,_7343_ofs); }
void mosek::fusion::p_WorkStack::popi32(int32_t _7341_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _7342_r,int32_t _7343_ofs)
{
  _checked_ptr_1<int32_t> _ptr__7342_r(_7342_r ? _7342_r->raw() : nullptr, _7342_r ? _7342_r->size(0) : 0);
  pi32 -= _7341_n;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_7342_r,_7343_ofs,_7341_n);
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:82:6-86:7
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }
double mosek::fusion::p_WorkStack::popf64()
{
  -- pf64;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*f64)(pf64));
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:77:6-81:7
int64_t mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }
int64_t mosek::fusion::p_WorkStack::popi64()
{
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  -- pi64;
  return ((*i64)(pi64));
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:72:6-76:7
int32_t mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }
int32_t mosek::fusion::p_WorkStack::popi32()
{
  -- pi32;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*i32)(pi32));
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.peekf64
// Method mosek.fusion.WorkStack.peekf64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:70:6-61
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }
double mosek::fusion::p_WorkStack::peekf64()
{
  return ((*f64)((pf64 - (int)1)));
}
// End mosek.fusion.WorkStack.peekf64

// Begin mosek.fusion.WorkStack.peeki64
// Method mosek.fusion.WorkStack.peeki64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:69:6-61
int64_t mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }
int64_t mosek::fusion::p_WorkStack::peeki64()
{
  return ((*i64)((pi64 - (int)1)));
}
// End mosek.fusion.WorkStack.peeki64

// Begin mosek.fusion.WorkStack.peeki32
// Method mosek.fusion.WorkStack.peeki32 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:68:6-61
int32_t mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }
int32_t mosek::fusion::p_WorkStack::peeki32()
{
  return ((*i32)((pi32 - (int)1)));
}
// End mosek.fusion.WorkStack.peeki32

// Begin mosek.fusion.WorkStack.peekf64
// Method mosek.fusion.WorkStack.peekf64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:66:6-70
double mosek::fusion::WorkStack :: peekf64(int32_t _7344_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_7344_i); }
double mosek::fusion::p_WorkStack::peekf64(int32_t _7344_i)
{
  return ((*f64)(((pf64 - _7344_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peekf64

// Begin mosek.fusion.WorkStack.peeki64
// Method mosek.fusion.WorkStack.peeki64 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:65:6-70
int64_t mosek::fusion::WorkStack :: peeki64(int32_t _7345_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_7345_i); }
int64_t mosek::fusion::p_WorkStack::peeki64(int32_t _7345_i)
{
  return ((*i64)(((pi64 - _7345_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peeki64

// Begin mosek.fusion.WorkStack.peeki32
// Method mosek.fusion.WorkStack.peeki32 @ bld/docker-rockylinux-8/final/default/src/fusion/BaseExpression.monty:64:6-70
int32_t mosek::fusion::WorkStack :: peeki32(int32_t _7346_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_7346_i); }
int32_t mosek::fusion::p_WorkStack::peeki32(int32_t _7346_i)
{
  return ((*i32)(((pi32 - _7346_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peeki32

void mosek::fusion::p_WorkStack::destroy()
{
  f64.reset();
  i64.reset();
  i32.reset();
}
void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }
// } class WorkStack
// class Expr { // @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:351:4-1937:5
mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }
mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }
mosek::fusion::p_Expr::p_Expr
  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.Expr.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:577:6-620:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7347_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7348_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7349_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7350_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7351_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7352_inst)
{ return new mosek::fusion::Expr(_7347_ptrb,_7348_subj,_7349_cof,_7350_bfix,_7351_shape,_7352_inst); }
mosek::fusion::Expr::Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7347_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7348_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7349_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7350_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7351_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7352_inst) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7347_ptrb,_7348_subj,_7349_cof,_7350_bfix,_7351_shape,_7352_inst); }
void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7347_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7348_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7349_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7350_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7351_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7352_inst)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__7347_ptrb(_7347_ptrb ? _7347_ptrb->raw() : nullptr, _7347_ptrb ? _7347_ptrb->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7348_subj(_7348_subj ? _7348_subj->raw() : nullptr, _7348_subj ? _7348_subj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7349_cof(_7349_cof ? _7349_cof->raw() : nullptr, _7349_cof ? _7349_cof->size(0) : 0);
    _checked_ptr_1<double> _ptr__7350_bfix(_7350_bfix ? _7350_bfix->raw() : nullptr, _7350_bfix ? _7350_bfix->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7351_shape(_7351_shape ? _7351_shape->raw() : nullptr, _7351_shape ? _7351_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7352_inst(_7352_inst ? _7352_inst->raw() : nullptr, _7352_inst ? _7352_inst->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _12610_;
    bool _12611_ = (NULL != _7351_shape.get());
    if (_12611_)
    {
      _12610_ = ::mosek::fusion::Utils::Tools::arraycopy(_7351_shape);
    }
    else
    {
      _12610_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((int)((_7347_ptrb)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< int64_t,1 > > _12612_;
    bool _12613_ = (NULL != _7352_inst.get());
    if (_12613_)
    {
      _12612_ = ::mosek::fusion::Utils::Tools::arraycopy(_7352_inst);
    }
    else
    {
      _12612_ = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_7347_ptrb),::mosek::fusion::Utils::Tools::arraycopy(_7348_subj),::mosek::fusion::Utils::Tools::arraycopy(_7349_cof),::mosek::fusion::Utils::Tools::arraycopy(_7350_bfix),_12610_,_12612_,(int)1);
    int32_t _7353_nelem = ((int)((_7347_ptrb)->size(0)) - (int)1);
    if ((_7353_nelem < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    int64_t _7354_nnz = _ptr__7347_ptrb[_7353_nelem];
    if (((_7354_nnz < (int)0) || ((_7354_nnz != (int)((_7349_cof)->size(0))) || (_7354_nnz != (int)((_7348_subj)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _7355_ptrb_ok = true;
    bool _7356_shape_ok = true;
    bool _7357_inst_ok = true;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7358_thisshape = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int32_t> _ptr__7358_thisshape(_7358_thisshape ? _7358_thisshape->raw() : nullptr,_7358_thisshape ? _7358_thisshape->size(0) : 0);
    int64_t _7359_sz = ::mosek::fusion::p_Set::size(_7358_thisshape);
    {
      int32_t _12614_ = (int)0;
      int32_t _12615_ = (int)((_7358_thisshape)->size(0));
      for (int32_t _7360_i = _12614_; _7360_i < _12615_; ++_7360_i)
      {
        {
          _7356_shape_ok = (_7356_shape_ok && (_ptr__7358_thisshape[_7360_i] >= (int)0));
        }
      }
      int32_t _12616_ = (int)0;
      int32_t _12617_ = _7353_nelem;
      for (int32_t _7361_i = _12616_; _7361_i < _12617_; ++_7361_i)
      {
        {
          _7355_ptrb_ok = (_7355_ptrb_ok && (_ptr__7347_ptrb[_7361_i] <= _ptr__7347_ptrb[safe_add( _7361_i,(int)1 )]));
        }
      }
      if (((NULL != _7352_inst.get()) && ((int)((_7352_inst)->size(0)) > (int)0)))
      {
        {
          _7357_inst_ok = ((_ptr__7352_inst[(int)0] >= (int)0) && (_ptr__7352_inst[(_7353_nelem - (int)1)] < _7359_sz));
          int32_t _12618_ = (int)0;
          int32_t _12619_ = (_7353_nelem - (int)1);
          for (int32_t _7362_i = _12618_; _7362_i < _12619_; ++_7362_i)
          {
            {
              _7357_inst_ok = (_7357_inst_ok && (_ptr__7352_inst[_7362_i] < _ptr__7352_inst[safe_add( _7362_i,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_7356_shape_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_7355_ptrb_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_7357_inst_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// mosek.fusion.Expr.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:513:6-533:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7363_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7364_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7365_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7366_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7367_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7368_inst,
    int32_t _7369_unchecked_)
{ return new mosek::fusion::Expr(_7363_ptrb,_7364_subj,_7365_cof,_7366_bfix,_7367_shp,_7368_inst,_7369_unchecked_); }
mosek::fusion::Expr::Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7363_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7364_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7365_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7366_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7367_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7368_inst,
    int32_t _7369_unchecked_) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7363_ptrb,_7364_subj,_7365_cof,_7366_bfix,_7367_shp,_7368_inst,_7369_unchecked_); }
void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7363_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7364_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7365_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7366_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7367_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7368_inst,
    int32_t _7369_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__7363_ptrb(_7363_ptrb ? _7363_ptrb->raw() : nullptr, _7363_ptrb ? _7363_ptrb->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7364_subj(_7364_subj ? _7364_subj->raw() : nullptr, _7364_subj ? _7364_subj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7365_cof(_7365_cof ? _7365_cof->raw() : nullptr, _7365_cof ? _7365_cof->size(0) : 0);
    _checked_ptr_1<double> _ptr__7366_bfix(_7366_bfix ? _7366_bfix->raw() : nullptr, _7366_bfix ? _7366_bfix->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7367_shp(_7367_shp ? _7367_shp->raw() : nullptr, _7367_shp ? _7367_shp->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7368_inst(_7368_inst ? _7368_inst->raw() : nullptr, _7368_inst ? _7368_inst->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(nullptr,_7367_shp);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _7367_shp;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _7363_ptrb;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _7364_subj;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _7365_cof;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _7366_bfix;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _7368_inst;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// mosek.fusion.Expr.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:389:6-435:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (monty::rc_ptr< ::mosek::fusion::Expression > _7370_e)
{ return new mosek::fusion::Expr(_7370_e); }
mosek::fusion::Expr::Expr
  (monty::rc_ptr< ::mosek::fusion::Expression > _7370_e) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7370_e); }
void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7370_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7370_e->__mosek_2fusion_2Expression__getModel(),_7370_e->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _12620_ = _7370_e;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_12620_.get()))
    {
      ::mosek::fusion::Expr::t _7371_ee (dynamic_cast<::mosek::fusion::Expr*>(_12620_.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_7371_ee)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_7371_ee)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_7371_ee)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_7371_ee)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_7371_ee)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_7371_ee)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _7372_ee = _12620_;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7373_xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7374_ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7375_rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _7372_ee->eval(_7375_rs,_7374_ws,_7373_xs);
        int32_t _7376_nd = _7375_rs->popi32();
        int32_t _7377_shape_base = _7375_rs->popi32(_7376_nd);
        int32_t _7378_nelem = _7375_rs->popi32();
        int32_t _7379_nnz = _7375_rs->popi32();
        bool _7380_hassp = (_7375_rs->popi32() != (int)0);
        int32_t _7381_ptr_base = _7375_rs->popi32(safe_add( _7378_nelem,(int)1 ));
        int32_t _12621_;
        bool _12622_ = _7380_hassp;
        if (_12622_)
        {
          _12621_ = _7375_rs->popi64(_7378_nelem);
        }
        else
        {
          _12621_ = (int)0;
        }
        int32_t _7382_sp_base = _12621_;
        int32_t _7383_nidxs_base = _7375_rs->popi64(_7379_nnz);
        int32_t _7384_bfix_base = _7375_rs->popf64(_7378_nelem);
        int32_t _7385_cof_base = _7375_rs->popf64(_7379_nnz);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _7386_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7375_rs)->i32;
        _checked_ptr_1<int32_t> _ptr__7386_ri32(_7386_ri32 ? _7386_ri32->raw() : nullptr,_7386_ri32 ? _7386_ri32->size(0) : 0);
        std::shared_ptr< monty::ndarray< int64_t,1 > > _7387_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7375_rs)->i64;
        _checked_ptr_1<int64_t> _ptr__7387_ri64(_7387_ri64 ? _7387_ri64->raw() : nullptr,_7387_ri64 ? _7387_ri64->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _7388_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7375_rs)->f64;
        _checked_ptr_1<double> _ptr__7388_rf64(_7388_rf64 ? _7388_rf64->raw() : nullptr,_7388_rf64 ? _7388_rf64->size(0) : 0);
        std::vector<int32_t> _12623_;
        for (int32_t _7389_i = (int)0, _12624_ = _7376_nd; _7389_i < _12624_ ; ++_7389_i)
        {
          _12623_.push_back(_ptr__7386_ri32[safe_add( _7377_shape_base,_7389_i )]);
        }
        auto _12625_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12623_.size()),_12623_.begin(),_12623_.end()));
        shape = _12625_;
        std::vector<int64_t> _12626_;
        for (int32_t _7390_i = (int)0, _12627_ = safe_add( _7378_nelem,(int)1 ); _7390_i < _12627_ ; ++_7390_i)
        {
          _12626_.push_back(_ptr__7386_ri32[safe_add( _7381_ptr_base,_7390_i )]);
        }
        auto _12628_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12626_.size()),_12626_.begin(),_12626_.end()));
        ptrb = _12628_;
        std::vector<int64_t> _12629_;
        for (int32_t _7391_i = (int)0, _12630_ = _7379_nnz; _7391_i < _12630_ ; ++_7391_i)
        {
          _12629_.push_back(_ptr__7387_ri64[safe_add( _7383_nidxs_base,_7391_i )]);
        }
        auto _12631_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12629_.size()),_12629_.begin(),_12629_.end()));
        subj = _12631_;
        std::vector<double> _12632_;
        for (int32_t _7392_i = (int)0, _12633_ = _7379_nnz; _7392_i < _12633_ ; ++_7392_i)
        {
          _12632_.push_back(_ptr__7388_rf64[safe_add( _7385_cof_base,_7392_i )]);
        }
        auto _12634_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12632_.size()),_12632_.begin(),_12632_.end()));
        cof_v = _12634_;
        std::vector<double> _12635_;
        for (int32_t _7393_i = (int)0, _12636_ = _7379_nnz; _7393_i < _12636_ ; ++_7393_i)
        {
          _12635_.push_back(_ptr__7388_rf64[safe_add( _7384_bfix_base,_7393_i )]);
        }
        auto _12637_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12635_.size()),_12635_.begin(),_12635_.end()));
        bfix = _12637_;
        std::shared_ptr< monty::ndarray< int64_t,1 > > _12638_;
        bool _12639_ = _7380_hassp;
        if (_12639_)
        {
          std::vector<int64_t> _12640_;
          for (int32_t _7394_i = (int)0, _12641_ = _7379_nnz; _7394_i < _12641_ ; ++_7394_i)
          {
            _12640_.push_back(_ptr__7387_ri64[safe_add( _7382_sp_base,_7394_i )]);
          }
          auto _12642_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12640_.size()),_12640_.begin(),_12640_.end()));
          _12638_ = _12642_;
        }
        else
        {
          _12638_ = nullptr;
        }
        inst = _12638_;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// Begin mosek.fusion.Expr.prod
// Method mosek.fusion.Expr.prod @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1936:6-110
int64_t mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int32_t,1 > > _7395_vals)
{
  _checked_ptr_1<int32_t> _ptr__7395_vals(_7395_vals ? _7395_vals->raw() : nullptr, _7395_vals ? _7395_vals->size(0) : 0);
  int32_t _7396_r = (int)1;
  int32_t _12643_ = (int)0;
  int32_t _12644_ = (int)((_7395_vals)->size(0));
  for (int32_t _7397_i = _12643_; _7397_i < _12644_; ++_7397_i)
  {
    {
      _7396_r *= _ptr__7395_vals[_7397_i];
    }
  }
  return _7396_r;
}
// End mosek.fusion.Expr.prod

// Begin mosek.fusion.Expr.varstack
// Method mosek.fusion.Expr.varstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1931:6-1934:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _7398_vs)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _12645_;
  for (int32_t _7399_i = (int)0, _12646_ = (int)((_7398_vs)->size(0)); _7399_i < _12646_ ; ++_7399_i)
  {
    for (int32_t _7400_j = (int)0, _12647_ = (int)((((*_7398_vs)(_7399_i)))->size(0)); _7400_j < _12647_ ; ++_7400_j)
    {
      _12645_.push_back(((*((*_7398_vs)(_7399_i)))(_7400_j)));
    }
  }
  auto _12648_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_12645_.size()),_12645_.begin(),_12645_.end()));
  return _12648_;
}
// End mosek.fusion.Expr.varstack

// Begin mosek.fusion.Expr.varstack
// Method mosek.fusion.Expr.varstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1918:6-1929:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7401_v1,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7402_v2)
{
  if ((NULL == _7401_v1.get()))
  {
    {
      return _7402_v2;
    }
  }
  else if((NULL == _7402_v2.get()))
  {
    {
      return _7401_v1;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7403_r = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_7401_v1)->size(0)),(int)((_7402_v2)->size(0)) ))));
      int32_t _12649_ = (int)0;
      int32_t _12650_ = (int)((_7401_v1)->size(0));
      for (int32_t _7404_i = _12649_; _7404_i < _12650_; ++_7404_i)
      {
        {
          ((*_7403_r)(_7404_i)) = ((*_7401_v1)(_7404_i));
        }
      }
      int32_t _12651_ = (int)0;
      int32_t _12652_ = (int)((_7402_v2)->size(0));
      for (int32_t _7405_i = _12651_; _7405_i < _12652_; ++_7405_i)
      {
        {
          ((*_7403_r)(safe_add( _7405_i,(int)((_7401_v1)->size(0)) ))) = ((*_7402_v2)(_7405_i));
        }
      }
      return _7403_r;
    }
  }
}
// End mosek.fusion.Expr.varstack

// Begin mosek.fusion.Expr.condense
// Method mosek.fusion.Expr.condense @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1915:6-93
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7406_e) { return mosek::fusion::p_Expr::condense(_7406_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _7406_e)
{
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_7406_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.condense

// Begin mosek.fusion.Expr.flatten
// Method mosek.fusion.Expr.flatten @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1902:6-1910:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7407_e) { return mosek::fusion::p_Expr::flatten(_7407_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _7407_e)
{
  if ((NULL == _7407_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  int64_t _7408_sz = _7407_e->getSize();
  if ((!(_7408_sz <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum dimension size exceeded"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7407_e,(int32_t)_7408_sz);
}
// End mosek.fusion.Expr.flatten

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1893:6-1897:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7409_e,
    int32_t _7410_dimi,
    int32_t _7411_dimj) { return mosek::fusion::p_Expr::reshape(_7409_e,_7410_dimi,_7411_dimj); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7409_e,int32_t _7410_dimi,int32_t _7411_dimj)
{
  if ((NULL == _7409_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7409_e,::mosek::fusion::p_Set::make(_7410_dimi,_7411_dimj));
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1883:6-1887:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7412_e,
    int32_t _7413_size) { return mosek::fusion::p_Expr::reshape(_7412_e,_7413_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7412_e,int32_t _7413_size)
{
  if ((NULL == _7412_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7412_e,::mosek::fusion::p_Set::make(_7413_size));
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1882:6-118
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7414_e,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7415_newshape) { return mosek::fusion::p_Expr::reshape(_7414_e,_7415_newshape); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7414_e,std::shared_ptr< monty::ndarray< int32_t,1 > > _7415_newshape)
{
  _checked_ptr_1<int32_t> _ptr__7415_newshape(_7415_newshape ? _7415_newshape->raw() : nullptr, _7415_newshape ? _7415_newshape->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7415_newshape,_7414_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.zeros
// Method mosek.fusion.Expr.zeros @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1868:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7416_shp) { return mosek::fusion::p_Expr::zeros(_7416_shp); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int32_t,1 > > _7416_shp)
{
  _checked_ptr_1<int32_t> _ptr__7416_shp(_7416_shp ? _7416_shp->raw() : nullptr, _7416_shp ? _7416_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7416_shp,(double)((int)0));
}
// End mosek.fusion.Expr.zeros

// Begin mosek.fusion.Expr.zeros
// Method mosek.fusion.Expr.zeros @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1867:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros
  ( int32_t _7417_size) { return mosek::fusion::p_Expr::zeros(_7417_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int32_t _7417_size)
{
  return ::mosek::fusion::p_Expr::constTerm(_7417_size,(double)((int)0));
}
// End mosek.fusion.Expr.zeros

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1865:6-70
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( ) { return mosek::fusion::p_Expr::ones(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones()
{
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1864:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7418_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7419_sparsity) { return mosek::fusion::p_Expr::ones(_7418_shp,_7419_sparsity); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int32_t,1 > > _7418_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7419_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__7418_shp(_7418_shp ? _7418_shp->raw() : nullptr, _7418_shp ? _7418_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7418_shp,_7419_sparsity,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1863:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7420_shp) { return mosek::fusion::p_Expr::ones(_7420_shp); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int32_t,1 > > _7420_shp)
{
  _checked_ptr_1<int32_t> _ptr__7420_shp(_7420_shp ? _7420_shp->raw() : nullptr, _7420_shp ? _7420_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7420_shp,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1862:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( int32_t _7421_size) { return mosek::fusion::p_Expr::ones(_7421_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int32_t _7421_size)
{
  return ::mosek::fusion::p_Expr::constTerm(_7421_size,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1856:6-1859:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7422_nda) { return mosek::fusion::p_Expr::constTerm(_7422_nda); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7422_nda)
{
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_7422_nda)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_7422_nda)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7422_nda)->cof)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1835:6-1854:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7423_m) { return mosek::fusion::p_Expr::constTerm(_7423_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _7423_m)
{
  int32_t _7424_dim0 = _7423_m->numRows();
  int32_t _7425_dim1 = _7423_m->numColumns();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7426_shape = ::mosek::fusion::p_Set::make(_7424_dim0,_7425_dim1);
  _checked_ptr_1<int32_t> _ptr__7426_shape(_7426_shape ? _7426_shape->raw() : nullptr,_7426_shape ? _7426_shape->size(0) : 0);
  if (_7423_m->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7427_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7423_m->numNonzeros())));
      _checked_ptr_1<double> _ptr__7427_mval(_7427_mval ? _7427_mval->raw() : nullptr,_7427_mval ? _7427_mval->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7428_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7423_m->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__7428_msubj(_7428_msubj ? _7428_msubj->raw() : nullptr,_7428_msubj ? _7428_msubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7429_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7423_m->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__7429_msubi(_7429_msubi ? _7429_msubi->raw() : nullptr,_7429_msubi ? _7429_msubi->size(0) : 0);
      _7423_m->getDataAsTriplets(_7429_msubi,_7428_msubj,_7427_mval);
      std::vector<int64_t> _12653_;
      for (int32_t _7431_i = (int)0, _12654_ = (int)((_7428_msubj)->size(0)); _7431_i < _12654_ ; ++_7431_i)
      {
        _12653_.push_back(safe_add( safe_mul( _ptr__7429_msubi[_7431_i],_7425_dim1 ),_ptr__7428_msubj[_7431_i] ));
      }
      auto _12655_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12653_.size()),_12653_.begin(),_12653_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7430_sp = _12655_;
      _checked_ptr_1<int64_t> _ptr__7430_sp(_7430_sp ? _7430_sp->raw() : nullptr,_7430_sp ? _7430_sp->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7426_shape,_7430_sp,_7427_mval)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7426_shape,nullptr,_7423_m->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1830:6-1833:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( double _7432_val) { return mosek::fusion::p_Expr::constTerm(_7432_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _7432_val)
{
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,_7432_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1819:6-1828:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7433_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7434_sparsity,
    double _7435_val) { return mosek::fusion::p_Expr::constTerm(_7433_shp,_7434_sparsity,_7435_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7433_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7434_sparsity,double _7435_val)
{
  _checked_ptr_1<int32_t> _ptr__7433_shp(_7433_shp ? _7433_shp->raw() : nullptr, _7433_shp ? _7433_shp->size(0) : 0);
  int32_t _7436_n = (int)((_7434_sparsity)->size(0));
  int32_t _7437_nd = (int)((_7433_shp)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7438_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7436_n)));
  _checked_ptr_1<int64_t> _ptr__7438_sp(_7438_sp ? _7438_sp->raw() : nullptr,_7438_sp ? _7438_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7439_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7437_nd)));
  _checked_ptr_1<int64_t> _ptr__7439_s(_7439_s ? _7439_s->raw() : nullptr,_7439_s ? _7439_s->size(0) : 0);
  _ptr__7439_s[(_7437_nd - (int)1)] = (int)1;
  int32_t _12656_ = (int)1;
  int32_t _12657_ = _7437_nd;
  for (int32_t _7440_i = _12656_; _7440_i < _12657_; ++_7440_i)
  {
    {
      _ptr__7439_s[((_7437_nd - _7440_i) - (int)1)] = safe_mul( _ptr__7439_s[(_7437_nd - _7440_i)],_ptr__7433_shp[(_7437_nd - _7440_i)] );
    }
  }
  int32_t _12658_ = (int)0;
  int32_t _12659_ = _7436_n;
  for (int32_t _7441_i = _12658_; _7441_i < _12659_; ++_7441_i)
  {
    {
      int32_t _12660_ = (int)0;
      int32_t _12661_ = _7437_nd;
      for (int32_t _7442_j = _12660_; _7442_j < _12661_; ++_7442_j)
      {
        {
          _ptr__7438_sp[_7441_i] += safe_mul( _ptr__7439_s[_7442_j],((*_7434_sparsity)(_7441_i,_7442_j)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7433_shp,_7438_sp,_7435_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1808:6-1818:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7443_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7444_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _7445_vals1) { return mosek::fusion::p_Expr::constTerm(_7443_shp,_7444_sparsity,_7445_vals1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7443_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7444_sparsity,std::shared_ptr< monty::ndarray< double,1 > > _7445_vals1)
{
  _checked_ptr_1<int32_t> _ptr__7443_shp(_7443_shp ? _7443_shp->raw() : nullptr, _7443_shp ? _7443_shp->size(0) : 0);
  _checked_ptr_1<double> _ptr__7445_vals1(_7445_vals1 ? _7445_vals1->raw() : nullptr, _7445_vals1 ? _7445_vals1->size(0) : 0);
  int32_t _7446_n = (int)((_7444_sparsity)->size(0));
  int32_t _7447_nd = (int)((_7443_shp)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7448_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7446_n)));
  _checked_ptr_1<int64_t> _ptr__7448_sp(_7448_sp ? _7448_sp->raw() : nullptr,_7448_sp ? _7448_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7449_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7447_nd)));
  _checked_ptr_1<int64_t> _ptr__7449_s(_7449_s ? _7449_s->raw() : nullptr,_7449_s ? _7449_s->size(0) : 0);
  _ptr__7449_s[(_7447_nd - (int)1)] = (int)1;
  int32_t _12662_ = (int)1;
  int32_t _12663_ = _7447_nd;
  for (int32_t _7450_i = _12662_; _7450_i < _12663_; ++_7450_i)
  {
    {
      _ptr__7449_s[((_7447_nd - _7450_i) - (int)1)] = safe_mul( _ptr__7449_s[(_7447_nd - _7450_i)],_ptr__7443_shp[(_7447_nd - _7450_i)] );
    }
  }
  int32_t _12664_ = (int)0;
  int32_t _12665_ = _7446_n;
  for (int32_t _7451_i = _12664_; _7451_i < _12665_; ++_7451_i)
  {
    {
      int32_t _12666_ = (int)0;
      int32_t _12667_ = _7447_nd;
      for (int32_t _7452_j = _12666_; _7452_j < _12667_; ++_7452_j)
      {
        {
          _ptr__7448_sp[_7451_i] += safe_mul( _ptr__7449_s[_7452_j],((*_7444_sparsity)(_7451_i,_7452_j)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7443_shp,_7448_sp,_7445_vals1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1803:6-1806:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7453_shp,
    double _7454_val) { return mosek::fusion::p_Expr::constTerm(_7453_shp,_7454_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7453_shp,double _7454_val)
{
  _checked_ptr_1<int32_t> _ptr__7453_shp(_7453_shp ? _7453_shp->raw() : nullptr, _7453_shp ? _7453_shp->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7453_shp,nullptr,_7454_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1799:6-1801:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( int32_t _7455_size,
    double _7456_val) { return mosek::fusion::p_Expr::constTerm(_7455_size,_7456_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int32_t _7455_size,double _7456_val)
{
  std::vector<double> _12668_;
  for (int32_t _7457_i = (int)0, _12669_ = _7455_size; _7457_i < _12669_ ; ++_7457_i)
  {
    _12668_.push_back(_7456_val);
  }
  auto _12670_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12668_.size()),_12668_.begin(),_12668_.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7455_size)}),nullptr,_12670_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1792:6-1794:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< double,2 > > _7458_vals2) { return mosek::fusion::p_Expr::constTerm(_7458_vals2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _7458_vals2)
{
  std::vector<double> _12671_;
  for (int32_t _7459_i = (int)0, _12672_ = (int)((_7458_vals2)->size(0)); _7459_i < _12672_ ; ++_7459_i)
  {
    for (int32_t _7460_j = (int)0, _12673_ = (int)((_7458_vals2)->size(1)); _7460_j < _12673_ ; ++_7460_j)
    {
      _12671_.push_back(((*_7458_vals2)(_7459_i,_7460_j)));
    }
  }
  auto _12674_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12671_.size()),_12671_.begin(),_12671_.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7458_vals2)->size(0))),(int32_t)((int)((_7458_vals2)->size(1)))}),nullptr,_12674_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1785:6-1787:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< double,1 > > _7461_vals1) { return mosek::fusion::p_Expr::constTerm(_7461_vals1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _7461_vals1)
{
  _checked_ptr_1<double> _ptr__7461_vals1(_7461_vals1 ? _7461_vals1->raw() : nullptr, _7461_vals1 ? _7461_vals1->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7461_vals1)->size(0)))}),nullptr,_7461_vals1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.sum
// Method mosek.fusion.Expr.sum @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1750:6-1772:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7462_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7463_dims) { return mosek::fusion::p_Expr::sum(_7462_expr,_7463_dims); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7462_expr,std::shared_ptr< monty::ndarray< int32_t,1 > > _7463_dims)
{
  _checked_ptr_1<int32_t> _ptr__7463_dims(_7463_dims ? _7463_dims->raw() : nullptr, _7463_dims ? _7463_dims->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7464_eshape = _7462_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__7464_eshape(_7464_eshape ? _7464_eshape->raw() : nullptr,_7464_eshape ? _7464_eshape->size(0) : 0);
  if ((((int)((_7463_dims)->size(0)) == (int)0) || (_ptr__7463_dims[(int)0] < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  int32_t _12675_ = (int)1;
  int32_t _12676_ = (int)((_7463_dims)->size(0));
  for (int32_t _7465_i = _12675_; _7465_i < _12676_; ++_7465_i)
  {
    {
      if ((_ptr__7463_dims[(_7465_i - (int)1)] >= _ptr__7463_dims[_7465_i]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Unordered dimension indexes"));
        }
      }
      {}
    }
  }
  if ((_ptr__7463_dims[((int)((_7463_dims)->size(0)) - (int)1)] >= (int)((_7464_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Unordered dimension indexes"));
    }
  }
  {}
  int32_t _7466_nd = (int)((_7464_eshape)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7467_perm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7466_nd)));
  _checked_ptr_1<int32_t> _ptr__7467_perm(_7467_perm ? _7467_perm->raw() : nullptr,_7467_perm ? _7467_perm->size(0) : 0);
  int32_t _7468_i = (int)0;
  int32_t _7469_j = (int)0;
  int32_t _12677_ = (int)0;
  int32_t _12678_ = (int)((_7463_dims)->size(0));
  for (int32_t _7470_k = _12677_; _7470_k < _12678_; ++_7470_k)
  {
    {
      {
        for(;(_7468_i < _ptr__7463_dims[_7470_k]);++ _7468_i,++ _7469_j)
        {
          {
            _ptr__7467_perm[_7469_j] = _7468_i;
          }
        }
      }
      ++ _7468_i;
    }
  }
  {
    for(;(_7468_i < _7466_nd);++ _7468_i,++ _7469_j)
    {
      {
        _ptr__7467_perm[_7469_j] = _7468_i;
      }
    }
  }
  int32_t _12679_ = (int)0;
  int32_t _12680_ = (int)((_7463_dims)->size(0));
  for (int32_t _7471_k = _12679_; _7471_k < _12680_; ++_7471_k)
  {
    {
      _ptr__7467_perm[_7469_j] = _ptr__7463_dims[_7471_k];
      ++ _7469_j;
    }
  }
  return (::mosek::fusion::p_ExprSumReduceEnd::_new_ExprSumReduceEnd((int)((_7463_dims)->size(0)),(::mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims(_7467_perm,_7462_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.sum

// Begin mosek.fusion.Expr.sum
// Method mosek.fusion.Expr.sum @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1748:6-110
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7472_expr,
    int32_t _7473_dim) { return mosek::fusion::p_Expr::sum(_7472_expr,_7473_dim); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7472_expr,int32_t _7473_dim)
{
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_7473_dim,_7472_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.sum

// Begin mosek.fusion.Expr.sum
// Method mosek.fusion.Expr.sum @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1747:6-117
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7474_expr) { return mosek::fusion::p_Expr::sum(_7474_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7474_expr)
{
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_7474_expr))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.sum

// Begin mosek.fusion.Expr.neg
// Method mosek.fusion.Expr.neg @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1746:6-98
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7475_e) { return mosek::fusion::p_Expr::neg(_7475_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _7475_e)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_7475_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.neg

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1731:6-1744:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _7476_left,monty::rc_ptr< ::mosek::fusion::Matrix > _7477_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7478_expr)
{
  int64_t _7479_nnz = _7477_mx->numNonzeros();
  int32_t _7480_dimi = _7477_mx->numRows();
  int32_t _7481_dimj = _7477_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7482_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7479_nnz)));
  _checked_ptr_1<double> _ptr__7482_mcof(_7482_mcof ? _7482_mcof->raw() : nullptr,_7482_mcof ? _7482_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7483_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7479_nnz)));
  _checked_ptr_1<int32_t> _ptr__7483_msubj(_7483_msubj ? _7483_msubj->raw() : nullptr,_7483_msubj ? _7483_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7484_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7479_nnz)));
  _checked_ptr_1<int32_t> _ptr__7484_msubi(_7484_msubi ? _7484_msubi->raw() : nullptr,_7484_msubi ? _7484_msubi->size(0) : 0);
  _7477_mx->getDataAsTriplets(_7484_msubi,_7483_msubj,_7482_mcof);
  if (_7476_left)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_7480_dimi,_7481_dimj,_7484_msubi,_7483_msubj,_7482_mcof,_7478_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_7480_dimi,_7481_dimj,_7484_msubi,_7483_msubj,_7482_mcof,_7478_expr)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1728:6-140
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7485_v,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7486_p) { return mosek::fusion::p_Expr::mulDiag(_7485_v,_7486_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7485_v,monty::rc_ptr< ::mosek::fusion::Parameter > _7486_p)
{
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7485_v->__mosek_2fusion_2Variable__asExpr(),_7486_p)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1727:6-139
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7487_p,
    monty::rc_ptr< ::mosek::fusion::Variable > _7488_v) { return mosek::fusion::p_Expr::mulDiag(_7487_p,_7488_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7487_p,monty::rc_ptr< ::mosek::fusion::Variable > _7488_v)
{
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7487_p,_7488_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1726:6-134
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7489_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7490_p) { return mosek::fusion::p_Expr::mulDiag(_7489_expr,_7490_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7489_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7490_p)
{
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7489_expr,_7490_p)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1725:6-133
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7491_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7492_expr) { return mosek::fusion::p_Expr::mulDiag(_7491_p,_7492_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7491_p,monty::rc_ptr< ::mosek::fusion::Expression > _7492_expr)
{
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7491_p,_7492_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1723:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7493_v,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7494_mx) { return mosek::fusion::p_Expr::mulDiag(_7493_v,_7494_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7493_v,monty::rc_ptr< ::mosek::fusion::Matrix > _7494_mx)
{
  return ::mosek::fusion::p_Expr::mulDiag(false,_7494_mx,_7493_v->__mosek_2fusion_2Variable__asExpr());
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1722:6-128
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7495_mx,
    monty::rc_ptr< ::mosek::fusion::Variable > _7496_v) { return mosek::fusion::p_Expr::mulDiag(_7495_mx,_7496_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7495_mx,monty::rc_ptr< ::mosek::fusion::Variable > _7496_v)
{
  return ::mosek::fusion::p_Expr::mulDiag(true,_7495_mx,_7496_v->__mosek_2fusion_2Variable__asExpr());
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1721:6-123
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7497_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7498_mx) { return mosek::fusion::p_Expr::mulDiag(_7497_expr,_7498_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7497_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7498_mx)
{
  return ::mosek::fusion::p_Expr::mulDiag(false,_7498_mx,_7497_expr);
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1720:6-122
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7499_mx,
    monty::rc_ptr< ::mosek::fusion::Expression > _7500_expr) { return mosek::fusion::p_Expr::mulDiag(_7499_mx,_7500_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7499_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7500_expr)
{
  return ::mosek::fusion::p_Expr::mulDiag(true,_7499_mx,_7500_expr);
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1719:6-306
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7501_v,
    std::shared_ptr< monty::ndarray< double,2 > > _7502_a) { return mosek::fusion::p_Expr::mulDiag(_7501_v,_7502_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7501_v,std::shared_ptr< monty::ndarray< double,2 > > _7502_a)
{
  std::vector<int32_t> _12681_;
  for (int32_t _7503_i = (int)0, _12682_ = (int)((_7502_a)->size(0)); _7503_i < _12682_ ; ++_7503_i)
  {
    for (int32_t _7504_j = (int)0, _12683_ = (int)((_7502_a)->size(1)); _7504_j < _12683_ ; ++_7504_j)
    {
      _12681_.push_back(_7503_i);
    }
  }
  auto _12684_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12681_.size()),_12681_.begin(),_12681_.end()));
  std::vector<int32_t> _12685_;
  for (int32_t _7505_i = (int)0, _12686_ = (int)((_7502_a)->size(0)); _7505_i < _12686_ ; ++_7505_i)
  {
    for (int32_t _7506_j = (int)0, _12687_ = (int)((_7502_a)->size(1)); _7506_j < _12687_ ; ++_7506_j)
    {
      _12685_.push_back(_7506_j);
    }
  }
  auto _12688_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12685_.size()),_12685_.begin(),_12685_.end()));
  std::vector<double> _12689_;
  for (int32_t _7507_i = (int)0, _12690_ = (int)((_7502_a)->size(0)); _7507_i < _12690_ ; ++_7507_i)
  {
    for (int32_t _7508_j = (int)0, _12691_ = (int)((_7502_a)->size(1)); _7508_j < _12691_ ; ++_7508_j)
    {
      _12689_.push_back(((*_7502_a)(_7507_i,_7508_j)));
    }
  }
  auto _12692_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12689_.size()),_12689_.begin(),_12689_.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7502_a)->size(0)),(int)((_7502_a)->size(1)),_12684_,_12688_,_12692_,_7501_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1718:6-300
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7509_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7510_a) { return mosek::fusion::p_Expr::mulDiag(_7509_expr,_7510_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7509_expr,std::shared_ptr< monty::ndarray< double,2 > > _7510_a)
{
  std::vector<int32_t> _12693_;
  for (int32_t _7511_i = (int)0, _12694_ = (int)((_7510_a)->size(0)); _7511_i < _12694_ ; ++_7511_i)
  {
    for (int32_t _7512_j = (int)0, _12695_ = (int)((_7510_a)->size(1)); _7512_j < _12695_ ; ++_7512_j)
    {
      _12693_.push_back(_7511_i);
    }
  }
  auto _12696_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12693_.size()),_12693_.begin(),_12693_.end()));
  std::vector<int32_t> _12697_;
  for (int32_t _7513_i = (int)0, _12698_ = (int)((_7510_a)->size(0)); _7513_i < _12698_ ; ++_7513_i)
  {
    for (int32_t _7514_j = (int)0, _12699_ = (int)((_7510_a)->size(1)); _7514_j < _12699_ ; ++_7514_j)
    {
      _12697_.push_back(_7514_j);
    }
  }
  auto _12700_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12697_.size()),_12697_.begin(),_12697_.end()));
  std::vector<double> _12701_;
  for (int32_t _7515_i = (int)0, _12702_ = (int)((_7510_a)->size(0)); _7515_i < _12702_ ; ++_7515_i)
  {
    for (int32_t _7516_j = (int)0, _12703_ = (int)((_7510_a)->size(1)); _7516_j < _12703_ ; ++_7516_j)
    {
      _12701_.push_back(((*_7510_a)(_7515_i,_7516_j)));
    }
  }
  auto _12704_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12701_.size()),_12701_.begin(),_12701_.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7510_a)->size(0)),(int)((_7510_a)->size(1)),_12696_,_12700_,_12704_,_7509_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1717:6-306
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( std::shared_ptr< monty::ndarray< double,2 > > _7517_a,
    monty::rc_ptr< ::mosek::fusion::Variable > _7518_v) { return mosek::fusion::p_Expr::mulDiag(_7517_a,_7518_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7517_a,monty::rc_ptr< ::mosek::fusion::Variable > _7518_v)
{
  std::vector<int32_t> _12705_;
  for (int32_t _7519_i = (int)0, _12706_ = (int)((_7517_a)->size(0)); _7519_i < _12706_ ; ++_7519_i)
  {
    for (int32_t _7520_j = (int)0, _12707_ = (int)((_7517_a)->size(1)); _7520_j < _12707_ ; ++_7520_j)
    {
      _12705_.push_back(_7519_i);
    }
  }
  auto _12708_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12705_.size()),_12705_.begin(),_12705_.end()));
  std::vector<int32_t> _12709_;
  for (int32_t _7521_i = (int)0, _12710_ = (int)((_7517_a)->size(0)); _7521_i < _12710_ ; ++_7521_i)
  {
    for (int32_t _7522_j = (int)0, _12711_ = (int)((_7517_a)->size(1)); _7522_j < _12711_ ; ++_7522_j)
    {
      _12709_.push_back(_7522_j);
    }
  }
  auto _12712_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12709_.size()),_12709_.begin(),_12709_.end()));
  std::vector<double> _12713_;
  for (int32_t _7523_i = (int)0, _12714_ = (int)((_7517_a)->size(0)); _7523_i < _12714_ ; ++_7523_i)
  {
    for (int32_t _7524_j = (int)0, _12715_ = (int)((_7517_a)->size(1)); _7524_j < _12715_ ; ++_7524_j)
    {
      _12713_.push_back(((*_7517_a)(_7523_i,_7524_j)));
    }
  }
  auto _12716_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12713_.size()),_12713_.begin(),_12713_.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7517_a)->size(0)),(int)((_7517_a)->size(1)),_12708_,_12712_,_12716_,_7518_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1716:6-300
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( std::shared_ptr< monty::ndarray< double,2 > > _7525_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7526_expr) { return mosek::fusion::p_Expr::mulDiag(_7525_a,_7526_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7525_a,monty::rc_ptr< ::mosek::fusion::Expression > _7526_expr)
{
  std::vector<int32_t> _12717_;
  for (int32_t _7527_i = (int)0, _12718_ = (int)((_7525_a)->size(0)); _7527_i < _12718_ ; ++_7527_i)
  {
    for (int32_t _7528_j = (int)0, _12719_ = (int)((_7525_a)->size(1)); _7528_j < _12719_ ; ++_7528_j)
    {
      _12717_.push_back(_7527_i);
    }
  }
  auto _12720_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12717_.size()),_12717_.begin(),_12717_.end()));
  std::vector<int32_t> _12721_;
  for (int32_t _7529_i = (int)0, _12722_ = (int)((_7525_a)->size(0)); _7529_i < _12722_ ; ++_7529_i)
  {
    for (int32_t _7530_j = (int)0, _12723_ = (int)((_7525_a)->size(1)); _7530_j < _12723_ ; ++_7530_j)
    {
      _12721_.push_back(_7530_j);
    }
  }
  auto _12724_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12721_.size()),_12721_.begin(),_12721_.end()));
  std::vector<double> _12725_;
  for (int32_t _7531_i = (int)0, _12726_ = (int)((_7525_a)->size(0)); _7531_i < _12726_ ; ++_7531_i)
  {
    for (int32_t _7532_j = (int)0, _12727_ = (int)((_7525_a)->size(1)); _7532_j < _12727_ ; ++_7532_j)
    {
      _12725_.push_back(((*_7525_a)(_7531_i,_7532_j)));
    }
  }
  auto _12728_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12725_.size()),_12725_.begin(),_12725_.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7525_a)->size(0)),(int)((_7525_a)->size(1)),_12720_,_12724_,_12728_,_7526_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1693:6-1714:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _7533_m,monty::rc_ptr< ::mosek::fusion::Expression > _7534_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7535_eshape = _7534_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7535_eshape(_7535_eshape ? _7535_eshape->raw() : nullptr,_7535_eshape ? _7535_eshape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _7536_expr = _7534_e;
  if (((int)((_7535_eshape)->size(0)) == (int)1))
  {
    {
      _7535_eshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7535_eshape[(int)0]),(int32_t)((int)1)});
      _ptr__7535_eshape.update(_7535_eshape ? _7535_eshape->raw() : nullptr, _7535_eshape ? _7535_eshape->size(0) : 0);
      _7536_expr = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7535_eshape,_7534_e)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7535_eshape)->size(0)) != (int)2) || ((_7533_m->numRows() != _ptr__7535_eshape[(int)0]) || (_7533_m->numColumns() != _ptr__7535_eshape[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int32_t _7537_mdim1 = _7533_m->numColumns();
  int64_t _7538_mnnz = _7533_m->numNonzeros();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7539_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7538_mnnz)));
  _checked_ptr_1<int32_t> _ptr__7539_msubi(_7539_msubi ? _7539_msubi->raw() : nullptr,_7539_msubi ? _7539_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7540_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7538_mnnz)));
  _checked_ptr_1<int32_t> _ptr__7540_msubj(_7540_msubj ? _7540_msubj->raw() : nullptr,_7540_msubj ? _7540_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7541_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7538_mnnz)));
  _checked_ptr_1<double> _ptr__7541_mcof(_7541_mcof ? _7541_mcof->raw() : nullptr,_7541_mcof ? _7541_mcof->size(0) : 0);
  _7533_m->getDataAsTriplets(_7539_msubi,_7540_msubj,_7541_mcof);
  std::vector<int64_t> _12729_;
  for (int64_t _7542_i = (int)0, _12730_ = _7538_mnnz; _7542_i < _12730_ ; ++_7542_i)
  {
    _12729_.push_back(safe_add( safe_mul( _ptr__7539_msubi[_7542_i],_7537_mdim1 ),_ptr__7540_msubj[_7542_i] ));
  }
  auto _12731_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12729_.size()),_12729_.begin(),_12729_.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7541_mcof,_12731_,_7536_expr,(int)1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1679:6-1690:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _7543_a,monty::rc_ptr< ::mosek::fusion::Expression > _7544_expr)
{
  _checked_ptr_1<double> _ptr__7543_a(_7543_a ? _7543_a->raw() : nullptr, _7543_a ? _7543_a->size(0) : 0);
  if (((NULL == _7543_a.get()) || (NULL == _7544_expr.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_7544_expr->getND() == (int)0) && ((int)((_7543_a)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__7543_a[(int)0],_7544_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7544_expr->getND() != (int)1) || (_7544_expr->getDim((int)0) != (int)((_7543_a)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<int64_t> _12732_;
      for (int32_t _7545_i = (int)0, _12733_ = (int)((_7543_a)->size(0)); _7545_i < _12733_ ; ++_7545_i)
      {
        _12732_.push_back(_7545_i);
      }
      auto _12734_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12732_.size()),_12732_.begin(),_12732_.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7543_a,_12734_,_7544_expr)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1667:6-1677:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7546_spm,monty::rc_ptr< ::mosek::fusion::Expression > _7547_expr)
{
  if (((NULL == _7546_spm.get()) || (NULL == _7547_expr.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7548_eshape = _7547_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__7548_eshape(_7548_eshape ? _7548_eshape->raw() : nullptr,_7548_eshape ? _7548_eshape->size(0) : 0);
  if (((int)((_7548_eshape)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7546_spm)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int32_t _12735_ = (int)0;
  int32_t _12736_ = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7546_spm)->dims)->size(0));
  for (int32_t _7549_i = _12735_; _7549_i < _12736_; ++_7549_i)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_7546_spm)->dims)(_7549_i)) != _ptr__7548_eshape[_7549_i]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_7546_spm)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_7546_spm)->inst,_7547_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1665:6-118
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7550_expr,
    double _7551_c) { return mosek::fusion::p_Expr::mul(_7550_expr,_7551_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7550_expr,double _7551_c)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7551_c,_7550_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1664:6-121
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( double _7552_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _7553_expr) { return mosek::fusion::p_Expr::mul(_7552_c,_7553_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _7552_c,monty::rc_ptr< ::mosek::fusion::Expression > _7553_expr)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7552_c,_7553_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1663:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7554_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _7555_a) { return mosek::fusion::p_Expr::mul(_7554_expr,_7555_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7554_expr,std::shared_ptr< monty::ndarray< double,1 > > _7555_a)
{
  _checked_ptr_1<double> _ptr__7555_a(_7555_a ? _7555_a->raw() : nullptr, _7555_a ? _7555_a->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_7555_a,_7554_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1662:6-107
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( std::shared_ptr< monty::ndarray< double,1 > > _7556_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7557_expr) { return mosek::fusion::p_Expr::mul(_7556_a,_7557_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _7556_a,monty::rc_ptr< ::mosek::fusion::Expression > _7557_expr)
{
  _checked_ptr_1<double> _ptr__7556_a(_7556_a ? _7556_a->raw() : nullptr, _7556_a ? _7556_a->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_7556_a,_7557_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1661:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7558_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7559_a) { return mosek::fusion::p_Expr::mul(_7558_expr,_7559_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7558_expr,std::shared_ptr< monty::ndarray< double,2 > > _7559_a)
{
  return ::mosek::fusion::p_Expr::mul(false,_7559_a,_7558_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1660:6-107
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( std::shared_ptr< monty::ndarray< double,2 > > _7560_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7561_expr) { return mosek::fusion::p_Expr::mul(_7560_a,_7561_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _7560_a,monty::rc_ptr< ::mosek::fusion::Expression > _7561_expr)
{
  return ::mosek::fusion::p_Expr::mul(true,_7560_a,_7561_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1659:6-106
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7562_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7563_mx) { return mosek::fusion::p_Expr::mul(_7562_expr,_7563_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7562_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7563_mx)
{
  return ::mosek::fusion::p_Expr::mul(false,_7563_mx,_7562_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1658:6-108
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7564_mx,
    monty::rc_ptr< ::mosek::fusion::Expression > _7565_expr) { return mosek::fusion::p_Expr::mul(_7564_mx,_7565_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7564_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7565_expr)
{
  return ::mosek::fusion::p_Expr::mul(true,_7564_mx,_7565_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1627:6-1656:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7566_left,std::shared_ptr< monty::ndarray< double,1 > > _7567_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7568_e)
{
  _checked_ptr_1<double> _ptr__7567_mx(_7567_mx ? _7567_mx->raw() : nullptr, _7567_mx ? _7567_mx->size(0) : 0);
  int32_t _7569_mdim0 = (int)((_7567_mx)->size(0));
  int32_t _7570_nnz = _7569_mdim0;
  std::shared_ptr< monty::ndarray< double,1 > > _7571_mval = ::mosek::fusion::Utils::Tools::arraycopy(_7567_mx);
  _checked_ptr_1<double> _ptr__7571_mval(_7571_mval ? _7571_mval->raw() : nullptr,_7571_mval ? _7571_mval->size(0) : 0);
  int32_t _7572_nd = _7568_e->getND();
  if ((_7572_nd == (int)0))
  {
    {
      std::vector<int32_t> _12737_;
      for (int32_t _7573_i = (int)0, _12738_ = _7569_mdim0; _7573_i < _12738_ ; ++_7573_i)
      {
        _12737_.push_back(_7573_i);
      }
      auto _12739_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12737_.size()),_12737_.begin(),_12737_.end()));
      std::vector<int32_t> _12740_;
      for (int32_t _7574_i = (int)0, _12741_ = _7569_mdim0; _7574_i < _12741_ ; ++_7574_i)
      {
        _12740_.push_back((int)0);
      }
      auto _12742_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12740_.size()),_12740_.begin(),_12740_.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7569_mdim0)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7569_mdim0,(int)1,_12739_,_12742_,_7571_mval,_7568_e,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7572_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_7566_left && (_7568_e->getDim((int)0) == (int)((_7567_mx)->size(0)))))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7568_e->getDim((int)1))}),(::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7569_mdim0,(int)1,_7571_mval,_7568_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7566_left && (_7568_e->getDim((int)0) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7569_mdim0,(int)1,_7571_mval,_7568_e)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7566_left) && (_7568_e->getDim((int)1) == _7569_mdim0)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7568_e->getDim((int)0))}),(::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot((int)1,_7569_mdim0,_7571_mval,_7568_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7566_left) && (_7568_e->getDim((int)1) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7569_mdim0,(int)1,_7571_mval,(::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7568_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1567:6-1625:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7575_left,std::shared_ptr< monty::ndarray< double,2 > > _7576_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7577_e)
{
  int32_t _7578_mdim0 = (int)((_7576_mx)->size(0));
  int32_t _7579_mdim1 = (int)((_7576_mx)->size(1));
  int32_t _7580_nnz = safe_mul( _7578_mdim0,_7579_mdim1 );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7581_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7580_nnz)));
  _checked_ptr_1<int32_t> _ptr__7581_msubi(_7581_msubi ? _7581_msubi->raw() : nullptr,_7581_msubi ? _7581_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7582_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7580_nnz)));
  _checked_ptr_1<int32_t> _ptr__7582_msubj(_7582_msubj ? _7582_msubj->raw() : nullptr,_7582_msubj ? _7582_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7583_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7580_nnz)));
  _checked_ptr_1<double> _ptr__7583_mval(_7583_mval ? _7583_mval->raw() : nullptr,_7583_mval ? _7583_mval->size(0) : 0);
  {
    int32_t _7584_k = (int)0;
    int32_t _12743_ = (int)0;
    int32_t _12744_ = _7578_mdim0;
    for (int32_t _7585_i = _12743_; _7585_i < _12744_; ++_7585_i)
    {
      {
        int32_t _12745_ = (int)0;
        int32_t _12746_ = _7579_mdim1;
        for (int32_t _7586_j = _12745_; _7586_j < _12746_; ++_7586_j)
        {
          {
            _ptr__7581_msubi[_7584_k] = _7585_i;
            _ptr__7582_msubj[_7584_k] = _7586_j;
            _ptr__7583_mval[_7584_k] = ((*_7576_mx)(_7585_i,_7586_j));
            _7584_k += (int)1;
          }
        }
      }
    }
  }
  int64_t _7587_esize = _7577_e->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7588_eshape = _7577_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7588_eshape(_7588_eshape ? _7588_eshape->raw() : nullptr,_7588_eshape ? _7588_eshape->size(0) : 0);
  if (((int)((_7588_eshape)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7578_mdim0,_7579_mdim1,_7581_msubi,_7582_msubj,_7583_mval,_7577_e,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_7575_left)
  {
    {
      if (((int)((_7588_eshape)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7578_mdim0)}),(::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7578_mdim0,_7579_mdim1,_7583_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7588_eshape[(int)0])}),_7577_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7588_eshape)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7578_mdim0,_7579_mdim1,_7583_mval,(::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7577_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7589_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7580_nnz)));
      _checked_ptr_1<double> _ptr__7589_mval(_7589_mval ? _7589_mval->raw() : nullptr,_7589_mval ? _7589_mval->size(0) : 0);
      {
        int32_t _7590_k = (int)0;
        int32_t _12747_ = (int)0;
        int32_t _12748_ = _7579_mdim1;
        for (int32_t _7591_j = _12747_; _7591_j < _12748_; ++_7591_j)
        {
          {
            int32_t _12749_ = (int)0;
            int32_t _12750_ = _7578_mdim0;
            for (int32_t _7592_i = _12749_; _7592_i < _12750_; ++_7592_i)
            {
              {
                _ptr__7589_mval[_7590_k] = ((*_7576_mx)(_7592_i,_7591_j));
                _7590_k += (int)1;
              }
            }
          }
        }
      }
      if (((int)((_7588_eshape)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7579_mdim1)}),(::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7579_mdim1,_7578_mdim0,_7589_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7588_eshape[(int)0])}),_7577_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7588_eshape)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose((::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7579_mdim1,_7578_mdim0,_7589_mval,_7577_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1471:6-1565:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7593_left,monty::rc_ptr< ::mosek::fusion::Matrix > _7594_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7595_e)
{
  int64_t _7596_nnz = _7594_mx->numNonzeros();
  int32_t _7597_mdim0 = _7594_mx->numRows();
  int32_t _7598_mdim1 = _7594_mx->numColumns();
  int32_t _7599_nd = _7595_e->getND();
  if ((_7599_nd == (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7600_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
      _checked_ptr_1<int32_t> _ptr__7600_msubi(_7600_msubi ? _7600_msubi->raw() : nullptr,_7600_msubi ? _7600_msubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7601_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
      _checked_ptr_1<int32_t> _ptr__7601_msubj(_7601_msubj ? _7601_msubj->raw() : nullptr,_7601_msubj ? _7601_msubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7602_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7596_nnz)));
      _checked_ptr_1<double> _ptr__7602_mval(_7602_mval ? _7602_mval->raw() : nullptr,_7602_mval ? _7602_mval->size(0) : 0);
      _7594_mx->getDataAsTriplets(_7600_msubi,_7601_msubj,_7602_mval);
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7597_mdim0,_7598_mdim1,_7600_msubi,_7601_msubj,_7602_mval,_7595_e)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if (_7594_mx->isSparse())
  {
    {
      if ((_7599_nd == (int)1))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7603_eshape = _7595_e->getShape();
          _checked_ptr_1<int32_t> _ptr__7603_eshape(_7603_eshape ? _7603_eshape->raw() : nullptr,_7603_eshape ? _7603_eshape->size(0) : 0);
          if (_7593_left)
          {
            {
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7604_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<int32_t> _ptr__7604_msubi(_7604_msubi ? _7604_msubi->raw() : nullptr,_7604_msubi ? _7604_msubi->size(0) : 0);
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7605_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<int32_t> _ptr__7605_msubj(_7605_msubj ? _7605_msubj->raw() : nullptr,_7605_msubj ? _7605_msubj->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _7606_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<double> _ptr__7606_mval(_7606_mval ? _7606_mval->raw() : nullptr,_7606_mval ? _7606_mval->size(0) : 0);
              _7594_mx->getDataAsTriplets(_7604_msubi,_7605_msubj,_7606_mval);
              return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7597_mdim0)}),(::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7597_mdim0,_7598_mdim1,_7604_msubi,_7605_msubj,_7606_mval,::mosek::fusion::p_Expr::transpose(_7595_e))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7607_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<int32_t> _ptr__7607_msubi(_7607_msubi ? _7607_msubi->raw() : nullptr,_7607_msubi ? _7607_msubi->size(0) : 0);
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7608_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<int32_t> _ptr__7608_msubj(_7608_msubj ? _7608_msubj->raw() : nullptr,_7608_msubj ? _7608_msubj->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _7609_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<double> _ptr__7609_mval(_7609_mval ? _7609_mval->raw() : nullptr,_7609_mval ? _7609_mval->size(0) : 0);
              _7594_mx->__mosek_2fusion_2Matrix__transpose()->getDataAsTriplets(_7607_msubi,_7608_msubj,_7609_mval);
              return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7598_mdim1)}),(::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7598_mdim1,_7597_mdim0,_7607_msubi,_7608_msubj,_7609_mval,_7595_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      else if((_7599_nd == (int)2))
      {
        {
          if (_7593_left)
          {
            {
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7610_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<int32_t> _ptr__7610_msubi(_7610_msubi ? _7610_msubi->raw() : nullptr,_7610_msubi ? _7610_msubi->size(0) : 0);
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7611_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<int32_t> _ptr__7611_msubj(_7611_msubj ? _7611_msubj->raw() : nullptr,_7611_msubj ? _7611_msubj->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _7612_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<double> _ptr__7612_mval(_7612_mval ? _7612_mval->raw() : nullptr,_7612_mval ? _7612_mval->size(0) : 0);
              _7594_mx->getDataAsTriplets(_7610_msubi,_7611_msubj,_7612_mval);
              return (::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7597_mdim0,_7598_mdim1,_7610_msubi,_7611_msubj,_7612_mval,::mosek::fusion::p_Expr::transpose(_7595_e))).as<::mosek::fusion::Expression>();
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7613_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<int32_t> _ptr__7613_msubi(_7613_msubi ? _7613_msubi->raw() : nullptr,_7613_msubi ? _7613_msubi->size(0) : 0);
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7614_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<int32_t> _ptr__7614_msubj(_7614_msubj ? _7614_msubj->raw() : nullptr,_7614_msubj ? _7614_msubj->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _7615_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7596_nnz)));
              _checked_ptr_1<double> _ptr__7615_mval(_7615_mval ? _7615_mval->raw() : nullptr,_7615_mval ? _7615_mval->size(0) : 0);
              _7594_mx->__mosek_2fusion_2Matrix__transpose()->getDataAsTriplets(_7613_msubi,_7614_msubj,_7615_mval);
              return ::mosek::fusion::p_Expr::transpose((::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7598_mdim1,_7597_mdim0,_7613_msubi,_7614_msubj,_7615_mval,_7595_e)).as<::mosek::fusion::Expression>());
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
        }
      }
    }
  }
  else
  {
    {
      if ((_7599_nd == (int)1))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7616_eshape = _7595_e->getShape();
          _checked_ptr_1<int32_t> _ptr__7616_eshape(_7616_eshape ? _7616_eshape->raw() : nullptr,_7616_eshape ? _7616_eshape->size(0) : 0);
          if (_7593_left)
          {
            {
              return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7597_mdim0)}),(::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7597_mdim0,_7598_mdim1,_7594_mx->getDataAsArray(),(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7616_eshape[(int)0])}),_7595_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
            }
          }
          else
          {
            {
              return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7598_mdim1)}),(::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7598_mdim1,_7597_mdim0,_7594_mx->__mosek_2fusion_2Matrix__transpose()->getDataAsArray(),(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7616_eshape[(int)0]),(int32_t)((int)1)}),_7595_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      else if((_7599_nd == (int)2))
      {
        {
          if (_7593_left)
          {
            {
              return (::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7597_mdim0,_7598_mdim1,_7594_mx->getDataAsArray(),::mosek::fusion::p_Expr::transpose(_7595_e))).as<::mosek::fusion::Expression>();
            }
          }
          else
          {
            {
              return ::mosek::fusion::p_Expr::transpose((::mosek::fusion::p_ExprCrossDot::_new_ExprCrossDot(_7598_mdim1,_7597_mdim0,_7594_mx->__mosek_2fusion_2Matrix__transpose()->getDataAsArray(),_7595_e)).as<::mosek::fusion::Expression>());
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
        }
      }
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1444:6-1469:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7617_v,
    std::shared_ptr< monty::ndarray< double,2 > > _7618_mx) { return mosek::fusion::p_Expr::mul(_7617_v,_7618_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _7617_v,std::shared_ptr< monty::ndarray< double,2 > > _7618_mx)
{
  int32_t _7619_mdim0 = (int)((_7618_mx)->size(0));
  int32_t _7620_mdim1 = (int)((_7618_mx)->size(1));
  int32_t _7621_nnz = safe_mul( _7619_mdim0,_7620_mdim1 );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7622_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7621_nnz)));
  _checked_ptr_1<int32_t> _ptr__7622_msubi(_7622_msubi ? _7622_msubi->raw() : nullptr,_7622_msubi ? _7622_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7623_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7621_nnz)));
  _checked_ptr_1<int32_t> _ptr__7623_msubj(_7623_msubj ? _7623_msubj->raw() : nullptr,_7623_msubj ? _7623_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7624_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7621_nnz)));
  _checked_ptr_1<double> _ptr__7624_mval(_7624_mval ? _7624_mval->raw() : nullptr,_7624_mval ? _7624_mval->size(0) : 0);
  {
    int32_t _7625_k = (int)0;
    int32_t _12751_ = (int)0;
    int32_t _12752_ = _7619_mdim0;
    for (int32_t _7626_i = _12751_; _7626_i < _12752_; ++_7626_i)
    {
      {
        int32_t _12753_ = (int)0;
        int32_t _12754_ = _7620_mdim1;
        for (int32_t _7627_j = _12753_; _7627_j < _12754_; ++_7627_j)
        {
          {
            _ptr__7622_msubi[_7625_k] = _7626_i;
            _ptr__7623_msubj[_7625_k] = _7627_j;
            _ptr__7624_mval[_7625_k] = ((*_7618_mx)(_7626_i,_7627_j));
            _7625_k += (int)1;
          }
        }
      }
    }
  }
  return ::mosek::fusion::p_Expr::mul(false,_7619_mdim0,_7620_mdim1,_7622_msubi,_7623_msubj,_7624_mval,_7617_v);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1417:6-1442:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( std::shared_ptr< monty::ndarray< double,2 > > _7628_mx,
    monty::rc_ptr< ::mosek::fusion::Variable > _7629_v) { return mosek::fusion::p_Expr::mul(_7628_mx,_7629_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _7628_mx,monty::rc_ptr< ::mosek::fusion::Variable > _7629_v)
{
  int32_t _7630_mdim0 = (int)((_7628_mx)->size(0));
  int32_t _7631_mdim1 = (int)((_7628_mx)->size(1));
  int32_t _7632_nnz = safe_mul( _7630_mdim0,_7631_mdim1 );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7633_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7632_nnz)));
  _checked_ptr_1<int32_t> _ptr__7633_msubi(_7633_msubi ? _7633_msubi->raw() : nullptr,_7633_msubi ? _7633_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7634_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7632_nnz)));
  _checked_ptr_1<int32_t> _ptr__7634_msubj(_7634_msubj ? _7634_msubj->raw() : nullptr,_7634_msubj ? _7634_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7635_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7632_nnz)));
  _checked_ptr_1<double> _ptr__7635_mval(_7635_mval ? _7635_mval->raw() : nullptr,_7635_mval ? _7635_mval->size(0) : 0);
  {
    int32_t _7636_k = (int)0;
    int32_t _12755_ = (int)0;
    int32_t _12756_ = _7630_mdim0;
    for (int32_t _7637_i = _12755_; _7637_i < _12756_; ++_7637_i)
    {
      {
        int32_t _12757_ = (int)0;
        int32_t _12758_ = _7631_mdim1;
        for (int32_t _7638_j = _12757_; _7638_j < _12758_; ++_7638_j)
        {
          {
            _ptr__7633_msubi[_7636_k] = _7637_i;
            _ptr__7634_msubj[_7636_k] = _7638_j;
            _ptr__7635_mval[_7636_k] = ((*_7628_mx)(_7637_i,_7638_j));
            _7636_k += (int)1;
          }
        }
      }
    }
  }
  return ::mosek::fusion::p_Expr::mul(true,_7630_mdim0,_7631_mdim1,_7633_msubi,_7634_msubj,_7635_mval,_7629_v);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1407:6-1415:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7639_v,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7640_mx) { return mosek::fusion::p_Expr::mul(_7639_v,_7640_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _7639_v,monty::rc_ptr< ::mosek::fusion::Matrix > _7640_mx)
{
  int32_t _7641_mdimi = _7640_mx->numRows();
  int32_t _7642_mdimj = _7640_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7643_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7640_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__7643_mcof(_7643_mcof ? _7643_mcof->raw() : nullptr,_7643_mcof ? _7643_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7644_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7640_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7644_msubj(_7644_msubj ? _7644_msubj->raw() : nullptr,_7644_msubj ? _7644_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7645_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7640_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7645_msubi(_7645_msubi ? _7645_msubi->raw() : nullptr,_7645_msubi ? _7645_msubi->size(0) : 0);
  _7640_mx->getDataAsTriplets(_7645_msubi,_7644_msubj,_7643_mcof);
  return ::mosek::fusion::p_Expr::mul(false,_7641_mdimi,_7642_mdimj,_7645_msubi,_7644_msubj,_7643_mcof,_7639_v);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1397:6-1406:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7646_mx,
    monty::rc_ptr< ::mosek::fusion::Variable > _7647_v) { return mosek::fusion::p_Expr::mul(_7646_mx,_7647_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7646_mx,monty::rc_ptr< ::mosek::fusion::Variable > _7647_v)
{
  int32_t _7648_mdimi = _7646_mx->numRows();
  int32_t _7649_mdimj = _7646_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7650_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7646_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__7650_mcof(_7650_mcof ? _7650_mcof->raw() : nullptr,_7650_mcof ? _7650_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7651_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7646_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7651_msubj(_7651_msubj ? _7651_msubj->raw() : nullptr,_7651_msubj ? _7651_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7652_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7646_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7652_msubi(_7652_msubi ? _7652_msubi->raw() : nullptr,_7652_msubi ? _7652_msubi->size(0) : 0);
  _7646_mx->getDataAsTriplets(_7652_msubi,_7651_msubj,_7650_mcof);
  return ::mosek::fusion::p_Expr::mul(true,_7648_mdimi,_7649_mdimj,_7652_msubi,_7651_msubj,_7650_mcof,_7647_v);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1383:6-1394:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7653_left,int32_t _7654_mdimi,int32_t _7655_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _7656_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _7657_msubj,std::shared_ptr< monty::ndarray< double,1 > > _7658_mcof,monty::rc_ptr< ::mosek::fusion::Variable > _7659_v)
{
  _checked_ptr_1<int32_t> _ptr__7656_msubi(_7656_msubi ? _7656_msubi->raw() : nullptr, _7656_msubi ? _7656_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7657_msubj(_7657_msubj ? _7657_msubj->raw() : nullptr, _7657_msubj ? _7657_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__7658_mcof(_7658_mcof ? _7658_mcof->raw() : nullptr, _7658_mcof ? _7658_mcof->size(0) : 0);
  if ((_7659_v->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_7654_mdimi,_7655_mdimj,_7656_msubi,_7657_msubj,_7658_mcof,_7659_v)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7659_v->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7660_vshape = _7659_v->getShape();
      _checked_ptr_1<int32_t> _ptr__7660_vshape(_7660_vshape ? _7660_vshape->raw() : nullptr,_7660_vshape ? _7660_vshape->size(0) : 0);
      int32_t _12759_;
      bool _12760_ = _7653_left;
      if (_12760_)
      {
        _12759_ = _7654_mdimi;
      }
      else
      {
        _12759_ = _7655_mdimj;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _12761_;
      bool _12762_ = _7653_left;
      if (_12762_)
      {
        _12761_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7660_vshape[(int)0]),(int32_t)((int)1)});
      }
      else
      {
        _12761_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7660_vshape[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_12759_)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7653_left,_7654_mdimi,_7655_mdimj,_7656_msubi,_7657_msubj,_7658_mcof,::mosek::fusion::p_Var::reshape(_7659_v,_12761_))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7653_left,_7654_mdimi,_7655_mdimj,_7656_msubi,_7657_msubj,_7658_mcof,_7659_v)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1368:6-1381:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7661_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7662_p) { return mosek::fusion::p_Expr::mul(_7661_expr,_7662_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7661_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7662_p)
{
  if (((_7662_p->getND() == (int)2) && (_7661_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7661_expr,_7662_p)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7662_p->getND() == (int)1) && (_7661_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7661_expr->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7661_expr,_7662_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7662_p->getDim((int)0)),(int32_t)((int)1)})))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7662_p->getND() == (int)2) && (_7661_expr->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7662_p->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight((::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7661_expr->getDim((int)0))}),_7661_expr)).as<::mosek::fusion::Expression>(),_7662_p)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7662_p->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7662_p,_7661_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7661_expr->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7662_p,_7661_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1354:6-1367:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7663_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7664_expr) { return mosek::fusion::p_Expr::mul(_7663_p,_7664_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Parameter > _7663_p,monty::rc_ptr< ::mosek::fusion::Expression > _7664_expr)
{
  if (((_7663_p->getND() == (int)2) && (_7664_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7663_p,_7664_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7663_p->getND() == (int)1) && (_7664_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7664_expr->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7663_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7663_p->getDim((int)0))})),_7664_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7663_p->getND() == (int)2) && (_7664_expr->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7663_p->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7663_p,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7664_expr->getDim((int)0)),(int32_t)((int)1)}),_7664_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7663_p->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7663_p,_7664_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7664_expr->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7663_p,_7664_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1333:6-1352:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7665_e,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7666_m) { return mosek::fusion::p_Expr::dot(_7665_e,_7666_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7665_e,monty::rc_ptr< ::mosek::fusion::Matrix > _7666_m)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7667_eshape = _7665_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7667_eshape(_7667_eshape ? _7667_eshape->raw() : nullptr,_7667_eshape ? _7667_eshape->size(0) : 0);
  if ((((int)((_7667_eshape)->size(0)) != (int)2) || ((mosek::fusion::p_Matrix::_get_impl(_7666_m)->dimi != _ptr__7667_eshape[(int)0]) || (mosek::fusion::p_Matrix::_get_impl(_7666_m)->dimj != _ptr__7667_eshape[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int64_t _7668_nnz = _7666_m->numNonzeros();
  if ((!_7666_m->isSparse()))
  {
    {
      std::vector<int64_t> _12763_;
      for (int64_t _7669_i = (int)0, _12764_ = _7668_nnz; _7669_i < _12764_ ; ++_7669_i)
      {
        _12763_.push_back(_7669_i);
      }
      auto _12765_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12763_.size()),_12763_.begin(),_12763_.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7665_e,_12765_,_7666_m->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7670_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7668_nnz)));
      _checked_ptr_1<int32_t> _ptr__7670_subi(_7670_subi ? _7670_subi->raw() : nullptr,_7670_subi ? _7670_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7671_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7668_nnz)));
      _checked_ptr_1<int32_t> _ptr__7671_subj(_7671_subj ? _7671_subj->raw() : nullptr,_7671_subj ? _7671_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7672_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7668_nnz)));
      _checked_ptr_1<double> _ptr__7672_cof(_7672_cof ? _7672_cof->raw() : nullptr,_7672_cof ? _7672_cof->size(0) : 0);
      int32_t _7673_dimj = _7666_m->numColumns();
      _7666_m->getDataAsTriplets(_7670_subi,_7671_subj,_7672_cof);
      std::vector<int64_t> _12766_;
      for (int32_t _7674_i = (int)0, _12767_ = (int)((_7670_subi)->size(0)); _7674_i < _12767_ ; ++_7674_i)
      {
        _12766_.push_back(safe_add( safe_mul( _ptr__7670_subi[_7674_i],_7673_dimj ),_ptr__7671_subj[_7674_i] ));
      }
      auto _12768_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12766_.size()),_12766_.begin(),_12766_.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7665_e,_12768_,_7672_cof)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1321:6-1332:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7675_e,
    std::shared_ptr< monty::ndarray< double,2 > > _7676_c2) { return mosek::fusion::p_Expr::dot(_7675_e,_7676_c2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7675_e,std::shared_ptr< monty::ndarray< double,2 > > _7676_c2)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7677_eshape = _7675_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7677_eshape(_7677_eshape ? _7677_eshape->raw() : nullptr,_7677_eshape ? _7677_eshape->size(0) : 0);
  if (((int)2 != (int)((_7677_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  else
  {
    {
      if (((_ptr__7677_eshape[(int)0] != (int)((_7676_c2)->size(0))) || (_ptr__7677_eshape[(int)1] != (int)((_7676_c2)->size(1)))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  std::vector<int64_t> _12769_;
  for (int32_t _7678_i = (int)0, _12770_ = safe_mul( (int)((_7676_c2)->size(0)),(int)((_7676_c2)->size(1)) ); _7678_i < _12770_ ; ++_7678_i)
  {
    _12769_.push_back(_7678_i);
  }
  auto _12771_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12769_.size()),_12769_.begin(),_12769_.end()));
  std::vector<double> _12772_;
  for (int32_t _7679_i = (int)0, _12773_ = (int)((_7676_c2)->size(0)); _7679_i < _12773_ ; ++_7679_i)
  {
    for (int32_t _7680_j = (int)0, _12774_ = (int)((_7676_c2)->size(1)); _7680_j < _12774_ ; ++_7680_j)
    {
      _12772_.push_back(((*_7676_c2)(_7679_i,_7680_j)));
    }
  }
  auto _12775_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12772_.size()),_12772_.begin(),_12772_.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7675_e,_12771_,_12775_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1309:6-1319:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7681_e,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7682_nda) { return mosek::fusion::p_Expr::dot(_7681_e,_7682_nda); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7681_e,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7682_nda)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7683_eshape = _7681_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7683_eshape(_7683_eshape ? _7683_eshape->raw() : nullptr,_7683_eshape ? _7683_eshape->size(0) : 0);
  if (((int)((mosek::fusion::p_NDSparseArray::_get_impl(_7682_nda)->dims)->size(0)) != (int)((_7683_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  else
  {
    {
      int32_t _12776_ = (int)0;
      int32_t _12777_ = (int)((_7683_eshape)->size(0));
      for (int32_t _7684_i = _12776_; _7684_i < _12777_; ++_7684_i)
      {
        {
          if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_7682_nda)->dims)(_7684_i)) != _ptr__7683_eshape[_7684_i]))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
            }
          }
          {}
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7681_e,mosek::fusion::p_NDSparseArray::_get_impl(_7682_nda)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7682_nda)->cof)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1292:6-1307:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7685_e,
    std::shared_ptr< monty::ndarray< double,1 > > _7686_c1) { return mosek::fusion::p_Expr::dot(_7685_e,_7686_c1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7685_e,std::shared_ptr< monty::ndarray< double,1 > > _7686_c1)
{
  _checked_ptr_1<double> _ptr__7686_c1(_7686_c1 ? _7686_c1->raw() : nullptr, _7686_c1 ? _7686_c1->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7687_eshape = _7685_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7687_eshape(_7687_eshape ? _7687_eshape->raw() : nullptr,_7687_eshape ? _7687_eshape->size(0) : 0);
  if (((_7685_e->getSize() == (int)((_7686_c1)->size(0))) && ((int)((_7687_eshape)->size(0)) > (int)1)))
  {
    {
      int32_t _7688_numnotone = (int)0;
      int32_t _12778_ = (int)0;
      int32_t _12779_ = (int)((_7687_eshape)->size(0));
      for (int32_t _7689_i = _12778_; _7689_i < _12779_; ++_7689_i)
      {
        {
          if ((_ptr__7687_eshape[_7689_i] > (int)1))
          {
            {
              ++ _7688_numnotone;
            }
          }
          {}
        }
      }
      if ((_7688_numnotone > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7690_newshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int32_t)_7685_e->getSize())});
          _checked_ptr_1<int32_t> _ptr__7690_newshape(_7690_newshape ? _7690_newshape->raw() : nullptr,_7690_newshape ? _7690_newshape->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7690_newshape,_7685_e)).as<::mosek::fusion::Expression>(),_7686_c1)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7685_e,_7686_c1)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1290:6-99
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7691_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7692_e) { return mosek::fusion::p_Expr::dot(_7691_m,_7692_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _7691_m,monty::rc_ptr< ::mosek::fusion::Expression > _7692_e)
{
  return ::mosek::fusion::p_Expr::dot(_7692_e,_7691_m);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1289:6-101
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7693_nda,
    monty::rc_ptr< ::mosek::fusion::Expression > _7694_e) { return mosek::fusion::p_Expr::dot(_7693_nda,_7694_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7693_nda,monty::rc_ptr< ::mosek::fusion::Expression > _7694_e)
{
  return ::mosek::fusion::p_Expr::dot(_7694_e,_7693_nda);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1288:6-100
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( std::shared_ptr< monty::ndarray< double,2 > > _7695_c2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7696_e) { return mosek::fusion::p_Expr::dot(_7695_c2,_7696_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _7695_c2,monty::rc_ptr< ::mosek::fusion::Expression > _7696_e)
{
  return ::mosek::fusion::p_Expr::dot(_7696_e,_7695_c2);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1287:6-100
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( std::shared_ptr< monty::ndarray< double,1 > > _7697_c1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7698_e) { return mosek::fusion::p_Expr::dot(_7697_c1,_7698_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _7697_c1,monty::rc_ptr< ::mosek::fusion::Expression > _7698_e)
{
  _checked_ptr_1<double> _ptr__7697_c1(_7697_c1 ? _7697_c1->raw() : nullptr, _7697_c1 ? _7697_c1->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_7698_e,_7697_c1);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1285:6-103
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7699_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7700_p) { return mosek::fusion::p_Expr::dot(_7699_e,_7700_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7699_e,monty::rc_ptr< ::mosek::fusion::Parameter > _7700_p)
{
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7700_p,_7699_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1284:6-103
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7701_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7702_e) { return mosek::fusion::p_Expr::dot(_7701_p,_7702_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Parameter > _7701_p,monty::rc_ptr< ::mosek::fusion::Expression > _7702_e)
{
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7701_p,_7702_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1270:6-1282:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7703_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7704_e) { return mosek::fusion::p_Expr::outer(_7703_p,_7704_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Parameter > _7703_p,monty::rc_ptr< ::mosek::fusion::Expression > _7704_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7705_vshape = _7704_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7705_vshape(_7705_vshape ? _7705_vshape->raw() : nullptr,_7705_vshape ? _7705_vshape->size(0) : 0);
  if ((!(((int)((_7705_vshape)->size(0)) == (int)1) || (((int)((_7705_vshape)->size(0)) == (int)2) && (_ptr__7705_vshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7706_pshape = _7703_p->getShape();
  _checked_ptr_1<int32_t> _ptr__7706_pshape(_7706_pshape ? _7706_pshape->raw() : nullptr,_7706_pshape ? _7706_pshape->size(0) : 0);
  if ((!((_7703_p->getND() == (int)1) || ((_7703_p->getND() == (int)2) && (_ptr__7706_pshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Parameter argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(_7703_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7706_pshape[(int)0]),(int32_t)((int)1)})),::mosek::fusion::p_Expr::reshape(_7704_e,(int)1,_ptr__7705_vshape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1256:6-1268:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7707_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7708_p) { return mosek::fusion::p_Expr::outer(_7707_e,_7708_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7707_e,monty::rc_ptr< ::mosek::fusion::Parameter > _7708_p)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7709_shape = _7707_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7709_shape(_7709_shape ? _7709_shape->raw() : nullptr,_7709_shape ? _7709_shape->size(0) : 0);
  if ((!((_7707_e->getND() == (int)1) || ((_7707_e->getND() == (int)2) && (_ptr__7709_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7710_pshape = _7708_p->getShape();
  _checked_ptr_1<int32_t> _ptr__7710_pshape(_7710_pshape ? _7710_pshape->raw() : nullptr,_7710_pshape ? _7710_pshape->size(0) : 0);
  if ((!((_7708_p->getND() == (int)1) || ((_7708_p->getND() == (int)2) && (_ptr__7710_pshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Parameter argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7707_e,_ptr__7709_shape[(int)0],(int)1),_7708_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7710_pshape[(int)0])})));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1244:6-1254:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7711_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7712_e) { return mosek::fusion::p_Expr::outer(_7711_m,_7712_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _7711_m,monty::rc_ptr< ::mosek::fusion::Expression > _7712_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7713_vshape = _7712_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7713_vshape(_7713_vshape ? _7713_vshape->raw() : nullptr,_7713_vshape ? _7713_vshape->size(0) : 0);
  if ((!(((int)((_7713_vshape)->size(0)) == (int)1) || (((int)((_7713_vshape)->size(0)) == (int)2) && (_ptr__7713_vshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7711_m)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(_7711_m,::mosek::fusion::p_Expr::reshape(_7712_e,(int)1,_ptr__7713_vshape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1232:6-1242:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7714_e,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7715_m) { return mosek::fusion::p_Expr::outer(_7714_e,_7715_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7714_e,monty::rc_ptr< ::mosek::fusion::Matrix > _7715_m)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7716_shape = _7714_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7716_shape(_7716_shape ? _7716_shape->raw() : nullptr,_7716_shape ? _7716_shape->size(0) : 0);
  if ((!((_7714_e->getND() == (int)1) || ((_7714_e->getND() == (int)2) && (_ptr__7716_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7715_m)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7714_e,_ptr__7716_shape[(int)0],(int)1),_7715_m->__mosek_2fusion_2Matrix__transpose());
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1222:6-1230:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( std::shared_ptr< monty::ndarray< double,1 > > _7717_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7718_e) { return mosek::fusion::p_Expr::outer(_7717_a,_7718_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _7717_a,monty::rc_ptr< ::mosek::fusion::Expression > _7718_e)
{
  _checked_ptr_1<double> _ptr__7717_a(_7717_a ? _7717_a->raw() : nullptr, _7717_a ? _7717_a->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7719_shape = _7718_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7719_shape(_7719_shape ? _7719_shape->raw() : nullptr,_7719_shape ? _7719_shape->size(0) : 0);
  if ((!((_7718_e->getND() == (int)1) || ((_7718_e->getND() == (int)2) && (_ptr__7719_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Matrix::dense((int)((_7717_a)->size(0)),(int)1,_7717_a),::mosek::fusion::p_Expr::reshape(_7718_e,(int)1,_ptr__7719_shape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1212:6-1220:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7720_e,
    std::shared_ptr< monty::ndarray< double,1 > > _7721_a) { return mosek::fusion::p_Expr::outer(_7720_e,_7721_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7720_e,std::shared_ptr< monty::ndarray< double,1 > > _7721_a)
{
  _checked_ptr_1<double> _ptr__7721_a(_7721_a ? _7721_a->raw() : nullptr, _7721_a ? _7721_a->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7722_shape = _7720_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7722_shape(_7722_shape ? _7722_shape->raw() : nullptr,_7722_shape ? _7722_shape->size(0) : 0);
  if ((!((_7720_e->getND() == (int)1) || ((_7720_e->getND() == (int)2) && (_ptr__7722_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7720_e,_ptr__7722_shape[(int)0],(int)1),::mosek::fusion::p_Matrix::dense((int)1,(int)((_7721_a)->size(0)),_7721_a));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer_
// Method mosek.fusion.Expr.outer_ @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1115:6-1210:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int32_t _7723_edim,std::shared_ptr< monty::ndarray< int64_t,1 > > _7724_eptrb,std::shared_ptr< monty::ndarray< int64_t,1 > > _7725_esubj,std::shared_ptr< monty::ndarray< double,1 > > _7726_ecof,std::shared_ptr< monty::ndarray< double,1 > > _7727_ebfix,std::shared_ptr< monty::ndarray< int64_t,1 > > _7728_einst,std::shared_ptr< monty::ndarray< double,1 > > _7729_a,std::shared_ptr< monty::ndarray< int32_t,1 > > _7730_sub,int32_t _7731_dim,bool _7732_transpose)
{
  _checked_ptr_1<int64_t> _ptr__7724_eptrb(_7724_eptrb ? _7724_eptrb->raw() : nullptr, _7724_eptrb ? _7724_eptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7725_esubj(_7725_esubj ? _7725_esubj->raw() : nullptr, _7725_esubj ? _7725_esubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__7726_ecof(_7726_ecof ? _7726_ecof->raw() : nullptr, _7726_ecof ? _7726_ecof->size(0) : 0);
  _checked_ptr_1<double> _ptr__7727_ebfix(_7727_ebfix ? _7727_ebfix->raw() : nullptr, _7727_ebfix ? _7727_ebfix->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7728_einst(_7728_einst ? _7728_einst->raw() : nullptr, _7728_einst ? _7728_einst->size(0) : 0);
  _checked_ptr_1<double> _ptr__7729_a(_7729_a ? _7729_a->raw() : nullptr, _7729_a ? _7729_a->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7730_sub(_7730_sub ? _7730_sub->raw() : nullptr, _7730_sub ? _7730_sub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12780_;
  bool _12781_ = (!_7732_transpose);
  if (_12781_)
  {
    _12780_ = ::mosek::fusion::p_Set::make(_7723_edim,_7731_dim);
  }
  else
  {
    _12780_ = ::mosek::fusion::p_Set::make(_7731_dim,_7723_edim);
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7733_shape = _12780_;
  _checked_ptr_1<int32_t> _ptr__7733_shape(_7733_shape ? _7733_shape->raw() : nullptr,_7733_shape ? _7733_shape->size(0) : 0);
  int32_t _7734_nnzelm = safe_mul( (int)((_7729_a)->size(0)),(int)((_7728_einst)->size(0)) );
  int32_t _7735_nnz = safe_mul( (int)((_7729_a)->size(0)),(int)((_7725_esubj)->size(0)) );
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7736_inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7734_nnzelm)));
  _checked_ptr_1<int64_t> _ptr__7736_inst(_7736_inst ? _7736_inst->raw() : nullptr,_7736_inst ? _7736_inst->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12782_;
  bool _12783_ = (NULL != _7727_ebfix.get());
  if (_12783_)
  {
    _12782_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7734_nnzelm)));
  }
  else
  {
    _12782_ = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7737_bfix = _12782_;
  _checked_ptr_1<double> _ptr__7737_bfix(_7737_bfix ? _7737_bfix->raw() : nullptr,_7737_bfix ? _7737_bfix->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7738_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7735_nnz)));
  _checked_ptr_1<double> _ptr__7738_cof(_7738_cof ? _7738_cof->raw() : nullptr,_7738_cof ? _7738_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7739_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7735_nnz)));
  _checked_ptr_1<int64_t> _ptr__7739_subj(_7739_subj ? _7739_subj->raw() : nullptr,_7739_subj ? _7739_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7740_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _7734_nnzelm,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7740_ptrb(_7740_ptrb ? _7740_ptrb->raw() : nullptr,_7740_ptrb ? _7740_ptrb->size(0) : 0);
  int32_t _7741_ennz = (int32_t)_ptr__7740_ptrb[((int)((_7740_ptrb)->size(0)) - (int)1)];
  if ((!_7732_transpose))
  {
    {
      int64_t _7742_k = (int64_t)0;
      int64_t _7743_ptr = (int64_t)0;
      int32_t _12784_ = (int)0;
      int32_t _12785_ = (int)((_7728_einst)->size(0));
      for (int32_t _7744_i = _12784_; _7744_i < _12785_; ++_7744_i)
      {
        {
          int64_t _7745_num = (_ptr__7724_eptrb[safe_add( _7744_i,(int)1 )] - _ptr__7724_eptrb[_7744_i]);
          int32_t _12786_ = (int)0;
          int32_t _12787_ = (int)((_7729_a)->size(0));
          for (int32_t _7746_j = _12786_; _7746_j < _12787_; ++_7746_j)
          {
            {
              _ptr__7728_einst[_7742_k] = safe_add( safe_mul( _ptr__7728_einst[_7744_i],_7731_dim ),_ptr__7730_sub[_7746_j] );
              _ptr__7740_ptrb[safe_add( _7742_k,(int)1 )] = safe_add( _ptr__7740_ptrb[_7742_k],_7745_num );
              ++ _7742_k;
              int64_t _12788_ = _ptr__7724_eptrb[_7744_i];
              int64_t _12789_ = _ptr__7724_eptrb[safe_add( _7744_i,(int)1 )];
              for (int64_t _7747_l = _12788_; _7747_l < _12789_; ++_7747_l)
              {
                {
                  _ptr__7739_subj[_7743_ptr] = _ptr__7725_esubj[_7747_l];
                  _ptr__7738_cof[_7743_ptr] = (_ptr__7726_ecof[_7747_l] * _ptr__7729_a[_7746_j]);
                  ++ _7743_ptr;
                }
              }
            }
          }
        }
      }
      if ((NULL != _7737_bfix.get()))
      {
        {
          int32_t _7748_k = (int)0;
          int32_t _12790_ = (int)0;
          int32_t _12791_ = (int)((_7728_einst)->size(0));
          for (int32_t _7749_i = _12790_; _7749_i < _12791_; ++_7749_i)
          {
            {
              int32_t _12792_ = (int)0;
              int32_t _12793_ = (int)((_7729_a)->size(0));
              for (int32_t _7750_j = _12792_; _7750_j < _12793_; ++_7750_j)
              {
                {
                  _ptr__7737_bfix[_7748_k] = (_ptr__7729_a[_7750_j] * _ptr__7727_ebfix[_7749_i]);
                  ++ _7748_k;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int64_t _7751_k = (int64_t)0;
      int64_t _7752_ptr = (int64_t)0;
      int32_t _12794_ = (int)0;
      int32_t _12795_ = (int)((_7729_a)->size(0));
      for (int32_t _7753_j = _12794_; _7753_j < _12795_; ++_7753_j)
      {
        {
          double _7754_c = _ptr__7729_a[_7753_j];
          ::mosek::fusion::Utils::Tools::arraycopy(_7725_esubj,(int64_t)((int)0),_7739_subj,_7752_ptr,(int64_t)(_7741_ennz));
          int32_t _12796_ = (int)0;
          int32_t _12797_ = _7741_ennz;
          for (int32_t _7755_l = _12796_; _7755_l < _12797_; ++_7755_l)
          {
            {
              _ptr__7738_cof[safe_add( _7752_ptr,_7755_l )] = (_ptr__7726_ecof[_7755_l] * _ptr__7729_a[_7753_j]);
            }
          }
          int32_t _12798_ = (int)0;
          int32_t _12799_ = (int)((_7728_einst)->size(0));
          for (int32_t _7756_i = _12798_; _7756_i < _12799_; ++_7756_i)
          {
            {
              int64_t _7757_num = (_ptr__7724_eptrb[safe_add( _7756_i,(int)1 )] - _ptr__7724_eptrb[_7756_i]);
              _ptr__7728_einst[_7751_k] = safe_add( safe_mul( _ptr__7728_einst[_7756_i],_7731_dim ),_ptr__7730_sub[_7753_j] );
              _ptr__7740_ptrb[safe_add( _7751_k,(int)1 )] = safe_add( _ptr__7740_ptrb[_7751_k],_7757_num );
              ++ _7751_k;
            }
          }
          _7752_ptr += _7741_ennz;
        }
      }
      if ((NULL != _7737_bfix.get()))
      {
        {
          int32_t _7758_k = (int)0;
          int32_t _12800_ = (int)0;
          int32_t _12801_ = (int)((_7729_a)->size(0));
          for (int32_t _7759_j = _12800_; _7759_j < _12801_; ++_7759_j)
          {
            {
              double _7760_c = _ptr__7729_a[_7759_j];
              int32_t _12802_ = (int)0;
              int32_t _12803_ = (int)((_7728_einst)->size(0));
              for (int32_t _7761_i = _12802_; _7761_i < _12803_; ++_7761_i)
              {
                {
                  _ptr__7737_bfix[_7758_k] = (_ptr__7727_ebfix[_7761_i] * _7760_c);
                  ++ _7758_k;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7740_ptrb,_7739_subj,_7738_cof,_7737_bfix,_7733_shape,_7736_inst)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.outer_

// Begin mosek.fusion.Expr.outer_
// Method mosek.fusion.Expr.outer_ @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1036:6-1102:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _7762_v,int32_t _7763_vdim,std::shared_ptr< monty::ndarray< double,1 > > _7764_a,std::shared_ptr< monty::ndarray< int32_t,1 > > _7765_sub,int32_t _7766_dim,bool _7767_transpose)
{
  _checked_ptr_1<double> _ptr__7764_a(_7764_a ? _7764_a->raw() : nullptr, _7764_a ? _7764_a->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7765_sub(_7765_sub ? _7765_sub->raw() : nullptr, _7765_sub ? _7765_sub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12804_;
  bool _12805_ = (!_7767_transpose);
  if (_12805_)
  {
    _12804_ = ::mosek::fusion::p_Set::make(_7763_vdim,_7766_dim);
  }
  else
  {
    _12804_ = ::mosek::fusion::p_Set::make(_7766_dim,_7763_vdim);
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7768_shape = _12804_;
  _checked_ptr_1<int32_t> _ptr__7768_shape(_7768_shape ? _7768_shape->raw() : nullptr,_7768_shape ? _7768_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _12806_;
  bool _12807_ = (_7766_dim == (int)((_7764_a)->size(0)));
  if (_12807_)
  {
    _12806_ = nullptr;
  }
  else
  {
    _12806_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( (int)((_7764_a)->size(0)),_7763_vdim ))));
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7769_inst = _12806_;
  _checked_ptr_1<int64_t> _ptr__7769_inst(_7769_inst ? _7769_inst->raw() : nullptr,_7769_inst ? _7769_inst->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7770_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7764_a)->size(0)),_7763_vdim ))));
  _checked_ptr_1<double> _ptr__7770_bfix(_7770_bfix ? _7770_bfix->raw() : nullptr,_7770_bfix ? _7770_bfix->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7771_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7764_a)->size(0)),_7763_vdim ))));
  _checked_ptr_1<double> _ptr__7771_cof(_7771_cof ? _7771_cof->raw() : nullptr,_7771_cof ? _7771_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7772_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( (int)((_7764_a)->size(0)),_7763_vdim ))));
  _checked_ptr_1<int64_t> _ptr__7772_subj(_7772_subj ? _7772_subj->raw() : nullptr,_7772_subj ? _7772_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7773_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( safe_mul( (int)((_7764_a)->size(0)),_7763_vdim ),(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7773_ptrb(_7773_ptrb ? _7773_ptrb->raw() : nullptr,_7773_ptrb ? _7773_ptrb->size(0) : 0);
  if ((_7766_dim == (int)((_7764_a)->size(0))))
  {
    {
      int64_t _7774_k = (int64_t)0;
      if ((!_7767_transpose))
      {
        {
          int32_t _12808_ = (int)0;
          int32_t _12809_ = _7763_vdim;
          for (int32_t _7775_j = _12808_; _7775_j < _12809_; ++_7775_j)
          {
            {
              int32_t _12810_ = (int)0;
              int32_t _12811_ = _7766_dim;
              for (int32_t _7776_i = _12810_; _7776_i < _12811_; ++_7776_i)
              {
                {
                  _ptr__7773_ptrb[safe_add( _7774_k,(int)1 )] = safe_add( _7774_k,(int)1 );
                  _ptr__7772_subj[_7774_k] = (int64_t)_7775_j;
                  _ptr__7771_cof[_7774_k] = _ptr__7764_a[_7776_i];
                  ++ _7774_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _12812_ = (int)0;
          int32_t _12813_ = _7766_dim;
          for (int32_t _7777_i = _12812_; _7777_i < _12813_; ++_7777_i)
          {
            {
              int32_t _12814_ = (int)0;
              int32_t _12815_ = _7763_vdim;
              for (int32_t _7778_j = _12814_; _7778_j < _12815_; ++_7778_j)
              {
                {
                  _ptr__7773_ptrb[safe_add( _7774_k,(int)1 )] = safe_add( _7774_k,(int)1 );
                  _ptr__7772_subj[_7774_k] = (int64_t)_7778_j;
                  _ptr__7771_cof[_7774_k] = _ptr__7764_a[_7777_i];
                  ++ _7774_k;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int64_t _7779_k = (int64_t)0;
      if ((!_7767_transpose))
      {
        {
          int32_t _12816_ = (int)0;
          int32_t _12817_ = _7763_vdim;
          for (int32_t _7780_j = _12816_; _7780_j < _12817_; ++_7780_j)
          {
            {
              int32_t _12818_ = (int)0;
              int32_t _12819_ = (int)((_7764_a)->size(0));
              for (int32_t _7781_i = _12818_; _7781_i < _12819_; ++_7781_i)
              {
                {
                  _ptr__7773_ptrb[safe_add( _7779_k,(int)1 )] = safe_add( _7779_k,(int)1 );
                  _ptr__7772_subj[_7779_k] = (int64_t)_7780_j;
                  _ptr__7771_cof[_7779_k] = _ptr__7764_a[_7781_i];
                  _ptr__7769_inst[_7779_k] = safe_add( safe_mul( _7780_j,_7766_dim ),_ptr__7765_sub[_7781_i] );
                  ++ _7779_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _12820_ = (int)0;
          int32_t _12821_ = (int)((_7764_a)->size(0));
          for (int32_t _7782_i = _12820_; _7782_i < _12821_; ++_7782_i)
          {
            {
              int32_t _12822_ = (int)0;
              int32_t _12823_ = _7763_vdim;
              for (int32_t _7783_j = _12822_; _7783_j < _12823_; ++_7783_j)
              {
                {
                  _ptr__7773_ptrb[safe_add( _7779_k,(int)1 )] = safe_add( _7779_k,(int)1 );
                  _ptr__7772_subj[_7779_k] = (int64_t)_7783_j;
                  _ptr__7771_cof[_7779_k] = _ptr__7764_a[_7782_i];
                  _ptr__7769_inst[_7779_k] = safe_add( safe_mul( _ptr__7765_sub[_7782_i],_7763_vdim ),_7783_j );
                  ++ _7779_k;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7773_ptrb,_7772_subj,_7771_cof,_7770_bfix,_7768_shape,_7769_inst)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.outer_

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1015:6-1029:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7784_exprs) { return mosek::fusion::p_Expr::stack(_7784_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7784_exprs)
{
  if ((NULL == _7784_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12824_ = (int)0;
  int32_t _12825_ = (int)((_7784_exprs)->size(0));
  for (int32_t _7785_i = _12824_; _7785_i < _12825_; ++_7785_i)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7786_es = ((*_7784_exprs)(_7785_i));
      if ((NULL == _7786_es.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int32_t _12826_ = (int)0;
      int32_t _12827_ = (int)((_7786_es)->size(0));
      for (int32_t _7787_j = _12826_; _7787_j < _12827_; ++_7787_j)
      {
        {
          if ((NULL == ((*_7786_es)(_7787_j)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _12828_;
  for (int32_t _7789_i = (int)0, _12829_ = (int)((_7784_exprs)->size(0)); _7789_i < _12829_ ; ++_7789_i)
  {
    _12828_.push_back(::mosek::fusion::p_Expr::stack_(((*_7784_exprs)(_7789_i)),(int)1));
  }
  auto _12830_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_12828_.size()),_12828_.begin(),_12828_.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7788_tmp = _12830_;
  return ::mosek::fusion::p_Expr::stack_(_7788_tmp,(int)0);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1005:6-160
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7790_a1,
    double _7791_a2,
    double _7792_a3) { return mosek::fusion::p_Expr::vstack(_7790_a1,_7791_a2,_7792_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7790_a1,double _7791_a2,double _7792_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7790_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7791_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7792_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1004:6-149
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7793_a1,
    double _7794_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7795_e3) { return mosek::fusion::p_Expr::vstack(_7793_a1,_7794_a2,_7795_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7793_a1,double _7794_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7795_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7793_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7794_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7795_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1003:6-149
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7796_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7797_e2,
    double _7798_a3) { return mosek::fusion::p_Expr::vstack(_7796_a1,_7797_e2,_7798_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7796_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7797_e2,double _7798_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7796_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7797_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7798_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1002:6-138
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7799_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7800_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7801_e3) { return mosek::fusion::p_Expr::vstack(_7799_a1,_7800_e2,_7801_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7799_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7800_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7801_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7799_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7800_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7801_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:1000:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7802_e1,
    double _7803_a2,
    double _7804_a3) { return mosek::fusion::p_Expr::vstack(_7802_e1,_7803_a2,_7804_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7802_e1,double _7803_a2,double _7804_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7802_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7803_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7804_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:999:6-142
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7805_e1,
    double _7806_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7807_e3) { return mosek::fusion::p_Expr::vstack(_7805_e1,_7806_a2,_7807_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7805_e1,double _7806_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7807_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7805_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7806_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7807_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:998:6-142
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7808_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7809_e2,
    double _7810_a3) { return mosek::fusion::p_Expr::vstack(_7808_e1,_7809_e2,_7810_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7808_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7809_e2,double _7810_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7808_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7809_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7810_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:997:6-131
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7811_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7812_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7813_e3) { return mosek::fusion::p_Expr::vstack(_7811_e1,_7812_e2,_7813_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7811_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7812_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7813_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7811_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7812_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7813_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:993:6-120
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7814_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7815_e2) { return mosek::fusion::p_Expr::vstack(_7814_a1,_7815_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7814_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7815_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7814_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7815_e2.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:992:6-124
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7816_e1,
    double _7817_a2) { return mosek::fusion::p_Expr::vstack(_7816_e1,_7817_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7816_e1,double _7817_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7816_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7817_a2).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:991:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7818_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7819_e2) { return mosek::fusion::p_Expr::vstack(_7818_e1,_7819_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7818_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7819_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7818_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7819_e2.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:980:6-987:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7820_exprs) { return mosek::fusion::p_Expr::vstack(_7820_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7820_exprs)
{
  if ((NULL == _7820_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12831_ = (int)0;
  int32_t _12832_ = (int)((_7820_exprs)->size(0));
  for (int32_t _7821_i = _12831_; _7821_i < _12832_; ++_7821_i)
  {
    {
      if ((NULL == ((*_7820_exprs)(_7821_i)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7820_exprs,(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:972:6-250
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7822_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7823_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7824_e3) { return mosek::fusion::p_Expr::hstack(_7822_e1,_7823_e2,_7824_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7822_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7823_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7824_e3)
{
  if (((NULL == _7822_e1.get()) || ((NULL == _7823_e2.get()) || (NULL == _7824_e3.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7822_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7823_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7824_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:941:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7825_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7826_e2,
    double _7827_a3) { return mosek::fusion::p_Expr::hstack(_7825_e1,_7826_e2,_7827_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7825_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7826_e2,double _7827_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7825_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7826_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7827_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:940:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7828_e1,
    double _7829_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7830_e3) { return mosek::fusion::p_Expr::hstack(_7828_e1,_7829_a2,_7830_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7828_e1,double _7829_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7830_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7828_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7829_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7830_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:939:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7831_e1,
    double _7832_a2,
    double _7833_a3) { return mosek::fusion::p_Expr::hstack(_7831_e1,_7832_a2,_7833_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7831_e1,double _7832_a2,double _7833_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7831_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7832_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7833_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:937:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7834_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7835_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7836_e3) { return mosek::fusion::p_Expr::hstack(_7834_a1,_7835_e2,_7836_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7834_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7835_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7836_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7834_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7835_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7836_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:936:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7837_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7838_e2,
    double _7839_a3) { return mosek::fusion::p_Expr::hstack(_7837_a1,_7838_e2,_7839_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7837_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7838_e2,double _7839_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7837_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7838_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7839_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:935:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7840_a1,
    double _7841_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7842_e3) { return mosek::fusion::p_Expr::hstack(_7840_a1,_7841_a2,_7842_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7840_a1,double _7841_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7842_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7840_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7841_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7842_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:933:6-122
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7843_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7844_e2) { return mosek::fusion::p_Expr::hstack(_7843_a1,_7844_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7843_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7844_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7843_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7844_e2.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:932:6-124
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7845_e1,
    double _7846_a2) { return mosek::fusion::p_Expr::hstack(_7845_e1,_7846_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7845_e1,double _7846_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7845_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7846_a2).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:931:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7847_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7848_e2) { return mosek::fusion::p_Expr::hstack(_7847_e1,_7848_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7847_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7848_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7847_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7848_e2.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:921:6-929:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7849_exprs) { return mosek::fusion::p_Expr::hstack(_7849_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7849_exprs)
{
  if ((NULL == _7849_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12833_ = (int)0;
  int32_t _12834_ = (int)((_7849_exprs)->size(0));
  for (int32_t _7850_i = _12833_; _7850_i < _12834_; ++_7850_i)
  {
    {
      if ((NULL == ((*_7849_exprs)(_7850_i)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7849_exprs,(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:918:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7851_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7852_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7853_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7854_e3) { return mosek::fusion::p_Expr::stack(_7851_dim,_7852_e1,_7853_e2,_7854_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7851_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7852_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7853_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7854_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7852_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7853_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7854_e3.get())}),_7851_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:917:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7855_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7856_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7857_e2,
    double _7858_a3) { return mosek::fusion::p_Expr::stack(_7855_dim,_7856_e1,_7857_e2,_7858_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7855_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7856_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7857_e2,double _7858_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7856_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7857_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7858_a3).get())}),_7855_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:916:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7859_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7860_e1,
    double _7861_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7862_e3) { return mosek::fusion::p_Expr::stack(_7859_dim,_7860_e1,_7861_a2,_7862_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7859_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7860_e1,double _7861_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7862_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7860_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7861_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7862_e3.get())}),_7859_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:915:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7863_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7864_e1,
    double _7865_a2,
    double _7866_a3) { return mosek::fusion::p_Expr::stack(_7863_dim,_7864_e1,_7865_a2,_7866_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7863_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7864_e1,double _7865_a2,double _7866_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7864_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7865_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7866_a3).get())}),_7863_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:913:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7867_dim,
    double _7868_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7869_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7870_e3) { return mosek::fusion::p_Expr::stack(_7867_dim,_7868_a1,_7869_e2,_7870_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7867_dim,double _7868_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7869_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7870_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7868_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7869_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7870_e3.get())}),_7867_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:912:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7871_dim,
    double _7872_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7873_e2,
    double _7874_a3) { return mosek::fusion::p_Expr::stack(_7871_dim,_7872_a1,_7873_e2,_7874_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7871_dim,double _7872_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7873_e2,double _7874_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7872_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7873_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7874_a3).get())}),_7871_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:911:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7875_dim,
    double _7876_a1,
    double _7877_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7878_e1) { return mosek::fusion::p_Expr::stack(_7875_dim,_7876_a1,_7877_a2,_7878_e1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7875_dim,double _7876_a1,double _7877_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7878_e1)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7876_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7877_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7878_e1.get())}),_7875_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:910:6-134
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7879_dim,
    double _7880_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7881_e2) { return mosek::fusion::p_Expr::stack(_7879_dim,_7880_a1,_7881_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7879_dim,double _7880_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7881_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7880_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7881_e2.get())}),_7879_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:909:6-136
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7882_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7883_e1,
    double _7884_a2) { return mosek::fusion::p_Expr::stack(_7882_dim,_7883_e1,_7884_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7882_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7883_e1,double _7884_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7883_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7884_a2).get())}),_7882_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:908:6-125
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7885_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7886_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7887_e2) { return mosek::fusion::p_Expr::stack(_7885_dim,_7886_e1,_7887_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7885_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7886_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7887_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7886_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7887_e2.get())}),_7885_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:907:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7888_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7889_exprs) { return mosek::fusion::p_Expr::stack(_7888_dim,_7889_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7888_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7889_exprs)
{
  return ::mosek::fusion::p_Expr::stack_(_7889_exprs,_7888_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack_
// Method mosek.fusion.Expr.stack_ @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:896:6-905:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7890_exprs,int32_t _7891_dim)
{
  if (((int)((_7890_exprs)->size(0)) == (int)1))
  {
    {
      return ((*_7890_exprs)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_7890_exprs,_7891_dim),_7891_dim)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.stack_

// Begin mosek.fusion.Expr.promote
// Method mosek.fusion.Expr.promote @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:865:6-894:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7892_exprs,int32_t _7893_dim)
{
  int32_t _7894_n = (int)((_7892_exprs)->size(0));
  std::vector<int32_t> _12835_;
  for (int32_t _7896_i = (int)0, _12836_ = _7894_n; _7896_i < _12836_ ; ++_7896_i)
  {
    _12835_.push_back(((*_7892_exprs)(_7896_i))->getND());
  }
  auto _12837_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12835_.size()),_12835_.begin(),_12835_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7895_nds = _12837_;
  _checked_ptr_1<int32_t> _ptr__7895_nds(_7895_nds ? _7895_nds->raw() : nullptr,_7895_nds ? _7895_nds->size(0) : 0);
  int32_t _7897_maxnd = _ptr__7895_nds[(int)0];
  int32_t _7898_minnd = _ptr__7895_nds[(int)0];
  int32_t _12838_ = (int)1;
  int32_t _12839_ = _7894_n;
  for (int32_t _7899_i = _12838_; _7899_i < _12839_; ++_7899_i)
  {
    {
      if ((_ptr__7895_nds[_7899_i] < _7898_minnd))
      {
        {
          _7898_minnd = _ptr__7895_nds[_7899_i];
        }
      }
      {}
      if ((_ptr__7895_nds[_7899_i] > _7897_maxnd))
      {
        {
          _7897_maxnd = _ptr__7895_nds[_7899_i];
        }
      }
      {}
    }
  }
  if ((_7897_maxnd < _7893_dim))
  {
    {
      _7897_maxnd = _7893_dim;
    }
  }
  {}
  if ((_7898_minnd < _7897_maxnd))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7900_rexprs = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_7894_n)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7901_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7897_maxnd)));
      _checked_ptr_1<int32_t> _ptr__7901_shape(_7901_shape ? _7901_shape->raw() : nullptr,_7901_shape ? _7901_shape->size(0) : 0);
      int32_t _12840_ = (int)0;
      int32_t _12841_ = _7894_n;
      for (int32_t _7902_i = _12840_; _7902_i < _12841_; ++_7902_i)
      {
        {
          if ((((*_7892_exprs)(_7902_i))->getND() == _7897_maxnd))
          {
            {
              ((*_7900_rexprs)(_7902_i)) = ((*_7892_exprs)(_7902_i));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7903_s = ((*_7892_exprs)(_7902_i))->getShape();
              _checked_ptr_1<int32_t> _ptr__7903_s(_7903_s ? _7903_s->raw() : nullptr,_7903_s ? _7903_s->size(0) : 0);
              int32_t _12842_ = (int)0;
              int32_t _12843_ = (int)((_7903_s)->size(0));
              for (int32_t _7904_j = _12842_; _7904_j < _12843_; ++_7904_j)
              {
                {
                  _ptr__7901_shape[_7904_j] = _ptr__7903_s[_7904_j];
                }
              }
              int32_t _12844_ = (int)((_7903_s)->size(0));
              int32_t _12845_ = _7897_maxnd;
              for (int32_t _7905_j = _12844_; _7905_j < _12845_; ++_7905_j)
              {
                {
                  _ptr__7901_shape[_7905_j] = (int)1;
                }
              }
              ((*_7900_rexprs)(_7902_i)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7901_shape,((*_7892_exprs)(_7902_i)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _7900_rexprs;
    }
  }
  else
  {
    {
      return _7892_exprs;
    }
  }
}
// End mosek.fusion.Expr.promote

// Begin mosek.fusion.Expr.repeat
// Method mosek.fusion.Expr.repeat @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:860:6-862:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7906_x,
    int32_t _7907_n,
    int32_t _7908_d) { return mosek::fusion::p_Expr::repeat(_7906_x,_7907_n,_7908_d); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _7906_x,int32_t _7907_n,int32_t _7908_d)
{
  return ::mosek::fusion::p_Expr::repeat(_7906_x->__mosek_2fusion_2Variable__asExpr(),_7907_n,_7908_d);
}
// End mosek.fusion.Expr.repeat

// Begin mosek.fusion.Expr.repeat
// Method mosek.fusion.Expr.repeat @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:843:6-858:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7909_e,
    int32_t _7910_n,
    int32_t _7911_d) { return mosek::fusion::p_Expr::repeat(_7909_e,_7910_n,_7911_d); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _7909_e,int32_t _7910_n,int32_t _7911_d)
{
  if ((_7910_n <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  if (((_7911_d < (int)0) || (_7911_d > _7909_e->getND())))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  else
  {
    {
      if ((_7911_d == _7909_e->getND()))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7912_s = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _7911_d,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__7912_s(_7912_s ? _7912_s->raw() : nullptr,_7912_s ? _7912_s->size(0) : 0);
          int32_t _12846_ = (int)0;
          int32_t _12847_ = _7911_d;
          for (int32_t _7913_i = _12846_; _7913_i < _12847_; ++_7913_i)
          {
            {
              _ptr__7912_s[_7913_i] = _7909_e->getDim(_7913_i);
            }
          }
          _ptr__7912_s[_7911_d] = (int)1;
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(::mosek::fusion::p_Expr::reshape(_7909_e,_7912_s),_7911_d,_7910_n)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(_7909_e,_7911_d,_7910_n)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.Expr.repeat

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:836:6-841:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7914_exps) { return mosek::fusion::p_Expr::add(_7914_exps); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7914_exps)
{
  std::vector<double> _12848_;
  for (int32_t _7915_i = (int)0, _12849_ = (int)((_7914_exps)->size(0)); _7915_i < _12849_ ; ++_7915_i)
  {
    _12848_.push_back(1.0);
  }
  auto _12850_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12848_.size()),_12848_.begin(),_12848_.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_7914_exps,_12850_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:766:6-822:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7916_vs) { return mosek::fusion::p_Expr::add(_7916_vs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7916_vs)
{
  if ((NULL == _7916_vs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_7916_vs)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >{(int64_t)((int)0)}),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7916_vs)->size(0)) > (int)0) && (NULL == ((*_7916_vs)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int32_t _7917_nd = ((*_7916_vs)((int)0))->getND();
  int32_t _12851_ = (int)1;
  int32_t _12852_ = (int)((_7916_vs)->size(0));
  for (int32_t _7918_i = _12851_; _7918_i < _12852_; ++_7918_i)
  {
    {
      if ((_7917_nd < ((*_7916_vs)(_7918_i))->getND()))
      {
        {
          _7917_nd = ((*_7916_vs)(_7918_i))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7919_shapes = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_7916_vs)->size(0)),_7917_nd)));
  int32_t _12853_ = (int)0;
  int32_t _12854_ = (int)((_7916_vs)->size(0));
  for (int32_t _7920_i = _12853_; _7920_i < _12854_; ++_7920_i)
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7921_shp = ((*_7916_vs)(_7920_i))->getShape();
      _checked_ptr_1<int32_t> _ptr__7921_shp(_7921_shp ? _7921_shp->raw() : nullptr,_7921_shp ? _7921_shp->size(0) : 0);
      int32_t _12855_ = (int)0;
      int32_t _12856_ = (int)((_7921_shp)->size(0));
      for (int32_t _7922_j = _12855_; _7922_j < _12856_; ++_7922_j)
      {
        {
          ((*_7919_shapes)(_7920_i,_7922_j)) = _ptr__7921_shp[_7922_j];
        }
      }
      int32_t _12857_ = (int)((_7921_shp)->size(0));
      int32_t _12858_ = _7917_nd;
      for (int32_t _7923_j = _12857_; _7923_j < _12858_; ++_7923_j)
      {
        {
          ((*_7919_shapes)(_7920_i,_7923_j)) = (int)1;
        }
      }
    }
  }
  int32_t _12859_ = (int)1;
  int32_t _12860_ = (int)((_7916_vs)->size(0));
  for (int32_t _7924_i = _12859_; _7924_i < _12860_; ++_7924_i)
  {
    {
      int32_t _12861_ = (int)0;
      int32_t _12862_ = _7917_nd;
      for (int32_t _7925_j = _12861_; _7925_j < _12862_; ++_7925_j)
      {
        {
          if ((((*_7919_shapes)((int)0,_7925_j)) != ((*_7919_shapes)(_7924_i,_7925_j))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int32_t> _12863_;
  for (int32_t _7927_j = (int)0, _12864_ = _7917_nd; _7927_j < _12864_ ; ++_7927_j)
  {
    _12863_.push_back(((*_7919_shapes)((int)0,_7927_j)));
  }
  auto _12865_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12863_.size()),_12863_.begin(),_12863_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7926_shape = _12865_;
  _checked_ptr_1<int32_t> _ptr__7926_shape(_7926_shape ? _7926_shape->raw() : nullptr,_7926_shape ? _7926_shape->size(0) : 0);
  int32_t _7928_sz = (int)1;
  int32_t _12866_ = (int)0;
  int32_t _12867_ = _7917_nd;
  for (int32_t _7929_i = _12866_; _7929_i < _12867_; ++_7929_i)
  {
    {
      _7928_sz *= _ptr__7926_shape[_7929_i];
    }
  }
  int32_t _7930_nnz = (int)0;
  int32_t _7931_maxnnz = (int)0;
  int32_t _12868_ = (int)0;
  int32_t _12869_ = (int)((_7916_vs)->size(0));
  for (int32_t _7932_i = _12868_; _7932_i < _12869_; ++_7932_i)
  {
    {
      int32_t _7933_n = ((*_7916_vs)(_7932_i))->numInst();
      _7930_nnz += _7933_n;
      int32_t _12870_;
      bool _12871_ = (_7931_maxnnz > _7933_n);
      if (_12871_)
      {
        _12870_ = _7931_maxnnz;
      }
      else
      {
        _12870_ = _7933_n;
      }
      _7931_maxnnz = _12870_;
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7934_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _7928_sz,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7934_ptrb(_7934_ptrb ? _7934_ptrb->raw() : nullptr,_7934_ptrb ? _7934_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7935_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7930_nnz)));
  _checked_ptr_1<int64_t> _ptr__7935_subj(_7935_subj ? _7935_subj->raw() : nullptr,_7935_subj ? _7935_subj->size(0) : 0);
  std::vector<double> _12872_;
  for (int32_t _7937_i = (int)0, _12873_ = _7930_nnz; _7937_i < _12873_ ; ++_7937_i)
  {
    _12872_.push_back(1.0);
  }
  auto _12874_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12872_.size()),_12872_.begin(),_12872_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7936_cof = _12874_;
  _checked_ptr_1<double> _ptr__7936_cof(_7936_cof ? _7936_cof->raw() : nullptr,_7936_cof ? _7936_cof->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7938_ii = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7931_maxnnz)));
    _checked_ptr_1<int64_t> _ptr__7938_ii(_7938_ii ? _7938_ii->raw() : nullptr,_7938_ii ? _7938_ii->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7939_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7931_maxnnz)));
    _checked_ptr_1<int64_t> _ptr__7939_idxs(_7939_idxs ? _7939_idxs->raw() : nullptr,_7939_idxs ? _7939_idxs->size(0) : 0);
    int32_t _12875_ = (int)0;
    int32_t _12876_ = (int)((_7916_vs)->size(0));
    for (int32_t _7940_i = _12875_; _7940_i < _12876_; ++_7940_i)
    {
      {
        int32_t _7941_n = ((*_7916_vs)(_7940_i))->inst((int)0,_7938_ii,(int)0,_7939_idxs);
        int32_t _12877_ = (int)0;
        int32_t _12878_ = _7941_n;
        for (int32_t _7942_j = _12877_; _7942_j < _12878_; ++_7942_j)
        {
          {
            _ptr__7934_ptrb[safe_add( _ptr__7938_ii[_7942_j],(int)1 )] += (int)1;
          }
        }
      }
    }
    int32_t _12879_ = (int)0;
    int32_t _12880_ = _7928_sz;
    for (int32_t _7943_i = _12879_; _7943_i < _12880_; ++_7943_i)
    {
      {
        _ptr__7934_ptrb[safe_add( _7943_i,(int)1 )] += _ptr__7934_ptrb[_7943_i];
      }
    }
    int32_t _12881_ = (int)0;
    int32_t _12882_ = (int)((_7916_vs)->size(0));
    for (int32_t _7944_i = _12881_; _7944_i < _12882_; ++_7944_i)
    {
      {
        int32_t _7945_n = ((*_7916_vs)(_7944_i))->inst((int)0,_7938_ii,(int)0,_7939_idxs);
        int32_t _12883_ = (int)0;
        int32_t _12884_ = _7945_n;
        for (int32_t _7946_j = _12883_; _7946_j < _12884_; ++_7946_j)
        {
          {
            _ptr__7935_subj[_ptr__7934_ptrb[_ptr__7938_ii[_7946_j]]] = _ptr__7939_idxs[_7946_j];
            ++ _ptr__7934_ptrb[_ptr__7938_ii[_7946_j]];
          }
        }
      }
    }
    int32_t _12885_ = (int)0;
    int32_t _12886_ = _7928_sz;
    for (int32_t _7947_i = _12885_; _7947_i < _12886_; ++_7947_i)
    {
      {
        _ptr__7934_ptrb[(_7928_sz - _7947_i)] = _ptr__7934_ptrb[((_7928_sz - _7947_i) - (int)1)];
      }
    }
    _ptr__7934_ptrb[(int)0] = (int)0;
  }
  std::vector<double> _12887_;
  for (int32_t _7948_i = (int)0, _12888_ = _7928_sz; _7948_i < _12888_ ; ++_7948_i)
  {
    _12887_.push_back(0.0);
  }
  auto _12889_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12887_.size()),_12887_.begin(),_12887_.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_7934_ptrb,_7935_subj,_7936_cof,_12889_,_7926_shape,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add_
// Method mosek.fusion.Expr.add_ @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:723:6-750:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _7949_e1,double _7950_m1,monty::rc_ptr< ::mosek::fusion::Expression > _7951_e2,double _7952_m2)
{
  int32_t _7953_nd1 = _7949_e1->getND();
  int32_t _7954_nd2 = _7951_e2->getND();
  if ((_7953_nd1 == _7954_nd2))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7949_e1,_7951_e2,_7950_m1,_7952_m2)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _12890_;
      bool _12891_ = (_7953_nd1 > _7954_nd2);
      if (_12891_)
      {
        _12890_ = _7953_nd1;
      }
      else
      {
        _12890_ = _7954_nd2;
      }
      int32_t _7955_nd = _12890_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7956_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7955_nd)));
      _checked_ptr_1<int32_t> _ptr__7956_shape(_7956_shape ? _7956_shape->raw() : nullptr,_7956_shape ? _7956_shape->size(0) : 0);
      if ((_7953_nd1 < _7954_nd2))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7957_sh = _7949_e1->getShape();
          _checked_ptr_1<int32_t> _ptr__7957_sh(_7957_sh ? _7957_sh->raw() : nullptr,_7957_sh ? _7957_sh->size(0) : 0);
          int32_t _12892_ = (int)0;
          int32_t _12893_ = _7953_nd1;
          for (int32_t _7958_i = _12892_; _7958_i < _12893_; ++_7958_i)
          {
            {
              _ptr__7956_shape[_7958_i] = _ptr__7957_sh[_7958_i];
            }
          }
          int32_t _12894_ = _7953_nd1;
          int32_t _12895_ = _7955_nd;
          for (int32_t _7959_i = _12894_; _7959_i < _12895_; ++_7959_i)
          {
            {
              _ptr__7956_shape[_7959_i] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7956_shape,_7949_e1)).as<::mosek::fusion::Expression>(),_7951_e2,_7950_m1,_7952_m2)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7960_sh = _7951_e2->getShape();
          _checked_ptr_1<int32_t> _ptr__7960_sh(_7960_sh ? _7960_sh->raw() : nullptr,_7960_sh ? _7960_sh->size(0) : 0);
          int32_t _12896_ = (int)0;
          int32_t _12897_ = _7954_nd2;
          for (int32_t _7961_i = _12896_; _7961_i < _12897_; ++_7961_i)
          {
            {
              _ptr__7956_shape[_7961_i] = _ptr__7960_sh[_7961_i];
            }
          }
          int32_t _12898_ = _7954_nd2;
          int32_t _12899_ = _7955_nd;
          for (int32_t _7962_i = _12898_; _7962_i < _12899_; ++_7962_i)
          {
            {
              _ptr__7956_shape[_7962_i] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7949_e1,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7956_shape,_7951_e2)).as<::mosek::fusion::Expression>(),_7950_m1,_7952_m2)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.Expr.add_

// Begin mosek.fusion.Expr.transpose
// Method mosek.fusion.Expr.transpose @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:712:6-721:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7963_e) { return mosek::fusion::p_Expr::transpose(_7963_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _7963_e)
{
  if ((_7963_e->getND() == (int)0))
  {
    {
      return _7963_e;
    }
  }
  else if((_7963_e->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7963_e->getDim((int)0))}),_7963_e)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7963_e->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7963_e)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
// End mosek.fusion.Expr.transpose

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:707:6-114
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7964_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7965_expr) { return mosek::fusion::p_Expr::mulElm(_7964_m,_7965_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _7964_m,monty::rc_ptr< ::mosek::fusion::Expression > _7965_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7964_m,_7965_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:706:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7966_spm,
    monty::rc_ptr< ::mosek::fusion::Expression > _7967_expr) { return mosek::fusion::p_Expr::mulElm(_7966_spm,_7967_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7966_spm,monty::rc_ptr< ::mosek::fusion::Expression > _7967_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7966_spm,_7967_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:705:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( std::shared_ptr< monty::ndarray< double,2 > > _7968_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7969_expr) { return mosek::fusion::p_Expr::mulElm(_7968_a2,_7969_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _7968_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7969_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7968_a2),_7969_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:704:6-115
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( std::shared_ptr< monty::ndarray< double,1 > > _7970_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7971_expr) { return mosek::fusion::p_Expr::mulElm(_7970_a1,_7971_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _7970_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7971_expr)
{
  _checked_ptr_1<double> _ptr__7970_a1(_7970_a1 ? _7970_a1->raw() : nullptr, _7970_a1 ? _7970_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7970_a1,_7971_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:703:6-114
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7972_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7973_m) { return mosek::fusion::p_Expr::mulElm(_7972_expr,_7973_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7972_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7973_m)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7973_m,_7972_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:702:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7974_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7975_a2) { return mosek::fusion::p_Expr::mulElm(_7974_expr,_7975_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7974_expr,std::shared_ptr< monty::ndarray< double,2 > > _7975_a2)
{
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7975_a2),_7974_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:701:6-115
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7976_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _7977_a1) { return mosek::fusion::p_Expr::mulElm(_7976_expr,_7977_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7976_expr,std::shared_ptr< monty::ndarray< double,1 > > _7977_a1)
{
  _checked_ptr_1<double> _ptr__7977_a1(_7977_a1 ? _7977_a1->raw() : nullptr, _7977_a1 ? _7977_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7977_a1,_7976_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:700:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7978_expr,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7979_spm) { return mosek::fusion::p_Expr::mulElm(_7978_expr,_7979_spm); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7978_expr,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7979_spm)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7979_spm,_7978_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:699:6-127
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7980_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7981_expr) { return mosek::fusion::p_Expr::mulElm(_7980_p,_7981_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Parameter > _7980_p,monty::rc_ptr< ::mosek::fusion::Expression > _7981_expr)
{
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7980_p,_7981_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:698:6-127
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7982_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7983_p) { return mosek::fusion::p_Expr::mulElm(_7982_expr,_7983_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7982_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7983_p)
{
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7983_p,_7982_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:696:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7984_n,
    monty::rc_ptr< ::mosek::fusion::Expression > _7985_e2) { return mosek::fusion::p_Expr::sub(_7984_n,_7985_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7984_n,monty::rc_ptr< ::mosek::fusion::Expression > _7985_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7984_n),1.0,_7985_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:695:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7986_e1,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7987_n) { return mosek::fusion::p_Expr::sub(_7986_e1,_7987_n); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7986_e1,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7987_n)
{
  return ::mosek::fusion::p_Expr::add_(_7986_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7987_n),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:694:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7988_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7989_e2) { return mosek::fusion::p_Expr::sub(_7988_m,_7989_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _7988_m,monty::rc_ptr< ::mosek::fusion::Expression > _7989_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7988_m),1.0,_7989_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:693:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7990_e1,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7991_m) { return mosek::fusion::p_Expr::sub(_7990_e1,_7991_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7990_e1,monty::rc_ptr< ::mosek::fusion::Matrix > _7991_m)
{
  return ::mosek::fusion::p_Expr::add_(_7990_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7991_m),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:692:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( double _7992_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _7993_e2) { return mosek::fusion::p_Expr::sub(_7992_c,_7993_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _7992_c,monty::rc_ptr< ::mosek::fusion::Expression > _7993_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7993_e2->getShape(),_7992_c),1.0,_7993_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:691:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7994_e1,
    double _7995_c) { return mosek::fusion::p_Expr::sub(_7994_e1,_7995_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7994_e1,double _7995_c)
{
  return ::mosek::fusion::p_Expr::add_(_7994_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7994_e1->getShape(),_7995_c),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:690:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( std::shared_ptr< monty::ndarray< double,2 > > _7996_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7997_e2) { return mosek::fusion::p_Expr::sub(_7996_a2,_7997_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _7996_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7997_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7996_a2),1.0,_7997_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:689:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( std::shared_ptr< monty::ndarray< double,1 > > _7998_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7999_e2) { return mosek::fusion::p_Expr::sub(_7998_a1,_7999_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _7998_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7999_e2)
{
  _checked_ptr_1<double> _ptr__7998_a1(_7998_a1 ? _7998_a1->raw() : nullptr, _7998_a1 ? _7998_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7998_a1),1.0,_7999_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:688:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8000_e1,
    std::shared_ptr< monty::ndarray< double,2 > > _8001_a2) { return mosek::fusion::p_Expr::sub(_8000_e1,_8001_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _8000_e1,std::shared_ptr< monty::ndarray< double,2 > > _8001_a2)
{
  return ::mosek::fusion::p_Expr::add_(_8000_e1,1.0,::mosek::fusion::p_Expr::constTerm(_8001_a2),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:687:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8002_e1,
    std::shared_ptr< monty::ndarray< double,1 > > _8003_a1) { return mosek::fusion::p_Expr::sub(_8002_e1,_8003_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _8002_e1,std::shared_ptr< monty::ndarray< double,1 > > _8003_a1)
{
  _checked_ptr_1<double> _ptr__8003_a1(_8003_a1 ? _8003_a1->raw() : nullptr, _8003_a1 ? _8003_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_8002_e1,1.0,::mosek::fusion::p_Expr::constTerm(_8003_a1),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:686:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8004_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _8005_e2) { return mosek::fusion::p_Expr::sub(_8004_e1,_8005_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _8004_e1,monty::rc_ptr< ::mosek::fusion::Expression > _8005_e2)
{
  return ::mosek::fusion::p_Expr::add_(_8004_e1,1.0,_8005_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:682:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _8006_n,
    monty::rc_ptr< ::mosek::fusion::Expression > _8007_e2) { return mosek::fusion::p_Expr::add(_8006_n,_8007_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _8006_n,monty::rc_ptr< ::mosek::fusion::Expression > _8007_e2)
{
  return ::mosek::fusion::p_Expr::add_(_8007_e2,1.0,::mosek::fusion::p_Expr::constTerm(_8006_n),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:681:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8008_e1,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _8009_n) { return mosek::fusion::p_Expr::add(_8008_e1,_8009_n); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _8008_e1,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _8009_n)
{
  return ::mosek::fusion::p_Expr::add_(_8008_e1,1.0,::mosek::fusion::p_Expr::constTerm(_8009_n),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:680:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8010_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _8011_e2) { return mosek::fusion::p_Expr::add(_8010_m,_8011_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _8010_m,monty::rc_ptr< ::mosek::fusion::Expression > _8011_e2)
{
  return ::mosek::fusion::p_Expr::add_(_8011_e2,1.0,::mosek::fusion::p_Expr::constTerm(_8010_m),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:679:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8012_e1,
    monty::rc_ptr< ::mosek::fusion::Matrix > _8013_m) { return mosek::fusion::p_Expr::add(_8012_e1,_8013_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _8012_e1,monty::rc_ptr< ::mosek::fusion::Matrix > _8013_m)
{
  return ::mosek::fusion::p_Expr::add_(_8012_e1,1.0,::mosek::fusion::p_Expr::constTerm(_8013_m),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:678:6-169
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( double _8014_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _8015_e2) { return mosek::fusion::p_Expr::add(_8014_c,_8015_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _8014_c,monty::rc_ptr< ::mosek::fusion::Expression > _8015_e2)
{
  return ::mosek::fusion::p_Expr::add_(_8015_e2,1.0,::mosek::fusion::p_Expr::constTerm(_8015_e2->getShape(),_8014_c),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:677:6-169
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8016_e1,
    double _8017_c) { return mosek::fusion::p_Expr::add(_8016_e1,_8017_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _8016_e1,double _8017_c)
{
  return ::mosek::fusion::p_Expr::add_(_8016_e1,1.0,::mosek::fusion::p_Expr::constTerm(_8016_e1->getShape(),_8017_c),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:676:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< double,2 > > _8018_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _8019_e2) { return mosek::fusion::p_Expr::add(_8018_a2,_8019_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _8018_a2,monty::rc_ptr< ::mosek::fusion::Expression > _8019_e2)
{
  return ::mosek::fusion::p_Expr::add_(_8019_e2,1.0,::mosek::fusion::p_Expr::constTerm(_8018_a2),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:675:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< double,1 > > _8020_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _8021_e2) { return mosek::fusion::p_Expr::add(_8020_a1,_8021_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _8020_a1,monty::rc_ptr< ::mosek::fusion::Expression > _8021_e2)
{
  _checked_ptr_1<double> _ptr__8020_a1(_8020_a1 ? _8020_a1->raw() : nullptr, _8020_a1 ? _8020_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_8021_e2,1.0,::mosek::fusion::p_Expr::constTerm(_8020_a1),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:674:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8022_e1,
    std::shared_ptr< monty::ndarray< double,2 > > _8023_a2) { return mosek::fusion::p_Expr::add(_8022_e1,_8023_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _8022_e1,std::shared_ptr< monty::ndarray< double,2 > > _8023_a2)
{
  return ::mosek::fusion::p_Expr::add_(_8022_e1,1.0,::mosek::fusion::p_Expr::constTerm(_8023_a2),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:673:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8024_e1,
    std::shared_ptr< monty::ndarray< double,1 > > _8025_a1) { return mosek::fusion::p_Expr::add(_8024_e1,_8025_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _8024_e1,std::shared_ptr< monty::ndarray< double,1 > > _8025_a1)
{
  _checked_ptr_1<double> _ptr__8025_a1(_8025_a1 ? _8025_a1->raw() : nullptr, _8025_a1 ? _8025_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_8024_e1,1.0,::mosek::fusion::p_Expr::constTerm(_8025_a1),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:672:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _8026_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _8027_e2) { return mosek::fusion::p_Expr::add(_8026_e1,_8027_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _8026_e1,monty::rc_ptr< ::mosek::fusion::Expression > _8027_e2)
{
  return ::mosek::fusion::p_Expr::add_(_8026_e1,1.0,_8027_e2,1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.eval
// Method mosek.fusion.Expr.eval @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:622:6-665:7
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _8028_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _8029_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _8030_xs) { mosek::fusion::p_Expr::_get_impl(this)->eval(_8028_rs,_8029_ws,_8030_xs); }
void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _8028_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _8029_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _8030_xs)
{
  int32_t _8031_nelem = ((int)((ptrb)->size(0)) - (int)1);
  int32_t _8032_nnz = (int32_t)((*ptrb)(_8031_nelem));
  bool _8033_zerob = true;
  int32_t _12900_ = (int)0;
  int32_t _12901_ = _8031_nelem;
  for (int32_t _8034_i = _12900_; _8034_i < _12901_; ++_8034_i)
  {
    {
      _8033_zerob = (_8033_zerob && ((((*bfix)(_8034_i)) <= 0.0) && (((*bfix)(_8034_i)) >= 0.0)));
    }
  }
  if ((!_8033_zerob))
  {
    {
      _8032_nnz += _8031_nelem;
    }
  }
  {}
  int32_t _8035_nd = (int)((shape)->size(0));
  _8028_rs->alloc_expr(_8035_nd,_8031_nelem,_8032_nnz,(NULL != inst.get()));
  int32_t _8036_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_8028_rs)->ptr_base;
  int32_t _8037_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_8028_rs)->nidxs_base;
  int32_t _8038_sp_base = mosek::fusion::p_WorkStack::_get_impl(_8028_rs)->sp_base;
  int32_t _8039_cof_base = mosek::fusion::p_WorkStack::_get_impl(_8028_rs)->cof_base;
  int32_t _8040_shape_base = mosek::fusion::p_WorkStack::_get_impl(_8028_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8041_i32 = mosek::fusion::p_WorkStack::_get_impl(_8028_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__8041_i32(_8041_i32 ? _8041_i32->raw() : nullptr,_8041_i32 ? _8041_i32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _8042_i64 = mosek::fusion::p_WorkStack::_get_impl(_8028_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__8042_i64(_8042_i64 ? _8042_i64->raw() : nullptr,_8042_i64 ? _8042_i64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8043_f64 = mosek::fusion::p_WorkStack::_get_impl(_8028_rs)->f64;
  _checked_ptr_1<double> _ptr__8043_f64(_8043_f64 ? _8043_f64->raw() : nullptr,_8043_f64 ? _8043_f64->size(0) : 0);
  {
    int32_t _12902_ = (int)0;
    int32_t _12903_ = _8035_nd;
    for (int32_t _8044_i = _12902_; _8044_i < _12903_; ++_8044_i)
    {
      {
        _ptr__8041_i32[safe_add( _8040_shape_base,_8044_i )] = ((*shape)(_8044_i));
      }
    }
    _ptr__8041_i32[_8036_ptr_base] = (int)0;
    int32_t _8045_p = (int)0;
    int32_t _12904_ = (int)0;
    int32_t _12905_ = _8031_nelem;
    for (int32_t _8046_i = _12904_; _8046_i < _12905_; ++_8046_i)
    {
      {
        int64_t _12906_ = ((*ptrb)(_8046_i));
        int64_t _12907_ = ((*ptrb)(safe_add( _8046_i,(int)1 )));
        for (int64_t _8047_j = _12906_; _8047_j < _12907_; ++_8047_j)
        {
          {
            _ptr__8042_i64[safe_add( _8037_nidxs_base,_8045_p )] = ((*subj)(_8047_j));
            _ptr__8043_f64[safe_add( _8039_cof_base,_8045_p )] = ((*cof_v)(_8047_j));
            ++ _8045_p;
          }
        }
        if ((!_8033_zerob))
        {
          {
            _ptr__8042_i64[safe_add( _8037_nidxs_base,_8045_p )] = (int)0;
            _ptr__8043_f64[safe_add( _8039_cof_base,_8045_p )] = ((*bfix)(_8046_i));
            ++ _8045_p;
          }
        }
        {}
        _ptr__8041_i32[safe_add( safe_add( _8036_ptr_base,_8046_i ),(int)1 )] = _8045_p;
      }
    }
  }
}
// End mosek.fusion.Expr.eval

// Begin mosek.fusion.Expr.validateData
// Method mosek.fusion.Expr.validateData @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:444:6-506:7
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< int64_t,1 > > _8048_ptrb,std::shared_ptr< monty::ndarray< int64_t,1 > > _8049_subj,std::shared_ptr< monty::ndarray< double,1 > > _8050_cof,std::shared_ptr< monty::ndarray< double,1 > > _8051_bfix,std::shared_ptr< monty::ndarray< int32_t,1 > > _8052_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _8053_inst)
{
  _checked_ptr_1<int64_t> _ptr__8048_ptrb(_8048_ptrb ? _8048_ptrb->raw() : nullptr, _8048_ptrb ? _8048_ptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__8049_subj(_8049_subj ? _8049_subj->raw() : nullptr, _8049_subj ? _8049_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8050_cof(_8050_cof ? _8050_cof->raw() : nullptr, _8050_cof ? _8050_cof->size(0) : 0);
  _checked_ptr_1<double> _ptr__8051_bfix(_8051_bfix ? _8051_bfix->raw() : nullptr, _8051_bfix ? _8051_bfix->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8052_shape(_8052_shape ? _8052_shape->raw() : nullptr, _8052_shape ? _8052_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__8053_inst(_8053_inst ? _8053_inst->raw() : nullptr, _8053_inst ? _8053_inst->size(0) : 0);
  if ((NULL == _8052_shape.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int32_t _8054_exprnume = ((int)((_8048_ptrb)->size(0)) - (int)1);
  int64_t _8055_numelm = _ptr__8048_ptrb[((int)((_8048_ptrb)->size(0)) - (int)1)];
  int32_t _8056_nd = (int)((_8052_shape)->size(0));
  int64_t _8057_size = (int64_t)1;
  int32_t _12908_ = (int)0;
  int32_t _12909_ = _8056_nd;
  for (int32_t _8058_i = _12908_; _8058_i < _12909_; ++_8058_i)
  {
    {
      _8057_size *= _ptr__8052_shape[_8058_i];
    }
  }
  if (((int)((_8048_ptrb)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_8055_numelm != (int)((_8049_subj)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_8055_numelm != (int)((_8050_cof)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _8051_bfix.get()) || (_8054_exprnume != (int)((_8051_bfix)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _8053_inst.get()) && ((int)((_8053_inst)->size(0)) < _8057_size)))
  {
    {
      if (((int)((_8053_inst)->size(0)) != ((int)((_8048_ptrb)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_8053_inst)->size(0)) > (int)0))
      {
        {
          if (((_ptr__8053_inst[(int)0] < (int)0) || (_ptr__8053_inst[(int)0] >= _8057_size)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _8059_sorted_in_range = true;
          int64_t _8060_tot_size = _8057_size;
          int32_t _12910_ = (int)1;
          int32_t _12911_ = (int)((_8053_inst)->size(0));
          for (int32_t _8061_i = _12910_; _8061_i < _12911_; ++_8061_i)
          {
            {
              _8059_sorted_in_range = (_8059_sorted_in_range && ((_ptr__8053_inst[_8061_i] >= (int)0) && ((_ptr__8053_inst[_8061_i] < _8060_tot_size) && (_ptr__8053_inst[_8061_i] > _ptr__8053_inst[(_8061_i - (int)1)]))));
            }
          }
          if ((!_8059_sorted_in_range))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_8057_size != ((int64_t)((_8048_ptrb)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _8062_invalid_ptrb = false;
  bool _8063_invalid_subj = false;
  if ((_ptr__8048_ptrb[(int)0] != (int64_t)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _8064_ptrb_sorted = true;
  int32_t _12912_ = (int)0;
  int32_t _12913_ = _8054_exprnume;
  for (int32_t _8065_i = _12912_; _8065_i < _12913_; ++_8065_i)
  {
    {
      _8064_ptrb_sorted = (_8064_ptrb_sorted && (_ptr__8048_ptrb[_8065_i] <= _ptr__8048_ptrb[safe_add( _8065_i,(int)1 )]));
    }
  }
  if ((!_8064_ptrb_sorted))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
// End mosek.fusion.Expr.validateData

// Begin mosek.fusion.Expr.extractModel
// Method mosek.fusion.Expr.extractModel @ bld/docker-rockylinux-8/final/default/src/fusion/Expr.mbi:443:6-128
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _8066_v)
{
  monty::rc_ptr< ::mosek::fusion::Model > _12914_;
  bool _12915_ = ((NULL == _8066_v.get()) || ((int)((_8066_v)->size(0)) == (int)0));
  if (_12915_)
  {
    _12914_ = nullptr;
  }
  else
  {
    _12914_ = ((*_8066_v)((int)0))->__mosek_2fusion_2Expression__getModel();
  }
  return _12914_;
}
// End mosek.fusion.Expr.extractModel

void mosek::fusion::p_Expr::destroy()
{
  inst.reset();
  cof_v.reset();
  subj.reset();
  ptrb.reset();
  bfix.reset();
  shape.reset();
}
void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }
// } class Expr
// class Expression { // @ bld/docker-rockylinux-8/final/default/src/fusion/Expression.mbi:38:4-103:5
// Begin mosek.fusion.Expression.toString
// End mosek.fusion.Expression.toString

// Begin mosek.fusion.Expression.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _8067_indexrows) { return __mosek_2fusion_2Expression__pick(_8067_indexrows); }
// End mosek.fusion.Expression.pick

// Begin mosek.fusion.Expression.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _8068_indexes) { return __mosek_2fusion_2Expression__pick(_8068_indexes); }
// End mosek.fusion.Expression.pick

// Begin mosek.fusion.Expression.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _8069_indexes) { return __mosek_2fusion_2Expression__index(_8069_indexes); }
// End mosek.fusion.Expression.index

// Begin mosek.fusion.Expression.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int32_t _8070_i) { return __mosek_2fusion_2Expression__index(_8070_i); }
// End mosek.fusion.Expression.index

// Begin mosek.fusion.Expression.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _8071_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _8072_lasta) { return __mosek_2fusion_2Expression__slice(_8071_firsta,_8072_lasta); }
// End mosek.fusion.Expression.slice

// Begin mosek.fusion.Expression.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int32_t _8073_first,int32_t _8074_last) { return __mosek_2fusion_2Expression__slice(_8073_first,_8074_last); }
// End mosek.fusion.Expression.slice

// Begin mosek.fusion.Expression.eval
// End mosek.fusion.Expression.eval

// Begin mosek.fusion.Expression.getND
// End mosek.fusion.Expression.getND

// Begin mosek.fusion.Expression.getDim
// End mosek.fusion.Expression.getDim

// Begin mosek.fusion.Expression.getSize
// End mosek.fusion.Expression.getSize

// Begin mosek.fusion.Expression.getShape
// End mosek.fusion.Expression.getShape

// Begin mosek.fusion.Expression.getModel
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Expression::getModel() { return __mosek_2fusion_2Expression__getModel(); }
// End mosek.fusion.Expression.getModel

// } class Expression
// class SymmetricMatrix { // @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:16:4-180:5
mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }
mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix
  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.SymmetricMatrix.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:39:6-60:7
mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix
  (int32_t _8079_dim0,
    int32_t _8080_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8081_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8082_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _8083_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8084_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8085_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _8086_vval,
    double _8087_scale)
{ return new mosek::fusion::SymmetricMatrix(_8079_dim0,_8080_dim1,_8081_usubi,_8082_usubj,_8083_uval,_8084_vsubi,_8085_vsubj,_8086_vval,_8087_scale); }
mosek::fusion::SymmetricMatrix::SymmetricMatrix
  (int32_t _8079_dim0,
    int32_t _8080_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8081_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8082_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _8083_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8084_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8085_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _8086_vval,
    double _8087_scale) : 
   SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this))
{ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_8079_dim0,_8080_dim1,_8081_usubi,_8082_usubj,_8083_uval,_8084_vsubi,_8085_vsubj,_8086_vval,_8087_scale); }
void mosek::fusion::p_SymmetricMatrix::_initialize  (int32_t _8079_dim0,
    int32_t _8080_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8081_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8082_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _8083_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8084_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8085_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _8086_vval,
    double _8087_scale)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8081_usubi(_8081_usubi ? _8081_usubi->raw() : nullptr, _8081_usubi ? _8081_usubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8082_usubj(_8082_usubj ? _8082_usubj->raw() : nullptr, _8082_usubj ? _8082_usubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__8083_uval(_8083_uval ? _8083_uval->raw() : nullptr, _8083_uval ? _8083_uval->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8084_vsubi(_8084_vsubi ? _8084_vsubi->raw() : nullptr, _8084_vsubi ? _8084_vsubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8085_vsubj(_8085_vsubj ? _8085_vsubj->raw() : nullptr, _8085_vsubj ? _8085_vsubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__8086_vval(_8086_vval ? _8086_vval->raw() : nullptr, _8086_vval ? _8086_vval->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _8079_dim0;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _8080_dim1;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _8081_usubi;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _8082_usubj;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _8083_uval;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _8084_vsubi;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _8085_vsubj;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _8086_vval;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _8087_scale;
    nnz = (-(int)1);
  }
}
// mosek.fusion.SymmetricMatrix.ctor

// Begin mosek.fusion.SymmetricMatrix.rankOne
// Method mosek.fusion.SymmetricMatrix.rankOne @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:166:6-179:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne
  ( int32_t _8088_n,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8089_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8090_v) { return mosek::fusion::p_SymmetricMatrix::rankOne(_8088_n,_8089_sub,_8090_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int32_t _8088_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _8089_sub,std::shared_ptr< monty::ndarray< double,1 > > _8090_v)
{
  _checked_ptr_1<int32_t> _ptr__8089_sub(_8089_sub ? _8089_sub->raw() : nullptr, _8089_sub ? _8089_sub->size(0) : 0);
  _checked_ptr_1<double> _ptr__8090_v(_8090_v ? _8090_v->raw() : nullptr, _8090_v ? _8090_v->size(0) : 0);
  if (((int)((_8089_sub)->size(0)) != (int)((_8090_v)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int32_t _12916_ = (int)0;
  int32_t _12917_ = (int)((_8089_sub)->size(0));
  for (int32_t _8091_i = _12916_; _8091_i < _12917_; ++_8091_i)
  {
    {
      if (((_ptr__8089_sub[_8091_i] < (int)0) || (_ptr__8089_sub[_8091_i] >= _8088_n)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _12918_;
  for (int32_t _8093_i = (int)0, _12919_ = (int)((_8089_sub)->size(0)); _8093_i < _12919_ ; ++_8093_i)
  {
    _12918_.push_back(_ptr__8089_sub[_8093_i]);
  }
  auto _12920_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12918_.size()),_12918_.begin(),_12918_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8092_subi = _12920_;
  _checked_ptr_1<int32_t> _ptr__8092_subi(_8092_subi ? _8092_subi->raw() : nullptr,_8092_subi ? _8092_subi->size(0) : 0);
  std::vector<int32_t> _12921_;
  for (int32_t _8095_i = (int)0, _12922_ = (int)((_8089_sub)->size(0)); _8095_i < _12922_ ; ++_8095_i)
  {
    _12921_.push_back((int)1);
  }
  auto _12923_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12921_.size()),_12921_.begin(),_12921_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8094_subj = _12923_;
  _checked_ptr_1<int32_t> _ptr__8094_subj(_8094_subj ? _8094_subj->raw() : nullptr,_8094_subj ? _8094_subj->size(0) : 0);
  std::vector<double> _12924_;
  for (int32_t _8097_i = (int)0, _12925_ = (int)((_8090_v)->size(0)); _8097_i < _12925_ ; ++_8097_i)
  {
    _12924_.push_back(_ptr__8090_v[_8097_i]);
  }
  auto _12926_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12924_.size()),_12924_.begin(),_12924_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _8096_val = _12926_;
  _checked_ptr_1<double> _ptr__8096_val(_8096_val ? _8096_val->raw() : nullptr,_8096_val ? _8096_val->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_8088_n,(int)1,_8092_subi,_8094_subj,_8096_val,_8092_subi,_8094_subj,_8096_val,1.0);
}
// End mosek.fusion.SymmetricMatrix.rankOne

// Begin mosek.fusion.SymmetricMatrix.rankOne
// Method mosek.fusion.SymmetricMatrix.rankOne @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:157:6-164:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne
  ( std::shared_ptr< monty::ndarray< double,1 > > _8098_v) { return mosek::fusion::p_SymmetricMatrix::rankOne(_8098_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _8098_v)
{
  _checked_ptr_1<double> _ptr__8098_v(_8098_v ? _8098_v->raw() : nullptr, _8098_v ? _8098_v->size(0) : 0);
  int32_t _8099_n = (int)((_8098_v)->size(0));
  std::vector<int32_t> _12927_;
  for (int32_t _8101_i = (int)0, _12928_ = _8099_n; _8101_i < _12928_ ; ++_8101_i)
  {
    _12927_.push_back(_8101_i);
  }
  auto _12929_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12927_.size()),_12927_.begin(),_12927_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8100_subi = _12929_;
  _checked_ptr_1<int32_t> _ptr__8100_subi(_8100_subi ? _8100_subi->raw() : nullptr,_8100_subi ? _8100_subi->size(0) : 0);
  std::vector<int32_t> _12930_;
  for (int32_t _8103_i = (int)0, _12931_ = _8099_n; _8103_i < _12931_ ; ++_8103_i)
  {
    _12930_.push_back((int)1);
  }
  auto _12932_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12930_.size()),_12930_.begin(),_12930_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8102_subj = _12932_;
  _checked_ptr_1<int32_t> _ptr__8102_subj(_8102_subj ? _8102_subj->raw() : nullptr,_8102_subj ? _8102_subj->size(0) : 0);
  std::vector<double> _12933_;
  for (int32_t _8105_i = (int)0, _12934_ = _8099_n; _8105_i < _12934_ ; ++_8105_i)
  {
    _12933_.push_back(_ptr__8098_v[_8105_i]);
  }
  auto _12935_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12933_.size()),_12933_.begin(),_12933_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _8104_val = _12935_;
  _checked_ptr_1<double> _ptr__8104_val(_8104_val ? _8104_val->raw() : nullptr,_8104_val ? _8104_val->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_8099_n,(int)1,_8100_subi,_8102_subj,_8104_val,_8100_subi,_8102_subj,_8104_val,1.0);
}
// End mosek.fusion.SymmetricMatrix.rankOne

// Begin mosek.fusion.SymmetricMatrix.antiDiag
// Method mosek.fusion.SymmetricMatrix.antiDiag @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:147:6-155:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8106_vals) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_8106_vals); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _8106_vals)
{
  _checked_ptr_1<double> _ptr__8106_vals(_8106_vals ? _8106_vals->raw() : nullptr, _8106_vals ? _8106_vals->size(0) : 0);
  int32_t _8107_n = (int)((_8106_vals)->size(0));
  std::vector<int32_t> _12936_;
  for (int32_t _8109_i = (int)0, _12937_ = _8107_n; _8109_i < _12937_ ; ++_8109_i)
  {
    _12936_.push_back(_8109_i);
  }
  auto _12938_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12936_.size()),_12936_.begin(),_12936_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8108_subarr = _12938_;
  _checked_ptr_1<int32_t> _ptr__8108_subarr(_8108_subarr ? _8108_subarr->raw() : nullptr,_8108_subarr ? _8108_subarr->size(0) : 0);
  std::vector<int32_t> _12939_;
  for (int32_t _8110_i = (int)0, _12940_ = _8107_n; _8110_i < _12940_ ; ++_8110_i)
  {
    _12939_.push_back((_8107_n - _8110_i));
  }
  auto _12941_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12939_.size()),_12939_.begin(),_12939_.end()));
  std::vector<double> _12942_;
  for (int32_t _8111_i = (int)0, _12943_ = _8107_n; _8111_i < _12943_ ; ++_8111_i)
  {
    _12942_.push_back(_ptr__8106_vals[_8111_i]);
  }
  auto _12944_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12942_.size()),_12942_.begin(),_12942_.end()));
  std::vector<double> _12945_;
  for (int32_t _8112_i = (int)0, _12946_ = _8107_n; _8112_i < _12946_ ; ++_8112_i)
  {
    _12945_.push_back(1.0);
  }
  auto _12947_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12945_.size()),_12945_.begin(),_12945_.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_8107_n,_8107_n,_8108_subarr,_12941_,_12944_,_8108_subarr,_8108_subarr,_12947_,1.0);
}
// End mosek.fusion.SymmetricMatrix.antiDiag

// Begin mosek.fusion.SymmetricMatrix.diag
// Method mosek.fusion.SymmetricMatrix.diag @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:137:6-145:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8113_vals) { return mosek::fusion::p_SymmetricMatrix::diag(_8113_vals); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _8113_vals)
{
  _checked_ptr_1<double> _ptr__8113_vals(_8113_vals ? _8113_vals->raw() : nullptr, _8113_vals ? _8113_vals->size(0) : 0);
  int32_t _8114_n = (int)((_8113_vals)->size(0));
  std::vector<int32_t> _12948_;
  for (int32_t _8116_i = (int)0, _12949_ = _8114_n; _8116_i < _12949_ ; ++_8116_i)
  {
    _12948_.push_back(_8116_i);
  }
  auto _12950_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12948_.size()),_12948_.begin(),_12948_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8115_subarr = _12950_;
  _checked_ptr_1<int32_t> _ptr__8115_subarr(_8115_subarr ? _8115_subarr->raw() : nullptr,_8115_subarr ? _8115_subarr->size(0) : 0);
  std::vector<double> _12951_;
  for (int32_t _8117_i = (int)0, _12952_ = _8114_n; _8117_i < _12952_ ; ++_8117_i)
  {
    _12951_.push_back(_ptr__8113_vals[_8117_i]);
  }
  auto _12953_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12951_.size()),_12951_.begin(),_12951_.end()));
  std::vector<double> _12954_;
  for (int32_t _8118_i = (int)0, _12955_ = _8114_n; _8118_i < _12955_ ; ++_8118_i)
  {
    _12954_.push_back(1.0);
  }
  auto _12956_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12954_.size()),_12954_.begin(),_12954_.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_8114_n,_8114_n,_8115_subarr,_8115_subarr,_12953_,_8115_subarr,_8115_subarr,_12956_,1.0);
}
// End mosek.fusion.SymmetricMatrix.diag

// Begin mosek.fusion.SymmetricMatrix.add
// Method mosek.fusion.SymmetricMatrix.add @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:75:6-133:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _8119_m) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_8119_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _8119_m) { return __mosek_2fusion_2SymmetricMatrix__add(_8119_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _8119_m)
{
  int32_t _8120_n = _pubthis->getdim();
  if ((_8119_m->getdim() != _8120_n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int32_t _8121_unnz = (int)((usubi)->size(0));
  int32_t _8122_munnz = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->usubi)->size(0));
  int32_t _8123_newunnz = safe_add( _8121_unnz,_8122_munnz );
  int32_t _8124_vnnz = (int)((vsubi)->size(0));
  int32_t _8125_mvnnz = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->vsubi)->size(0));
  int32_t _8126_newvnnz = safe_add( _8124_vnnz,_8125_mvnnz );
  std::shared_ptr< monty::ndarray< double,1 > > _8127_new_vval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8126_newvnnz)));
  _checked_ptr_1<double> _ptr__8127_new_vval(_8127_new_vval ? _8127_new_vval->raw() : nullptr,_8127_new_vval ? _8127_new_vval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8128_new_vsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8126_newvnnz)));
  _checked_ptr_1<int32_t> _ptr__8128_new_vsubj(_8128_new_vsubj ? _8128_new_vsubj->raw() : nullptr,_8128_new_vsubj ? _8128_new_vsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8129_new_vsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8126_newvnnz)));
  _checked_ptr_1<int32_t> _ptr__8129_new_vsubi(_8129_new_vsubi ? _8129_new_vsubi->raw() : nullptr,_8129_new_vsubi ? _8129_new_vsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8130_new_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8123_newunnz)));
  _checked_ptr_1<double> _ptr__8130_new_uval(_8130_new_uval ? _8130_new_uval->raw() : nullptr,_8130_new_uval ? _8130_new_uval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8131_new_usubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8123_newunnz)));
  _checked_ptr_1<int32_t> _ptr__8131_new_usubj(_8131_new_usubj ? _8131_new_usubj->raw() : nullptr,_8131_new_usubj ? _8131_new_usubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8132_new_usubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8123_newunnz)));
  _checked_ptr_1<int32_t> _ptr__8132_new_usubi(_8132_new_usubi ? _8132_new_usubi->raw() : nullptr,_8132_new_usubi ? _8132_new_usubi->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_8132_new_usubi,(int)0,_8121_unnz);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->usubi,(int)0,_8132_new_usubi,_8121_unnz,_8122_munnz);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_8131_new_usubj,(int)0,_8121_unnz);
  int32_t _12957_ = (int)0;
  int32_t _12958_ = _8122_munnz;
  for (int32_t _8133_i = _12957_; _8133_i < _12958_; ++_8133_i)
  {
    {
      _ptr__8131_new_usubj[safe_add( _8133_i,_8121_unnz )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->usubj)(_8133_i)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_8130_new_uval,(int)0,_8121_unnz);
    }
  }
  else
  {
    {
      int32_t _12959_ = (int)0;
      int32_t _12960_ = _8121_unnz;
      for (int32_t _8134_i = _12959_; _8134_i < _12960_; ++_8134_i)
      {
        {
          _ptr__8130_new_uval[_8134_i] = (scale * ((*uval)(_8134_i)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->uval,(int)0,_8130_new_uval,_8121_unnz,_8122_munnz);
    }
  }
  else
  {
    {
      int32_t _12961_ = (int)0;
      int32_t _12962_ = _8122_munnz;
      for (int32_t _8135_i = _12961_; _8135_i < _12962_; ++_8135_i)
      {
        {
          _ptr__8130_new_uval[safe_add( _8135_i,_8121_unnz )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->uval)(_8135_i)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_8132_new_usubi,(int)0,_8121_unnz);
  int32_t _12963_ = (int)0;
  int32_t _12964_ = _8125_mvnnz;
  for (int32_t _8136_i = _12963_; _8136_i < _12964_; ++_8136_i)
  {
    {
      _ptr__8129_new_vsubi[safe_add( _8136_i,_8124_vnnz )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->vsubi)(_8136_i)),mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_8128_new_vsubj,(int)0,_8124_vnnz);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->vsubj,_8124_vnnz,_8128_new_vsubj,_8124_vnnz,_8125_mvnnz);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_8127_new_vval,(int)0,_8124_vnnz);
    }
  }
  else
  {
    {
      int32_t _12965_ = (int)0;
      int32_t _12966_ = _8124_vnnz;
      for (int32_t _8137_i = _12965_; _8137_i < _12966_; ++_8137_i)
      {
        {
          _ptr__8127_new_vval[_8137_i] = (scale * ((*vval)(_8137_i)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->vval,(int)0,_8127_new_vval,_8124_vnnz,_8125_mvnnz);
    }
  }
  else
  {
    {
      int32_t _12967_ = (int)0;
      int32_t _12968_ = _8125_mvnnz;
      for (int32_t _8138_i = _12967_; _8138_i < _12968_; ++_8138_i)
      {
        {
          _ptr__8127_new_vval[safe_add( _8138_i,_8124_vnnz )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->vval)(_8138_i)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_8119_m)->d1 ),_8132_new_usubi,_8131_new_usubj,_8130_new_uval,_8129_new_vsubi,_8128_new_vsubj,_8127_new_vval,1.0);
}
// End mosek.fusion.SymmetricMatrix.add

// Begin mosek.fusion.SymmetricMatrix.sub
// Method mosek.fusion.SymmetricMatrix.sub @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:70:6-73:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _8139_m) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_8139_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _8139_m) { return __mosek_2fusion_2SymmetricMatrix__sub(_8139_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _8139_m)
{
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_8139_m->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
// End mosek.fusion.SymmetricMatrix.sub

// Begin mosek.fusion.SymmetricMatrix.mul
// Method mosek.fusion.SymmetricMatrix.mul @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:65:6-68:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _8140_v) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_8140_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _8140_v) { return __mosek_2fusion_2SymmetricMatrix__mul(_8140_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _8140_v)
{
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _8140_v));
}
// End mosek.fusion.SymmetricMatrix.mul

// Begin mosek.fusion.SymmetricMatrix.getdim
// Method mosek.fusion.SymmetricMatrix.getdim @ bld/docker-rockylinux-8/final/default/src/fusion/SymmetricMatrix.monty:63:6-51
int32_t mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }
int32_t mosek::fusion::p_SymmetricMatrix::getdim()
{
  return d0;
}
// End mosek.fusion.SymmetricMatrix.getdim

void mosek::fusion::p_SymmetricMatrix::destroy()
{
  vval.reset();
  vsubj.reset();
  vsubi.reset();
  uval.reset();
  usubj.reset();
  usubi.reset();
}
void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }
// } class SymmetricMatrix
// class NDSparseArray { // @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:976:4-1151:5
mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }
mosek::fusion::p_NDSparseArray::p_NDSparseArray
  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.NDSparseArray.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:1072:6-1150:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8141_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _8142_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8143_cof_)
{ return new mosek::fusion::NDSparseArray(_8141_dims_,_8142_sub,_8143_cof_); }
mosek::fusion::NDSparseArray::NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8141_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _8142_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8143_cof_) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_8141_dims_,_8142_sub,_8143_cof_); }
void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8141_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _8142_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8143_cof_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8141_dims_(_8141_dims_ ? _8141_dims_->raw() : nullptr, _8141_dims_ ? _8141_dims_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8143_cof_(_8143_cof_ ? _8143_cof_->raw() : nullptr, _8143_cof_ ? _8143_cof_->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8144_inst_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_8142_sub)->size(0)))));
    _checked_ptr_1<int64_t> _ptr__8144_inst_(_8144_inst_ ? _8144_inst_->raw() : nullptr,_8144_inst_ ? _8144_inst_->size(0) : 0);
    size = (int64_t)1;
    int32_t _12969_ = (int)0;
    int32_t _12970_ = (int)((_8141_dims_)->size(0));
    for (int32_t _8145_i = _12969_; _8145_i < _12970_; ++_8145_i)
    {
      {
        size = safe_mul( size,_ptr__8141_dims_[_8145_i] );
      }
    }
    int32_t _8146_nd = (int)((_8141_dims_)->size(0));
    if (((int)((_8142_sub)->size(0)) != (int)((_8143_cof_)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_8142_sub)->size(1)) != _8146_nd))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _8147_outofbounds = false;
    int32_t _12971_ = (int)0;
    int32_t _12972_ = (int)((_8142_sub)->size(0));
    for (int32_t _8148_i = _12971_; _8148_i < _12972_; ++_8148_i)
    {
      {
        int32_t _12973_ = (int)0;
        int32_t _12974_ = (int)((_8142_sub)->size(1));
        for (int32_t _8149_j = _12973_; _8149_j < _12974_; ++_8149_j)
        {
          {
            if (((((*_8142_sub)(_8148_i,_8149_j)) < (int)0) || (((*_8142_sub)(_8148_i,_8149_j)) >= _ptr__8141_dims_[_8149_j])))
            {
              {
                _8147_outofbounds = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_8147_outofbounds)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int32_t _12975_ = (int)0;
    int32_t _12976_ = (int)((_8142_sub)->size(0));
    for (int32_t _8150_i = _12975_; _8150_i < _12976_; ++_8150_i)
    {
      {
        int64_t _8151_k = (int64_t)0;
        int32_t _12977_ = (int)0;
        int32_t _12978_ = (int)((_8142_sub)->size(1));
        for (int32_t _8152_j = _12977_; _8152_j < _12978_; ++_8152_j)
        {
          {
            _8151_k = safe_add( safe_mul( _8151_k,_ptr__8141_dims_[_8152_j] ),((*_8142_sub)(_8150_i,_8152_j)) );
          }
        }
        _ptr__8144_inst_[_8150_i] = _8151_k;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_8141_dims_);
    bool _8153_issorted = true;
    int32_t _12979_ = (int)1;
    int32_t _12980_ = (int)((_8144_inst_)->size(0));
    for (int32_t _8154_i = _12979_; _8154_i < _12980_; ++_8154_i)
    {
      {
        _8153_issorted = (_8153_issorted && (_ptr__8144_inst_[_8154_i] >= _ptr__8144_inst_[(_8154_i - (int)1)]));
      }
    }
    if (_8153_issorted)
    {
      {
        int32_t _8155_nunique = (int)1;
        int32_t _12981_ = (int)1;
        int32_t _12982_ = (int)((_8144_inst_)->size(0));
        for (int32_t _8156_i = _12981_; _8156_i < _12982_; ++_8156_i)
        {
          {
            if ((_ptr__8144_inst_[(_8156_i - (int)1)] < _ptr__8144_inst_[_8156_i]))
            {
              {
                ++ _8155_nunique;
              }
            }
            {}
          }
        }
        if ((_8155_nunique == (int)((_8144_inst_)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_8144_inst_);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_8143_cof_);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8155_nunique)));
            ((*inst)((int)0)) = _ptr__8144_inst_[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8155_nunique)));
            ((*cof)((int)0)) = _ptr__8143_cof_[(int)0];
            int32_t _8157_j = (int)0;
            int32_t _12983_ = (int)1;
            int32_t _12984_ = (int)((_8144_inst_)->size(0));
            for (int32_t _8158_i = _12983_; _8158_i < _12984_; ++_8158_i)
            {
              {
                if ((_ptr__8144_inst_[_8158_i] > _ptr__8144_inst_[(_8158_i - (int)1)]))
                {
                  {
                    ++ _8157_j;
                    ((*inst)(_8157_j)) = _ptr__8144_inst_[_8158_i];
                    ((*cof)(_8157_j)) = _ptr__8143_cof_[_8158_i];
                  }
                }
                else
                {
                  {
                    ((*cof)(_8157_j)) = (((*cof)(_8157_j)) + _ptr__8143_cof_[_8158_i]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< int64_t,1 > > _8159_perm = ::mosek::fusion::Utils::Tools::range((int64_t)((_8144_inst_)->size(0)));
        _checked_ptr_1<int64_t> _ptr__8159_perm(_8159_perm ? _8159_perm->raw() : nullptr,_8159_perm ? _8159_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_8159_perm,_8144_inst_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)0,(int64_t)((_8144_inst_)->size(0)));
        int32_t _8160_nunique = (int)1;
        int32_t _12985_ = (int)1;
        int32_t _12986_ = (int)((_8144_inst_)->size(0));
        for (int32_t _8161_i = _12985_; _8161_i < _12986_; ++_8161_i)
        {
          {
            if ((_ptr__8144_inst_[_ptr__8159_perm[(_8161_i - (int)1)]] < _ptr__8144_inst_[_ptr__8159_perm[_8161_i]]))
            {
              {
                ++ _8160_nunique;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8160_nunique)));
        ((*inst)((int)0)) = _ptr__8144_inst_[_ptr__8159_perm[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8160_nunique)));
        ((*cof)((int)0)) = _ptr__8143_cof_[_ptr__8159_perm[(int)0]];
        int32_t _8162_j = (int)0;
        int32_t _12987_ = (int)1;
        int32_t _12988_ = (int)((_8144_inst_)->size(0));
        for (int32_t _8163_i = _12987_; _8163_i < _12988_; ++_8163_i)
        {
          {
            if ((_ptr__8144_inst_[_ptr__8159_perm[_8163_i]] > _ptr__8144_inst_[_ptr__8159_perm[(_8163_i - (int)1)]]))
            {
              {
                ++ _8162_j;
                ((*inst)(_8162_j)) = _ptr__8144_inst_[_ptr__8159_perm[_8163_i]];
                ((*cof)(_8162_j)) = _ptr__8143_cof_[_ptr__8159_perm[_8163_i]];
              }
            }
            else
            {
              {
                ((*cof)(_8162_j)) = (((*cof)(_8162_j)) + _ptr__8143_cof_[_ptr__8159_perm[_8163_i]]);
              }
            }
          }
        }
      }
    }
  }
}
// mosek.fusion.NDSparseArray.ctor

// mosek.fusion.NDSparseArray.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:1004:6-1070:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8164_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8165_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _8166_cof_)
{ return new mosek::fusion::NDSparseArray(_8164_dims_,_8165_inst_,_8166_cof_); }
mosek::fusion::NDSparseArray::NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8164_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8165_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _8166_cof_) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_8164_dims_,_8165_inst_,_8166_cof_); }
void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _8164_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8165_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _8166_cof_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8164_dims_(_8164_dims_ ? _8164_dims_->raw() : nullptr, _8164_dims_ ? _8164_dims_->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__8165_inst_(_8165_inst_ ? _8165_inst_->raw() : nullptr, _8165_inst_ ? _8165_inst_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8166_cof_(_8166_cof_ ? _8166_cof_->raw() : nullptr, _8166_cof_ ? _8166_cof_->size(0) : 0);
    size = (int64_t)1;
    int32_t _12989_ = (int)0;
    int32_t _12990_ = (int)((_8164_dims_)->size(0));
    for (int32_t _8167_i = _12989_; _8167_i < _12990_; ++_8167_i)
    {
      {
        size = safe_mul( size,_ptr__8164_dims_[_8167_i] );
      }
    }
    int32_t _8168_n = (int)((_8165_inst_)->size(0));
    if ((_8168_n != (int)((_8166_cof_)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _8169_err = false;
      int32_t _12991_ = (int)0;
      int32_t _12992_ = _8168_n;
      for (int32_t _8170_i = _12991_; _8170_i < _12992_; ++_8170_i)
      {
        {
          _8169_err = (_8169_err || ((_ptr__8165_inst_[_8170_i] < (int)0) || (_ptr__8165_inst_[_8170_i] >= size)));
        }
      }
      if (_8169_err)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_8164_dims_);
    bool _8171_issorted = true;
    int32_t _12993_ = (int)1;
    int32_t _12994_ = (int)((_8165_inst_)->size(0));
    for (int32_t _8172_i = _12993_; _8172_i < _12994_; ++_8172_i)
    {
      {
        _8171_issorted = (_8171_issorted && (_ptr__8165_inst_[_8172_i] >= _ptr__8165_inst_[(_8172_i - (int)1)]));
      }
    }
    if (_8171_issorted)
    {
      {
        int32_t _8173_nunique = (int)1;
        int32_t _12995_ = (int)1;
        int32_t _12996_ = (int)((_8165_inst_)->size(0));
        for (int32_t _8174_i = _12995_; _8174_i < _12996_; ++_8174_i)
        {
          {
            if ((_ptr__8165_inst_[(_8174_i - (int)1)] < _ptr__8165_inst_[_8174_i]))
            {
              {
                ++ _8173_nunique;
              }
            }
            {}
          }
        }
        if ((_8173_nunique == (int)((_8165_inst_)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_8165_inst_);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_8166_cof_);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8173_nunique)));
            ((*inst)((int)0)) = _ptr__8165_inst_[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8173_nunique)));
            ((*cof)((int)0)) = _ptr__8166_cof_[(int)0];
            int32_t _8175_j = (int)0;
            int32_t _12997_ = (int)1;
            int32_t _12998_ = (int)((_8165_inst_)->size(0));
            for (int32_t _8176_i = _12997_; _8176_i < _12998_; ++_8176_i)
            {
              {
                if ((_ptr__8165_inst_[_8176_i] > _ptr__8165_inst_[(_8176_i - (int)1)]))
                {
                  {
                    ++ _8175_j;
                    ((*inst)(_8175_j)) = _ptr__8165_inst_[_8176_i];
                    ((*cof)(_8175_j)) = _ptr__8166_cof_[_8176_i];
                  }
                }
                else
                {
                  {
                    ((*cof)(_8175_j)) = (((*cof)(_8175_j)) + _ptr__8166_cof_[_8176_i]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< int64_t,1 > > _8177_perm = ::mosek::fusion::Utils::Tools::range((int64_t)((_8165_inst_)->size(0)));
        _checked_ptr_1<int64_t> _ptr__8177_perm(_8177_perm ? _8177_perm->raw() : nullptr,_8177_perm ? _8177_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_8177_perm,_8165_inst_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)0,(int64_t)((_8165_inst_)->size(0)));
        int32_t _8178_nunique = (int)1;
        int32_t _12999_ = (int)1;
        int32_t _13000_ = (int)((_8165_inst_)->size(0));
        for (int32_t _8179_i = _12999_; _8179_i < _13000_; ++_8179_i)
        {
          {
            if ((_ptr__8165_inst_[_ptr__8177_perm[(_8179_i - (int)1)]] < _ptr__8165_inst_[_ptr__8177_perm[_8179_i]]))
            {
              {
                ++ _8178_nunique;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8178_nunique)));
        ((*inst)((int)0)) = _ptr__8165_inst_[_ptr__8177_perm[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8178_nunique)));
        ((*cof)((int)0)) = _ptr__8166_cof_[_ptr__8177_perm[(int)0]];
        int32_t _8180_j = (int)0;
        int32_t _13001_ = (int)1;
        int32_t _13002_ = (int)((_8165_inst_)->size(0));
        for (int32_t _8181_i = _13001_; _8181_i < _13002_; ++_8181_i)
        {
          {
            if ((_ptr__8165_inst_[_ptr__8177_perm[_8181_i]] > ((*inst)(_ptr__8177_perm[(_8181_i - (int)1)]))))
            {
              {
                ++ _8180_j;
                ((*inst)(_8180_j)) = _ptr__8165_inst_[_ptr__8177_perm[_8181_i]];
                ((*cof)(_8180_j)) = _ptr__8166_cof_[_ptr__8177_perm[_8181_i]];
              }
            }
            else
            {
              {
                ((*cof)(_8180_j)) = (((*cof)(_8180_j)) + _ptr__8166_cof_[_ptr__8177_perm[_8181_i]]);
              }
            }
          }
        }
      }
    }
  }
}
// mosek.fusion.NDSparseArray.ctor

// mosek.fusion.NDSparseArray.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:987:6-1001:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8182_m)
{ return new mosek::fusion::NDSparseArray(_8182_m); }
mosek::fusion::NDSparseArray::NDSparseArray
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8182_m) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_8182_m); }
void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _8182_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    int64_t _8183_nnz = _8182_m->numNonzeros();
    int32_t _8184_dim1 = _8182_m->numColumns();
    int32_t _8185_dim0 = _8182_m->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _8186_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8183_nnz)));
    _checked_ptr_1<double> _ptr__8186_val(_8186_val ? _8186_val->raw() : nullptr,_8186_val ? _8186_val->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8187_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8183_nnz)));
    _checked_ptr_1<int32_t> _ptr__8187_subj(_8187_subj ? _8187_subj->raw() : nullptr,_8187_subj ? _8187_subj->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8188_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8183_nnz)));
    _checked_ptr_1<int32_t> _ptr__8188_subi(_8188_subi ? _8188_subi->raw() : nullptr,_8188_subi ? _8188_subi->size(0) : 0);
    _8182_m->getDataAsTriplets(_8188_subi,_8187_subj,_8186_val);
    size = safe_mul( (int64_t)_8182_m->numRows(),(int64_t)_8182_m->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_8185_dim0),(int32_t)(_8184_dim1)});
    std::vector<int64_t> _13003_;
    for (int64_t _8189_i = (int64_t)0, _13004_ = _8183_nnz; _8189_i < _13004_ ; ++_8189_i)
    {
      _13003_.push_back(safe_add( safe_mul( (int64_t)_ptr__8188_subi[_8189_i],_8184_dim1 ),(int64_t)_ptr__8187_subj[_8189_i] ));
    }
    auto _13005_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_13003_.size()),_13003_.begin(),_13003_.end()));
    inst = _13005_;
    cof = _8186_val;
  }
}
// mosek.fusion.NDSparseArray.ctor

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:985:6-88
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8190_m) { return mosek::fusion::p_NDSparseArray::make(_8190_m); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _8190_m)
{
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8190_m);
}
// End mosek.fusion.NDSparseArray.make

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:984:6-133
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8191_dims,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8192_inst,
    std::shared_ptr< monty::ndarray< double,1 > > _8193_cof) { return mosek::fusion::p_NDSparseArray::make(_8191_dims,_8192_inst,_8193_cof); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _8191_dims,std::shared_ptr< monty::ndarray< int64_t,1 > > _8192_inst,std::shared_ptr< monty::ndarray< double,1 > > _8193_cof)
{
  _checked_ptr_1<int32_t> _ptr__8191_dims(_8191_dims ? _8191_dims->raw() : nullptr, _8191_dims ? _8191_dims->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__8192_inst(_8192_inst ? _8192_inst->raw() : nullptr, _8192_inst ? _8192_inst->size(0) : 0);
  _checked_ptr_1<double> _ptr__8193_cof(_8193_cof ? _8193_cof->raw() : nullptr, _8193_cof ? _8193_cof->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8191_dims,_8192_inst,_8193_cof);
}
// End mosek.fusion.NDSparseArray.make

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:983:6-131
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8194_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _8195_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8196_cof) { return mosek::fusion::p_NDSparseArray::make(_8194_dims,_8195_sub,_8196_cof); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _8194_dims,std::shared_ptr< monty::ndarray< int32_t,2 > > _8195_sub,std::shared_ptr< monty::ndarray< double,1 > > _8196_cof)
{
  _checked_ptr_1<int32_t> _ptr__8194_dims(_8194_dims ? _8194_dims->raw() : nullptr, _8194_dims ? _8194_dims->size(0) : 0);
  _checked_ptr_1<double> _ptr__8196_cof(_8196_cof ? _8196_cof->raw() : nullptr, _8196_cof ? _8196_cof->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8194_dims,_8195_sub,_8196_cof);
}
// End mosek.fusion.NDSparseArray.make

void mosek::fusion::p_NDSparseArray::destroy()
{
  cof.reset();
  inst.reset();
  dims.reset();
}
void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }
// } class NDSparseArray
// class DenseMatrix { // @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:796:4-959:5
mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }
mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }
mosek::fusion::p_DenseMatrix::p_DenseMatrix
  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.DenseMatrix.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:907:6-916:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (int32_t _8197_dimi_,
    int32_t _8198_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8199_cof)
{ return new mosek::fusion::DenseMatrix(_8197_dimi_,_8198_dimj_,_8199_cof); }
mosek::fusion::DenseMatrix::DenseMatrix
  (int32_t _8197_dimi_,
    int32_t _8198_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8199_cof) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8197_dimi_,_8198_dimj_,_8199_cof); }
void mosek::fusion::p_DenseMatrix::_initialize  (int32_t _8197_dimi_,
    int32_t _8198_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8199_cof)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__8199_cof(_8199_cof ? _8199_cof->raw() : nullptr, _8199_cof ? _8199_cof->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8197_dimi_,_8198_dimj_);
    nnz = (int64_t)safe_mul( _8197_dimi_,_8198_dimj_ );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _8197_dimi_,_8198_dimj_ ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_8199_cof,(int)0,data,(int)0,safe_mul( _8197_dimi_,_8198_dimj_ ));
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:873:6-895:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8200_m_)
{ return new mosek::fusion::DenseMatrix(_8200_m_); }
mosek::fusion::DenseMatrix::DenseMatrix
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8200_m_) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8200_m_); }
void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _8200_m_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_8200_m_)->dimi,mosek::fusion::p_Matrix::_get_impl(_8200_m_)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _13006_ = _8200_m_;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_13006_.get()))
    {
      ::mosek::fusion::DenseMatrix::t _8201_m (dynamic_cast<::mosek::fusion::DenseMatrix*>(_13006_.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_8201_m)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_13006_.get()))
    {
      ::mosek::fusion::SparseMatrix::t _8202_m (dynamic_cast<::mosek::fusion::SparseMatrix*>(_13006_.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_8202_m)->dimi,mosek::fusion::p_Matrix::_get_impl(_8202_m)->dimj ));
        int64_t _13007_ = (int64_t)0;
        int64_t _13008_ = mosek::fusion::p_SparseMatrix::_get_impl(_8202_m)->nnz;
        for (int64_t _8204_i = _13007_; _8204_i < _13008_; ++_8204_i)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_8202_m)->subi)(_8204_i)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_8202_m)->subj)(_8204_i)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_8202_m)->val)(_8204_i));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _8203_m = _13006_;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (int64_t)safe_mul( dimi,dimj );
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:862:6-867:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (std::shared_ptr< monty::ndarray< double,2 > > _8205_d)
{ return new mosek::fusion::DenseMatrix(_8205_d); }
mosek::fusion::DenseMatrix::DenseMatrix
  (std::shared_ptr< monty::ndarray< double,2 > > _8205_d) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8205_d); }
void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _8205_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize((int)((_8205_d)->size(0)),(int)((_8205_d)->size(1)));
    std::vector<double> _13009_;
    for (int32_t _8206_i = (int)0, _13010_ = dimi; _8206_i < _13010_ ; ++_8206_i)
    {
      for (int32_t _8207_j = (int)0, _13011_ = dimj; _8207_j < _13011_ ; ++_8207_j)
      {
        _13009_.push_back(((*_8205_d)(_8206_i,_8207_j)));
      }
    }
    auto _13012_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_13009_.size()),_13009_.begin(),_13009_.end()));
    data = _13012_;
    nnz = (int64_t)safe_mul( dimi,dimj );
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:851:6-856:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (int32_t _8208_dimi_,
    int32_t _8209_dimj_,
    double _8210_value_)
{ return new mosek::fusion::DenseMatrix(_8208_dimi_,_8209_dimj_,_8210_value_); }
mosek::fusion::DenseMatrix::DenseMatrix
  (int32_t _8208_dimi_,
    int32_t _8209_dimj_,
    double _8210_value_) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8208_dimi_,_8209_dimj_,_8210_value_); }
void mosek::fusion::p_DenseMatrix::_initialize  (int32_t _8208_dimi_,
    int32_t _8209_dimj_,
    double _8210_value_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize(_8208_dimi_,_8209_dimj_);
    std::vector<double> _13013_;
    for (int32_t _8211_i = (int)0, _13014_ = _8208_dimi_; _8211_i < _13014_ ; ++_8211_i)
    {
      for (int32_t _8212_j = (int)0, _13015_ = _8209_dimj_; _8212_j < _13015_ ; ++_8212_j)
      {
        _13013_.push_back(_8210_value_);
      }
    }
    auto _13016_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_13013_.size()),_13013_.begin(),_13013_.end()));
    data = _13016_;
    nnz = (int64_t)safe_mul( _8208_dimi_,_8209_dimj_ );
  }
}
// mosek.fusion.DenseMatrix.ctor

// Begin mosek.fusion.DenseMatrix.toString
// Method mosek.fusion.DenseMatrix.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:940:6-958:7
std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_DenseMatrix::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _8213_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int32_t _8214_k = (int)0;
  {
    int32_t _8215_i = (int)0;
    for(;(_8215_i < dimi);++ _8215_i)
    {
      {
        if ((_8215_i > (int)0))
        {
          {
            _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_8214_k)));
        ++ _8214_k;
        {
          int32_t _8216_j = (int)1;
          for(;(_8216_j < dimj);++ _8216_j)
          {
            {
              _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_8214_k)));
              ++ _8214_k;
            }
          }
        }
        _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _8213_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _8213_sb->toString();
}
// End mosek.fusion.DenseMatrix.toString

// Begin mosek.fusion.DenseMatrix.transpose
// Method mosek.fusion.DenseMatrix.transpose @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:919:6-938:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
/* override: mosek.fusion.Matrix.transpose*/
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose()
{
  std::shared_ptr< monty::ndarray< double,1 > > _8217_newdata = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__8217_newdata(_8217_newdata ? _8217_newdata->raw() : nullptr,_8217_newdata ? _8217_newdata->size(0) : 0);
  int32_t _8218_srci = (int)0;
  int32_t _8219_step = dimi;
  int32_t _13017_ = (int)0;
  int32_t _13018_ = dimi;
  for (int32_t _8220_i = _13017_; _8220_i < _13018_; ++_8220_i)
  {
    {
      int32_t _8221_dsti = _8220_i;
      int32_t _13019_ = (int)0;
      int32_t _13020_ = dimj;
      for (int32_t _8222_j = _13019_; _8222_j < _13020_; ++_8222_j)
      {
        {
          _ptr__8217_newdata[_8221_dsti] = ((*data)(_8218_srci));
          _8221_dsti = safe_add( _8221_dsti,_8219_step );
          ++ _8218_srci;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_8217_newdata)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.DenseMatrix.transpose

// Begin mosek.fusion.DenseMatrix.isSparse
// Method mosek.fusion.DenseMatrix.isSparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:842:6-54
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_DenseMatrix::isSparse()
{
  return false;
}
// End mosek.fusion.DenseMatrix.isSparse

// Begin mosek.fusion.DenseMatrix.getDataAsArray
// Method mosek.fusion.DenseMatrix.getDataAsArray @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:837:6-840:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
// End mosek.fusion.DenseMatrix.getDataAsArray

// Begin mosek.fusion.DenseMatrix.getDataAsTriplets
// Method mosek.fusion.DenseMatrix.getDataAsTriplets @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:812:6-835:7
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8223_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8224_subj,std::shared_ptr< monty::ndarray< double,1 > > _8225_cof) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_8223_subi,_8224_subj,_8225_cof); }
void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8223_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8224_subj,std::shared_ptr< monty::ndarray< double,1 > > _8225_cof)
{
  _checked_ptr_1<int32_t> _ptr__8223_subi(_8223_subi ? _8223_subi->raw() : nullptr, _8223_subi ? _8223_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8224_subj(_8224_subj ? _8224_subj->raw() : nullptr, _8224_subj ? _8224_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8225_cof(_8225_cof ? _8225_cof->raw() : nullptr, _8225_cof ? _8225_cof->size(0) : 0);
  if ((((int)((_8223_subi)->size(0)) < nnz) || (((int)((_8224_subj)->size(0)) < nnz) || ((int)((_8225_cof)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_8225_cof,(int)0,(int)((data)->size(0)));
  int32_t _8226_k = (int)0;
  int32_t _13021_ = (int)0;
  int32_t _13022_ = dimi;
  for (int32_t _8227_i = _13021_; _8227_i < _13022_; ++_8227_i)
  {
    {
      int32_t _13023_ = (int)0;
      int32_t _13024_ = dimj;
      for (int32_t _8228_j = _13023_; _8228_j < _13024_; ++_8228_j)
      {
        {
          _ptr__8223_subi[_8226_k] = _8227_i;
          _ptr__8224_subj[_8226_k] = _8228_j;
          ++ _8226_k;
        }
      }
    }
  }
}
// End mosek.fusion.DenseMatrix.getDataAsTriplets

// Begin mosek.fusion.DenseMatrix.get
// Method mosek.fusion.DenseMatrix.get @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:810:6-82
double mosek::fusion::DenseMatrix :: get(int32_t _8229_i,int32_t _8230_j) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_8229_i,_8230_j); }
double mosek::fusion::p_DenseMatrix::get(int32_t _8229_i,int32_t _8230_j)
{
  return ((*data)(safe_add( safe_mul( _8229_i,dimj ),_8230_j )));
}
// End mosek.fusion.DenseMatrix.get

// Begin mosek.fusion.DenseMatrix.numNonzeros
// Method mosek.fusion.DenseMatrix.numNonzeros @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:805:6-808:7
int64_t mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }
int64_t mosek::fusion::p_DenseMatrix::numNonzeros()
{
  return (int64_t)safe_mul( dimi,dimj );
}
// End mosek.fusion.DenseMatrix.numNonzeros

void mosek::fusion::p_DenseMatrix::destroy()
{
  data.reset();
}
void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }
// } class DenseMatrix
// class SparseMatrix { // @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:575:4-790:5
mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }
mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SparseMatrix::p_SparseMatrix
  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SparseMatrix.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:668:6-713:7
mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix
  (int32_t _8231_dimi_,
    int32_t _8232_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8233_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8234_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8235_val_,
    int64_t _8236_nelm)
{ return new mosek::fusion::SparseMatrix(_8231_dimi_,_8232_dimj_,_8233_subi_,_8234_subj_,_8235_val_,_8236_nelm); }
mosek::fusion::SparseMatrix::SparseMatrix
  (int32_t _8231_dimi_,
    int32_t _8232_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8233_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8234_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8235_val_,
    int64_t _8236_nelm) : 
   SparseMatrix(new mosek::fusion::p_SparseMatrix(this))
{ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_8231_dimi_,_8232_dimj_,_8233_subi_,_8234_subj_,_8235_val_,_8236_nelm); }
void mosek::fusion::p_SparseMatrix::_initialize  (int32_t _8231_dimi_,
    int32_t _8232_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8233_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8234_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8235_val_,
    int64_t _8236_nelm)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8233_subi_(_8233_subi_ ? _8233_subi_->raw() : nullptr, _8233_subi_ ? _8233_subi_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8234_subj_(_8234_subj_ ? _8234_subj_->raw() : nullptr, _8234_subj_ ? _8234_subj_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8235_val_(_8235_val_ ? _8235_val_->raw() : nullptr, _8235_val_ ? _8235_val_->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8231_dimi_,_8232_dimj_);
    if ((_8236_nelm > (int)0))
    {
      {
        if ((((int)((_8233_subi_)->size(0)) < _8236_nelm) || (((int)((_8234_subj_)->size(0)) < _8236_nelm) || ((int)((_8235_val_)->size(0)) < _8236_nelm))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _8237_outofbounds = false;
        int64_t _13025_ = (int64_t)0;
        int64_t _13026_ = _8236_nelm;
        for (int64_t _8238_i = _13025_; _8238_i < _13026_; ++_8238_i)
        {
          {
            if (((_ptr__8233_subi_[_8238_i] < (int)0) || ((_ptr__8233_subi_[_8238_i] >= dimi) || ((_ptr__8234_subj_[_8238_i] < (int)0) || (_ptr__8234_subj_[_8238_i] >= dimj)))))
            {
              {
                _8237_outofbounds = true;
              }
            }
            {}
          }
        }
        if (_8237_outofbounds)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _8239_ressubi = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _8240_ressubj = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _8241_resval = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_8233_subi_,_8234_subj_,_8235_val_,_8239_ressubi,_8240_ressubj,_8241_resval,_8236_nelm,dimi,dimj);
        subi = ((*_8239_ressubi)((int)0));
        subj = ((*_8240_ressubj)((int)0));
        val = ((*_8241_resval)((int)0));
        nnz = (int64_t)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (int64_t)0;
      }
    }
  }
}
// mosek.fusion.SparseMatrix.ctor

// mosek.fusion.SparseMatrix.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:617:6-653:7
mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix
  (int32_t _8242_dimi_,
    int32_t _8243_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8244_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8245_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8246_val_)
{ return new mosek::fusion::SparseMatrix(_8242_dimi_,_8243_dimj_,_8244_subi_,_8245_subj_,_8246_val_); }
mosek::fusion::SparseMatrix::SparseMatrix
  (int32_t _8242_dimi_,
    int32_t _8243_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8244_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8245_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8246_val_) : 
   SparseMatrix(new mosek::fusion::p_SparseMatrix(this))
{ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_8242_dimi_,_8243_dimj_,_8244_subi_,_8245_subj_,_8246_val_); }
void mosek::fusion::p_SparseMatrix::_initialize  (int32_t _8242_dimi_,
    int32_t _8243_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8244_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8245_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8246_val_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8244_subi_(_8244_subi_ ? _8244_subi_->raw() : nullptr, _8244_subi_ ? _8244_subi_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8245_subj_(_8245_subj_ ? _8245_subj_->raw() : nullptr, _8245_subj_ ? _8245_subj_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8246_val_(_8246_val_ ? _8246_val_->raw() : nullptr, _8246_val_ ? _8246_val_->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8242_dimi_,_8243_dimj_);
    int32_t _8247_n = (int)0;
    int32_t _13027_ = (int)0;
    int32_t _13028_ = (int)((_8246_val_)->size(0));
    for (int32_t _8248_i = _13027_; _8248_i < _13028_; ++_8248_i)
    {
      {
        if (((_ptr__8246_val_[_8248_i] > (int)0) || (_ptr__8246_val_[_8248_i] < (int)0)))
        {
          {
            ++ _8247_n;
          }
        }
        {}
      }
    }
    if (((_8247_n > (int)0) && (_8247_n < (int)((_8244_subi_)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8247_n)));
        subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8247_n)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8247_n)));
        nnz = _8247_n;
        int32_t _8249_j = (int)0;
        int32_t _13029_ = (int)0;
        int32_t _13030_ = (int)((_8246_val_)->size(0));
        for (int32_t _8250_i = _13029_; _8250_i < _13030_; ++_8250_i)
        {
          {
            if (((_ptr__8246_val_[_8250_i] < (int)0) || (_ptr__8246_val_[_8250_i] > (int)0)))
            {
              {
                ((*val)(_8249_j)) = _ptr__8246_val_[_8250_i];
                ((*subj)(_8249_j)) = _ptr__8245_subj_[_8250_i];
                ((*subi)(_8249_j)) = _ptr__8244_subi_[_8250_i];
                ++ _8249_j;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _8244_subi_;
        subj = _8245_subj_;
        val = _8246_val_;
        if ((NULL == _8244_subi_.get()))
        {
          {
            nnz = (int64_t)0;
          }
        }
        else
        {
          {
            nnz = (int64_t)((subi)->size(0));
          }
        }
      }
    }
  }
}
// mosek.fusion.SparseMatrix.ctor

// Begin mosek.fusion.SparseMatrix.formPtrb
// Method mosek.fusion.SparseMatrix.formPtrb @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:775:6-789:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_SparseMatrix::formPtrb()
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _8251_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__8251_ptrb(_8251_ptrb ? _8251_ptrb->raw() : nullptr,_8251_ptrb ? _8251_ptrb->size(0) : 0);
  int64_t _8252_pos = (int64_t)0;
  int32_t _13031_ = (int)0;
  int32_t _13032_ = dimi;
  for (int32_t _8253_row = _13031_; _8253_row < _13032_; ++_8253_row)
  {
    {
      _ptr__8251_ptrb[_8253_row] = _8252_pos;
      {
        for(;((_8252_pos < nnz) && (((*subi)(_8252_pos)) == _8253_row));++ _8252_pos)
        {
          {
          }
        }
      }
    }
  }
  _ptr__8251_ptrb[dimi] = _8252_pos;
  return _8251_ptrb;
}
// End mosek.fusion.SparseMatrix.formPtrb

// Begin mosek.fusion.SparseMatrix.toString
// Method mosek.fusion.SparseMatrix.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:760:6-772:7
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_SparseMatrix::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _8254_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _8254_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _8254_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int32_t _13033_ = (int)1;
      int32_t _13034_ = (int)((subi)->size(0));
      for (int32_t _8255_i = _13033_; _8255_i < _13034_; ++_8255_i)
      {
        {
          _8254_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_8255_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_8255_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_8255_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _8254_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _8254_sb->toString();
}
// End mosek.fusion.SparseMatrix.toString

// Begin mosek.fusion.SparseMatrix.numNonzeros
// Method mosek.fusion.SparseMatrix.numNonzeros @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:755:6-758:7
int64_t mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }
int64_t mosek::fusion::p_SparseMatrix::numNonzeros()
{
  return nnz;
}
// End mosek.fusion.SparseMatrix.numNonzeros

// Begin mosek.fusion.SparseMatrix.transpose
// Method mosek.fusion.SparseMatrix.transpose @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:748:6-752:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
/* override: mosek.fusion.Matrix.transpose*/
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose()
{
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
// End mosek.fusion.SparseMatrix.transpose

// Begin mosek.fusion.SparseMatrix.isSparse
// Method mosek.fusion.SparseMatrix.isSparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:745:6-53
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_SparseMatrix::isSparse()
{
  return true;
}
// End mosek.fusion.SparseMatrix.isSparse

// Begin mosek.fusion.SparseMatrix.getDataAsArray
// Method mosek.fusion.SparseMatrix.getDataAsArray @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:737:6-743:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray()
{
  std::shared_ptr< monty::ndarray< double,1 > > _8256_r = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__8256_r(_8256_r ? _8256_r->raw() : nullptr,_8256_r ? _8256_r->size(0) : 0);
  int32_t _13035_ = (int)0;
  int32_t _13036_ = (int)((subi)->size(0));
  for (int32_t _8257_i = _13035_; _8257_i < _13036_; ++_8257_i)
  {
    {
      _ptr__8256_r[safe_add( safe_mul( ((*subi)(_8257_i)),dimj ),((*subj)(_8257_i)) )] = ((*val)(_8257_i));
    }
  }
  return _8256_r;
}
// End mosek.fusion.SparseMatrix.getDataAsArray

// Begin mosek.fusion.SparseMatrix.getDataAsTriplets
// Method mosek.fusion.SparseMatrix.getDataAsTriplets @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:717:6-735:7
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8258_subi_,std::shared_ptr< monty::ndarray< int32_t,1 > > _8259_subj_,std::shared_ptr< monty::ndarray< double,1 > > _8260_cof_) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_8258_subi_,_8259_subj_,_8260_cof_); }
void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8258_subi_,std::shared_ptr< monty::ndarray< int32_t,1 > > _8259_subj_,std::shared_ptr< monty::ndarray< double,1 > > _8260_cof_)
{
  _checked_ptr_1<int32_t> _ptr__8258_subi_(_8258_subi_ ? _8258_subi_->raw() : nullptr, _8258_subi_ ? _8258_subi_->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8259_subj_(_8259_subj_ ? _8259_subj_->raw() : nullptr, _8259_subj_ ? _8259_subj_->size(0) : 0);
  _checked_ptr_1<double> _ptr__8260_cof_(_8260_cof_ ? _8260_cof_->raw() : nullptr, _8260_cof_ ? _8260_cof_->size(0) : 0);
  if ((((int64_t)((_8258_subi_)->size(0)) < nnz) || (((int64_t)((_8259_subj_)->size(0)) < nnz) || ((int64_t)((_8260_cof_)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(int64_t)0,_8258_subi_,(int64_t)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(int64_t)0,_8259_subj_,(int64_t)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(int64_t)0,_8260_cof_,(int64_t)0,nnz);
    }
  }
  {}
}
// End mosek.fusion.SparseMatrix.getDataAsTriplets

// Begin mosek.fusion.SparseMatrix.get
// Method mosek.fusion.SparseMatrix.get @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:588:6-606:7
double mosek::fusion::SparseMatrix :: get(int32_t _8261_i,int32_t _8262_j) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_8261_i,_8262_j); }
double mosek::fusion::p_SparseMatrix::get(int32_t _8261_i,int32_t _8262_j)
{
  if (((_8261_i < (int)0) || ((_8261_i >= dimi) || ((_8262_j < (int)0) || (_8262_j >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int32_t _8263_e = (int)((subi)->size(0));
  int32_t _8264_b = (int)0;
  while ( ((_8263_e - _8264_b) > (int)1) )
  {
    {
      int32_t _8265_p = (safe_add( _8264_b,_8263_e ) / (int)2);
      if (((((*subi)(_8265_p)) < _8261_i) || ((((*subi)(_8265_p)) == _8261_i) && (((*subj)(_8265_p)) < _8262_j))))
      {
        {
          _8264_b = _8265_p;
        }
      }
      else if(((((*subi)(_8265_p)) > _8261_i) || ((((*subi)(_8265_p)) == _8261_i) && (((*subj)(_8265_p)) > _8262_j))))
      {
        {
          _8263_e = _8265_p;
        }
      }
      else
      {
        {
          return ((*val)(_8265_p));
        }
      }
    }
  }
  if (((((*subi)(_8264_b)) == _8261_i) && (((*subj)(_8264_b)) == _8262_j)))
  {
    {
      return ((*val)(_8264_b));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
// End mosek.fusion.SparseMatrix.get

void mosek::fusion::p_SparseMatrix::destroy()
{
  val.reset();
  subj.reset();
  subi.reset();
}
void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }
// } class SparseMatrix
// class Matrix { // @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:58:4-569:5
mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Matrix::p_Matrix
  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Matrix.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:65:6-71:7
void mosek::fusion::p_Matrix::_initialize  (int32_t _8266_di,
    int32_t _8267_dj)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    if (((_8266_di < (int)0) || (_8267_dj < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _8266_di;
    dimj = _8267_dj;
  }
}
// mosek.fusion.Matrix.ctor

// Begin mosek.fusion.Matrix.toString
// Method mosek.fusion.Matrix.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:568:6-52
std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_Matrix::toString()
{
  return std::string ("");
}
// End mosek.fusion.Matrix.toString

// Begin mosek.fusion.Matrix.switchDims
// Method mosek.fusion.Matrix.switchDims @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:560:6-564:7
void mosek::fusion::p_Matrix::switchDims()
{
  int32_t _8268_tmp = dimi;
  dimi = dimj;
  dimj = _8268_tmp;
}
// End mosek.fusion.Matrix.switchDims

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:556:6-107
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8269_num,
    monty::rc_ptr< ::mosek::fusion::Matrix > _8270_mv) { return mosek::fusion::p_Matrix::diag(_8269_num,_8270_mv); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8269_num,monty::rc_ptr< ::mosek::fusion::Matrix > _8270_mv)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _13037_;
  for (int32_t _8271_i = (int)0, _13038_ = _8269_num; _8271_i < _13038_ ; ++_8271_i)
  {
    _13037_.push_back(_8270_mv);
  }
  auto _13039_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_13037_.size()),_13037_.begin(),_13037_.end()));
  return ::mosek::fusion::p_Matrix::diag(_13039_);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:505:6-548:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8272_md) { return mosek::fusion::p_Matrix::diag(_8272_md); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8272_md)
{
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8273_d = _8272_md;
  int64_t _8274_numelm = (int64_t)0;
  int32_t _8275_dimj = (int)0;
  int32_t _8276_dimi = (int)0;
  int32_t _13040_ = (int)0;
  int32_t _13041_ = (int)((_8272_md)->size(0));
  for (int32_t _8277_i = _13040_; _8277_i < _13041_; ++_8277_i)
  {
    {
      _8276_dimi = safe_add( _8276_dimi,mosek::fusion::p_Matrix::_get_impl(((*_8272_md)(_8277_i)))->dimi );
      _8275_dimj = safe_add( _8275_dimj,mosek::fusion::p_Matrix::_get_impl(((*_8272_md)(_8277_i)))->dimj );
      _8274_numelm = safe_add( _8274_numelm,((*_8272_md)(_8277_i))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8278_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8274_numelm)));
  _checked_ptr_1<int32_t> _ptr__8278_subi(_8278_subi ? _8278_subi->raw() : nullptr,_8278_subi ? _8278_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8279_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8274_numelm)));
  _checked_ptr_1<int32_t> _ptr__8279_subj(_8279_subj ? _8279_subj->raw() : nullptr,_8279_subj ? _8279_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8280_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8274_numelm)));
  _checked_ptr_1<double> _ptr__8280_val(_8280_val ? _8280_val->raw() : nullptr,_8280_val ? _8280_val->size(0) : 0);
  {
    int32_t _8281_offsetj = (int)0;
    int32_t _8282_offseti = (int)0;
    int64_t _8283_k = (int64_t)0;
    int32_t _13042_ = (int)0;
    int32_t _13043_ = (int)((_8272_md)->size(0));
    for (int32_t _8284_i = _13042_; _8284_i < _13043_; ++_8284_i)
    {
      {
        int64_t _8285_N = ((*_8272_md)(_8284_i))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _8286_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8285_N)));
        _checked_ptr_1<double> _ptr__8286_mval(_8286_mval ? _8286_mval->raw() : nullptr,_8286_mval ? _8286_mval->size(0) : 0);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8287_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8285_N)));
        _checked_ptr_1<int32_t> _ptr__8287_msubj(_8287_msubj ? _8287_msubj->raw() : nullptr,_8287_msubj ? _8287_msubj->size(0) : 0);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8288_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8285_N)));
        _checked_ptr_1<int32_t> _ptr__8288_msubi(_8288_msubi ? _8288_msubi->raw() : nullptr,_8288_msubi ? _8288_msubi->size(0) : 0);
        ((*_8272_md)(_8284_i))->getDataAsTriplets(_8288_msubi,_8287_msubj,_8286_mval);
        ::mosek::fusion::Utils::Tools::arraycopy(_8286_mval,(int64_t)0,_8280_val,_8283_k,_8285_N);
        int64_t _13044_ = (int64_t)0;
        int64_t _13045_ = _8285_N;
        for (int64_t _8289_j = _13044_; _8289_j < _13045_; ++_8289_j)
        {
          {
            _ptr__8278_subi[safe_add( _8283_k,_8289_j )] = safe_add( _ptr__8288_msubi[_8289_j],_8282_offseti );
            _ptr__8279_subj[safe_add( _8283_k,_8289_j )] = safe_add( _ptr__8288_msubi[_8289_j],_8281_offsetj );
          }
        }
        _8283_k = safe_add( _8283_k,_8285_N );
        _8282_offseti = safe_add( _8282_offseti,mosek::fusion::p_Matrix::_get_impl(((*_8272_md)(_8284_i)))->dimi );
        _8281_offsetj = safe_add( _8281_offsetj,mosek::fusion::p_Matrix::_get_impl(((*_8272_md)(_8284_i)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8276_dimi,_8275_dimj,_8278_subi,_8279_subj,_8280_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:485:6-494:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( int32_t _8290_n,
    double _8291_val,
    int32_t _8292_k) { return mosek::fusion::p_Matrix::antidiag(_8290_n,_8291_val,_8292_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int32_t _8290_n,double _8291_val,int32_t _8292_k)
{
  if (((_8292_k < _8290_n) && (_8292_k >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8291_val,(_8290_n - _8292_k)),_8292_k);
    }
  }
  else if(((_8292_k > (-_8290_n)) && (_8292_k < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8291_val,safe_add( _8290_n,_8292_k )),_8292_k);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:480:6-483:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( int32_t _8293_n,
    double _8294_val) { return mosek::fusion::p_Matrix::antidiag(_8293_n,_8294_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int32_t _8293_n,double _8294_val)
{
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8294_val,_8293_n),(int)0);
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:469:6-478:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8295_n,
    double _8296_val,
    int32_t _8297_k) { return mosek::fusion::p_Matrix::diag(_8295_n,_8296_val,_8297_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8295_n,double _8296_val,int32_t _8297_k)
{
  if (((_8297_k < _8295_n) && (_8297_k >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8296_val,(_8295_n - _8297_k)),_8297_k);
    }
  }
  else if(((_8297_k > (-_8295_n)) && (_8297_k < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8296_val,safe_add( _8295_n,_8297_k )),_8297_k);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:464:6-467:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8298_n,
    double _8299_val) { return mosek::fusion::p_Matrix::diag(_8298_n,_8299_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8298_n,double _8299_val)
{
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8299_val,_8298_n),(int)0);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:442:6-461:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8300_d,
    int32_t _8301_k) { return mosek::fusion::p_Matrix::antidiag(_8300_d,_8301_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _8300_d,int32_t _8301_k)
{
  _checked_ptr_1<double> _ptr__8300_d(_8300_d ? _8300_d->raw() : nullptr, _8300_d ? _8300_d->size(0) : 0);
  int32_t _13046_;
  bool _13047_ = (_8301_k > (int)0);
  if (_13047_)
  {
    _13046_ = _8301_k;
  }
  else
  {
    _13046_ = (-_8301_k);
  }
  int32_t _8302_absk = _13046_;
  int32_t _8303_dimi = safe_add( (int)((_8300_d)->size(0)),_8302_absk );
  int32_t _8304_n = (int)((_8300_d)->size(0));
  if ((_8301_k >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8305_subi = ::mosek::fusion::Utils::Tools::range(_8301_k,safe_add( _8304_n,_8301_k ));
      _checked_ptr_1<int32_t> _ptr__8305_subi(_8305_subi ? _8305_subi->raw() : nullptr,_8305_subi ? _8305_subi->size(0) : 0);
      std::vector<int32_t> _13048_;
      for (int32_t _8307_i = (int)1, _13049_ = safe_add( _8304_n,(int)1 ); _8307_i < _13049_ ; ++_8307_i)
      {
        _13048_.push_back((safe_add( _8304_n,_8301_k ) - _8307_i));
      }
      auto _13050_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_13048_.size()),_13048_.begin(),_13048_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8306_subj = _13050_;
      _checked_ptr_1<int32_t> _ptr__8306_subj(_8306_subj ? _8306_subj->raw() : nullptr,_8306_subj ? _8306_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8303_dimi,_8303_dimi,_8305_subi,_8306_subj,_8300_d)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8308_subi = ::mosek::fusion::Utils::Tools::range((int)0,_8304_n);
      _checked_ptr_1<int32_t> _ptr__8308_subi(_8308_subi ? _8308_subi->raw() : nullptr,_8308_subi ? _8308_subi->size(0) : 0);
      std::vector<int32_t> _13051_;
      for (int32_t _8310_i = (int)1, _13052_ = safe_add( _8304_n,(int)1 ); _8310_i < _13052_ ; ++_8310_i)
      {
        _13051_.push_back((_8304_n - _8310_i));
      }
      auto _13053_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_13051_.size()),_13051_.begin(),_13051_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8309_subj = _13053_;
      _checked_ptr_1<int32_t> _ptr__8309_subj(_8309_subj ? _8309_subj->raw() : nullptr,_8309_subj ? _8309_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8303_dimi,_8303_dimi,_8308_subi,_8309_subj,_8300_d)).as<::mosek::fusion::Matrix>();
    }
  }
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:437:6-440:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8311_d) { return mosek::fusion::p_Matrix::antidiag(_8311_d); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _8311_d)
{
  _checked_ptr_1<double> _ptr__8311_d(_8311_d ? _8311_d->raw() : nullptr, _8311_d ? _8311_d->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_8311_d,(int)0);
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:416:6-435:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8312_d,
    int32_t _8313_k) { return mosek::fusion::p_Matrix::diag(_8312_d,_8313_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _8312_d,int32_t _8313_k)
{
  _checked_ptr_1<double> _ptr__8312_d(_8312_d ? _8312_d->raw() : nullptr, _8312_d ? _8312_d->size(0) : 0);
  int32_t _13054_;
  bool _13055_ = (_8313_k > (int)0);
  if (_13055_)
  {
    _13054_ = _8313_k;
  }
  else
  {
    _13054_ = (-_8313_k);
  }
  int32_t _8314_absk = _13054_;
  int32_t _8315_dimi = safe_add( (int)((_8312_d)->size(0)),_8314_absk );
  int32_t _8316_n = (int)((_8312_d)->size(0));
  if ((_8313_k >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8317_subi = ::mosek::fusion::Utils::Tools::range((int)0,_8316_n);
      _checked_ptr_1<int32_t> _ptr__8317_subi(_8317_subi ? _8317_subi->raw() : nullptr,_8317_subi ? _8317_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8318_subj = ::mosek::fusion::Utils::Tools::range(_8314_absk,safe_add( _8316_n,_8314_absk ));
      _checked_ptr_1<int32_t> _ptr__8318_subj(_8318_subj ? _8318_subj->raw() : nullptr,_8318_subj ? _8318_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8315_dimi,_8315_dimi,_8317_subi,_8318_subj,_8312_d)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8319_subi = ::mosek::fusion::Utils::Tools::range(_8314_absk,safe_add( _8316_n,_8314_absk ));
      _checked_ptr_1<int32_t> _ptr__8319_subi(_8319_subi ? _8319_subi->raw() : nullptr,_8319_subi ? _8319_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8320_subj = ::mosek::fusion::Utils::Tools::range((int)0,_8316_n);
      _checked_ptr_1<int32_t> _ptr__8320_subj(_8320_subj ? _8320_subj->raw() : nullptr,_8320_subj ? _8320_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8315_dimi,_8315_dimi,_8319_subi,_8320_subj,_8312_d)).as<::mosek::fusion::Matrix>();
    }
  }
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:411:6-414:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8321_d) { return mosek::fusion::p_Matrix::diag(_8321_d); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _8321_d)
{
  _checked_ptr_1<double> _ptr__8321_d(_8321_d ? _8321_d->raw() : nullptr, _8321_d ? _8321_d->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_8321_d,(int)0);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.ones
// Method mosek.fusion.Matrix.ones @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:408:6-83
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones
  ( int32_t _8322_n,
    int32_t _8323_m) { return mosek::fusion::p_Matrix::ones(_8322_n,_8323_m); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int32_t _8322_n,int32_t _8323_m)
{
  return ::mosek::fusion::p_Matrix::dense(_8322_n,_8323_m,1.0);
}
// End mosek.fusion.Matrix.ones

// Begin mosek.fusion.Matrix.eye
// Method mosek.fusion.Matrix.eye @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:398:6-90
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye
  ( int32_t _8324_n) { return mosek::fusion::p_Matrix::eye(_8324_n); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int32_t _8324_n)
{
  std::vector<double> _13056_;
  for (int32_t _8325_i = (int)0, _13057_ = _8324_n; _8325_i < _13057_ ; ++_8325_i)
  {
    _13056_.push_back(1.0);
  }
  auto _13058_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_13056_.size()),_13056_.begin(),_13056_.end()));
  return ::mosek::fusion::p_Matrix::diag(_13058_);
}
// End mosek.fusion.Matrix.eye

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:388:6-114
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8326_other) { return mosek::fusion::p_Matrix::dense(_8326_other); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _8326_other)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8326_other)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:387:6-126
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( int32_t _8327_dimi,
    int32_t _8328_dimj,
    double _8329_value) { return mosek::fusion::p_Matrix::dense(_8327_dimi,_8328_dimj,_8329_value); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int32_t _8327_dimi,int32_t _8328_dimj,double _8329_value)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8327_dimi,_8328_dimj,_8329_value)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:386:6-125
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( int32_t _8330_dimi,
    int32_t _8331_dimj,
    std::shared_ptr< monty::ndarray< double,1 > > _8332_data) { return mosek::fusion::p_Matrix::dense(_8330_dimi,_8331_dimj,_8332_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int32_t _8330_dimi,int32_t _8331_dimj,std::shared_ptr< monty::ndarray< double,1 > > _8332_data)
{
  _checked_ptr_1<double> _ptr__8332_data(_8332_data ? _8332_data->raw() : nullptr, _8332_data ? _8332_data->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8330_dimi,_8331_dimj,_8332_data)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:385:6-113
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( std::shared_ptr< monty::ndarray< double,2 > > _8333_data) { return mosek::fusion::p_Matrix::dense(_8333_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _8333_data)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8333_data)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:374:6-382:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8334_mx) { return mosek::fusion::p_Matrix::sparse(_8334_mx); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _8334_mx)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8335_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8334_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__8335_subi(_8335_subi ? _8335_subi->raw() : nullptr,_8335_subi ? _8335_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8336_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8334_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__8336_subj(_8336_subj ? _8336_subj->raw() : nullptr,_8336_subj ? _8336_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8337_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8334_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__8337_val(_8337_val ? _8337_val->raw() : nullptr,_8337_val ? _8337_val->size(0) : 0);
  _8334_mx->getDataAsTriplets(_8335_subi,_8336_subj,_8337_val);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8334_mx->numRows(),_8334_mx->numColumns(),_8335_subi,_8336_subj,_8337_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:231:6-371:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _8338_blocks) { return mosek::fusion::p_Matrix::sparse(_8338_blocks); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _8338_blocks)
{
  int32_t _8339_maxi = (int)((_8338_blocks)->size(0));
  int32_t _8340_maxj = (int)((((*_8338_blocks)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8341_idims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8339_maxi)));
  _checked_ptr_1<int32_t> _ptr__8341_idims(_8341_idims ? _8341_idims->raw() : nullptr,_8341_idims ? _8341_idims->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8342_jdims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8340_maxj)));
  _checked_ptr_1<int32_t> _ptr__8342_jdims(_8342_jdims ? _8342_jdims->raw() : nullptr,_8342_jdims ? _8342_jdims->size(0) : 0);
  int64_t _8343_nelm = (int64_t)0;
  int32_t _8344_k = (int)0;
  {
    int32_t _8345_i = (int)0;
    for(;(_8345_i < _8339_maxi);++ _8345_i)
    {
      {
        {
          int32_t _8346_j = (int)0;
          for(;(_8346_j < _8340_maxj);++ _8346_j)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _8347_m = ((*((*_8338_blocks)(_8345_i)))(_8346_j));
              if ((NULL != _8347_m.get()))
              {
                {
                  if ((_ptr__8342_jdims[_8346_j] == (int)0))
                  {
                    {
                      _ptr__8342_jdims[_8346_j] = mosek::fusion::p_Matrix::_get_impl(_8347_m)->dimj;
                    }
                  }
                  else if((_ptr__8342_jdims[_8346_j] != mosek::fusion::p_Matrix::_get_impl(_8347_m)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__8341_idims[_8345_i] == (int)0))
                  {
                    {
                      _ptr__8341_idims[_8345_i] = mosek::fusion::p_Matrix::_get_impl(_8347_m)->dimi;
                    }
                  }
                  else if((_ptr__8341_idims[_8345_i] != mosek::fusion::p_Matrix::_get_impl(_8347_m)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _8343_nelm = safe_add( _8343_nelm,_8347_m->numNonzeros() );
                }
              }
              {}
              ++ _8344_k;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _8348_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8343_nelm)));
  _checked_ptr_1<double> _ptr__8348_cof(_8348_cof ? _8348_cof->raw() : nullptr,_8348_cof ? _8348_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8349_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8343_nelm)));
  _checked_ptr_1<int32_t> _ptr__8349_subi(_8349_subi ? _8349_subi->raw() : nullptr,_8349_subi ? _8349_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8350_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8343_nelm)));
  _checked_ptr_1<int32_t> _ptr__8350_subj(_8350_subj ? _8350_subj->raw() : nullptr,_8350_subj ? _8350_subj->size(0) : 0);
  int32_t _8351_dstp = (int)0;
  int32_t _8352_offseti = (int)0;
  {
    int32_t _8353_i = (int)0;
    for(;(_8353_i < _8339_maxi);++ _8353_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8354_lidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8340_maxj)));
        _checked_ptr_1<int32_t> _ptr__8354_lidxs(_8354_lidxs ? _8354_lidxs->raw() : nullptr,_8354_lidxs ? _8354_lidxs->size(0) : 0);
        {
          int32_t _8355_ii = (int)0;
          for(;(_8355_ii < _ptr__8341_idims[_8353_i]);++ _8355_ii)
          {
            {
              int32_t _8356_offsetj = (int)0;
              {
                int32_t _8357_j = (int)0;
                for(;(_8357_j < _8340_maxj);++ _8357_j)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _8358_m_ = ((*((*_8338_blocks)(_8353_i)))(_8357_j));
                    if ((NULL != _8358_m_.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _13059_ = _8358_m_;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_13059_.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _8359_m (dynamic_cast<::mosek::fusion::DenseMatrix*>(_13059_.get()));
                          {
                            int32_t _8362_kk = _ptr__8354_lidxs[_8357_j];
                            {
                              int32_t _8363_jj = (int)0;
                              for(;(_8363_jj < mosek::fusion::p_Matrix::_get_impl(_8359_m)->dimj);++ _8363_jj)
                              {
                                {
                                  _ptr__8348_cof[_8351_dstp] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_8359_m)->data)(_8362_kk));
                                  _ptr__8349_subi[_8351_dstp] = safe_add( _8352_offseti,_8355_ii );
                                  _ptr__8350_subj[_8351_dstp] = safe_add( _8356_offsetj,_8363_jj );
                                  ++ _8362_kk;
                                  ++ _8351_dstp;
                                }
                              }
                            }
                            _ptr__8354_lidxs[_8357_j] = _8362_kk;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_13059_.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _8360_m (dynamic_cast<::mosek::fusion::SparseMatrix*>(_13059_.get()));
                          {
                            int32_t _8364_kk;
                            {
                              _8364_kk = _ptr__8354_lidxs[_8357_j];
                              for(;((_8364_kk < mosek::fusion::p_SparseMatrix::_get_impl(_8360_m)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_8360_m)->subi)(_8364_kk)) == _8355_ii));++ _8364_kk)
                              {
                                {
                                  _ptr__8348_cof[_8351_dstp] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_8360_m)->val)(_8364_kk));
                                  _ptr__8350_subj[_8351_dstp] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_8360_m)->subj)(_8364_kk)),_8356_offsetj );
                                  _ptr__8349_subi[_8351_dstp] = safe_add( _8352_offseti,_8355_ii );
                                  ++ _8351_dstp;
                                }
                              }
                            }
                            _ptr__8354_lidxs[_8357_j] = _8364_kk;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _8361_m = _13059_;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _8356_offsetj = safe_add( _8356_offsetj,_ptr__8342_jdims[_8357_j] );
                  }
                }
              }
            }
          }
        }
        _8352_offseti = safe_add( _8352_offseti,_ptr__8341_idims[_8353_i] );
      }
    }
  }
  int32_t _8365_dimi = (int)0;
  int32_t _8366_dimj = (int)0;
  {
    int32_t _8367_i = (int)0;
    for(;(_8367_i < _8339_maxi);++ _8367_i)
    {
      {
        _8365_dimi = safe_add( _8365_dimi,_ptr__8341_idims[_8367_i] );
      }
    }
  }
  {
    int32_t _8368_j = (int)0;
    for(;(_8368_j < _8340_maxj);++ _8368_j)
    {
      {
        _8366_dimj = safe_add( _8366_dimj,_ptr__8342_jdims[_8368_j] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8365_dimi,_8366_dimj,_8349_subi,_8350_subj,_8348_cof)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:208:6-228:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< double,2 > > _8369_data) { return mosek::fusion::p_Matrix::sparse(_8369_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _8369_data)
{
  int32_t _8370_dimi = (int)((_8369_data)->size(0));
  int32_t _8371_dimj = (int)((_8369_data)->size(1));
  int64_t _8372_nelem = (int64_t)safe_mul( _8370_dimi,_8371_dimj );
  int32_t _8373_k = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8374_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8372_nelem)));
  _checked_ptr_1<int32_t> _ptr__8374_subi(_8374_subi ? _8374_subi->raw() : nullptr,_8374_subi ? _8374_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8375_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8372_nelem)));
  _checked_ptr_1<int32_t> _ptr__8375_subj(_8375_subj ? _8375_subj->raw() : nullptr,_8375_subj ? _8375_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8376_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8372_nelem)));
  _checked_ptr_1<double> _ptr__8376_val(_8376_val ? _8376_val->raw() : nullptr,_8376_val ? _8376_val->size(0) : 0);
  {
    int32_t _8377_i = (int)0;
    for(;(_8377_i < _8370_dimi);++ _8377_i)
    {
      {
        {
          int32_t _8378_j = (int)0;
          for(;(_8378_j < _8371_dimj);++ _8378_j)
          {
            {
              _ptr__8374_subi[_8373_k] = _8377_i;
              _ptr__8375_subj[_8373_k] = _8378_j;
              _ptr__8376_val[_8373_k] = ((*_8369_data)(_8377_i,_8378_j));
              ++ _8373_k;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8370_dimi,_8371_dimj,_8374_subi,_8375_subj,_8376_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:202:6-205:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8379_nrow,
    int32_t _8380_ncol) { return mosek::fusion::p_Matrix::sparse(_8379_nrow,_8380_ncol); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8379_nrow,int32_t _8380_ncol)
{
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8379_nrow,_8380_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(int64_t)0)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:188:6-199:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8381_nrow,
    int32_t _8382_ncol,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8383_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8384_subj,
    double _8385_val) { return mosek::fusion::p_Matrix::sparse(_8381_nrow,_8382_ncol,_8383_subi,_8384_subj,_8385_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8381_nrow,int32_t _8382_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > > _8383_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8384_subj,double _8385_val)
{
  _checked_ptr_1<int32_t> _ptr__8383_subi(_8383_subi ? _8383_subi->raw() : nullptr, _8383_subi ? _8383_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8384_subj(_8384_subj ? _8384_subj->raw() : nullptr, _8384_subj ? _8384_subj->size(0) : 0);
  int32_t _8386_sz = (int)0;
  if ((NULL != _8383_subi.get()))
  {
    {
      _8386_sz = (int)((_8383_subi)->size(0));
    }
  }
  else if((NULL != _8384_subj.get()))
  {
    {
      _8386_sz = (int)((_8384_subj)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_8381_nrow,_8382_ncol,_8383_subi,_8384_subj,::mosek::fusion::Utils::Tools::makevector(_8385_val,_8386_sz));
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:170:6-185:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8387_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8388_subj,
    double _8389_val) { return mosek::fusion::p_Matrix::sparse(_8387_subi,_8388_subj,_8389_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _8387_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8388_subj,double _8389_val)
{
  _checked_ptr_1<int32_t> _ptr__8387_subi(_8387_subi ? _8387_subi->raw() : nullptr, _8387_subi ? _8387_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8388_subj(_8388_subj ? _8388_subj->raw() : nullptr, _8388_subj ? _8388_subj->size(0) : 0);
  int32_t _8390_maxj = (int)0;
  int32_t _8391_maxi = (int)0;
  int32_t _8392_num = (int)((_8387_subi)->size(0));
  if ((_8392_num > (int)((_8388_subj)->size(0))))
  {
    {
      _8392_num = (int)((_8388_subj)->size(0));
    }
  }
  {}
  int32_t _13060_ = (int)0;
  int32_t _13061_ = _8392_num;
  for (int32_t _8393_i = _13060_; _8393_i < _13061_; ++_8393_i)
  {
    {
      if ((_8391_maxi < _ptr__8387_subi[_8393_i]))
      {
        {
          _8391_maxi = _ptr__8387_subi[_8393_i];
        }
      }
      {}
      if ((_8390_maxj < _ptr__8388_subj[_8393_i]))
      {
        {
          _8390_maxj = _ptr__8388_subj[_8393_i];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _8391_maxi,(int)1 ),safe_add( _8390_maxj,(int)1 ),_8387_subi,_8388_subj,_8389_val);
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:151:6-167:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8394_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8395_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _8396_val) { return mosek::fusion::p_Matrix::sparse(_8394_subi,_8395_subj,_8396_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _8394_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8395_subj,std::shared_ptr< monty::ndarray< double,1 > > _8396_val)
{
  _checked_ptr_1<int32_t> _ptr__8394_subi(_8394_subi ? _8394_subi->raw() : nullptr, _8394_subi ? _8394_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8395_subj(_8395_subj ? _8395_subj->raw() : nullptr, _8395_subj ? _8395_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8396_val(_8396_val ? _8396_val->raw() : nullptr, _8396_val ? _8396_val->size(0) : 0);
  int32_t _8397_maxj = (int)0;
  int32_t _8398_maxi = (int)0;
  int32_t _8399_num = (int)((_8394_subi)->size(0));
  if ((_8399_num > (int)((_8395_subj)->size(0))))
  {
    {
      _8399_num = (int)((_8395_subj)->size(0));
    }
  }
  {}
  if ((_8399_num > (int)((_8396_val)->size(0))))
  {
    {
      _8399_num = (int)((_8396_val)->size(0));
    }
  }
  {}
  int32_t _13062_ = (int)0;
  int32_t _13063_ = _8399_num;
  for (int32_t _8400_i = _13062_; _8400_i < _13063_; ++_8400_i)
  {
    {
      if ((_8398_maxi < _ptr__8394_subi[_8400_i]))
      {
        {
          _8398_maxi = _ptr__8394_subi[_8400_i];
        }
      }
      {}
      if ((_8397_maxj < _ptr__8395_subj[_8400_i]))
      {
        {
          _8397_maxj = _ptr__8395_subj[_8400_i];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _8398_maxi,(int)1 ),safe_add( _8397_maxj,(int)1 ),_8394_subi,_8395_subj,_8396_val);
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:128:6-148:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8401_nrow,
    int32_t _8402_ncol,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8403_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8404_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _8405_val) { return mosek::fusion::p_Matrix::sparse(_8401_nrow,_8402_ncol,_8403_subi,_8404_subj,_8405_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8401_nrow,int32_t _8402_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > > _8403_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8404_subj,std::shared_ptr< monty::ndarray< double,1 > > _8405_val)
{
  _checked_ptr_1<int32_t> _ptr__8403_subi(_8403_subi ? _8403_subi->raw() : nullptr, _8403_subi ? _8403_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8404_subj(_8404_subj ? _8404_subj->raw() : nullptr, _8404_subj ? _8404_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8405_val(_8405_val ? _8405_val->raw() : nullptr, _8405_val ? _8405_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _13064_;
  bool _13065_ = (NULL != _8405_val.get());
  if (_13065_)
  {
    _13064_ = _8405_val;
  }
  else
  {
    _13064_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _8406_vl = _13064_;
  _checked_ptr_1<double> _ptr__8406_vl(_8406_vl ? _8406_vl->raw() : nullptr,_8406_vl ? _8406_vl->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _13066_;
  bool _13067_ = (NULL != _8404_subj.get());
  if (_13067_)
  {
    _13066_ = _8404_subj;
  }
  else
  {
    _13066_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8407_sj = _13066_;
  _checked_ptr_1<int32_t> _ptr__8407_sj(_8407_sj ? _8407_sj->raw() : nullptr,_8407_sj ? _8407_sj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _13068_;
  bool _13069_ = (NULL != _8403_subi.get());
  if (_13069_)
  {
    _13068_ = _8403_subi;
  }
  else
  {
    _13068_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8408_si = _13068_;
  _checked_ptr_1<int32_t> _ptr__8408_si(_8408_si ? _8408_si->raw() : nullptr,_8408_si ? _8408_si->size(0) : 0);
  int64_t _8409_nnz = (int64_t)((_8408_si)->size(0));
  if ((((int64_t)((_8407_sj)->size(0)) != _8409_nnz) || ((int64_t)((_8406_vl)->size(0)) != _8409_nnz)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8401_nrow,_8402_ncol,_8408_si,_8407_sj,_8406_vl,_8409_nnz)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.get
// End mosek.fusion.Matrix.get

// Begin mosek.fusion.Matrix.isSparse
// End mosek.fusion.Matrix.isSparse

// Begin mosek.fusion.Matrix.getDataAsArray
// End mosek.fusion.Matrix.getDataAsArray

// Begin mosek.fusion.Matrix.getDataAsTriplets
// End mosek.fusion.Matrix.getDataAsTriplets

// Begin mosek.fusion.Matrix.transpose
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
// End mosek.fusion.Matrix.transpose

// Begin mosek.fusion.Matrix.numNonzeros
// End mosek.fusion.Matrix.numNonzeros

// Begin mosek.fusion.Matrix.numColumns
// Method mosek.fusion.Matrix.numColumns @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:79:6-54
int32_t mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }
int32_t mosek::fusion::p_Matrix::numColumns()
{
  return dimj;
}
// End mosek.fusion.Matrix.numColumns

// Begin mosek.fusion.Matrix.numRows
// Method mosek.fusion.Matrix.numRows @ bld/docker-rockylinux-8/final/default/src/fusion/Matrix.mbi:75:6-51
int32_t mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }
int32_t mosek::fusion::p_Matrix::numRows()
{
  return dimi;
}
// End mosek.fusion.Matrix.numRows

void mosek::fusion::p_Matrix::destroy()
{
}
void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }
// } class Matrix
// class UnimplementedError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:284:4-292:5
// mosek.fusion.UnimplementedError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:288:8-291:9
mosek::fusion::UnimplementedError::UnimplementedError
  ( const std::string &  _8415_msg)
 : RuntimeException(_8415_msg)
  {
  }
// mosek.fusion.UnimplementedError.ctor

// } class UnimplementedError
// class FatalError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:273:4-281:5
// mosek.fusion.FatalError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:277:8-280:9
mosek::fusion::FatalError::FatalError
  ( const std::string &  _8416_msg)
 : RuntimeException(_8416_msg)
  {
  }
// mosek.fusion.FatalError.ctor

// } class FatalError
// class UnexpectedError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:257:4-270:5
// mosek.fusion.UnexpectedError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:266:8-269:9
mosek::fusion::UnexpectedError::UnexpectedError
  ( ::mosek::fusion::FusionException _8417_e)
 : RuntimeException(_8417_e.toString())
  {
  }
// mosek.fusion.UnexpectedError.ctor

// mosek.fusion.UnexpectedError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:261:8-264:9
mosek::fusion::UnexpectedError::UnexpectedError
  ( const std::string &  _8418_msg)
 : RuntimeException(_8418_msg)
  {
  }
// mosek.fusion.UnexpectedError.ctor

// } class UnexpectedError
// class SparseFormatError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:245:4-253:5
// mosek.fusion.SparseFormatError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:249:8-252:9
mosek::fusion::SparseFormatError::SparseFormatError
  ( const std::string &  _8419_msg)
 : mosek::fusion::FusionRuntimeException(_8419_msg)
  {
  }
// mosek.fusion.SparseFormatError.ctor

// } class SparseFormatError
// class SolutionError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:229:4-242:5
// mosek.fusion.SolutionError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:238:8-241:9
mosek::fusion::SolutionError::SolutionError
  ( )
 : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))
  {
  }
// mosek.fusion.SolutionError.ctor

// mosek.fusion.SolutionError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:233:8-236:9
mosek::fusion::SolutionError::SolutionError
  ( const std::string &  _8420_msg)
 : mosek::fusion::FusionException(_8420_msg)
  {
  }
// mosek.fusion.SolutionError.ctor

// } class SolutionError
// class SliceError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:213:4-226:5
// mosek.fusion.SliceError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:222:8-225:9
mosek::fusion::SliceError::SliceError
  ( )
 : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))
  {
  }
// mosek.fusion.SliceError.ctor

// mosek.fusion.SliceError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:217:8-220:9
mosek::fusion::SliceError::SliceError
  ( const std::string &  _8421_msg)
 : mosek::fusion::FusionRuntimeException(_8421_msg)
  {
  }
// mosek.fusion.SliceError.ctor

// } class SliceError
// class UpdateError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:196:4-209:5
// mosek.fusion.UpdateError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:205:8-208:9
mosek::fusion::UpdateError::UpdateError
  ( )
 : mosek::fusion::FusionRuntimeException(std::string ("Cannot update parameterized item"))
  {
  }
// mosek.fusion.UpdateError.ctor

// mosek.fusion.UpdateError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:200:8-203:9
mosek::fusion::UpdateError::UpdateError
  ( const std::string &  _8422_msg)
 : mosek::fusion::FusionRuntimeException(_8422_msg)
  {
  }
// mosek.fusion.UpdateError.ctor

// } class UpdateError
// class SetDefinitionError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:185:4-193:5
// mosek.fusion.SetDefinitionError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:189:8-192:9
mosek::fusion::SetDefinitionError::SetDefinitionError
  ( const std::string &  _8423_msg)
 : mosek::fusion::FusionRuntimeException(_8423_msg)
  {
  }
// mosek.fusion.SetDefinitionError.ctor

// } class SetDefinitionError
// class OptimizeError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:173:4-181:5
// mosek.fusion.OptimizeError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:177:8-180:9
mosek::fusion::OptimizeError::OptimizeError
  ( const std::string &  _8424_msg)
 : mosek::fusion::FusionRuntimeException(_8424_msg)
  {
  }
// mosek.fusion.OptimizeError.ctor

// } class OptimizeError
// class NameError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:162:4-170:5
// mosek.fusion.NameError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:166:8-169:9
mosek::fusion::NameError::NameError
  ( const std::string &  _8425_msg)
 : mosek::fusion::FusionRuntimeException(_8425_msg)
  {
  }
// mosek.fusion.NameError.ctor

// } class NameError
// class DeletionError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:151:4-159:5
// mosek.fusion.DeletionError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:155:8-158:9
mosek::fusion::DeletionError::DeletionError
  ( const std::string &  _8426_msg)
 : mosek::fusion::FusionRuntimeException(_8426_msg)
  {
  }
// mosek.fusion.DeletionError.ctor

// } class DeletionError
// class ModelError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:138:4-147:5
// mosek.fusion.ModelError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:143:8-146:9
mosek::fusion::ModelError::ModelError
  ( const std::string &  _8427_msg)
 : mosek::fusion::FusionRuntimeException(_8427_msg)
  {
  }
// mosek.fusion.ModelError.ctor

// } class ModelError
// class MatrixError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:128:4-133:5
// mosek.fusion.MatrixError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:132:8-55
mosek::fusion::MatrixError::MatrixError
  ( const std::string &  _8428_msg)
 : mosek::fusion::FusionRuntimeException(_8428_msg)
  {
  }
// mosek.fusion.MatrixError.ctor

// } class MatrixError
// class DimensionError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:117:4-122:5
// mosek.fusion.DimensionError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:121:8-56
mosek::fusion::DimensionError::DimensionError
  ( const std::string &  _8429_msg)
 : mosek::fusion::FusionRuntimeException(_8429_msg)
  {
  }
// mosek.fusion.DimensionError.ctor

// } class DimensionError
// class LengthError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:105:4-110:5
// mosek.fusion.LengthError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:109:8-56
mosek::fusion::LengthError::LengthError
  ( const std::string &  _8430_msg)
 : mosek::fusion::FusionRuntimeException(_8430_msg)
  {
  }
// mosek.fusion.LengthError.ctor

// } class LengthError
// class RangeError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:96:4-100:5
// mosek.fusion.RangeError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:99:8-56
mosek::fusion::RangeError::RangeError
  ( const std::string &  _8431_msg)
 : mosek::fusion::FusionRuntimeException(_8431_msg)
  {
  }
// mosek.fusion.RangeError.ctor

// } class RangeError
// class IndexError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:88:4-93:5
// mosek.fusion.IndexError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:92:8-56
mosek::fusion::IndexError::IndexError
  ( const std::string &  _8432_msg)
 : mosek::fusion::FusionRuntimeException(_8432_msg)
  {
  }
// mosek.fusion.IndexError.ctor

// } class IndexError
// class DomainError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:80:4-85:5
// mosek.fusion.DomainError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:84:6-54
mosek::fusion::DomainError::DomainError
  ( const std::string &  _8433_msg)
 : mosek::fusion::FusionRuntimeException(_8433_msg)
  {
  }
// mosek.fusion.DomainError.ctor

// } class DomainError
// class ValueConversionError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:68:4-76:5
// mosek.fusion.ValueConversionError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:72:6-75:7
mosek::fusion::ValueConversionError::ValueConversionError
  ( const std::string &  _8434_msg)
 : mosek::fusion::FusionRuntimeException(_8434_msg)
  {
  }
// mosek.fusion.ValueConversionError.ctor

// } class ValueConversionError
// class ParameterError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:57:4-65:5
// mosek.fusion.ParameterError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:61:6-64:7
mosek::fusion::ParameterError::ParameterError
  ( const std::string &  _8435_msg)
 : mosek::fusion::FusionRuntimeException(_8435_msg)
  {
  }
// mosek.fusion.ParameterError.ctor

// } class ParameterError
// class ExpressionError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:46:4-54:5
// mosek.fusion.ExpressionError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:50:6-53:7
mosek::fusion::ExpressionError::ExpressionError
  ( const std::string &  _8436_msg)
 : mosek::fusion::FusionRuntimeException(_8436_msg)
  {
  }
// mosek.fusion.ExpressionError.ctor

// } class ExpressionError
// class IOError { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:38:4-43:5
// mosek.fusion.IOError.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:42:8-56
mosek::fusion::IOError::IOError
  ( const std::string &  _8437_msg)
 : mosek::fusion::FusionRuntimeException(_8437_msg)
  {
  }
// mosek.fusion.IOError.ctor

// } class IOError
// class FusionRuntimeException { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:24:4-34:5
// mosek.fusion.FusionRuntimeException.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:28:6-68
mosek::fusion::FusionRuntimeException::FusionRuntimeException
  ( const std::string &  _8438_msg_)
 : RuntimeException(_8438_msg_)
  {
    msg = _8438_msg_;
  }
// mosek.fusion.FusionRuntimeException.ctor

// Begin mosek.fusion.FusionRuntimeException.toString
// Method mosek.fusion.FusionRuntimeException.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:33:6-53
std::string mosek::fusion::FusionRuntimeException::toString()
{
  return msg;
}
// End mosek.fusion.FusionRuntimeException.toString

// } class FusionRuntimeException
// class FusionException { // @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:9:4-18:5
// mosek.fusion.FusionException.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:13:6-67
mosek::fusion::FusionException::FusionException
  ( const std::string &  _8439_msg_)
 : Exception(_8439_msg_)
  {
    msg = _8439_msg_;
  }
// mosek.fusion.FusionException.ctor

// Begin mosek.fusion.FusionException.toString
// Method mosek.fusion.FusionException.toString @ bld/docker-rockylinux-8/final/default/src/fusion/Errors.mbi:17:6-53
std::string mosek::fusion::FusionException::toString()
{
  return msg;
}
// End mosek.fusion.FusionException.toString

// } class FusionException
// class LinkedBlocks { // @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:204:4-271:5
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinkedBlocks::p_LinkedBlocks
  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinkedBlocks.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:225:6-32
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  ()
{ return new mosek::fusion::LinkedBlocks(); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  () : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }
void mosek::fusion::p_LinkedBlocks::_initialize  ()
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}
// mosek.fusion.LinkedBlocks.ctor

// mosek.fusion.LinkedBlocks.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:217:6-223:7
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  (int32_t _8440_n)
{ return new mosek::fusion::LinkedBlocks(_8440_n); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  (int32_t _8440_n) : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_8440_n); }
void mosek::fusion::p_LinkedBlocks::_initialize  (int32_t _8440_n)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    int32_t _8441_basesize = (int)128;
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_8440_n);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_8441_basesize);
    bsize = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8441_basesize)));
    bfirst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8441_basesize)));
  }
}
// mosek.fusion.LinkedBlocks.ctor

// mosek.fusion.LinkedBlocks.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:210:6-215:7
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8442_other)
{ return new mosek::fusion::LinkedBlocks(_8442_other); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8442_other) : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_8442_other); }
void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8442_other)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_8442_other)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_8442_other)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_8442_other)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_8442_other)->bfirst);
  }
}
// mosek.fusion.LinkedBlocks.ctor

// Begin mosek.fusion.LinkedBlocks.free
// Method mosek.fusion.LinkedBlocks.free @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:264:6-270:7
void mosek::fusion::LinkedBlocks :: free(int32_t _8443_bkey) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_8443_bkey); }
void mosek::fusion::p_LinkedBlocks::free(int32_t _8443_bkey)
{
  int32_t _8444_key = ((*bfirst)(_8443_bkey));
  ints->free(_8444_key,((*bsize)(_8443_bkey)));
  ((*bsize)(_8443_bkey)) = (-(int)1);
  ((*bfirst)(_8443_bkey)) = (-(int)1);
  blocks->free(_8443_bkey,(int)1);
}
// End mosek.fusion.LinkedBlocks.free

// Begin mosek.fusion.LinkedBlocks.alloc
// Method mosek.fusion.LinkedBlocks.alloc @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:246:6-262:7
int32_t mosek::fusion::LinkedBlocks :: alloc(int32_t _8445_size) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_8445_size); }
int32_t mosek::fusion::p_LinkedBlocks::alloc(int32_t _8445_size)
{
  int32_t _13070_;
  bool _13071_ = (_8445_size > (int)0);
  if (_13071_)
  {
    _13070_ = ints->alloc(_8445_size);
  }
  else
  {
    _13070_ = (-(int)1);
  }
  int32_t _8446_key = _13070_;
  int32_t _8447_bkey = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8448_nbsize = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__8448_nbsize(_8448_nbsize ? _8448_nbsize->raw() : nullptr,_8448_nbsize ? _8448_nbsize->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8449_nbfirst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__8449_nbfirst(_8449_nbfirst ? _8449_nbfirst->raw() : nullptr,_8449_nbfirst ? _8449_nbfirst->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_8448_nbsize,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_8449_nbfirst,(int)0,(int)((bfirst)->size(0)));
      bsize = _8448_nbsize;
      bfirst = _8449_nbfirst;
    }
  }
  {}
  ((*bfirst)(_8447_bkey)) = _8446_key;
  ((*bsize)(_8447_bkey)) = _8445_size;
  return _8447_bkey;
}
// End mosek.fusion.LinkedBlocks.alloc

// Begin mosek.fusion.LinkedBlocks.maxidx
// Method mosek.fusion.LinkedBlocks.maxidx @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:242:6-244:7
int32_t mosek::fusion::LinkedBlocks :: maxidx(int32_t _8450_bkey) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_8450_bkey); }
int32_t mosek::fusion::p_LinkedBlocks::maxidx(int32_t _8450_bkey)
{
  return ints->maxidx(((*bfirst)(_8450_bkey)),((*bsize)(_8450_bkey)));
}
// End mosek.fusion.LinkedBlocks.maxidx

// Begin mosek.fusion.LinkedBlocks.numallocated
// Method mosek.fusion.LinkedBlocks.numallocated @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:240:6-72
int32_t mosek::fusion::LinkedBlocks :: numallocated() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numallocated(); }
int32_t mosek::fusion::p_LinkedBlocks::numallocated()
{
  return ints->numallocated();
}
// End mosek.fusion.LinkedBlocks.numallocated

// Begin mosek.fusion.LinkedBlocks.get
// Method mosek.fusion.LinkedBlocks.get @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:234:6-238:7
void mosek::fusion::LinkedBlocks :: get(int32_t _8451_bkey,std::shared_ptr< monty::ndarray< int32_t,1 > > _8452_target,int32_t _8453_offset) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_8451_bkey,_8452_target,_8453_offset); }
void mosek::fusion::p_LinkedBlocks::get(int32_t _8451_bkey,std::shared_ptr< monty::ndarray< int32_t,1 > > _8452_target,int32_t _8453_offset)
{
  _checked_ptr_1<int32_t> _ptr__8452_target(_8452_target ? _8452_target->raw() : nullptr, _8452_target ? _8452_target->size(0) : 0);
  ints->get(((*bfirst)(_8451_bkey)),((*bsize)(_8451_bkey)),_8452_target,_8453_offset);
}
// End mosek.fusion.LinkedBlocks.get

// Begin mosek.fusion.LinkedBlocks.numblocks
// Method mosek.fusion.LinkedBlocks.numblocks @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:232:6-60
int32_t mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }
int32_t mosek::fusion::p_LinkedBlocks::numblocks()
{
  return (int)((bsize)->size(0));
}
// End mosek.fusion.LinkedBlocks.numblocks

// Begin mosek.fusion.LinkedBlocks.blocksize
// Method mosek.fusion.LinkedBlocks.blocksize @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:231:6-71
int32_t mosek::fusion::LinkedBlocks :: blocksize(int32_t _8454_bkey) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_8454_bkey); }
int32_t mosek::fusion::p_LinkedBlocks::blocksize(int32_t _8454_bkey)
{
  return ((*bsize)(_8454_bkey));
}
// End mosek.fusion.LinkedBlocks.blocksize

// Begin mosek.fusion.LinkedBlocks.block_capacity
// Method mosek.fusion.LinkedBlocks.block_capacity @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:230:6-73
int32_t mosek::fusion::LinkedBlocks :: block_capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->block_capacity(); }
int32_t mosek::fusion::p_LinkedBlocks::block_capacity()
{
  return blocks->capacity();
}
// End mosek.fusion.LinkedBlocks.block_capacity

// Begin mosek.fusion.LinkedBlocks.capacity
// Method mosek.fusion.LinkedBlocks.capacity @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:229:6-65
int32_t mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_LinkedBlocks::capacity()
{
  return ints->capacity();
}
// End mosek.fusion.LinkedBlocks.capacity

// Begin mosek.fusion.LinkedBlocks.validate
// Method mosek.fusion.LinkedBlocks.validate @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:227:6-86
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }
bool mosek::fusion::p_LinkedBlocks::validate()
{
  return (ints->validate() && blocks->validate());
}
// End mosek.fusion.LinkedBlocks.validate

void mosek::fusion::p_LinkedBlocks::destroy()
{
bfirst.reset();
bsize.reset();
blocks.reset();
ints.reset();
}
void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }
// } class LinkedBlocks
// class LinkedInts { // @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:4:4-201:5
mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinkedInts::p_LinkedInts
  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinkedInts.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:73:6-85:7
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  (int32_t _8455_cap_)
{ return new mosek::fusion::LinkedInts(_8455_cap_); }
mosek::fusion::LinkedInts::LinkedInts
  (int32_t _8455_cap_) : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_8455_cap_); }
void mosek::fusion::p_LinkedInts::_initialize  (int32_t _8455_cap_)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    int32_t _13072_;
    bool _13073_ = (_8455_cap_ > (int)0);
    if (_13073_)
    {
      _13072_ = _8455_cap_;
    }
    else
    {
      _13072_ = (int)128;
    }
    int32_t _8456_cap = _13072_;
    next = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8456_cap)));
    prev = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8456_cap)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_8456_cap - (int)1);
    int32_t _13074_ = (int)1;
    int32_t _13075_ = _8456_cap;
    for (int32_t _8457_i = _13074_; _8457_i < _13075_; ++_8457_i)
    {
      {
        ((*prev)(_8457_i)) = (_8457_i - (int)1);
        ((*next)((_8457_i - (int)1))) = _8457_i;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_8456_cap - (int)1))) = (-(int)1);
    nfree = _8456_cap;
  }
}
// mosek.fusion.LinkedInts.ctor

// mosek.fusion.LinkedInts.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:71:6-34
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  ()
{ return new mosek::fusion::LinkedInts(); }
mosek::fusion::LinkedInts::LinkedInts
  () : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }
void mosek::fusion::p_LinkedInts::_initialize  ()
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}
// mosek.fusion.LinkedInts.ctor

// mosek.fusion.LinkedInts.ctor @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:62:6-69:7
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8458_other)
{ return new mosek::fusion::LinkedInts(_8458_other); }
mosek::fusion::LinkedInts::LinkedInts
  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8458_other) : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_8458_other); }
void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8458_other)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_8458_other)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_8458_other)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_8458_other)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_8458_other)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_8458_other)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_8458_other)->nfree;
  }
}
// mosek.fusion.LinkedInts.ctor

// Begin mosek.fusion.LinkedInts.free
// Method mosek.fusion.LinkedInts.free @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:181:6-200:7
void mosek::fusion::LinkedInts :: free(int32_t _8459_i,int32_t _8460_num) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_8459_i,_8460_num); }
void mosek::fusion::p_LinkedInts::free(int32_t _8459_i,int32_t _8460_num)
{
  int32_t _8461_i0 = _8459_i;
  int32_t _8462_i1 = _8461_i0;
  int32_t _13076_ = (int)0;
  int32_t _13077_ = (_8460_num - (int)1);
  for (int32_t _8463_k = _13076_; _8463_k < _13077_; ++_8463_k)
  {
    {
      _8462_i1 = ((*next)(_8462_i1));
    }
  }
  int32_t _8464_p0 = ((*prev)(_8461_i0));
  int32_t _8465_n1 = ((*next)(_8462_i1));
  if ((_8464_p0 >= (int)0))
  {
    {
      ((*next)(_8464_p0)) = _8465_n1;
    }
  }
  else
  {
    {
      first_used = _8465_n1;
    }
  }
  if ((_8465_n1 >= (int)0))
  {
    {
      ((*prev)(_8465_n1)) = _8464_p0;
    }
  }
  {}
  ((*prev)(_8461_i0)) = (-(int)1);
  ((*next)(_8462_i1)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _8462_i1;
    }
  }
  {}
  first_free = _8461_i0;
  if ((last_free < (int)0))
  {
    {
      last_free = _8462_i1;
    }
  }
  {}
  nfree += _8460_num;
}
// End mosek.fusion.LinkedInts.free

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:177:6-179:7
int32_t mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }
int32_t mosek::fusion::p_LinkedInts::alloc()
{
  return allocblock((int)1);
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:173:6-175:7
int32_t mosek::fusion::LinkedInts :: alloc(int32_t _8466_n) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_8466_n); }
int32_t mosek::fusion::p_LinkedInts::alloc(int32_t _8466_n)
{
  return allocblock(_8466_n);
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:165:6-171:7
void mosek::fusion::LinkedInts :: alloc(int32_t _8467_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8468_target,int32_t _8469_offset) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_8467_num,_8468_target,_8469_offset); }
void mosek::fusion::p_LinkedInts::alloc(int32_t _8467_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8468_target,int32_t _8469_offset)
{
  _checked_ptr_1<int32_t> _ptr__8468_target(_8468_target ? _8468_target->raw() : nullptr, _8468_target ? _8468_target->size(0) : 0);
  int32_t _8470_i = allocblock(_8467_num);
  int32_t _13078_ = (int)0;
  int32_t _13079_ = _8467_num;
  for (int32_t _8471_j = _13078_; _8471_j < _13079_; ++_8471_j)
  {
    {
      _ptr__8468_target[safe_add( _8471_j,_8469_offset )] = _8470_i;
      _8470_i = ((*next)(_8470_i));
    }
  }
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.get
// Method mosek.fusion.LinkedInts.get @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:157:6-163:7
void mosek::fusion::LinkedInts :: get(int32_t _8472_i,int32_t _8473_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8474_target,int32_t _8475_offset) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_8472_i,_8473_num,_8474_target,_8475_offset); }
void mosek::fusion::p_LinkedInts::get(int32_t _8472_i,int32_t _8473_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8474_target,int32_t _8475_offset)
{
  _checked_ptr_1<int32_t> _ptr__8474_target(_8474_target ? _8474_target->raw() : nullptr, _8474_target ? _8474_target->size(0) : 0);
  int32_t _8476_ii = _8472_i;
  int32_t _13080_ = (int)0;
  int32_t _13081_ = _8473_num;
  for (int32_t _8477_j = _13080_; _8477_j < _13081_; ++_8477_j)
  {
    {
      _ptr__8474_target[safe_add( _8477_j,_8475_offset )] = _8476_ii;
      _8476_ii = ((*next)(_8476_ii));
    }
  }
}
// End mosek.fusion.LinkedInts.get

// Begin mosek.fusion.LinkedInts.numallocated
// Method mosek.fusion.LinkedInts.numallocated @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:155:6-68
int32_t mosek::fusion::LinkedInts :: numallocated() { return mosek::fusion::p_LinkedInts::_get_impl(this)->numallocated(); }
int32_t mosek::fusion::p_LinkedInts::numallocated()
{
  return ((int)((next)->size(0)) - nfree);
}
// End mosek.fusion.LinkedInts.numallocated

// Begin mosek.fusion.LinkedInts.maxidx
// Method mosek.fusion.LinkedInts.maxidx @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:144:6-152:7
int32_t mosek::fusion::LinkedInts :: maxidx(int32_t _8478_i,int32_t _8479_num) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_8478_i,_8479_num); }
int32_t mosek::fusion::p_LinkedInts::maxidx(int32_t _8478_i,int32_t _8479_num)
{
  int32_t _8480_maxi = _8478_i;
  int32_t _8481_ii = _8478_i;
  int32_t _13082_ = (int)1;
  int32_t _13083_ = _8479_num;
  for (int32_t _8482_j = _13082_; _8482_j < _13083_; ++_8482_j)
  {
    {
      _8481_ii = ((*next)(_8481_ii));
      if ((_8480_maxi < _8481_ii))
      {
        {
          _8480_maxi = _8481_ii;
        }
      }
      {}
    }
  }
  return _8480_maxi;
}
// End mosek.fusion.LinkedInts.maxidx

// Begin mosek.fusion.LinkedInts.allocblock
// Method mosek.fusion.LinkedInts.allocblock @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:116:6-141:7
int32_t mosek::fusion::p_LinkedInts::allocblock(int32_t _8483_num)
{
  int32_t _8484_cap = (int)((next)->size(0));
  if ((nfree < _8483_num))
  {
    {
      int32_t _8485_nalloc = (_8483_num - nfree);
      if ((_8485_nalloc < _8484_cap))
      {
        {
          _8485_nalloc = _8484_cap;
        }
      }
      {}
      recap(safe_add( _8485_nalloc,_8484_cap ));
    }
  }
  {}
  int32_t _8486_i0 = first_free;
  int32_t _8487_i1 = _8486_i0;
  int32_t _13084_ = (int)0;
  int32_t _13085_ = (_8483_num - (int)1);
  for (int32_t _8488_i = _13084_; _8488_i < _13085_; ++_8488_i)
  {
    {
      _8487_i1 = ((*next)(_8487_i1));
    }
  }
  first_free = ((*next)(_8487_i1));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_8487_i1)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _8487_i1;
    }
  }
  {}
  first_used = _8486_i0;
  nfree -= _8483_num;
  return _8486_i0;
}
// End mosek.fusion.LinkedInts.allocblock

// Begin mosek.fusion.LinkedInts.recap
// Method mosek.fusion.LinkedInts.recap @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:89:6-113:7
void mosek::fusion::p_LinkedInts::recap(int32_t _8489_ncap)
{
  int32_t _8490_cap = (int)((next)->size(0));
  if ((_8489_ncap > _8490_cap))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_8489_ncap);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_8489_ncap);
      int32_t _13086_ = _8490_cap;
      int32_t _13087_ = (_8489_ncap - (int)1);
      for (int32_t _8491_i = _13086_; _8491_i < _13087_; ++_8491_i)
      {
        {
          ((*next)(_8491_i)) = safe_add( _8491_i,(int)1 );
          ((*prev)(safe_add( _8491_i,(int)1 ))) = _8491_i;
        }
      }
      ((*next)((_8489_ncap - (int)1))) = (-(int)1);
      ((*prev)(_8490_cap)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _8490_cap;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _8490_cap;
        }
      }
      last_free = (_8489_ncap - (int)1);
      nfree += (_8489_ncap - _8490_cap);
    }
  }
  {}
}
// End mosek.fusion.LinkedInts.recap

// Begin mosek.fusion.LinkedInts.capacity
// Method mosek.fusion.LinkedInts.capacity @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:87:6-58
int32_t mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_LinkedInts::capacity()
{
  return (int)((next)->size(0));
}
// End mosek.fusion.LinkedInts.capacity

// Begin mosek.fusion.LinkedInts.validate
// Method mosek.fusion.LinkedInts.validate @ bld/docker-rockylinux-8/final/default/src/fusion/LinkedList.monty:16:6-60:7
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }
bool mosek::fusion::p_LinkedInts::validate()
{
  std::shared_ptr< monty::ndarray< bool,1 > > _8492_flags = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int32_t _8493_p = first_used;
  while ( (_8493_p >= (int)0) )
  {
    {
      ((*_8492_flags)(_8493_p)) = true;
      _8493_p = ((*next)(_8493_p));
      if (((_8493_p >= (int)0) && ((*_8492_flags)(_8493_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _8493_p = first_free;
  int32_t _8494_n = (int)0;
  while ( (_8493_p >= (int)0) )
  {
    {
      ++ _8494_n;
      ((*_8492_flags)(_8493_p)) = true;
      _8493_p = ((*next)(_8493_p));
      if (((_8493_p >= (int)0) && ((*_8492_flags)(_8493_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8494_n != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int32_t _13088_ = (int)0;
  int32_t _13089_ = (int)((_8492_flags)->size(0));
  for (int32_t _8495_i = _13088_; _8495_i < _13089_; ++_8495_i)
  {
    {
      if ((!((*_8492_flags)(_8493_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int32_t _13090_ = (int)0;
  int32_t _13091_ = (int)((_8492_flags)->size(0));
  for (int32_t _8496_i = _13090_; _8496_i < _13091_; ++_8496_i)
  {
    {
      ((*_8492_flags)(_8496_i)) = false;
    }
  }
  _8493_p = last_free;
  int32_t _8497_n = (int)0;
  while ( (_8493_p >= (int)0) )
  {
    {
      ++ _8497_n;
      ((*_8492_flags)(_8493_p)) = true;
      _8493_p = ((*prev)(_8493_p));
      if (((_8493_p >= (int)0) && ((*_8492_flags)(_8493_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8497_n != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
// End mosek.fusion.LinkedInts.validate

void mosek::fusion::p_LinkedInts::destroy()
{
prev.reset();
next.reset();
}
void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }
// } class LinkedInts
// class Parameters { // @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:4:4-6672:4
mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Parameters::p_Parameters
  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:5143:0-6669:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8498_M,
    const std::string & _8499_name,
    double _8500_value) { mosek::fusion::p_Parameters::setParameter(_8498_M,_8499_name,_8500_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8498_M,const std::string & _8499_name,double _8500_value)
{
  if (false)
  {
    {
    }
  }
  else if((_8499_name == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8499_name == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8499_name == std::string ("numThreads")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8501_v = _8500_value;
          if (((int)0 <= _8501_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8501_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mtSpincount")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8502_v = _8500_value;
          if ((((int)0 <= _8502_v) && (_8502_v <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8502_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  else if((_8499_name == std::string ("simPrecision")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecision)"));
    }
  }
  {}
  if ((_8499_name == std::string ("biMaxIterations")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8503_v = _8500_value;
          if (((int)0 <= _8503_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8503_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8504_v = _8500_value;
          if (((int)0 <= _8504_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8504_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logCutSecondOpt")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8505_v = _8500_value;
          if (((int)0 <= _8505_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8505_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8499_name == std::string ("logBi")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8506_v = _8500_value;
          if (((int)0 <= _8506_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8506_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logBiFreq")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8507_v = _8500_value;
          if (((int)0 <= _8507_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8507_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8499_name == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8499_name == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8499_name == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8499_name == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8499_name == std::string ("logIntpnt")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8508_v = _8500_value;
          if (((int)0 <= _8508_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8508_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntMaxIterations")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8509_v = _8500_value;
          if (((int)0 <= _8509_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8509_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntOffColTrh")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8510_v = _8500_value;
          if (((int)0 <= _8510_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8510_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8499_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8511_v = _8500_value;
          if (((int)0 <= _8511_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8511_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8499_name == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8499_name == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8499_name == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8512_v = _8500_value;
          if (((-(int)1) <= _8512_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8512_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8499_name == std::string ("logPresolve")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8513_v = _8500_value;
          if (((int)0 <= _8513_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8513_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  else if((_8499_name == std::string ("presolveLindepNew")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepNew)"));
    }
  }
  {}
  if ((_8499_name == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8514_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8514_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8515_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8515_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8516_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8516_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("foldingUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (foldingUse)"));
    }
  }
  {}
  if ((_8499_name == std::string ("simPrimalCrash")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8517_v = _8500_value;
          if (((int)0 <= _8517_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8517_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logSim")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8518_v = _8500_value;
          if (((int)0 <= _8518_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8518_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logSimFreq")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8519_v = _8500_value;
          if (((int)0 <= _8519_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8519_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logSimFreqGigaTicks")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8520_v = _8500_value;
          if (((-(int)1) <= _8520_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ_GIGA_TICKS"),_8520_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreqGigaTicks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreqGigaTicks)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("heartbeatSimFreqTicks")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8521_v = _8500_value;
          if (((-(int)1) <= _8521_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_HEARTBEAT_SIM_FREQ_TICKS"),_8521_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (heartbeatSimFreqTicks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (heartbeatSimFreqTicks)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8522_v = _8500_value;
          if ((((int)0 <= _8522_v) && (_8522_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8522_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8499_name == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8523_v = _8500_value;
          if ((((int)0 <= _8523_v) && (_8523_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8523_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8499_name == std::string ("simMaxIterations")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8524_v = _8500_value;
          if (((int)0 <= _8524_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8524_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8499_name == std::string ("simRefactorFreq")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8525_v = _8500_value;
          if (((int)0 <= _8525_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8525_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("simSeed")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8526_v = _8500_value;
          if ((((int)0 <= _8526_v) && (_8526_v <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8526_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8499_name == std::string ("logMio")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8527_v = _8500_value;
          if (((int)0 <= _8527_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8527_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logMioFreq")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8528_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8528_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8529_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8529_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8530_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8530_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioMaxNumRestarts")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8531_v = _8500_value;
          if (((int)0 <= _8531_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RESTARTS"),_8531_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRestarts)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRestarts)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8532_v = _8500_value;
          if (((int)0 <= _8532_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8532_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8533_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8533_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  else if((_8499_name == std::string ("mioVarSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVarSelection)"));
    }
  }
  {}
  if ((_8499_name == std::string ("mioMinRel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8534_v = _8500_value;
          if (((int)0 <= _8534_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MIN_REL"),_8534_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMinRel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMinRel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8535_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8535_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioProbingLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8536_v = _8500_value;
          if ((((-(int)1) <= _8536_v) && (_8536_v <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8536_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioSymmetryLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8537_v = _8500_value;
          if ((((-(int)1) <= _8537_v) && (_8537_v <= (int)4)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8537_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioDualRayAnalysisLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8538_v = _8500_value;
          if ((((-(int)1) <= _8538_v) && (_8538_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_DUAL_RAY_ANALYSIS_LEVEL"),_8538_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDualRayAnalysisLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDualRayAnalysisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioConflictAnalysisLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8539_v = _8500_value;
          if ((((-(int)1) <= _8539_v) && (_8539_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONFLICT_ANALYSIS_LEVEL"),_8539_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConflictAnalysisLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConflictAnalysisLevel)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
    }
  }
  {}
  if ((_8499_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8540_v = _8500_value;
          if ((((int)0 <= _8540_v) && (_8540_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8540_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8541_v = _8500_value;
          if ((((int)0 <= _8541_v) && (_8541_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8541_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8542_v = _8500_value;
          if ((((-(int)1) <= _8542_v) && (_8542_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8542_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8543_v = _8500_value;
          if ((((-(int)1) <= _8543_v) && (_8543_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8543_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8499_name == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8499_name == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8499_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8499_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8499_name == std::string ("mioSeed")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8544_v = _8500_value;
          if (((int)0 <= _8544_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8544_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8499_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
    }
  }
  else if((_8499_name == std::string ("mioDataPermutationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
    }
  }
  else if((_8499_name == std::string ("writeMpsFormat")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeMpsFormat)"));
    }
  }
  {}
  if ((_8499_name == std::string ("writeLpLineWidth")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8545_v = _8500_value;
          if (((int)40 <= _8545_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8545_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  else if((_8499_name == std::string ("writeJsonIndentation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
    }
  }
  else if((_8499_name == std::string ("infeasReportAuto")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
    }
  }
  else if((_8499_name == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8499_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8499_name == std::string ("licensePauseTime")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8546_v = _8500_value;
          if ((((int)0 <= _8546_v) && (_8546_v <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8546_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8499_name == std::string ("log")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8547_v = _8500_value;
          if (((int)0 <= _8547_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8547_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logExpand")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8548_v = _8500_value;
          if (((int)0 <= _8548_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8548_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logFile")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8549_v = _8500_value;
          if (((int)0 <= _8549_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8549_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("logOrder")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8550_v = _8500_value;
          if (((int)0 <= _8550_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8550_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8499_name == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8499_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8551_v = _8500_value;
          if ((((int)0 <= _8551_v) && (_8551_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8551_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8552_v = _8500_value;
          if ((((int)0 <= _8552_v) && (_8552_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8552_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8553_v = _8500_value;
          if (((int)0 <= _8553_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8553_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8499_name == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8499_name == std::string ("simPrecisionBoost")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionBoost)"));
    }
  }
  else if((_8499_name == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8499_name == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8499_name == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8499_name == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8499_name == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8499_name == std::string ("simDualCrash")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8554_v = _8500_value;
          if (((int)0 <= _8554_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8554_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("ptfWriteTransform")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteTransform)"));
    }
  }
  else if((_8499_name == std::string ("ptfWriteSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteSolutions)"));
    }
  }
  else if((_8499_name == std::string ("ptfWriteParameters")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteParameters)"));
    }
  }
  else if((_8499_name == std::string ("ptfWriteSinglePsdTerms")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteSinglePsdTerms)"));
    }
  }
  else if((_8499_name == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8499_name == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8499_name == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8499_name == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8499_name == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  else if((_8499_name == std::string ("mioCutLipro")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
    }
  }
  else if((_8499_name == std::string ("mioConstructSol")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
    }
  }
  {}
  if ((_8499_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8555_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8555_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8556_v = _8500_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8556_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8499_name == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8499_name == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8499_name == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  else if((_8499_name == std::string ("autoSortABeforeOpt")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoSortABeforeOpt)"));
    }
  }
  {}
  if ((_8499_name == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8557_v = _8500_value;
          if (((-(int)1) <= _8557_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8557_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioRensMaxNodes")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8558_v = _8500_value;
          if (((-(int)1) <= _8558_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RENS_MAX_NODES"),_8558_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRensMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRensMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioCrossoverMaxNodes")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8559_v = _8500_value;
          if (((-(int)1) <= _8559_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CROSSOVER_MAX_NODES"),_8559_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCrossoverMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCrossoverMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioOptFaceMaxNodes")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8560_v = _8500_value;
          if (((-(int)1) <= _8560_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_OPT_FACE_MAX_NODES"),_8560_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioOptFaceMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioOptFaceMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8561_v = _8500_value;
          if ((((-(int)1) <= _8561_v) && (_8561_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8561_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioIndependentBlockLevel")))
  {
    {
      if (((_8500_value - (int32_t)_8500_value) == 0.0))
      {
        {
          double _8562_v = _8500_value;
          if ((((-(int)1) <= _8562_v) && (_8562_v <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_INDEPENDENT_BLOCK_LEVEL"),_8562_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioIndependentBlockLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioIndependentBlockLevel)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("remoteUseCompression")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
    }
  }
  {}
  if ((_8499_name == std::string ("semidefiniteTolApprox")))
  {
    {
      double _8563_v = _8500_value;
      if ((1.000000e-15 <= _8563_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_SEMIDEFINITE_TOL_APPROX"),_8563_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (semidefiniteTolApprox)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("optimizerMaxTime")))
  {
    {
      double _8564_v = _8500_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8564_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("optimizerMaxTicks")))
  {
    {
      double _8565_v = _8500_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TICKS"),_8565_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTicks)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("lowerObjCut")))
  {
    {
      double _8566_v = _8500_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8566_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("upperObjCut")))
  {
    {
      double _8567_v = _8500_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8567_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8568_v = _8500_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8568_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8569_v = _8500_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8569_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolRelGap")))
  {
    {
      double _8570_v = _8500_value;
      if ((1.000000e-14 <= _8570_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8570_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolStepSize")))
  {
    {
      double _8571_v = _8500_value;
      if (((0.000000e+00 <= _8571_v) && (_8571_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8571_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("simLuTolRelPiv")))
  {
    {
      double _8572_v = _8500_value;
      if (((1.000000e-06 <= _8572_v) && (_8572_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8572_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolRelStep")))
  {
    {
      double _8573_v = _8500_value;
      if (((1.000000e-04 <= _8573_v) && (_8573_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8573_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolPath")))
  {
    {
      double _8574_v = _8500_value;
      if (((0.000000e+00 <= _8574_v) && (_8574_v <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8574_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolPfeas")))
  {
    {
      double _8575_v = _8500_value;
      if (((0.000000e+00 <= _8575_v) && (_8575_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8575_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolDfeas")))
  {
    {
      double _8576_v = _8500_value;
      if (((0.000000e+00 <= _8576_v) && (_8576_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8576_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolMuRed")))
  {
    {
      double _8577_v = _8500_value;
      if (((0.000000e+00 <= _8577_v) && (_8577_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8577_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolInfeas")))
  {
    {
      double _8578_v = _8500_value;
      if (((0.000000e+00 <= _8578_v) && (_8578_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8578_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8579_v = _8500_value;
      if (((0.000000e+00 <= _8579_v) && (_8579_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8579_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8580_v = _8500_value;
      if (((0.000000e+00 <= _8580_v) && (_8580_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8580_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8581_v = _8500_value;
      if (((0.000000e+00 <= _8581_v) && (_8581_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8581_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8582_v = _8500_value;
      if (((0.000000e+00 <= _8582_v) && (_8582_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8582_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8583_v = _8500_value;
      if ((1.000000e+00 <= _8583_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8583_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8584_v = _8500_value;
      if (((0.000000e+00 <= _8584_v) && (_8584_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8584_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolPsafe")))
  {
    {
      double _8585_v = _8500_value;
      if ((1.000000e-04 <= _8585_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8585_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("intpntTolDsafe")))
  {
    {
      double _8586_v = _8500_value;
      if ((1.000000e-04 <= _8586_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8586_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioMaxTime")))
  {
    {
      double _8587_v = _8500_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8587_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioRelGapConst")))
  {
    {
      double _8588_v = _8500_value;
      if ((1.000000e-15 <= _8588_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8588_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioTolRelGap")))
  {
    {
      double _8589_v = _8500_value;
      if ((0.000000e+00 <= _8589_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8589_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioTolAbsGap")))
  {
    {
      double _8590_v = _8500_value;
      if ((0.000000e+00 <= _8590_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8590_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8591_v = _8500_value;
      if ((1.000000e-09 <= _8591_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8591_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioDjcMaxBigm")))
  {
    {
      double _8592_v = _8500_value;
      if ((0.000000e+00 <= _8592_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8592_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioCliqueTableSizeFactor")))
  {
    {
      double _8593_v = _8500_value;
      if (((-1.000000e+00) <= _8593_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_CLIQUE_TABLE_SIZE_FACTOR"),_8593_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCliqueTableSizeFactor)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("simPrecisionScalingNormal")))
  {
    {
      double _8594_v = _8500_value;
      if ((1.000000e+00 <= _8594_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_PRECISION_SCALING_NORMAL"),_8594_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionScalingNormal)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("simPrecisionScalingExtended")))
  {
    {
      double _8595_v = _8500_value;
      if ((1.000000e+00 <= _8595_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_PRECISION_SCALING_EXTENDED"),_8595_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionScalingExtended)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("basisTolX")))
  {
    {
      double _8596_v = _8500_value;
      if ((1.000000e-09 <= _8596_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8596_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("basisTolS")))
  {
    {
      double _8597_v = _8500_value;
      if ((1.000000e-09 <= _8597_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8597_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("basisRelTolS")))
  {
    {
      double _8598_v = _8500_value;
      if ((0.000000e+00 <= _8598_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8598_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("presolveTolX")))
  {
    {
      double _8599_v = _8500_value;
      if ((0.000000e+00 <= _8599_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8599_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      double _8600_v = _8500_value;
      if ((0.000000e+00 <= _8600_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8600_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("presolveTolS")))
  {
    {
      double _8601_v = _8500_value;
      if ((0.000000e+00 <= _8601_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8601_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8602_v = _8500_value;
      if ((0.000000e+00 <= _8602_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8602_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("presolveTolRelLindep")))
  {
    {
      double _8603_v = _8500_value;
      if ((0.000000e+00 <= _8603_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8603_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("foldingTolEq")))
  {
    {
      double _8604_v = _8500_value;
      if ((0.000000e+00 <= _8604_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_FOLDING_TOL_EQ"),_8604_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (foldingTolEq)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8605_v = _8500_value;
      if ((1.000000e-12 <= _8605_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8605_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioTolFeas")))
  {
    {
      double _8606_v = _8500_value;
      if (((1.000000e-09 <= _8606_v) && (_8606_v <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8606_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8499_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8607_v = _8500_value;
      if (((0.000000e+00 <= _8607_v) && (_8607_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8498_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8607_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8499_name == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8499_name == std::string ("remoteOptserverHost")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteOptserverHost)"));
    }
  }
  else if((_8499_name == std::string ("remoteTlsCertPath")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCertPath)"));
    }
  }
  else if((_8499_name == std::string ("remoteTlsCert")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCert)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3925:0-5141:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8608_M,
    const std::string & _8609_name,
    int32_t _8610_value) { mosek::fusion::p_Parameters::setParameter(_8608_M,_8609_name,_8610_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8608_M,const std::string & _8609_name,int32_t _8610_value)
{
  if (false)
  {
    {
    }
  }
  else if((_8609_name == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8609_name == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8609_name == std::string ("numThreads")))
  {
    {
      int32_t _8611_v = _8610_value;
      if (((int)0 <= _8611_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8611_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mtSpincount")))
  {
    {
      int32_t _8612_v = _8610_value;
      if ((((int)0 <= _8612_v) && (_8612_v <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8612_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  else if((_8609_name == std::string ("simPrecision")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecision)"));
    }
  }
  {}
  if ((_8609_name == std::string ("biMaxIterations")))
  {
    {
      int32_t _8613_v = _8610_value;
      if (((int)0 <= _8613_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8613_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int32_t _8614_v = _8610_value;
      if (((int)0 <= _8614_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8614_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logCutSecondOpt")))
  {
    {
      int32_t _8615_v = _8610_value;
      if (((int)0 <= _8615_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8615_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8609_name == std::string ("logBi")))
  {
    {
      int32_t _8616_v = _8610_value;
      if (((int)0 <= _8616_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8616_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logBiFreq")))
  {
    {
      int32_t _8617_v = _8610_value;
      if (((int)0 <= _8617_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8617_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8609_name == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8609_name == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8609_name == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8609_name == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8609_name == std::string ("logIntpnt")))
  {
    {
      int32_t _8618_v = _8610_value;
      if (((int)0 <= _8618_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8618_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntMaxIterations")))
  {
    {
      int32_t _8619_v = _8610_value;
      if (((int)0 <= _8619_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8619_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntOffColTrh")))
  {
    {
      int32_t _8620_v = _8610_value;
      if (((int)0 <= _8620_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8620_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8609_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int32_t _8621_v = _8610_value;
      if (((int)0 <= _8621_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8621_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8609_name == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8609_name == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8609_name == std::string ("intpntMaxNumCor")))
  {
    {
      int32_t _8622_v = _8610_value;
      if (((-(int)1) <= _8622_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8622_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8609_name == std::string ("logPresolve")))
  {
    {
      int32_t _8623_v = _8610_value;
      if (((int)0 <= _8623_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8623_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  else if((_8609_name == std::string ("presolveLindepNew")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepNew)"));
    }
  }
  {}
  if ((_8609_name == std::string ("presolveMaxNumPass")))
  {
    {
      int32_t _8624_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8624_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int32_t _8625_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8625_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int32_t _8626_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8626_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("foldingUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (foldingUse)"));
    }
  }
  {}
  if ((_8609_name == std::string ("simPrimalCrash")))
  {
    {
      int32_t _8627_v = _8610_value;
      if (((int)0 <= _8627_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8627_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logSim")))
  {
    {
      int32_t _8628_v = _8610_value;
      if (((int)0 <= _8628_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8628_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logSimFreq")))
  {
    {
      int32_t _8629_v = _8610_value;
      if (((int)0 <= _8629_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8629_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logSimFreqGigaTicks")))
  {
    {
      int32_t _8630_v = _8610_value;
      if (((-(int)1) <= _8630_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ_GIGA_TICKS"),_8630_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreqGigaTicks)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("heartbeatSimFreqTicks")))
  {
    {
      int32_t _8631_v = _8610_value;
      if (((-(int)1) <= _8631_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_HEARTBEAT_SIM_FREQ_TICKS"),_8631_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (heartbeatSimFreqTicks)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      int32_t _8632_v = _8610_value;
      if ((((int)0 <= _8632_v) && (_8632_v <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8632_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8609_name == std::string ("simDualRestrictSelection")))
  {
    {
      int32_t _8633_v = _8610_value;
      if ((((int)0 <= _8633_v) && (_8633_v <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8633_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8609_name == std::string ("simMaxIterations")))
  {
    {
      int32_t _8634_v = _8610_value;
      if (((int)0 <= _8634_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8634_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8609_name == std::string ("simRefactorFreq")))
  {
    {
      int32_t _8635_v = _8610_value;
      if (((int)0 <= _8635_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8635_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("simSeed")))
  {
    {
      int32_t _8636_v = _8610_value;
      if ((((int)0 <= _8636_v) && (_8636_v <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8636_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8609_name == std::string ("logMio")))
  {
    {
      int32_t _8637_v = _8610_value;
      if (((int)0 <= _8637_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8637_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logMioFreq")))
  {
    {
      int32_t _8638_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8638_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      int32_t _8639_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8639_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioMaxNumBranches")))
  {
    {
      int32_t _8640_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8640_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioMaxNumRestarts")))
  {
    {
      int32_t _8641_v = _8610_value;
      if (((int)0 <= _8641_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RESTARTS"),_8641_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRestarts)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int32_t _8642_v = _8610_value;
      if (((int)0 <= _8642_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8642_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioMaxNumSolutions")))
  {
    {
      int32_t _8643_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8643_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  else if((_8609_name == std::string ("mioVarSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVarSelection)"));
    }
  }
  {}
  if ((_8609_name == std::string ("mioMinRel")))
  {
    {
      int32_t _8644_v = _8610_value;
      if (((int)0 <= _8644_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MIN_REL"),_8644_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMinRel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioHeuristicLevel")))
  {
    {
      int32_t _8645_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8645_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioProbingLevel")))
  {
    {
      int32_t _8646_v = _8610_value;
      if ((((-(int)1) <= _8646_v) && (_8646_v <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8646_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioSymmetryLevel")))
  {
    {
      int32_t _8647_v = _8610_value;
      if ((((-(int)1) <= _8647_v) && (_8647_v <= (int)4)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8647_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioDualRayAnalysisLevel")))
  {
    {
      int32_t _8648_v = _8610_value;
      if ((((-(int)1) <= _8648_v) && (_8648_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_DUAL_RAY_ANALYSIS_LEVEL"),_8648_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDualRayAnalysisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioConflictAnalysisLevel")))
  {
    {
      int32_t _8649_v = _8610_value;
      if ((((-(int)1) <= _8649_v) && (_8649_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONFLICT_ANALYSIS_LEVEL"),_8649_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConflictAnalysisLevel)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
    }
  }
  {}
  if ((_8609_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      int32_t _8650_v = _8610_value;
      if ((((int)0 <= _8650_v) && (_8650_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8650_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      int32_t _8651_v = _8610_value;
      if ((((int)0 <= _8651_v) && (_8651_v <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8651_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioCutSelectionLevel")))
  {
    {
      int32_t _8652_v = _8610_value;
      if ((((-(int)1) <= _8652_v) && (_8652_v <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8652_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioVbDetectionLevel")))
  {
    {
      int32_t _8653_v = _8610_value;
      if ((((-(int)1) <= _8653_v) && (_8653_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8653_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8609_name == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8609_name == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8609_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8609_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8609_name == std::string ("mioSeed")))
  {
    {
      int32_t _8654_v = _8610_value;
      if (((int)0 <= _8654_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8654_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8609_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
    }
  }
  else if((_8609_name == std::string ("mioDataPermutationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
    }
  }
  else if((_8609_name == std::string ("writeMpsFormat")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeMpsFormat)"));
    }
  }
  {}
  if ((_8609_name == std::string ("writeLpLineWidth")))
  {
    {
      int32_t _8655_v = _8610_value;
      if (((int)40 <= _8655_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8655_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  else if((_8609_name == std::string ("writeJsonIndentation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
    }
  }
  else if((_8609_name == std::string ("infeasReportAuto")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
    }
  }
  else if((_8609_name == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8609_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8609_name == std::string ("licensePauseTime")))
  {
    {
      int32_t _8656_v = _8610_value;
      if ((((int)0 <= _8656_v) && (_8656_v <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8656_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8609_name == std::string ("log")))
  {
    {
      int32_t _8657_v = _8610_value;
      if (((int)0 <= _8657_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8657_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logExpand")))
  {
    {
      int32_t _8658_v = _8610_value;
      if (((int)0 <= _8658_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8658_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logFile")))
  {
    {
      int32_t _8659_v = _8610_value;
      if (((int)0 <= _8659_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8659_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("logOrder")))
  {
    {
      int32_t _8660_v = _8610_value;
      if (((int)0 <= _8660_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8660_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8609_name == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8609_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int32_t _8661_v = _8610_value;
      if ((((int)0 <= _8661_v) && (_8661_v <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8661_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      int32_t _8662_v = _8610_value;
      if ((((int)0 <= _8662_v) && (_8662_v <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8662_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("simMaxNumSetbacks")))
  {
    {
      int32_t _8663_v = _8610_value;
      if (((int)0 <= _8663_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8663_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8609_name == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8609_name == std::string ("simPrecisionBoost")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionBoost)"));
    }
  }
  else if((_8609_name == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8609_name == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8609_name == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8609_name == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8609_name == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8609_name == std::string ("simDualCrash")))
  {
    {
      int32_t _8664_v = _8610_value;
      if (((int)0 <= _8664_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8664_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("ptfWriteTransform")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteTransform)"));
    }
  }
  else if((_8609_name == std::string ("ptfWriteSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteSolutions)"));
    }
  }
  else if((_8609_name == std::string ("ptfWriteParameters")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteParameters)"));
    }
  }
  else if((_8609_name == std::string ("ptfWriteSinglePsdTerms")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteSinglePsdTerms)"));
    }
  }
  else if((_8609_name == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8609_name == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8609_name == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8609_name == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8609_name == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  else if((_8609_name == std::string ("mioCutLipro")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
    }
  }
  else if((_8609_name == std::string ("mioConstructSol")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
    }
  }
  {}
  if ((_8609_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int32_t _8665_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8665_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int32_t _8666_v = _8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8666_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8609_name == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8609_name == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8609_name == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  else if((_8609_name == std::string ("autoSortABeforeOpt")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoSortABeforeOpt)"));
    }
  }
  {}
  if ((_8609_name == std::string ("mioRinsMaxNodes")))
  {
    {
      int32_t _8667_v = _8610_value;
      if (((-(int)1) <= _8667_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8667_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioRensMaxNodes")))
  {
    {
      int32_t _8668_v = _8610_value;
      if (((-(int)1) <= _8668_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RENS_MAX_NODES"),_8668_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRensMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioCrossoverMaxNodes")))
  {
    {
      int32_t _8669_v = _8610_value;
      if (((-(int)1) <= _8669_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CROSSOVER_MAX_NODES"),_8669_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCrossoverMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioOptFaceMaxNodes")))
  {
    {
      int32_t _8670_v = _8610_value;
      if (((-(int)1) <= _8670_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_OPT_FACE_MAX_NODES"),_8670_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioOptFaceMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioFeaspumpLevel")))
  {
    {
      int32_t _8671_v = _8610_value;
      if ((((-(int)1) <= _8671_v) && (_8671_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8671_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioIndependentBlockLevel")))
  {
    {
      int32_t _8672_v = _8610_value;
      if ((((-(int)1) <= _8672_v) && (_8672_v <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_INDEPENDENT_BLOCK_LEVEL"),_8672_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioIndependentBlockLevel)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("remoteUseCompression")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
    }
  }
  {}
  if ((_8609_name == std::string ("semidefiniteTolApprox")))
  {
    {
      double _8673_v = (double)_8610_value;
      if ((1.000000e-15 <= _8673_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_SEMIDEFINITE_TOL_APPROX"),_8673_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (semidefiniteTolApprox)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("optimizerMaxTime")))
  {
    {
      double _8674_v = (double)_8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8674_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("optimizerMaxTicks")))
  {
    {
      double _8675_v = (double)_8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TICKS"),_8675_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTicks)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("lowerObjCut")))
  {
    {
      double _8676_v = (double)_8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8676_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("upperObjCut")))
  {
    {
      double _8677_v = (double)_8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8677_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8678_v = (double)_8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8678_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8679_v = (double)_8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8679_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolRelGap")))
  {
    {
      double _8680_v = (double)_8610_value;
      if ((1.000000e-14 <= _8680_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8680_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolStepSize")))
  {
    {
      double _8681_v = (double)_8610_value;
      if (((0.000000e+00 <= _8681_v) && (_8681_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8681_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("simLuTolRelPiv")))
  {
    {
      double _8682_v = (double)_8610_value;
      if (((1.000000e-06 <= _8682_v) && (_8682_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8682_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolRelStep")))
  {
    {
      double _8683_v = (double)_8610_value;
      if (((1.000000e-04 <= _8683_v) && (_8683_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8683_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolPath")))
  {
    {
      double _8684_v = (double)_8610_value;
      if (((0.000000e+00 <= _8684_v) && (_8684_v <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8684_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolPfeas")))
  {
    {
      double _8685_v = (double)_8610_value;
      if (((0.000000e+00 <= _8685_v) && (_8685_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8685_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolDfeas")))
  {
    {
      double _8686_v = (double)_8610_value;
      if (((0.000000e+00 <= _8686_v) && (_8686_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8686_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolMuRed")))
  {
    {
      double _8687_v = (double)_8610_value;
      if (((0.000000e+00 <= _8687_v) && (_8687_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8687_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolInfeas")))
  {
    {
      double _8688_v = (double)_8610_value;
      if (((0.000000e+00 <= _8688_v) && (_8688_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8688_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8689_v = (double)_8610_value;
      if (((0.000000e+00 <= _8689_v) && (_8689_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8689_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8690_v = (double)_8610_value;
      if (((0.000000e+00 <= _8690_v) && (_8690_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8690_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8691_v = (double)_8610_value;
      if (((0.000000e+00 <= _8691_v) && (_8691_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8691_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8692_v = (double)_8610_value;
      if (((0.000000e+00 <= _8692_v) && (_8692_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8692_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8693_v = (double)_8610_value;
      if ((1.000000e+00 <= _8693_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8693_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8694_v = (double)_8610_value;
      if (((0.000000e+00 <= _8694_v) && (_8694_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8694_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolPsafe")))
  {
    {
      double _8695_v = (double)_8610_value;
      if ((1.000000e-04 <= _8695_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8695_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("intpntTolDsafe")))
  {
    {
      double _8696_v = (double)_8610_value;
      if ((1.000000e-04 <= _8696_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8696_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioMaxTime")))
  {
    {
      double _8697_v = (double)_8610_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8697_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioRelGapConst")))
  {
    {
      double _8698_v = (double)_8610_value;
      if ((1.000000e-15 <= _8698_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8698_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioTolRelGap")))
  {
    {
      double _8699_v = (double)_8610_value;
      if ((0.000000e+00 <= _8699_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8699_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioTolAbsGap")))
  {
    {
      double _8700_v = (double)_8610_value;
      if ((0.000000e+00 <= _8700_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8700_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8701_v = (double)_8610_value;
      if ((1.000000e-09 <= _8701_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8701_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioDjcMaxBigm")))
  {
    {
      double _8702_v = (double)_8610_value;
      if ((0.000000e+00 <= _8702_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8702_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioCliqueTableSizeFactor")))
  {
    {
      double _8703_v = (double)_8610_value;
      if (((-1.000000e+00) <= _8703_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_CLIQUE_TABLE_SIZE_FACTOR"),_8703_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCliqueTableSizeFactor)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("simPrecisionScalingNormal")))
  {
    {
      double _8704_v = (double)_8610_value;
      if ((1.000000e+00 <= _8704_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_PRECISION_SCALING_NORMAL"),_8704_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionScalingNormal)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("simPrecisionScalingExtended")))
  {
    {
      double _8705_v = (double)_8610_value;
      if ((1.000000e+00 <= _8705_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_PRECISION_SCALING_EXTENDED"),_8705_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionScalingExtended)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("basisTolX")))
  {
    {
      double _8706_v = (double)_8610_value;
      if ((1.000000e-09 <= _8706_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8706_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("basisTolS")))
  {
    {
      double _8707_v = (double)_8610_value;
      if ((1.000000e-09 <= _8707_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8707_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("basisRelTolS")))
  {
    {
      double _8708_v = (double)_8610_value;
      if ((0.000000e+00 <= _8708_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8708_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("presolveTolX")))
  {
    {
      double _8709_v = (double)_8610_value;
      if ((0.000000e+00 <= _8709_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8709_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      double _8710_v = (double)_8610_value;
      if ((0.000000e+00 <= _8710_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8710_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("presolveTolS")))
  {
    {
      double _8711_v = (double)_8610_value;
      if ((0.000000e+00 <= _8711_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8711_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8712_v = (double)_8610_value;
      if ((0.000000e+00 <= _8712_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8712_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("presolveTolRelLindep")))
  {
    {
      double _8713_v = (double)_8610_value;
      if ((0.000000e+00 <= _8713_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8713_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("foldingTolEq")))
  {
    {
      double _8714_v = (double)_8610_value;
      if ((0.000000e+00 <= _8714_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_FOLDING_TOL_EQ"),_8714_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (foldingTolEq)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8715_v = (double)_8610_value;
      if ((1.000000e-12 <= _8715_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8715_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioTolFeas")))
  {
    {
      double _8716_v = (double)_8610_value;
      if (((1.000000e-09 <= _8716_v) && (_8716_v <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8716_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8609_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8717_v = (double)_8610_value;
      if (((0.000000e+00 <= _8717_v) && (_8717_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8608_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8717_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8609_name == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8609_name == std::string ("remoteOptserverHost")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteOptserverHost)"));
    }
  }
  else if((_8609_name == std::string ("remoteTlsCertPath")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCertPath)"));
    }
  }
  else if((_8609_name == std::string ("remoteTlsCert")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCert)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1989:0-3923:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8718_M,
    const std::string & _8719_name,
    const std::string & _8720_value) { mosek::fusion::p_Parameters::setParameter(_8718_M,_8719_name,_8720_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8718_M,const std::string & _8719_name,const std::string & _8720_value)
{
  if (false)
  {
    {
    }
  }
  {}
  if ((_8719_name == std::string ("autoUpdateSolInfo")))
  {
    {
      int32_t _8721_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8721_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_8721_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("removeUnusedSolutions")))
  {
    {
      int32_t _8722_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8722_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_8722_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("numThreads")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2010:4-2018:108 */
      try
      {
        {
          int32_t _8724_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8724_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8724_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8723_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mtSpincount")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2022:4-2030:109 */
      try
      {
        {
          int32_t _8726_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8726_v) && (_8726_v <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8726_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8725_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("optimizer")))
  {
    {
      int32_t _8727_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8720_value);
      if ((_8727_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_8727_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simPrecision")))
  {
    {
      int32_t _8728_v = ::mosek::fusion::p_Parameters::string_to_simprecision_value(_8720_value);
      if ((_8728_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecision)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRECISION"),_8728_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("biMaxIterations")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2050:4-2058:113 */
      try
      {
        {
          int32_t _8730_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8730_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8730_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8729_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2062:4-2070:117 */
      try
      {
        {
          int32_t _8732_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8732_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8732_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8731_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logCutSecondOpt")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2074:4-2082:113 */
      try
      {
        {
          int32_t _8734_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8734_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8734_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8733_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logLocalInfo")))
  {
    {
      int32_t _8735_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8735_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_8735_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("logBi")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2094:4-2102:103 */
      try
      {
        {
          int32_t _8737_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8737_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8737_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8736_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logBiFreq")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2106:4-2114:107 */
      try
      {
        {
          int32_t _8739_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8739_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8739_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8738_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("biCleanOptimizer")))
  {
    {
      int32_t _8740_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8720_value);
      if ((_8740_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_8740_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("intpntStartingPoint")))
  {
    {
      int32_t _8741_v = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_8720_value);
      if ((_8741_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_8741_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("intpntDiffStep")))
  {
    {
      int32_t _8742_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8742_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_8742_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("intpntScaling")))
  {
    {
      int32_t _8743_v = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8720_value);
      if ((_8743_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_8743_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("intpntSolveForm")))
  {
    {
      int32_t _8744_v = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8720_value);
      if ((_8744_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_8744_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("logIntpnt")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2158:4-2166:107 */
      try
      {
        {
          int32_t _8746_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8746_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8746_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8745_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntMaxIterations")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2170:4-2178:117 */
      try
      {
        {
          int32_t _8748_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8748_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8748_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8747_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntOffColTrh")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2182:4-2190:113 */
      try
      {
        {
          int32_t _8750_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8750_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8750_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8749_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntOrderMethod")))
  {
    {
      int32_t _8751_v = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_8720_value);
      if ((_8751_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_8751_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2202:4-2210:119 */
      try
      {
        {
          int32_t _8753_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8753_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8753_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8752_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntBasis")))
  {
    {
      int32_t _8754_v = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_8720_value);
      if ((_8754_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_8754_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("biIgnoreMaxIter")))
  {
    {
      int32_t _8755_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8755_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_8755_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("biIgnoreNumError")))
  {
    {
      int32_t _8756_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8756_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_8756_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("intpntMaxNumCor")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2238:4-2246:113 */
      try
      {
        {
          int32_t _8758_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((-(int)1) <= _8758_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8758_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8757_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveUse")))
  {
    {
      int32_t _8759_v = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_8720_value);
      if ((_8759_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_8759_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("logPresolve")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2258:4-2266:109 */
      try
      {
        {
          int32_t _8761_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8761_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8761_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8760_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveLindepUse")))
  {
    {
      int32_t _8762_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8762_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_8762_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("presolveLindepNew")))
  {
    {
      int32_t _8763_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8763_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepNew)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_NEW"),_8763_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("presolveMaxNumPass")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2286:4-2294:116 */
      try
      {
        {
          int32_t _8765_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8765_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8764_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2298:4-2306:127 */
      try
      {
        {
          int32_t _8767_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8767_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8766_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2310:4-2318:123 */
      try
      {
        {
          int32_t _8769_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8769_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8768_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("foldingUse")))
  {
    {
      int32_t _8770_v = ::mosek::fusion::p_Parameters::string_to_foldingmode_value(_8720_value);
      if ((_8770_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (foldingUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_FOLDING_USE"),_8770_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simPrimalCrash")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2330:4-2338:112 */
      try
      {
        {
          int32_t _8772_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8772_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8772_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8771_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logSim")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2342:4-2350:104 */
      try
      {
        {
          int32_t _8774_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8774_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8774_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8773_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logSimFreq")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2354:4-2362:108 */
      try
      {
        {
          int32_t _8776_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8776_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8776_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8775_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logSimFreqGigaTicks")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2366:4-2374:117 */
      try
      {
        {
          int32_t _8778_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((-(int)1) <= _8778_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ_GIGA_TICKS"),_8778_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreqGigaTicks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8777_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreqGigaTicks)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("heartbeatSimFreqTicks")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2378:4-2386:119 */
      try
      {
        {
          int32_t _8780_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((-(int)1) <= _8780_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_HEARTBEAT_SIM_FREQ_TICKS"),_8780_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (heartbeatSimFreqTicks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8779_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (heartbeatSimFreqTicks)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2390:4-2398:124 */
      try
      {
        {
          int32_t _8782_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8782_v) && (_8782_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8782_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8781_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simPrimalSelection")))
  {
    {
      int32_t _8783_v = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8720_value);
      if ((_8783_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_8783_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simDualRestrictSelection")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2410:4-2418:122 */
      try
      {
        {
          int32_t _8785_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8785_v) && (_8785_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8785_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8784_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simDualSelection")))
  {
    {
      int32_t _8786_v = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8720_value);
      if ((_8786_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_8786_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simMaxIterations")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2430:4-2438:114 */
      try
      {
        {
          int32_t _8788_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8788_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8788_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8787_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simHotstartLu")))
  {
    {
      int32_t _8789_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8789_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_8789_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simRefactorFreq")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2450:4-2458:113 */
      try
      {
        {
          int32_t _8791_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8791_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8791_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8790_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simSeed")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2462:4-2470:105 */
      try
      {
        {
          int32_t _8793_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8793_v) && (_8793_v <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8793_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8792_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioMode")))
  {
    {
      int32_t _8794_v = ::mosek::fusion::p_Parameters::string_to_miomode_value(_8720_value);
      if ((_8794_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_8794_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("logMio")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2482:4-2490:104 */
      try
      {
        {
          int32_t _8796_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8796_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8796_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8795_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logMioFreq")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2494:4-2502:108 */
      try
      {
        {
          int32_t _8798_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8798_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8797_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2506:4-2514:113 */
      try
      {
        {
          int32_t _8800_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8800_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8799_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioMaxNumBranches")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2518:4-2526:115 */
      try
      {
        {
          int32_t _8802_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8802_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8801_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioMaxNumRestarts")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2530:4-2538:115 */
      try
      {
        {
          int32_t _8804_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8804_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RESTARTS"),_8804_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRestarts)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8803_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRestarts)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2542:4-2550:120 */
      try
      {
        {
          int32_t _8806_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8806_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8806_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8805_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioMaxNumSolutions")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2554:4-2562:116 */
      try
      {
        {
          int32_t _8808_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8808_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8807_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioNodeSelection")))
  {
    {
      int32_t _8809_v = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_8720_value);
      if ((_8809_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_8809_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioVarSelection")))
  {
    {
      int32_t _8810_v = ::mosek::fusion::p_Parameters::string_to_miovarseltype_value(_8720_value);
      if ((_8810_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVarSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VAR_SELECTION"),_8810_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioMinRel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2582:4-2590:107 */
      try
      {
        {
          int32_t _8812_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8812_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MIN_REL"),_8812_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMinRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8811_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMinRel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioHeuristicLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2594:4-2602:115 */
      try
      {
        {
          int32_t _8814_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8814_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8813_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioProbingLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2606:4-2614:113 */
      try
      {
        {
          int32_t _8816_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((-(int)1) <= _8816_v) && (_8816_v <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8816_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8815_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioSymmetryLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2618:4-2626:114 */
      try
      {
        {
          int32_t _8818_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((-(int)1) <= _8818_v) && (_8818_v <= (int)4)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8818_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8817_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioDualRayAnalysisLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2630:4-2638:121 */
      try
      {
        {
          int32_t _8820_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((-(int)1) <= _8820_v) && (_8820_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_DUAL_RAY_ANALYSIS_LEVEL"),_8820_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDualRayAnalysisLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8819_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDualRayAnalysisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioConflictAnalysisLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2642:4-2650:122 */
      try
      {
        {
          int32_t _8822_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((-(int)1) <= _8822_v) && (_8822_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONFLICT_ANALYSIS_LEVEL"),_8822_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConflictAnalysisLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8821_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConflictAnalysisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      int32_t _8823_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8823_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PRESOLVE_AGGREGATOR_USE"),_8823_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2662:4-2670:123 */
      try
      {
        {
          int32_t _8825_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8825_v) && (_8825_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8825_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8824_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2674:4-2682:120 */
      try
      {
        {
          int32_t _8827_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8827_v) && (_8827_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8827_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8826_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioCutSelectionLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2686:4-2694:118 */
      try
      {
        {
          int32_t _8829_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((-(int)1) <= _8829_v) && (_8829_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8829_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8828_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioVbDetectionLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2698:4-2706:117 */
      try
      {
        {
          int32_t _8831_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((-(int)1) <= _8831_v) && (_8831_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8831_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8830_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioBranchDir")))
  {
    {
      int32_t _8832_v = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_8720_value);
      if ((_8832_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_8832_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioRootOptimizer")))
  {
    {
      int32_t _8833_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8720_value);
      if ((_8833_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_8833_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioNodeOptimizer")))
  {
    {
      int32_t _8834_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8720_value);
      if ((_8834_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_8834_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      int32_t _8835_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8835_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_8835_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int32_t _8836_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8836_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_8836_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioSeed")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2750:4-2758:105 */
      try
      {
        {
          int32_t _8838_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8838_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8838_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8837_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioConicOuterApproximation")))
  {
    {
      int32_t _8839_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8839_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_8839_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      int32_t _8840_v = ::mosek::fusion::p_Parameters::string_to_miqcqoreformmethod_value(_8720_value);
      if ((_8840_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_QCQO_REFORMULATION_METHOD"),_8840_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioDataPermutationMethod")))
  {
    {
      int32_t _8841_v = ::mosek::fusion::p_Parameters::string_to_miodatapermmethod_value(_8720_value);
      if ((_8841_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_DATA_PERMUTATION_METHOD"),_8841_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("writeMpsFormat")))
  {
    {
      int32_t _8842_v = ::mosek::fusion::p_Parameters::string_to_mpsformat_value(_8720_value);
      if ((_8842_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeMpsFormat)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_MPS_FORMAT"),_8842_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("writeLpLineWidth")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2794:4-2802:114 */
      try
      {
        {
          int32_t _8844_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)40 <= _8844_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8844_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8843_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("writeLpFullObj")))
  {
    {
      int32_t _8845_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8845_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_8845_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("writeJsonIndentation")))
  {
    {
      int32_t _8846_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8846_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_JSON_INDENTATION"),_8846_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("infeasReportAuto")))
  {
    {
      int32_t _8847_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8847_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_REPORT_AUTO"),_8847_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("licenseWait")))
  {
    {
      int32_t _8848_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8848_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_8848_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int32_t _8849_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8849_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_8849_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("licensePauseTime")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2846:4-2854:114 */
      try
      {
        {
          int32_t _8851_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8851_v) && (_8851_v <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8851_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8850_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("licenseDebug")))
  {
    {
      int32_t _8852_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8852_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_8852_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("log")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2866:4-2874:101 */
      try
      {
        {
          int32_t _8854_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8854_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8854_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8853_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logExpand")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2878:4-2886:107 */
      try
      {
        {
          int32_t _8856_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8856_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8856_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8855_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logFile")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2890:4-2898:105 */
      try
      {
        {
          int32_t _8858_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8858_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8858_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8857_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("logOrder")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2902:4-2910:106 */
      try
      {
        {
          int32_t _8860_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8860_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8860_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8859_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simScaling")))
  {
    {
      int32_t _8861_v = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8720_value);
      if ((_8861_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_8861_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simScalingMethod")))
  {
    {
      int32_t _8862_v = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_8720_value);
      if ((_8862_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_8862_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2930:4-2938:121 */
      try
      {
        {
          int32_t _8864_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8864_v) && (_8864_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8864_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8863_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2942:4-2950:119 */
      try
      {
        {
          int32_t _8866_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((int)0 <= _8866_v) && (_8866_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8866_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8865_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simMaxNumSetbacks")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:2954:4-2962:115 */
      try
      {
        {
          int32_t _8868_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8868_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8868_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8867_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simHotstart")))
  {
    {
      int32_t _8869_v = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_8720_value);
      if ((_8869_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_8869_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simBasisFactorUse")))
  {
    {
      int32_t _8870_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8870_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_8870_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simPrecisionBoost")))
  {
    {
      int32_t _8871_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8871_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionBoost)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRECISION_BOOST"),_8871_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simDegen")))
  {
    {
      int32_t _8872_v = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_8720_value);
      if ((_8872_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_8872_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simReformulation")))
  {
    {
      int32_t _8873_v = ::mosek::fusion::p_Parameters::string_to_simreform_value(_8720_value);
      if ((_8873_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_8873_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simExploitDupvec")))
  {
    {
      int32_t _8874_v = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_8720_value);
      if ((_8874_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_8874_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simSaveLu")))
  {
    {
      int32_t _8875_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8875_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_8875_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simNonSingular")))
  {
    {
      int32_t _8876_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8876_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_8876_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simDualCrash")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3030:4-3038:110 */
      try
      {
        {
          int32_t _8878_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((int)0 <= _8878_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8878_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8877_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("ptfWriteTransform")))
  {
    {
      int32_t _8879_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8879_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteTransform)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PTF_WRITE_TRANSFORM"),_8879_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("ptfWriteSolutions")))
  {
    {
      int32_t _8880_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8880_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PTF_WRITE_SOLUTIONS"),_8880_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("ptfWriteParameters")))
  {
    {
      int32_t _8881_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8881_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteParameters)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PTF_WRITE_PARAMETERS"),_8881_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("ptfWriteSinglePsdTerms")))
  {
    {
      int32_t _8882_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8882_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (ptfWriteSinglePsdTerms)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PTF_WRITE_SINGLE_PSD_TERMS"),_8882_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioCutCmir")))
  {
    {
      int32_t _8883_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8883_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_8883_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioCutClique")))
  {
    {
      int32_t _8884_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8884_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_8884_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioCutImpliedBound")))
  {
    {
      int32_t _8885_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8885_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_8885_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioCutKnapsackCover")))
  {
    {
      int32_t _8886_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8886_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_8886_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioCutGmi")))
  {
    {
      int32_t _8887_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8887_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_8887_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioCutLipro")))
  {
    {
      int32_t _8888_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8888_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_LIPRO"),_8888_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioConstructSol")))
  {
    {
      int32_t _8889_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8889_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONSTRUCT_SOL"),_8889_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3130:4-3138:122 */
      try
      {
        {
          int32_t _8891_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8891_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8890_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3142:4-3150:122 */
      try
      {
        {
          int32_t _8893_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8893_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8892_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("cacheLicense")))
  {
    {
      int32_t _8894_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8894_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_8894_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("intpntRegularizationUse")))
  {
    {
      int32_t _8895_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8895_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_8895_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simSolveForm")))
  {
    {
      int32_t _8896_v = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8720_value);
      if ((_8896_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_8896_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("simSwitchOptimizer")))
  {
    {
      int32_t _8897_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8897_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_8897_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("autoSortABeforeOpt")))
  {
    {
      int32_t _8898_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8720_value);
      if ((_8898_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoSortABeforeOpt)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_AUTO_SORT_A_BEFORE_OPT"),_8898_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("mioRinsMaxNodes")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3194:4-3202:113 */
      try
      {
        {
          int32_t _8900_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((-(int)1) <= _8900_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8900_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8899_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioRensMaxNodes")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3206:4-3214:113 */
      try
      {
        {
          int32_t _8902_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((-(int)1) <= _8902_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RENS_MAX_NODES"),_8902_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRensMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8901_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRensMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioCrossoverMaxNodes")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3218:4-3226:118 */
      try
      {
        {
          int32_t _8904_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((-(int)1) <= _8904_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CROSSOVER_MAX_NODES"),_8904_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCrossoverMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8903_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCrossoverMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioOptFaceMaxNodes")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3230:4-3238:116 */
      try
      {
        {
          int32_t _8906_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if (((-(int)1) <= _8906_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_OPT_FACE_MAX_NODES"),_8906_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioOptFaceMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8905_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioOptFaceMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioFeaspumpLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3242:4-3250:114 */
      try
      {
        {
          int32_t _8908_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((-(int)1) <= _8908_v) && (_8908_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8908_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8907_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioIndependentBlockLevel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3254:4-3262:122 */
      try
      {
        {
          int32_t _8910_v = ::mosek::fusion::Utils::Tools::toInt(_8720_value);
          if ((((-(int)1) <= _8910_v) && (_8910_v <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_INDEPENDENT_BLOCK_LEVEL"),_8910_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioIndependentBlockLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8909_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioIndependentBlockLevel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("remoteUseCompression")))
  {
    {
      int32_t _8911_v = ::mosek::fusion::p_Parameters::string_to_compresstype_value(_8720_value);
      if ((_8911_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_IPAR_REMOTE_USE_COMPRESSION"),_8911_v);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("semidefiniteTolApprox")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3274:4-3284:119 */
      try
      {
        {
          double _8913_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-15 <= _8913_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_SEMIDEFINITE_TOL_APPROX"),_8913_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (semidefiniteTolApprox)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8912_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (semidefiniteTolApprox)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("optimizerMaxTime")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3288:4-3298:114 */
      try
      {
        {
          double _8915_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8915_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8914_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("optimizerMaxTicks")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3302:4-3312:115 */
      try
      {
        {
          double _8917_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TICKS"),_8917_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTicks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8916_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTicks)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("lowerObjCut")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3316:4-3326:109 */
      try
      {
        {
          double _8919_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8919_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8918_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("upperObjCut")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3330:4-3340:109 */
      try
      {
        {
          double _8921_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8921_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8920_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3344:4-3354:118 */
      try
      {
        {
          double _8923_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8923_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8922_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3358:4-3368:118 */
      try
      {
        {
          double _8925_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8925_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8924_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolRelGap")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3372:4-3382:113 */
      try
      {
        {
          double _8927_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-14 <= _8927_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8927_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8926_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolStepSize")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3386:4-3396:115 */
      try
      {
        {
          double _8929_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8929_v) && (_8929_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8929_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8928_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simLuTolRelPiv")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3400:4-3410:112 */
      try
      {
        {
          double _8931_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((1.000000e-06 <= _8931_v) && (_8931_v <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8931_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8930_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolRelStep")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3414:4-3424:114 */
      try
      {
        {
          double _8933_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((1.000000e-04 <= _8933_v) && (_8933_v <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8933_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8932_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolPath")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3428:4-3438:111 */
      try
      {
        {
          double _8935_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8935_v) && (_8935_v <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8935_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8934_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolPfeas")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3442:4-3452:112 */
      try
      {
        {
          double _8937_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8937_v) && (_8937_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8937_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8936_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolDfeas")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3456:4-3466:112 */
      try
      {
        {
          double _8939_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8939_v) && (_8939_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8939_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8938_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolMuRed")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3470:4-3480:112 */
      try
      {
        {
          double _8941_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8941_v) && (_8941_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8941_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8940_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolInfeas")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3484:4-3494:113 */
      try
      {
        {
          double _8943_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8943_v) && (_8943_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8943_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8942_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntCoTolRelGap")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3498:4-3508:115 */
      try
      {
        {
          double _8945_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8945_v) && (_8945_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8945_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8944_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntCoTolPfeas")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3512:4-3522:114 */
      try
      {
        {
          double _8947_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8947_v) && (_8947_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8947_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8946_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntCoTolDfeas")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3526:4-3536:114 */
      try
      {
        {
          double _8949_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8949_v) && (_8949_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8949_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8948_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntCoTolMuRed")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3540:4-3550:114 */
      try
      {
        {
          double _8951_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8951_v) && (_8951_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8951_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8950_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntCoTolNearRel")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3554:4-3564:116 */
      try
      {
        {
          double _8953_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e+00 <= _8953_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8953_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8952_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntCoTolInfeas")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3568:4-3578:115 */
      try
      {
        {
          double _8955_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _8955_v) && (_8955_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8955_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8954_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolPsafe")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3582:4-3592:112 */
      try
      {
        {
          double _8957_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-04 <= _8957_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8957_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8956_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("intpntTolDsafe")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3596:4-3606:112 */
      try
      {
        {
          double _8959_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-04 <= _8959_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8959_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8958_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioMaxTime")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3610:4-3620:108 */
      try
      {
        {
          double _8961_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8961_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8960_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioRelGapConst")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3624:4-3634:112 */
      try
      {
        {
          double _8963_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-15 <= _8963_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8963_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8962_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioTolRelGap")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3638:4-3648:110 */
      try
      {
        {
          double _8965_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8965_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8965_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8964_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioTolAbsGap")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3652:4-3662:110 */
      try
      {
        {
          double _8967_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8967_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8967_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8966_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3666:4-3676:115 */
      try
      {
        {
          double _8969_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-09 <= _8969_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8969_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8968_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioDjcMaxBigm")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3680:4-3690:111 */
      try
      {
        {
          double _8971_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8971_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8971_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8970_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioCliqueTableSizeFactor")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3694:4-3704:122 */
      try
      {
        {
          double _8973_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((-1.000000e+00) <= _8973_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_CLIQUE_TABLE_SIZE_FACTOR"),_8973_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCliqueTableSizeFactor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8972_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCliqueTableSizeFactor)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simPrecisionScalingNormal")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3708:4-3718:123 */
      try
      {
        {
          double _8975_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e+00 <= _8975_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_PRECISION_SCALING_NORMAL"),_8975_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionScalingNormal)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8974_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionScalingNormal)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simPrecisionScalingExtended")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3722:4-3732:125 */
      try
      {
        {
          double _8977_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e+00 <= _8977_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_PRECISION_SCALING_EXTENDED"),_8977_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionScalingExtended)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8976_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrecisionScalingExtended)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("basisTolX")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3736:4-3746:107 */
      try
      {
        {
          double _8979_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-09 <= _8979_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8979_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8978_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("basisTolS")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3750:4-3760:107 */
      try
      {
        {
          double _8981_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-09 <= _8981_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8981_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8980_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("basisRelTolS")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3764:4-3774:110 */
      try
      {
        {
          double _8983_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8983_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8983_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8982_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveTolX")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3778:4-3788:110 */
      try
      {
        {
          double _8985_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8985_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8985_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8984_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3792:4-3802:133 */
      try
      {
        {
          double _8987_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8987_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8987_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8986_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveTolS")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3806:4-3816:110 */
      try
      {
        {
          double _8989_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8989_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8989_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8988_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveTolAbsLindep")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3820:4-3830:118 */
      try
      {
        {
          double _8991_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8991_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8991_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8990_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("presolveTolRelLindep")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3834:4-3844:118 */
      try
      {
        {
          double _8993_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8993_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8993_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8992_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("foldingTolEq")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3848:4-3858:110 */
      try
      {
        {
          double _8995_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((0.000000e+00 <= _8995_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_FOLDING_TOL_EQ"),_8995_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (foldingTolEq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8994_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (foldingTolEq)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("simplexAbsTolPiv")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3862:4-3872:114 */
      try
      {
        {
          double _8997_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if ((1.000000e-12 <= _8997_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8997_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8996_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioTolFeas")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3876:4-3886:108 */
      try
      {
        {
          double _8999_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((1.000000e-09 <= _8999_v) && (_8999_v <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8999_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8998_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      /* Try @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:3890:4-3900:127 */
      try
      {
        {
          double _9001_v = ::mosek::fusion::Utils::Tools::toDouble(_8720_value);
          if (((0.000000e+00 <= _9001_v) && (_9001_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_9001_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _9000_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_8719_name == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_8720_value);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("remoteOptserverHost")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_OPTSERVER_HOST"),_8720_value);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("remoteTlsCertPath")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_TLS_CERT_PATH"),_8720_value);
      return;
    }
  }
  {}
  if ((_8719_name == std::string ("remoteTlsCert")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8718_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_TLS_CERT"),_8720_value);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.string_to_variabletype_value
// Method mosek.fusion.Parameters.string_to_variabletype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1982:0-1987:1
int32_t mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _9002_v)
{
  if ((_9002_v == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9002_v == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_variabletype_value

// Begin mosek.fusion.Parameters.string_to_value_value
// Method mosek.fusion.Parameters.string_to_value_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1976:0-1981:1
int32_t mosek::fusion::p_Parameters::string_to_value_value(const std::string & _9003_v)
{
  if ((_9003_v == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_9003_v == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_value_value

// Begin mosek.fusion.Parameters.string_to_streamtype_value
// Method mosek.fusion.Parameters.string_to_streamtype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1968:0-1975:1
int32_t mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _9004_v)
{
  if ((_9004_v == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9004_v == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9004_v == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9004_v == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_streamtype_value

// Begin mosek.fusion.Parameters.string_to_startpointtype_value
// Method mosek.fusion.Parameters.string_to_startpointtype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1961:0-1967:1
int32_t mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _9005_v)
{
  if ((_9005_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9005_v == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9005_v == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_startpointtype_value

// Begin mosek.fusion.Parameters.string_to_stakey_value
// Method mosek.fusion.Parameters.string_to_stakey_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1950:0-1960:1
int32_t mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _9006_v)
{
  if ((_9006_v == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9006_v == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9006_v == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9006_v == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9006_v == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9006_v == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9006_v == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_stakey_value

// Begin mosek.fusion.Parameters.string_to_sparam_value
// Method mosek.fusion.Parameters.string_to_sparam_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1922:0-1949:1
int32_t mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _9007_v)
{
  if ((_9007_v == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9007_v == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9007_v == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9007_v == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9007_v == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9007_v == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9007_v == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9007_v == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9007_v == std::string ("solFilterXcLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9007_v == std::string ("solFilterXcUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9007_v == std::string ("solFilterXxLow")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9007_v == std::string ("solFilterXxUpr")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9007_v == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9007_v == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9007_v == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9007_v == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9007_v == std::string ("statName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9007_v == std::string ("statKey")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9007_v == std::string ("sensitivityResFileName")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9007_v == std::string ("sensitivityFileName")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9007_v == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9007_v == std::string ("remoteOptserverHost")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9007_v == std::string ("remoteTlsCertPath")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9007_v == std::string ("remoteTlsCert")))
  {
    {
      return (int)14;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_sparam_value

// Begin mosek.fusion.Parameters.string_to_solveform_value
// Method mosek.fusion.Parameters.string_to_solveform_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1915:0-1921:1
int32_t mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _9008_v)
{
  if ((_9008_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9008_v == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9008_v == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solveform_value

// Begin mosek.fusion.Parameters.string_to_soltype_value
// Method mosek.fusion.Parameters.string_to_soltype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1908:0-1914:1
int32_t mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _9009_v)
{
  if ((_9009_v == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9009_v == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9009_v == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_soltype_value

// Begin mosek.fusion.Parameters.string_to_solsta_value
// Method mosek.fusion.Parameters.string_to_solsta_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1894:0-1907:1
int32_t mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _9010_v)
{
  if ((_9010_v == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9010_v == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9010_v == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9010_v == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9010_v == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9010_v == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9010_v == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9010_v == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9010_v == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9010_v == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solsta_value

// Begin mosek.fusion.Parameters.string_to_solitem_value
// Method mosek.fusion.Parameters.string_to_solitem_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1882:0-1893:1
int32_t mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _9011_v)
{
  if ((_9011_v == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9011_v == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9011_v == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9011_v == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9011_v == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9011_v == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9011_v == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9011_v == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solitem_value

// Begin mosek.fusion.Parameters.string_to_simseltype_value
// Method mosek.fusion.Parameters.string_to_simseltype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1872:0-1881:1
int32_t mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _9012_v)
{
  if ((_9012_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9012_v == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9012_v == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9012_v == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9012_v == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9012_v == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simseltype_value

// Begin mosek.fusion.Parameters.string_to_sensitivitytype_value
// Method mosek.fusion.Parameters.string_to_sensitivitytype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1867:0-1871:1
int32_t mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _9013_v)
{
  if ((_9013_v == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_sensitivitytype_value

// Begin mosek.fusion.Parameters.string_to_scalingmethod_value
// Method mosek.fusion.Parameters.string_to_scalingmethod_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1861:0-1866:1
int32_t mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _9014_v)
{
  if ((_9014_v == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9014_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_scalingmethod_value

// Begin mosek.fusion.Parameters.string_to_scalingtype_value
// Method mosek.fusion.Parameters.string_to_scalingtype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1855:0-1860:1
int32_t mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _9015_v)
{
  if ((_9015_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9015_v == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_scalingtype_value

// Begin mosek.fusion.Parameters.string_to_rescodetype_value
// Method mosek.fusion.Parameters.string_to_rescodetype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1846:0-1854:1
int32_t mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _9016_v)
{
  if ((_9016_v == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9016_v == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9016_v == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9016_v == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9016_v == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_rescodetype_value

// Begin mosek.fusion.Parameters.string_to_rescode_value
// Method mosek.fusion.Parameters.string_to_rescode_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1289:0-1845:1
int32_t mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _9017_v)
{
  if ((_9017_v == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnInvalidMpsName")))
  {
    {
      return (int)504;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnInvalidMpsObjName")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)509;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnPresolvePrimalPerturbations")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)830;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)831;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnNoInfeasibilityReportWhenMatrixVariables")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnGetdualIgnoresIntegrality")))
  {
    {
      return (int)940;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnModifiedDoubleParameter")))
  {
    {
      return (int)970;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnLargeFij")))
  {
    {
      return (int)980;
    }
  }
  {}
  if ((_9017_v == std::string ("wrnPtfUnknownSection")))
  {
    {
      return (int)981;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseOldServerVersion")))
  {
    {
      return (int)1003;
    }
  }
  {}
  if ((_9017_v == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_9017_v == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_9017_v == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_9017_v == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_9017_v == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_9017_v == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_9017_v == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_9017_v == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_9017_v == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_9017_v == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_9017_v == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_9017_v == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_9017_v == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_9017_v == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_9017_v == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_9017_v == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_9017_v == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_9017_v == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_9017_v == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_9017_v == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_9017_v == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_9017_v == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_9017_v == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_9017_v == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_9017_v == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_9017_v == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_9017_v == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_9017_v == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_9017_v == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_9017_v == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_9017_v == std::string ("errReadGzip")))
  {
    {
      return (int)1067;
    }
  }
  {}
  if ((_9017_v == std::string ("errReadZstd")))
  {
    {
      return (int)1068;
    }
  }
  {}
  if ((_9017_v == std::string ("errReadAsync")))
  {
    {
      return (int)1069;
    }
  }
  {}
  if ((_9017_v == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_9017_v == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_9017_v == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_9017_v == std::string ("errSparsitySpecification")))
  {
    {
      return (int)1073;
    }
  }
  {}
  if ((_9017_v == std::string ("errMismatchingDimension")))
  {
    {
      return (int)1074;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_9017_v == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_9017_v == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_9017_v == std::string ("errDimensionSpecification")))
  {
    {
      return (int)1082;
    }
  }
  {}
  if ((_9017_v == std::string ("errAxisNameSpecification")))
  {
    {
      return (int)1083;
    }
  }
  {}
  if ((_9017_v == std::string ("errReadPrematureEof")))
  {
    {
      return (int)1089;
    }
  }
  {}
  if ((_9017_v == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_9017_v == std::string ("errWriteLpInvalidVarNames")))
  {
    {
      return (int)1091;
    }
  }
  {}
  if ((_9017_v == std::string ("errWriteLpDuplicateVarNames")))
  {
    {
      return (int)1092;
    }
  }
  {}
  if ((_9017_v == std::string ("errWriteLpInvalidConNames")))
  {
    {
      return (int)1093;
    }
  }
  {}
  if ((_9017_v == std::string ("errWriteLpDuplicateConNames")))
  {
    {
      return (int)1094;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidKey")))
  {
    {
      return (int)1129;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidIndicatorConstraint")))
  {
    {
      return (int)1130;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidIndicatorVariable")))
  {
    {
      return (int)1131;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidIndicatorValue")))
  {
    {
      return (int)1132;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsInvalidIndicatorQuadraticConstraint")))
  {
    {
      return (int)1133;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfSyntax")))
  {
    {
      return (int)1134;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1136;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfMismatchedTag")))
  {
    {
      return (int)1137;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfDuplicateBound")))
  {
    {
      return (int)1138;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfDuplicateConstraintName")))
  {
    {
      return (int)1139;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfInvalidConeType")))
  {
    {
      return (int)1140;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfIncorrectTagParam")))
  {
    {
      return (int)1141;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfInvalidTag")))
  {
    {
      return (int)1142;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfDuplicateConeEntry")))
  {
    {
      return (int)1143;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfTooLarge")))
  {
    {
      return (int)1144;
    }
  }
  {}
  if ((_9017_v == std::string ("errOpfDualIntegerSolution")))
  {
    {
      return (int)1146;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_9017_v == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_9017_v == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpExpectedNumber")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_9017_v == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpIndicatorVar")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpExpectedObjective")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpExpectedConstraintRelation")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpAmbiguousConstraintBound")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_9017_v == std::string ("errLpDuplicateSection")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_9017_v == std::string ("errReadLpDelayedRowsNotSupported")))
  {
    {
      return (int)1165;
    }
  }
  {}
  if ((_9017_v == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_9017_v == std::string ("errWriteAsync")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_9017_v == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_9017_v == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_9017_v == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_9017_v == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_9017_v == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_9017_v == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_9017_v == std::string ("errPtfIncompatibility")))
  {
    {
      return (int)1181;
    }
  }
  {}
  if ((_9017_v == std::string ("errPtfUndefinedItem")))
  {
    {
      return (int)1182;
    }
  }
  {}
  if ((_9017_v == std::string ("errPtfInconsistency")))
  {
    {
      return (int)1183;
    }
  }
  {}
  if ((_9017_v == std::string ("errPtfFormat")))
  {
    {
      return (int)1184;
    }
  }
  {}
  if ((_9017_v == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_9017_v == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_9017_v == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_9017_v == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_9017_v == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_9017_v == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_9017_v == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_9017_v == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_9017_v == std::string ("errIndexIsNotUnique")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamName")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamNameDou")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamNameInt")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamNameStr")))
  {
    {
      return (int)1209;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_9017_v == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_9017_v == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_9017_v == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_9017_v == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_9017_v == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_9017_v == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_9017_v == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_9017_v == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_9017_v == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_9017_v == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_9017_v == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_9017_v == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_9017_v == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_9017_v == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_9017_v == std::string ("errUnallowedWhichsol")))
  {
    {
      return (int)1248;
    }
  }
  {}
  if ((_9017_v == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_9017_v == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_9017_v == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_9017_v == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_9017_v == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_9017_v == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvRescode")))
  {
    {
      return (int)1261;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvIinf")))
  {
    {
      return (int)1262;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvLiinf")))
  {
    {
      return (int)1263;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvDinf")))
  {
    {
      return (int)1264;
    }
  }
  {}
  if ((_9017_v == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_9017_v == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_9017_v == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_9017_v == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_9017_v == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_9017_v == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_9017_v == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_9017_v == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_9017_v == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_9017_v == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_9017_v == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_9017_v == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_9017_v == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_9017_v == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_9017_v == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_9017_v == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_9017_v == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_9017_v == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_9017_v == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_9017_v == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_9017_v == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_9017_v == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_9017_v == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_9017_v == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_9017_v == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_9017_v == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_9017_v == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_9017_v == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_9017_v == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_9017_v == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_9017_v == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_9017_v == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_9017_v == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_9017_v == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_9017_v == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_9017_v == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_9017_v == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_9017_v == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_9017_v == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_9017_v == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfInDoubleData")))
  {
    {
      return (int)1451;
    }
  }
  {}
  if ((_9017_v == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_9017_v == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidCfix")))
  {
    {
      return (int)1469;
    }
  }
  {}
  if ((_9017_v == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_9017_v == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_9017_v == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidCj")))
  {
    {
      return (int)1474;
    }
  }
  {}
  if ((_9017_v == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_9017_v == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_9017_v == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_9017_v == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_9017_v == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_9017_v == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_9017_v == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_9017_v == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_9017_v == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_9017_v == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_9017_v == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_9017_v == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_9017_v == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_9017_v == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_9017_v == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_9017_v == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_9017_v == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_9017_v == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_9017_v == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_9017_v == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_9017_v == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_9017_v == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_9017_v == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_9017_v == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_9017_v == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_9017_v == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_9017_v == std::string ("errReadWrite")))
  {
    {
      return (int)2563;
    }
  }
  {}
  if ((_9017_v == std::string ("errTaskPrematureEof")))
  {
    {
      return (int)2564;
    }
  }
  {}
  if ((_9017_v == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_9017_v == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_9017_v == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_9017_v == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_9017_v == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_9017_v == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_9017_v == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_9017_v == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_9017_v == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_9017_v == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_9017_v == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_9017_v == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_9017_v == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_9017_v == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_9017_v == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_9017_v == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_9017_v == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_9017_v == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_9017_v == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForQuadraticTerms")))
  {
    {
      return (int)4006;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForDisjunctiveConstraints")))
  {
    {
      return (int)4011;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFileFormatForAffineConicConstraints")))
  {
    {
      return (int)4012;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateDomainNames")))
  {
    {
      return (int)4504;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateDjcNames")))
  {
    {
      return (int)4505;
    }
  }
  {}
  if ((_9017_v == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_9017_v == std::string ("errArgumentIsTooSmall")))
  {
    {
      return (int)5004;
    }
  }
  {}
  if ((_9017_v == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_9017_v == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_9017_v == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_9017_v == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_9017_v == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7127;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7140;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7141;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumObjacoord")))
  {
    {
      return (int)7150;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumObjfcoord")))
  {
    {
      return (int)7151;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumAcoord")))
  {
    {
      return (int)7152;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumBcoord")))
  {
    {
      return (int)7153;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumFcoord")))
  {
    {
      return (int)7155;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumHcoord")))
  {
    {
      return (int)7156;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumDcoord")))
  {
    {
      return (int)7157;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfExpectedAKeyword")))
  {
    {
      return (int)7158;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidNumPsdcon")))
  {
    {
      return (int)7200;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfDuplicatePsdcon")))
  {
    {
      return (int)7201;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidDimensionOfPsdcon")))
  {
    {
      return (int)7202;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidPsdconIndex")))
  {
    {
      return (int)7203;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidPsdconVariableIndex")))
  {
    {
      return (int)7204;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfInvalidPsdconBlockIndex")))
  {
    {
      return (int)7205;
    }
  }
  {}
  if ((_9017_v == std::string ("errCbfUnsupportedChange")))
  {
    {
      return (int)7210;
    }
  }
  {}
  if ((_9017_v == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_9017_v == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_9017_v == std::string ("errMpsWriteCplexInvalidConeType")))
  {
    {
      return (int)7750;
    }
  }
  {}
  if ((_9017_v == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_9017_v == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_9017_v == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_9017_v == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_9017_v == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_9017_v == std::string ("errGetdualNotAvailable")))
  {
    {
      return (int)7820;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerAddress")))
  {
    {
      return (int)8004;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerCertificate")))
  {
    {
      return (int)8005;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerTlsClient")))
  {
    {
      return (int)8006;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerAccessToken")))
  {
    {
      return (int)8007;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerProblemSize")))
  {
    {
      return (int)8008;
    }
  }
  {}
  if ((_9017_v == std::string ("errServerHardTimeout")))
  {
    {
      return (int)8009;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateIndexInASparseMatrix")))
  {
    {
      return (int)20050;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateIndexInAfeidxList")))
  {
    {
      return (int)20060;
    }
  }
  {}
  if ((_9017_v == std::string ("errDuplicateFij")))
  {
    {
      return (int)20100;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidFij")))
  {
    {
      return (int)20101;
    }
  }
  {}
  if ((_9017_v == std::string ("errHugeFij")))
  {
    {
      return (int)20102;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidG")))
  {
    {
      return (int)20103;
    }
  }
  {}
  if ((_9017_v == std::string ("errInvalidB")))
  {
    {
      return (int)20150;
    }
  }
  {}
  if ((_9017_v == std::string ("errDomainInvalidIndex")))
  {
    {
      return (int)20400;
    }
  }
  {}
  if ((_9017_v == std::string ("errDomainDimension")))
  {
    {
      return (int)20401;
    }
  }
  {}
  if ((_9017_v == std::string ("errDomainDimensionPsd")))
  {
    {
      return (int)20402;
    }
  }
  {}
  if ((_9017_v == std::string ("errNotPowerDomain")))
  {
    {
      return (int)20403;
    }
  }
  {}
  if ((_9017_v == std::string ("errDomainPowerInvalidAlpha")))
  {
    {
      return (int)20404;
    }
  }
  {}
  if ((_9017_v == std::string ("errDomainPowerNegativeAlpha")))
  {
    {
      return (int)20405;
    }
  }
  {}
  if ((_9017_v == std::string ("errDomainPowerNleft")))
  {
    {
      return (int)20406;
    }
  }
  {}
  if ((_9017_v == std::string ("errAfeInvalidIndex")))
  {
    {
      return (int)20500;
    }
  }
  {}
  if ((_9017_v == std::string ("errAccInvalidIndex")))
  {
    {
      return (int)20600;
    }
  }
  {}
  if ((_9017_v == std::string ("errAccInvalidEntryIndex")))
  {
    {
      return (int)20601;
    }
  }
  {}
  if ((_9017_v == std::string ("errAccAfeDomainMismatch")))
  {
    {
      return (int)20602;
    }
  }
  {}
  if ((_9017_v == std::string ("errDjcInvalidIndex")))
  {
    {
      return (int)20700;
    }
  }
  {}
  if ((_9017_v == std::string ("errDjcUnsupportedDomainType")))
  {
    {
      return (int)20701;
    }
  }
  {}
  if ((_9017_v == std::string ("errDjcAfeDomainMismatch")))
  {
    {
      return (int)20702;
    }
  }
  {}
  if ((_9017_v == std::string ("errDjcInvalidTermSize")))
  {
    {
      return (int)20703;
    }
  }
  {}
  if ((_9017_v == std::string ("errDjcDomainTermsizeMismatch")))
  {
    {
      return (int)20704;
    }
  }
  {}
  if ((_9017_v == std::string ("errDjcTotalNumTermsMismatch")))
  {
    {
      return (int)20705;
    }
  }
  {}
  if ((_9017_v == std::string ("errUndefSolution")))
  {
    {
      return (int)22000;
    }
  }
  {}
  if ((_9017_v == std::string ("errNoDoty")))
  {
    {
      return (int)22010;
    }
  }
  {}
  if ((_9017_v == std::string ("trmMaxIterations")))
  {
    {
      return (int)100000;
    }
  }
  {}
  if ((_9017_v == std::string ("trmMaxTime")))
  {
    {
      return (int)100001;
    }
  }
  {}
  if ((_9017_v == std::string ("trmObjectiveRange")))
  {
    {
      return (int)100002;
    }
  }
  {}
  if ((_9017_v == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)100008;
    }
  }
  {}
  if ((_9017_v == std::string ("trmMioNumBranches")))
  {
    {
      return (int)100009;
    }
  }
  {}
  if ((_9017_v == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)100015;
    }
  }
  {}
  if ((_9017_v == std::string ("trmStall")))
  {
    {
      return (int)100006;
    }
  }
  {}
  if ((_9017_v == std::string ("trmUserCallback")))
  {
    {
      return (int)100007;
    }
  }
  {}
  if ((_9017_v == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)100020;
    }
  }
  {}
  if ((_9017_v == std::string ("trmNumericalProblem")))
  {
    {
      return (int)100025;
    }
  }
  {}
  if ((_9017_v == std::string ("trmLostRace")))
  {
    {
      return (int)100027;
    }
  }
  {}
  if ((_9017_v == std::string ("trmInternal")))
  {
    {
      return (int)100030;
    }
  }
  {}
  if ((_9017_v == std::string ("trmInternalStop")))
  {
    {
      return (int)100031;
    }
  }
  {}
  if ((_9017_v == std::string ("trmServerMaxTime")))
  {
    {
      return (int)100032;
    }
  }
  {}
  if ((_9017_v == std::string ("trmServerMaxMemory")))
  {
    {
      return (int)100033;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_rescode_value

// Begin mosek.fusion.Parameters.string_to_prosta_value
// Method mosek.fusion.Parameters.string_to_prosta_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1276:0-1288:1
int32_t mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _9018_v)
{
  if ((_9018_v == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9018_v == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9018_v == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9018_v == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9018_v == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9018_v == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9018_v == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9018_v == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9018_v == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_prosta_value

// Begin mosek.fusion.Parameters.string_to_problemtype_value
// Method mosek.fusion.Parameters.string_to_problemtype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1267:0-1275:1
int32_t mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _9019_v)
{
  if ((_9019_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9019_v == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9019_v == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9019_v == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9019_v == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_problemtype_value

// Begin mosek.fusion.Parameters.string_to_problemitem_value
// Method mosek.fusion.Parameters.string_to_problemitem_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1260:0-1266:1
int32_t mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _9020_v)
{
  if ((_9020_v == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9020_v == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9020_v == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_problemitem_value

// Begin mosek.fusion.Parameters.string_to_parametertype_value
// Method mosek.fusion.Parameters.string_to_parametertype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1252:0-1259:1
int32_t mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _9021_v)
{
  if ((_9021_v == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9021_v == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9021_v == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9021_v == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_parametertype_value

// Begin mosek.fusion.Parameters.string_to_foldingmode_value
// Method mosek.fusion.Parameters.string_to_foldingmode_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1244:0-1251:1
int32_t mosek::fusion::p_Parameters::string_to_foldingmode_value(const std::string & _9022_v)
{
  if ((_9022_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9022_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9022_v == std::string ("freeUnlessBasic")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9022_v == std::string ("force")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_foldingmode_value

// Begin mosek.fusion.Parameters.string_to_presolvemode_value
// Method mosek.fusion.Parameters.string_to_presolvemode_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1237:0-1243:1
int32_t mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _9023_v)
{
  if ((_9023_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9023_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9023_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_presolvemode_value

// Begin mosek.fusion.Parameters.string_to_orderingtype_value
// Method mosek.fusion.Parameters.string_to_orderingtype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1227:0-1236:1
int32_t mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _9024_v)
{
  if ((_9024_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9024_v == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9024_v == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9024_v == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9024_v == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9024_v == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_orderingtype_value

// Begin mosek.fusion.Parameters.string_to_optimizertype_value
// Method mosek.fusion.Parameters.string_to_optimizertype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1214:0-1226:1
int32_t mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _9025_v)
{
  if ((_9025_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9025_v == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9025_v == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9025_v == std::string ("primalSimplex")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9025_v == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9025_v == std::string ("newPrimalSimplex")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9025_v == std::string ("newDualSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9025_v == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9025_v == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_optimizertype_value

// Begin mosek.fusion.Parameters.string_to_onoffkey_value
// Method mosek.fusion.Parameters.string_to_onoffkey_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1208:0-1213:1
int32_t mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _9026_v)
{
  if ((_9026_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9026_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_onoffkey_value

// Begin mosek.fusion.Parameters.string_to_objsense_value
// Method mosek.fusion.Parameters.string_to_objsense_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1202:0-1207:1
int32_t mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _9027_v)
{
  if ((_9027_v == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9027_v == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_objsense_value

// Begin mosek.fusion.Parameters.string_to_mpsformat_value
// Method mosek.fusion.Parameters.string_to_mpsformat_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1194:0-1201:1
int32_t mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _9028_v)
{
  if ((_9028_v == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9028_v == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9028_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9028_v == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mpsformat_value

// Begin mosek.fusion.Parameters.string_to_miovarseltype_value
// Method mosek.fusion.Parameters.string_to_miovarseltype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1187:0-1193:1
int32_t mosek::fusion::p_Parameters::string_to_miovarseltype_value(const std::string & _9029_v)
{
  if ((_9029_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9029_v == std::string ("pseudocost")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9029_v == std::string ("strong")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miovarseltype_value

// Begin mosek.fusion.Parameters.string_to_mionodeseltype_value
// Method mosek.fusion.Parameters.string_to_mionodeseltype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1179:0-1186:1
int32_t mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _9030_v)
{
  if ((_9030_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9030_v == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9030_v == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9030_v == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mionodeseltype_value

// Begin mosek.fusion.Parameters.string_to_miomode_value
// Method mosek.fusion.Parameters.string_to_miomode_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1173:0-1178:1
int32_t mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _9031_v)
{
  if ((_9031_v == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9031_v == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miomode_value

// Begin mosek.fusion.Parameters.string_to_miocontsoltype_value
// Method mosek.fusion.Parameters.string_to_miocontsoltype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1165:0-1172:1
int32_t mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _9032_v)
{
  if ((_9032_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9032_v == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9032_v == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9032_v == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miocontsoltype_value

// Begin mosek.fusion.Parameters.string_to_miodatapermmethod_value
// Method mosek.fusion.Parameters.string_to_miodatapermmethod_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1158:0-1164:1
int32_t mosek::fusion::p_Parameters::string_to_miodatapermmethod_value(const std::string & _9033_v)
{
  if ((_9033_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9033_v == std::string ("cyclicShift")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9033_v == std::string ("random")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miodatapermmethod_value

// Begin mosek.fusion.Parameters.string_to_miqcqoreformmethod_value
// Method mosek.fusion.Parameters.string_to_miqcqoreformmethod_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1148:0-1157:1
int32_t mosek::fusion::p_Parameters::string_to_miqcqoreformmethod_value(const std::string & _9034_v)
{
  if ((_9034_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9034_v == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9034_v == std::string ("linearization")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9034_v == std::string ("eigenValMethod")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9034_v == std::string ("diagSdp")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9034_v == std::string ("relaxSdp")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miqcqoreformmethod_value

// Begin mosek.fusion.Parameters.string_to_branchdir_value
// Method mosek.fusion.Parameters.string_to_branchdir_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:1136:0-1147:1
int32_t mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _9035_v)
{
  if ((_9035_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9035_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9035_v == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9035_v == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9035_v == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9035_v == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9035_v == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9035_v == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_branchdir_value

// Begin mosek.fusion.Parameters.string_to_iparam_value
// Method mosek.fusion.Parameters.string_to_iparam_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:943:0-1135:1
int32_t mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _9036_v)
{
  if ((_9036_v == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9036_v == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntHotstart")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9036_v == std::string ("numThreads")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_9036_v == std::string ("timingLevel")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_9036_v == std::string ("mtSpincount")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_9036_v == std::string ("maxNumWarnings")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_9036_v == std::string ("optimizer")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_9036_v == std::string ("simPrecision")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_9036_v == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9036_v == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_9036_v == std::string ("logIncludeSummary")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_9036_v == std::string ("logCutSecondOpt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_9036_v == std::string ("logAnaPro")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_9036_v == std::string ("logLocalInfo")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_9036_v == std::string ("logBi")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_9036_v == std::string ("logBiFreq")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_9036_v == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntStartingPoint")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntDiffStep")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntScaling")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntSolveForm")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_9036_v == std::string ("logIntpnt")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntMaxIterations")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntOffColTrh")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntOrderMethod")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntBasis")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9036_v == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9036_v == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveUse")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_9036_v == std::string ("logPresolve")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveLindepUse")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveLindepNew")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_9036_v == std::string ("foldingUse")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9036_v == std::string ("simDetectPwl")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_9036_v == std::string ("simPrimalCrash")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_9036_v == std::string ("logSim")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_9036_v == std::string ("logSimFreq")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_9036_v == std::string ("logSimFreqGigaTicks")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_9036_v == std::string ("heartbeatSimFreqTicks")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9036_v == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_9036_v == std::string ("simPrimalSelection")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_9036_v == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_9036_v == std::string ("simDualSelection")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_9036_v == std::string ("simMaxIterations")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_9036_v == std::string ("simHotstartLu")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_9036_v == std::string ("simRefactorFreq")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_9036_v == std::string ("simSeed")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_9036_v == std::string ("mioMode")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_9036_v == std::string ("logMio")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_9036_v == std::string ("logMioFreq")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_9036_v == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_9036_v == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_9036_v == std::string ("mioMaxNumRestarts")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_9036_v == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_9036_v == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_9036_v == std::string ("mioNodeSelection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_9036_v == std::string ("mioVarSelection")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_9036_v == std::string ("mioMinRel")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_9036_v == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_9036_v == std::string ("mioProbingLevel")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_9036_v == std::string ("mioSymmetryLevel")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_9036_v == std::string ("mioDualRayAnalysisLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_9036_v == std::string ("mioConflictAnalysisLevel")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_9036_v == std::string ("mioPresolveAggregatorUse")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_9036_v == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_9036_v == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_9036_v == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_9036_v == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_9036_v == std::string ("mioBranchDir")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_9036_v == std::string ("mioRootOptimizer")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_9036_v == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_9036_v == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_9036_v == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_9036_v == std::string ("mioSeed")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_9036_v == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_9036_v == std::string ("mioQcqoReformulationMethod")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_9036_v == std::string ("mioDataPermutationMethod")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_9036_v == std::string ("readAsync")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_9036_v == std::string ("writeAsync")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_9036_v == std::string ("readKeepFreeCon")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_9036_v == std::string ("readMpsFormat")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_9036_v == std::string ("writeMpsFormat")))
  {
    {
      return (int)182;
    }
  }
  {}
  if ((_9036_v == std::string ("readMpsWidth")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_9036_v == std::string ("readDebug")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_9036_v == std::string ("writeFreeCon")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_9036_v == std::string ("writeGenericNames")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_9036_v == std::string ("writeCompression")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_9036_v == std::string ("writeMpsInt")))
  {
    {
      return (int)183;
    }
  }
  {}
  if ((_9036_v == std::string ("writeLpLineWidth")))
  {
    {
      return (int)181;
    }
  }
  {}
  if ((_9036_v == std::string ("writeLpFullObj")))
  {
    {
      return (int)180;
    }
  }
  {}
  if ((_9036_v == std::string ("writeJsonIndentation")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_9036_v == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)187;
    }
  }
  {}
  if ((_9036_v == std::string ("writeSolHead")))
  {
    {
      return (int)186;
    }
  }
  {}
  if ((_9036_v == std::string ("writeSolConstraints")))
  {
    {
      return (int)185;
    }
  }
  {}
  if ((_9036_v == std::string ("writeSolVariables")))
  {
    {
      return (int)188;
    }
  }
  {}
  if ((_9036_v == std::string ("writeSolBarvariables")))
  {
    {
      return (int)184;
    }
  }
  {}
  if ((_9036_v == std::string ("writeBasHead")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_9036_v == std::string ("writeBasConstraints")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_9036_v == std::string ("writeBasVariables")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_9036_v == std::string ("writeIntHead")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_9036_v == std::string ("writeIntConstraints")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_9036_v == std::string ("writeIntVariables")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_9036_v == std::string ("solReadNameWidth")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_9036_v == std::string ("solReadWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_9036_v == std::string ("infeasReportAuto")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9036_v == std::string ("infeasReportLevel")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9036_v == std::string ("infeasGenericNames")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9036_v == std::string ("logInfeasAna")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_9036_v == std::string ("licenseWait")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_9036_v == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_9036_v == std::string ("licensePauseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_9036_v == std::string ("licenseDebug")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_9036_v == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_9036_v == std::string ("log")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_9036_v == std::string ("logExpand")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_9036_v == std::string ("logFile")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_9036_v == std::string ("logOrder")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_9036_v == std::string ("logSensitivity")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_9036_v == std::string ("logSensitivityOpt")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_9036_v == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_9036_v == std::string ("paramReadCaseName")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_9036_v == std::string ("paramReadIgnError")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_9036_v == std::string ("simScaling")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_9036_v == std::string ("simScalingMethod")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_9036_v == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_9036_v == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_9036_v == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_9036_v == std::string ("simHotstart")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_9036_v == std::string ("simBasisFactorUse")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_9036_v == std::string ("simPrecisionBoost")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_9036_v == std::string ("simDegen")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_9036_v == std::string ("simReformulation")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_9036_v == std::string ("simExploitDupvec")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_9036_v == std::string ("simSaveLu")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_9036_v == std::string ("simNonSingular")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_9036_v == std::string ("simDualCrash")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_9036_v == std::string ("logStorage")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteLineLength")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteHints")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteParameters")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteProblem")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteHeader")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteSolutions")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteSolBas")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteSolItg")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_9036_v == std::string ("opfWriteSolItr")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_9036_v == std::string ("ptfWriteTransform")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_9036_v == std::string ("ptfWriteSolutions")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_9036_v == std::string ("ptfWriteParameters")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_9036_v == std::string ("ptfWriteSinglePsdTerms")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_9036_v == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_9036_v == std::string ("mioCutCmir")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_9036_v == std::string ("mioCutClique")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_9036_v == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_9036_v == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_9036_v == std::string ("mioCutGmi")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_9036_v == std::string ("mioCutLipro")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_9036_v == std::string ("sensitivityType")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_9036_v == std::string ("mioConstructSol")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_9036_v == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_9036_v == std::string ("sensitivityAll")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_9036_v == std::string ("logFeasRepair")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_9036_v == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9036_v == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_9036_v == std::string ("simSolveForm")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_9036_v == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_9036_v == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_9036_v == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9036_v == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9036_v == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9036_v == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9036_v == std::string ("compressStatfile")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9036_v == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_9036_v == std::string ("mioRensMaxNodes")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_9036_v == std::string ("mioCrossoverMaxNodes")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_9036_v == std::string ("mioOptFaceMaxNodes")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_9036_v == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_9036_v == std::string ("mioIndependentBlockLevel")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_9036_v == std::string ("ng")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_9036_v == std::string ("remoteUseCompression")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_9036_v == std::string ("getdualConvertLmis")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iparam_value

// Begin mosek.fusion.Parameters.string_to_iomode_value
// Method mosek.fusion.Parameters.string_to_iomode_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:936:0-942:1
int32_t mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _9037_v)
{
  if ((_9037_v == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9037_v == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9037_v == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iomode_value

// Begin mosek.fusion.Parameters.string_to_internal_iinf_value
// Method mosek.fusion.Parameters.string_to_internal_iinf_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:785:0-935:1
int32_t mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _9038_v)
{
  if ((_9038_v == std::string ("versionMajor")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_9038_v == std::string ("versionMinor")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_9038_v == std::string ("versionRevision")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveLindepWork")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveLindepPivots")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumPrimalLinDepAttempts")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumPrimalLinDepSuccessAttempts")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumDualLinDepAttempts")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumDualLinDepSuccessAttempts")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveOutofspace")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_9038_v == std::string ("optObjectiveSense")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_9038_v == std::string ("optimizer")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFirRefIter")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorSchurNumDup")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorSchurNumBlk")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorSchurMinBlkDim")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorSchurMaxBlkDim")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorDim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorLDim")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorOrderMlLNumDense")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorOrderMlLMaxHeight")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorOrderGpLMaxHeight")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumvar")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumbarvar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumblo")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumbup")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumbfr")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumbfx")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumcone")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumconevar")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumbndcone")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumrqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumqcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntNumppowcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntMinconedim")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntMaxconedim")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumcon")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumcfr")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumcfx")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumclo")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumcup")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumcra")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumcnl")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumvar")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumvfr")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumvfx")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumvlo")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumvup")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumvra")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumvnl")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumnza")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumcon")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumcfr")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumcfx")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumclo")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumcup")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumcra")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumcnl")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumvfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumvfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumvlo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumvup")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumvra")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumvnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveFnumnza")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumElimns")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveEliNumTries")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumPrimalLinDeps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumDualLinDeps")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveForceConNum")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveForceVarNum")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_9038_v == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveAccNumDupVarInNrmtwo")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveAccNumDoubletonChainInNrmtwo")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorNum")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPrimalHotstartNumBasics")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPrimalHotstartBasisRank")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexDualHotstartNumBasics")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexDualHotstartBasisRank")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_9038_v == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_9038_v == std::string ("numLuFactorizations")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPwlNumPotential")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPwlNumUsed")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPwlNumVariables")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPwlMinNumBreakpoints")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPwlMaxNumBreakpoints")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPwlMaxNz")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPwlNzReduction")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexNumSetbacks")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPrimalNumSetbacks")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexDualNumSetbacks")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPrimalFeasNa")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexDualFeasNa")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexPrimalObjNa")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_9038_v == std::string ("simplexDualObjNa")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_9038_v == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_9038_v == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_9038_v == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyNumRow")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyNumVar")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyPNumNullRow")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyPNumSingletonCol")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyCrashL11NumRow")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyCrashL22NumRow")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyCrashL33NumRow")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyCrashL33NumCol")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyCrashSingularity")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyPrimalNumBypass")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyPrimalInitNumSuperBasics")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyDualNumBypass")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyDualInitNumSuperBasics")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyDualInitNumBasisRowSingletons")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyDualInitNumBasisColSingletons")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_9038_v == std::string ("purifyDualInitNumSuperBasicRowSingletons")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_9038_v == std::string ("biPrimalInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9038_v == std::string ("biDualInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9038_v == std::string ("biPrimalFeasInfo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9038_v == std::string ("biDualFeasInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9038_v == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingNumvarBefore")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingNumvarAfter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingNumconBefore")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingNumconAfter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingStatus")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingBiPrimalFeasInfoIsValid")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingBiPrimalObjInfoIsValid")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingBiDualFeasInfoIsValid")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9038_v == std::string ("foldingBiDualObjInfoIsValid")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_iinf_value

// Begin mosek.fusion.Parameters.string_to_internal_dinf_value
// Method mosek.fusion.Parameters.string_to_internal_dinf_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:678:0-784:1
int32_t mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _9039_v)
{
  if ((_9039_v == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_9039_v == std::string ("sensitivityDualTime")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntGfeas")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntMu")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntInitIterTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntCorrectorTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntUpdateTime")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurUpdateTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurUpdateCompressedETime")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurUpdateSparseTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurUpdateSparseSyr2kTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurUpdateSparseDotTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurUpdateDenseTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurUpdateDenseSyr2kTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurUpdateDenseDotTime")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurPushTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntSolveTime")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntIterRefTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_9039_v == std::string ("presolvePrimalLinDepTime")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveDualLinDepTime")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveAcoltTime")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveSetupTime")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveCheckproTime")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveDupconTime")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveDupvarTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveFinalTime")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_9039_v == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_9039_v == std::string ("primalSimplexInftime")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_9039_v == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntFactorSetupGpOrderPostTime")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_9039_v == std::string ("biInitTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9039_v == std::string ("biFactorTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9039_v == std::string ("biFactorWork")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9039_v == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9039_v == std::string ("biDualDone")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9039_v == std::string ("simplexBasiscondition")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_9039_v == std::string ("simplexPrimalObj")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_9039_v == std::string ("simplexPrimalFeas")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_9039_v == std::string ("simplexDualObj")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_9039_v == std::string ("simplexDualFeas")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_9039_v == std::string ("biInitialBasisCond")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9039_v == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9039_v == std::string ("biDualObj")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9039_v == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9039_v == std::string ("biDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9039_v == std::string ("intpntPurifyTime")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_9039_v == std::string ("foldingUniqueNzRatio")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9039_v == std::string ("foldingBiCrashTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9039_v == std::string ("foldingBiOptimizerPrimalFeas")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9039_v == std::string ("foldingBiOptimizerPrimalObj")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9039_v == std::string ("foldingBiOptimizerDualFeas")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9039_v == std::string ("foldingBiOptimizerDualObj")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_dinf_value

// Begin mosek.fusion.Parameters.string_to_inftype_value
// Method mosek.fusion.Parameters.string_to_inftype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:671:0-677:1
int32_t mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _9040_v)
{
  if ((_9040_v == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9040_v == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9040_v == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_inftype_value

// Begin mosek.fusion.Parameters.string_to_iinfitem_value
// Method mosek.fusion.Parameters.string_to_iinfitem_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:530:0-670:1
int32_t mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _9041_v)
{
  if ((_9041_v == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9041_v == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9041_v == std::string ("optimizeResponse")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_9041_v == std::string ("presolveNumPrimalPerturbations")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_9041_v == std::string ("intpntIter")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9041_v == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9041_v == std::string ("intpntSolveDual")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNodeDepth")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumvar")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumbin")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumint")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumcont")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumcon")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumcone")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumqcones")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumrqcones")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumpexpcones")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumdexpcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumppowcones")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumdpowcones")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumconevar")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumbinconevar")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumintconevar")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumcontconevar")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumdjc")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_9041_v == std::string ("mioPresolvedNumdjc")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumvar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumbin")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumint")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumcont")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumcon")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumcone")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumqcones")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumrqcones")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumpexpcones")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumdexpcones")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumppowcones")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumdpowcones")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumconevar")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumbinconevar")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumintconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumcontconevar")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_9041_v == std::string ("mioFinalNumdjc")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_9041_v == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9041_v == std::string ("mioConstructSolution")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9041_v == std::string ("mioInitialFeasibleSolution")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_9041_v == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumRelax")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSolvedNodes")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumBranch")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumRestarts")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumRootCutRounds")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumActiveRootCuts")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_9041_v == std::string ("mioTotalNumSelectedCuts")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSelectedCmirCuts")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSelectedCliqueCuts")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSelectedImpliedBoundCuts")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSelectedKnapsackCoverCuts")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSelectedGomoryCuts")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSelectedLiproCuts")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_9041_v == std::string ("mioTotalNumSeparatedCuts")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSeparatedCmirCuts")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSeparatedCliqueCuts")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSeparatedImpliedBoundCuts")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSeparatedKnapsackCoverCuts")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSeparatedGomoryCuts")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumSeparatedLiproCuts")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumBlocksSolvedInPresolve")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_9041_v == std::string ("mioNumBlocksSolvedInBb")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_9041_v == std::string ("mioUserObjCut")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_9041_v == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_9041_v == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9041_v == std::string ("foldingApplied")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9041_v == std::string ("rdProtype")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_9041_v == std::string ("rdNumcon")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_9041_v == std::string ("rdNumvar")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_9041_v == std::string ("rdNumbarvar")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_9041_v == std::string ("rdNumintvar")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_9041_v == std::string ("rdNumq")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_9041_v == std::string ("simDualDegIter")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_9041_v == std::string ("simDualInfIter")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_9041_v == std::string ("simDualHotstartLu")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_9041_v == std::string ("simPrimalIter")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_9041_v == std::string ("simDualIter")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_9041_v == std::string ("intpntNumThreads")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9041_v == std::string ("simPrimalInfIter")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_9041_v == std::string ("simPrimalDegIter")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_9041_v == std::string ("simPrimalHotstart")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_9041_v == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_9041_v == std::string ("simDualHotstart")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_9041_v == std::string ("solItrProsta")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_9041_v == std::string ("solItrSolsta")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_9041_v == std::string ("solBasProsta")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_9041_v == std::string ("solBasSolsta")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_9041_v == std::string ("solItgProsta")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_9041_v == std::string ("solItgSolsta")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_9041_v == std::string ("simNumcon")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_9041_v == std::string ("simNumvar")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_9041_v == std::string ("optNumcon")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_9041_v == std::string ("optNumvar")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_9041_v == std::string ("stoNumARealloc")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_9041_v == std::string ("rdNumcone")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_9041_v == std::string ("simSolveDual")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_9041_v == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_9041_v == std::string ("purifyDualSuccess")))
  {
    {
      return (int)108;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iinfitem_value

// Begin mosek.fusion.Parameters.string_to_internal_liinf_value
// Method mosek.fusion.Parameters.string_to_internal_liinf_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:495:0-529:1
int32_t mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _9042_v)
{
  if ((_9042_v == std::string ("intpntLenbarvar")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9042_v == std::string ("presolveStackSize")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9042_v == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9042_v == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9042_v == std::string ("intpntFactorGpOrderSavedNzs")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexPrimalIter")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexDualIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexDualpurifyIter")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexTicks")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexPrimalTicks")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexDualTicks")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumGradfreeze")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumMovelock")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumDualIllposedCer")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumCand")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumProgressStall")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumRejectStepvalue")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumRejectPivot")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumSingularBases")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumFatalFeasibilityLoss")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumFatalGradientStall")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumFatalPurificationStall")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumPrematureGradscoreweightsInit")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexNumPrecisionBoost")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexLuFactorTicks")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9042_v == std::string ("simplexLuSolveTicks")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9042_v == std::string ("foldingTicks")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9042_v == std::string ("foldingNnzBefore")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9042_v == std::string ("foldingNnzAfter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9042_v == std::string ("foldingNnzTouched")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9042_v == std::string ("foldingBiUnfoldIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_liinf_value

// Begin mosek.fusion.Parameters.string_to_liinfitem_value
// Method mosek.fusion.Parameters.string_to_liinfitem_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:469:0-494:1
int32_t mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _9043_v)
{
  if ((_9043_v == std::string ("anaProScalarizedConstraintMatrixNumRows")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9043_v == std::string ("anaProScalarizedConstraintMatrixNumColumns")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9043_v == std::string ("anaProScalarizedConstraintMatrixNumNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9043_v == std::string ("mioAnz")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9043_v == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9043_v == std::string ("mioFinalAnz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9043_v == std::string ("mioSimplexIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9043_v == std::string ("mioIntpntIter")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9043_v == std::string ("mioNumPrimIllposedCer")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9043_v == std::string ("mioNumDualIllposedCer")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9043_v == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9043_v == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9043_v == std::string ("biCleanIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9043_v == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9043_v == std::string ("foldingBiPrimalIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9043_v == std::string ("foldingBiDualIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9043_v == std::string ("foldingBiOptimizerIter")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9043_v == std::string ("rdNumacc")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9043_v == std::string ("rdNumdjc")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9043_v == std::string ("rdNumanz")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9043_v == std::string ("rdNumqnz")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9043_v == std::string ("simplexIter")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_liinfitem_value

// Begin mosek.fusion.Parameters.string_to_dparam_value
// Method mosek.fusion.Parameters.string_to_dparam_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:401:0-468:1
int32_t mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _9044_v)
{
  if ((_9044_v == std::string ("dataTolCjLarge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9044_v == std::string ("dataTolCHuge")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9044_v == std::string ("dataTolAijLarge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9044_v == std::string ("dataTolAijHuge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9044_v == std::string ("dataSymMatTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9044_v == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9044_v == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9044_v == std::string ("dataTolBoundInf")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9044_v == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9044_v == std::string ("dataTolQij")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9044_v == std::string ("dataTolX")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9044_v == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_9044_v == std::string ("optimizerMaxTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_9044_v == std::string ("optimizerMaxTicks")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_9044_v == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_9044_v == std::string ("upperObjCut")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_9044_v == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_9044_v == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_9044_v == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_9044_v == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_9044_v == std::string ("mioMaxTime")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_9044_v == std::string ("mioRelGapConst")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_9044_v == std::string ("mioTolRelGap")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_9044_v == std::string ("mioTolAbsGap")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_9044_v == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_9044_v == std::string ("mioDjcMaxBigm")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_9044_v == std::string ("mioCliqueTableSizeFactor")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_9044_v == std::string ("simPrecisionScalingNormal")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_9044_v == std::string ("simPrecisionScalingExtended")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_9044_v == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9044_v == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9044_v == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9044_v == std::string ("presolveTolX")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_9044_v == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_9044_v == std::string ("presolveTolS")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_9044_v == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_9044_v == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_9044_v == std::string ("foldingTolEq")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9044_v == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_9044_v == std::string ("mioTolFeas")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_9044_v == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9044_v == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_9044_v == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)47;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dparam_value

// Begin mosek.fusion.Parameters.string_to_feature_value
// Method mosek.fusion.Parameters.string_to_feature_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:395:0-400:1
int32_t mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _9045_v)
{
  if ((_9045_v == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9045_v == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_feature_value

// Begin mosek.fusion.Parameters.string_to_dinfitem_value
// Method mosek.fusion.Parameters.string_to_dinfitem_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:275:0-394:1
int32_t mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _9046_v)
{
  if ((_9046_v == std::string ("anaProScalarizedConstraintMatrixDensity")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9046_v == std::string ("biTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9046_v == std::string ("biPrimalTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9046_v == std::string ("biDualTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9046_v == std::string ("biCleanTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9046_v == std::string ("foldingBiUnfoldInitializeTime")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9046_v == std::string ("foldingBiUnfoldPrimalTime")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9046_v == std::string ("foldingBiUnfoldDualTime")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9046_v == std::string ("foldingBiOptimizeTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9046_v == std::string ("foldingBiUnfoldTime")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9046_v == std::string ("intpntTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9046_v == std::string ("intpntOrderTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9046_v == std::string ("intpntPrimalObj")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9046_v == std::string ("intpntDualObj")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9046_v == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9046_v == std::string ("intpntDualFeas")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9046_v == std::string ("intpntOptStatus")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9046_v == std::string ("simTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_9046_v == std::string ("simPrimalTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_9046_v == std::string ("simDualTime")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_9046_v == std::string ("simObj")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_9046_v == std::string ("simFeas")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_9046_v == std::string ("mioTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_9046_v == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_9046_v == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_9046_v == std::string ("mioRootTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_9046_v == std::string ("toConicTime")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_9046_v == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_9046_v == std::string ("mioInitialFeasibleSolutionObj")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_9046_v == std::string ("mioObjInt")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_9046_v == std::string ("mioObjBound")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_9046_v == std::string ("mioObjRelGap")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_9046_v == std::string ("mioObjAbsGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_9046_v == std::string ("mioUserObjCut")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_9046_v == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9046_v == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9046_v == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_9046_v == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_9046_v == std::string ("mioImpliedBoundSeparationTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_9046_v == std::string ("mioLiproSeparationTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_9046_v == std::string ("mioRootCutSeparationTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_9046_v == std::string ("mioCmirSelectionTime")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9046_v == std::string ("mioCliqueSelectionTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9046_v == std::string ("mioKnapsackCoverSelectionTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_9046_v == std::string ("mioGmiSelectionTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_9046_v == std::string ("mioImpliedBoundSelectionTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_9046_v == std::string ("mioLiproSelectionTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_9046_v == std::string ("mioRootCutSelectionTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_9046_v == std::string ("mioProbingTime")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_9046_v == std::string ("mioSymmetryDetectionTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_9046_v == std::string ("optimizerTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_9046_v == std::string ("optimizerTicks")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_9046_v == std::string ("presolveTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_9046_v == std::string ("mioSymmetryFactor")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_9046_v == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_9046_v == std::string ("presolveEliTime")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_9046_v == std::string ("presolveLindepTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_9046_v == std::string ("foldingTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9046_v == std::string ("foldingFactor")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9046_v == std::string ("readDataTime")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_9046_v == std::string ("writeDataTime")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrPrimalObj")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrPviolcon")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrPviolvar")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrPviolcones")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrPviolacc")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrDualObj")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrDviolcon")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrDviolvar")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrDviolcones")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrDviolacc")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmXc")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmXx")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmBarx")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmY")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmSlc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmSuc")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmSlx")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmSux")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmSnx")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_9046_v == std::string ("solItrNrmBars")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasPrimalObj")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasPviolcon")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasPviolvar")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasDualObj")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasDviolcon")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasDviolvar")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasNrmXc")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasNrmXx")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasNrmBarx")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasNrmY")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasNrmSlc")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasNrmSuc")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasNrmSlx")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_9046_v == std::string ("solBasNrmSux")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgPviolcon")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgPviolvar")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgPviolcones")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgPviolacc")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgPviolitg")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgPvioldjc")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgNrmXc")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgNrmXx")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_9046_v == std::string ("solItgNrmBarx")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_9046_v == std::string ("presolveTotalPrimalPerturbation")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_9046_v == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9046_v == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_9046_v == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_9046_v == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_9046_v == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_9046_v == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_9046_v == std::string ("remoteTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dinfitem_value

// Begin mosek.fusion.Parameters.string_to_solformat_value
// Method mosek.fusion.Parameters.string_to_solformat_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:267:0-274:1
int32_t mosek::fusion::p_Parameters::string_to_solformat_value(const std::string & _9047_v)
{
  if ((_9047_v == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9047_v == std::string ("b")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9047_v == std::string ("task")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9047_v == std::string ("jsonTask")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solformat_value

// Begin mosek.fusion.Parameters.string_to_dataformat_value
// Method mosek.fusion.Parameters.string_to_dataformat_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:254:0-266:1
int32_t mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _9048_v)
{
  if ((_9048_v == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9048_v == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9048_v == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9048_v == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9048_v == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9048_v == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9048_v == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9048_v == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9048_v == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dataformat_value

// Begin mosek.fusion.Parameters.string_to_symmattype_value
// Method mosek.fusion.Parameters.string_to_symmattype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:249:0-253:1
int32_t mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _9049_v)
{
  if ((_9049_v == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_symmattype_value

// Begin mosek.fusion.Parameters.string_to_nametype_value
// Method mosek.fusion.Parameters.string_to_nametype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:242:0-248:1
int32_t mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _9050_v)
{
  if ((_9050_v == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9050_v == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9050_v == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_nametype_value

// Begin mosek.fusion.Parameters.string_to_domaintype_value
// Method mosek.fusion.Parameters.string_to_domaintype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:225:0-241:1
int32_t mosek::fusion::p_Parameters::string_to_domaintype_value(const std::string & _9051_v)
{
  if ((_9051_v == std::string ("r")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9051_v == std::string ("rzero")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9051_v == std::string ("rplus")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9051_v == std::string ("rminus")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9051_v == std::string ("quadraticCone")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9051_v == std::string ("rquadraticCone")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9051_v == std::string ("primalExpCone")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9051_v == std::string ("dualExpCone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9051_v == std::string ("primalPowerCone")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9051_v == std::string ("dualPowerCone")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9051_v == std::string ("primalGeoMeanCone")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9051_v == std::string ("dualGeoMeanCone")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9051_v == std::string ("svecPsdCone")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_domaintype_value

// Begin mosek.fusion.Parameters.string_to_conetype_value
// Method mosek.fusion.Parameters.string_to_conetype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:214:0-224:1
int32_t mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _9052_v)
{
  if ((_9052_v == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9052_v == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9052_v == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9052_v == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9052_v == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9052_v == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9052_v == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_conetype_value

// Begin mosek.fusion.Parameters.string_to_compresstype_value
// Method mosek.fusion.Parameters.string_to_compresstype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:206:0-213:1
int32_t mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _9053_v)
{
  if ((_9053_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9053_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9053_v == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9053_v == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_compresstype_value

// Begin mosek.fusion.Parameters.string_to_callbackcode_value
// Method mosek.fusion.Parameters.string_to_callbackcode_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:94:0-205:1
int32_t mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _9054_v)
{
  if ((_9054_v == std::string ("beginRootCutgen")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_9054_v == std::string ("imRootCutgen")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_9054_v == std::string ("endRootCutgen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_9054_v == std::string ("beginSolveRootRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_9054_v == std::string ("endSolveRootRelax")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_9054_v == std::string ("beginOptimizer")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_9054_v == std::string ("endOptimizer")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_9054_v == std::string ("beginFolding")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_9054_v == std::string ("endFolding")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_9054_v == std::string ("beginFoldingBi")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_9054_v == std::string ("beginFoldingBiInitialize")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_9054_v == std::string ("endFoldingBiInitialize")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_9054_v == std::string ("beginFoldingBiPrimal")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_9054_v == std::string ("foldingBiPrimal")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_9054_v == std::string ("endFoldingBiPrimal")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_9054_v == std::string ("beginFoldingBiDual")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_9054_v == std::string ("foldingBiDual")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_9054_v == std::string ("endFoldingBiDual")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_9054_v == std::string ("beginFoldingBiOptimizer")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_9054_v == std::string ("foldingBiOptimizer")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_9054_v == std::string ("endFoldingBiOptimizer")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_9054_v == std::string ("endFoldingBi")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_9054_v == std::string ("beginPresolve")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_9054_v == std::string ("updatePresolve")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_9054_v == std::string ("endPresolve")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_9054_v == std::string ("beginIntpnt")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_9054_v == std::string ("intpnt")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_9054_v == std::string ("endIntpnt")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_9054_v == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9054_v == std::string ("conic")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_9054_v == std::string ("endConic")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_9054_v == std::string ("primalSimplex")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_9054_v == std::string ("dualSimplex")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_9054_v == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9054_v == std::string ("endBi")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_9054_v == std::string ("beginInitializeBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_9054_v == std::string ("endInitializeBi")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_9054_v == std::string ("beginPrimalBi")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_9054_v == std::string ("updatePrimalBi")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_9054_v == std::string ("endPrimalBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_9054_v == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9054_v == std::string ("updateDualBi")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_9054_v == std::string ("endDualBi")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_9054_v == std::string ("beginOptimizeBi")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_9054_v == std::string ("optimizeBi")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_9054_v == std::string ("endOptimizeBi")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_9054_v == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_9054_v == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_9054_v == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_9054_v == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_9054_v == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_9054_v == std::string ("endDualSimplexBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_9054_v == std::string ("endSimplexBi")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_9054_v == std::string ("beginMio")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_9054_v == std::string ("imMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_9054_v == std::string ("newIntMio")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_9054_v == std::string ("endMio")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_9054_v == std::string ("restartMio")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_9054_v == std::string ("decompMio")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_9054_v == std::string ("beginSimplex")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_9054_v == std::string ("imSimplex")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_9054_v == std::string ("updateSimplex")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_9054_v == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_9054_v == std::string ("imDualSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_9054_v == std::string ("updateDualSimplex")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_9054_v == std::string ("endDualSimplex")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_9054_v == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_9054_v == std::string ("imPrimalSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_9054_v == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_9054_v == std::string ("endPrimalSimplex")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_9054_v == std::string ("endSimplex")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_9054_v == std::string ("beginInfeasAna")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_9054_v == std::string ("endInfeasAna")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_9054_v == std::string ("imPrimalSensivity")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_9054_v == std::string ("imDualSensivity")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_9054_v == std::string ("imMioIntpnt")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_9054_v == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_9054_v == std::string ("imMioDualSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_9054_v == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_9054_v == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_9054_v == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_9054_v == std::string ("endDualSetupBi")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_9054_v == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_9054_v == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_9054_v == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9054_v == std::string ("endDualSensitivity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_9054_v == std::string ("beginLicenseWait")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_9054_v == std::string ("endLicenseWait")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_9054_v == std::string ("imLicenseWait")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_9054_v == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_9054_v == std::string ("qoReformulate")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_9054_v == std::string ("endQcqoReformulate")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_9054_v == std::string ("beginToConic")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_9054_v == std::string ("endToConic")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_9054_v == std::string ("beginPrimalRepair")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_9054_v == std::string ("endPrimalRepair")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_9054_v == std::string ("beginRead")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_9054_v == std::string ("imRead")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_9054_v == std::string ("endRead")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_9054_v == std::string ("beginWrite")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_9054_v == std::string ("endWrite")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_9054_v == std::string ("readOpfSection")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_9054_v == std::string ("imLu")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_9054_v == std::string ("imOrder")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_9054_v == std::string ("readOpf")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_9054_v == std::string ("writeOpf")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_9054_v == std::string ("solvingRemote")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_9054_v == std::string ("heartbeat")))
  {
    {
      return (int)75;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_callbackcode_value

// Begin mosek.fusion.Parameters.string_to_intpnthotstart_value
// Method mosek.fusion.Parameters.string_to_intpnthotstart_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:86:0-93:1
int32_t mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _9055_v)
{
  if ((_9055_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9055_v == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9055_v == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9055_v == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_intpnthotstart_value

// Begin mosek.fusion.Parameters.string_to_simhotstart_value
// Method mosek.fusion.Parameters.string_to_simhotstart_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:79:0-85:1
int32_t mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _9056_v)
{
  if ((_9056_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9056_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9056_v == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simhotstart_value

// Begin mosek.fusion.Parameters.string_to_simdupvec_value
// Method mosek.fusion.Parameters.string_to_simdupvec_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:72:0-78:1
int32_t mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _9057_v)
{
  if ((_9057_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9057_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9057_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simdupvec_value

// Begin mosek.fusion.Parameters.string_to_simreform_value
// Method mosek.fusion.Parameters.string_to_simreform_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:64:0-71:1
int32_t mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _9058_v)
{
  if ((_9058_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9058_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9058_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9058_v == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simreform_value

// Begin mosek.fusion.Parameters.string_to_uplo_value
// Method mosek.fusion.Parameters.string_to_uplo_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:58:0-63:1
int32_t mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _9059_v)
{
  if ((_9059_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9059_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_uplo_value

// Begin mosek.fusion.Parameters.string_to_transpose_value
// Method mosek.fusion.Parameters.string_to_transpose_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:52:0-57:1
int32_t mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _9060_v)
{
  if ((_9060_v == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9060_v == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_transpose_value

// Begin mosek.fusion.Parameters.string_to_simdegen_value
// Method mosek.fusion.Parameters.string_to_simdegen_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:43:0-51:1
int32_t mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _9061_v)
{
  if ((_9061_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9061_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9061_v == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9061_v == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9061_v == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simdegen_value

// Begin mosek.fusion.Parameters.string_to_simprecision_value
// Method mosek.fusion.Parameters.string_to_simprecision_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:37:0-42:1
int32_t mosek::fusion::p_Parameters::string_to_simprecision_value(const std::string & _9062_v)
{
  if ((_9062_v == std::string ("normal")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9062_v == std::string ("extended")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simprecision_value

// Begin mosek.fusion.Parameters.string_to_mark_value
// Method mosek.fusion.Parameters.string_to_mark_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:31:0-36:1
int32_t mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _9063_v)
{
  if ((_9063_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9063_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mark_value

// Begin mosek.fusion.Parameters.string_to_boundkey_value
// Method mosek.fusion.Parameters.string_to_boundkey_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:22:0-30:1
int32_t mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _9064_v)
{
  if ((_9064_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9064_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9064_v == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9064_v == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9064_v == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_boundkey_value

// Begin mosek.fusion.Parameters.string_to_basindtype_value
// Method mosek.fusion.Parameters.string_to_basindtype_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:13:0-21:1
int32_t mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _9065_v)
{
  if ((_9065_v == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9065_v == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_9065_v == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_9065_v == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_9065_v == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_basindtype_value

// Begin mosek.fusion.Parameters.string_to_language_value
// Method mosek.fusion.Parameters.string_to_language_value @ bld/docker-rockylinux-8/final/default/src/fusion/Parameters.mbi:7:0-12:1
int32_t mosek::fusion::p_Parameters::string_to_language_value(const std::string & _9066_v)
{
  if ((_9066_v == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_9066_v == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_language_value

void mosek::fusion::p_Parameters::destroy()
{
}
void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }
// } class Parameters
